{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/app/config.ts","webpack:///./src/app/locales.js","webpack:///./src/app/components/header/AdvancedSearchDropdown.js","webpack:///./src/app/components/header/PrivateHeader.js","webpack:///./src/app/components/sidebar/LocationAside.tsx","webpack:///./src/app/constants.ts","webpack:///./src/app/helpers/mailSettings.ts","webpack:///./src/app/helpers/elements.ts","webpack:///./src/app/components/sidebar/PrivateSidebar.tsx","webpack:///./src/app/components/layout/PrivateLayout.tsx","webpack:///./src/app/helpers/labels.ts","webpack:///./src/app/helpers/paging.ts","webpack:///./src/app/hooks/useElements.ts","webpack:///./src/app/helpers/url.ts","webpack:///./src/app/helpers/mailboxUrl.ts","webpack:///./src/app/components/toolbar/ToolbarSeparator.tsx","webpack:///./src/app/components/toolbar/ToolbarButton.tsx","webpack:///./src/app/components/toolbar/ReadUnreadButtons.tsx","webpack:///./src/app/components/toolbar/ToolbarDropdown.tsx","webpack:///./src/app/components/toolbar/LayoutDropdown.tsx","webpack:///./src/app/components/toolbar/MoveButtons.tsx","webpack:///./src/app/components/toolbar/DeleteButton.tsx","webpack:///./src/app/components/toolbar/SortDropdown.tsx","webpack:///./src/app/components/toolbar/FilterDropdown.tsx","webpack:///./src/app/components/toolbar/SelectAll.tsx","webpack:///./src/app/components/dropdown/MoveDropdown.tsx","webpack:///./src/app/components/dropdown/LabelDropdown.tsx","webpack:///./src/app/components/toolbar/BackButton.tsx","webpack:///./src/app/components/toolbar/PagingControls.tsx","webpack:///./src/app/components/toolbar/Toolbar.tsx","webpack:///./src/app/components/list/ItemCheckbox.tsx","webpack:///./src/app/helpers/message/messages.ts","webpack:///./src/app/helpers/parserHtml.ts","webpack:///./src/app/components/list/ItemStar.tsx","webpack:///./src/app/components/list/ItemLabels.tsx","webpack:///./src/app/components/list/ItemAttachmentIcon.js","webpack:///./src/app/components/list/ItemLocation.js","webpack:///./src/app/helpers/date.js","webpack:///./src/app/components/list/ItemDate.js","webpack:///./src/app/components/conversation/NumMessages.tsx","webpack:///./src/app/components/list/ItemColumnLayout.tsx","webpack:///./src/app/components/list/ItemRowLayout.tsx","webpack:///./src/app/helpers/contacts.ts","webpack:///./src/app/helpers/addresses.ts","webpack:///./src/app/components/list/Item.tsx","webpack:///./src/app/helpers/conversation.ts","webpack:///./src/app/components/view/EmptyView.tsx","webpack:///./src/app/hooks/useContactGroups.ts","webpack:///./src/app/components/list/List.tsx","webpack:///./src/app/components/message/MessageBody.tsx","webpack:///./src/app/helpers/displaySignature.js","webpack:///./src/app/helpers/encryptionType.js","webpack:///./src/app/components/message/MessageLock.tsx","webpack:///./src/app/components/message/header/HeaderCollapsed.tsx","webpack:///./src/app/components/message/extras/ExtraImages.tsx","webpack:///./src/app/components/message/extras/ExtraUnsubscribe.tsx","webpack:///./src/app/components/message/header/HeaderExtra.tsx","webpack:///./src/app/components/message/header/HeaderRecipientsSimple.tsx","webpack:///./src/app/components/message/header/HeaderRecipientsDetails.tsx","webpack:///./src/app/components/message/header/HeaderDropdown.tsx","webpack:///./src/app/components/message/header/HeaderExpanded.tsx","webpack:///./src/app/helpers/attachment/attachments.ts","webpack:///./src/app/api/attachments.ts","webpack:///./src/app/helpers/attachment/attachmentLoader.ts","webpack:///./src/app/helpers/attachment/attachmentDownloader.ts","webpack:///./src/app/hooks/useAttachments.ts","webpack:///./src/app/components/message/MessageAttachment.tsx","webpack:///./src/app/components/message/MessageFooter.tsx","webpack:///./src/app/helpers/string.ts","webpack:///./src/app/helpers/purify.ts","webpack:///./src/app/helpers/dom.ts","webpack:///./src/app/helpers/transforms/transformEscape.js","webpack:///./src/app/helpers/transforms/transformLinks.js","webpack:///./src/app/helpers/embedded/embeddedUtils.ts","webpack:///./src/app/helpers/embedded/embeddedStoreCids.ts","webpack:///./src/app/helpers/embedded/embeddedFinder.ts","webpack:///./src/app/helpers/embedded/embeddedStoreBlobs.ts","webpack:///./src/app/helpers/image.ts","webpack:///./src/app/helpers/embedded/embeddedParser.ts","webpack:///./src/app/helpers/transforms/transformEmbedded.ts","webpack:///./src/app/helpers/transforms/transformWelcome.js","webpack:///./src/app/helpers/transforms/transformBlockquotes.js","webpack:///./src/app/helpers/transforms/transformRemote.js","webpack:///./src/app/helpers/transforms/transformStylesheet.js","webpack:///./src/app/helpers/transforms/transformBase.js","webpack:///./src/app/helpers/attachment/attachmentConverter.ts","webpack:///./src/app/helpers/message/messageDecrypt.ts","webpack:///./src/app/hooks/useDecryptMessage.ts","webpack:///./src/app/containers/MessageProvider.tsx","webpack:///./src/app/helpers/base64.ts","webpack:///./src/app/helpers/send/sendPreferences.ts","webpack:///./src/app/helpers/send/sendMimeBuilder.ts","webpack:///./src/app/helpers/send/sendTopPackages.ts","webpack:///./src/app/helpers/send/sendSubPackages.ts","webpack:///./src/app/helpers/send/sendEncrypt.ts","webpack:///./src/app/hooks/useSendMessage.ts","webpack:///./src/app/helpers/message/messageEncrypt.ts","webpack:///./src/app/hooks/useEncryptMessage.ts","webpack:///./src/app/hooks/useMessage.ts","webpack:///./src/app/components/message/MessageView.tsx","webpack:///./src/app/helpers/message/messageExpandable.ts","webpack:///./src/app/components/conversation/TrashWarning.tsx","webpack:///./src/app/components/conversation/ConversationView.tsx","webpack:///./src/app/hooks/useConversation.ts","webpack:///./src/app/components/view/WelcomePane.tsx","webpack:///./src/app/components/view/SelectionPane.tsx","webpack:///./src/app/components/view/PlaceholderView.tsx","webpack:///./src/app/components/message/MessageOnlyView.tsx","webpack:///./src/app/containers/MailboxContainer.tsx","webpack:///./src/app/hooks/useMailboxPageTitle.ts","webpack:///./src/app/containers/PageContainer.tsx","webpack:///./src/app/components/composer/ComposerTitleBar.tsx","webpack:///./src/app/components/composer/addresses/AddressesRecipientItem.tsx","webpack:///./src/app/hooks/useEventListener.ts","webpack:///./src/app/components/composer/addresses/AddressesAutocomplete.tsx","webpack:///./src/app/components/composer/addresses/AddressesGroupModal.tsx","webpack:///./src/app/components/composer/addresses/AddressesGroupItem.tsx","webpack:///./src/app/components/composer/addresses/AddressesInput.tsx","webpack:///./src/app/components/composer/addresses/AddressesContactsModal.tsx","webpack:///./src/app/components/composer/addresses/AddressesEditor.tsx","webpack:///./src/app/models/address.ts","webpack:///./src/app/components/composer/addresses/AddressesSummary.tsx","webpack:///./src/app/components/composer/addresses/Addresses.tsx","webpack:///./src/app/components/composer/ComposerMeta.tsx","webpack:///./src/app/components/composer/attachments/AttachmensList.tsx","webpack:///./src/app/components/composer/ComposerContent.tsx","webpack:///./src/app/components/composer/attachments/AttachmentsButton.tsx","webpack:///./src/app/components/composer/ComposerActions.tsx","webpack:///./src/app/helpers/attachment/attachmentUploader.ts","webpack:///./src/app/hooks/useSlowChanges.ts","webpack:///./src/app/helpers/file.ts","webpack:///./src/app/components/composer/Composer.tsx","webpack:///./src/app/helpers/dedent.ts","webpack:///./src/app/helpers/message/messageSignature.ts","webpack:///./src/app/helpers/message/messageDraft.ts","webpack:///./src/app/containers/ComposerContainer.tsx","webpack:///./src/app/hooks/useDraft.ts","webpack:///./src/app/PrivateApp.tsx","webpack:///./src/app/components/layout/PublicLayout.js","webpack:///./src/app/containers/LoginContainer.js","webpack:///./src/app/containers/SignupContainer.js","webpack:///./src/app/PublicApp.js","webpack:///./src/app/App.js","webpack:///./src/app/index.js","webpack:///./node_modules/design-system/assets/img/shared/bank-icons sync .svg$","webpack:///./node_modules/date-fns/locale lazy ^\\.\\/[a-z]{2}(-([A-Z]{2}))","webpack:///./src/i18n lazy .json$"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","sriHashes","exports","module","l","e","promises","installedChunkData","promise","Promise","resolve","reject","onScriptComplete","script","document","createElement","charset","timeout","nc","setAttribute","src","p","jsonpScriptSrc","indexOf","window","location","origin","crossOrigin","error","Error","event","onerror","onload","clearTimeout","chunk","errorType","type","realSrc","target","message","name","request","undefined","setTimeout","integrity","head","appendChild","all","m","c","d","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","oe","err","console","jsonpArray","oldJsonpFunction","slice","CLIENT_ID","CLIENT_TYPE","CLIENT_SECRET","APP_VERSION","APP_NAME","API_URL","SECURE_URL","LOCALES","API_VERSION","DATE_VERSION","CHANGELOG_PATH","VERSION_PATH","SENTRY_RELEASE","SENTRY_DSN","locales","require","keys","reduce","acc","ALL","INBOX","MAILBOX_LABEL_IDS","TRASH","SPAM","ARCHIVE","AdvancedSearchDropdown","history","formRef","useRef","useState","model","updateModel","useLabels","labels","locationOptions","text","concat","filter","Exclusive","LABEL_EXCLUSIVE","FOLDER","map","ID","Name","LABEL","SimpleDropdown","originalPlacement","hasCaret","content","Icon","className","ref","onSubmit","current","reset","Label","htmlFor","Select","id","options","onChange","PrimaryButton","PrivateHeader","expanded","onToggleExpand","onSearch","useUser","hasPaidMail","MainLogo","url","Hamburger","onToggle","Searchbox","placeholder","advanced","TopNavbar","UpgradeButton","external","TopNavbarLink","to","icon","aria-current","SupportDropdown","LocationAside","labelID","counterMap","currentLabelID","refreshLabelID","unread","Unread","classnames","fill","ENCRYPTED_STATUS","ELEMENT_TYPES","LABEL_IDS_TO_HUMAN","ALL_DRAFTS","ALL_SENT","ALL_MAIL","SENT","DRAFTS","STARRED","HUMAN_TO_LABEL_IDS","entries","LABEL_IDS_TO_I18N","VERIFICATION_STATUS","MESSAGE_FLAGS","MESSAGE_ACTIONS","isColumnMode","ViewLayout","VIEW_LAYOUT","COLUMN","isConversationMode","ViewMode","VIEW_MODE","GROUP","alwaysMessageLabels","includes","getCurrentType","mailSettings","isMessage","element","ConversationID","getDate","Time","ContextTime","Date","getLabelIds","Labels","LabelIDs","hasLabel","some","getTime","find","getLabel","getSize","Size","sort","elements","getValue","e1","e2","b","valueA","a","valueB","Order","desc","PrivateSidebar","onCompose","refresh","setRefresh","useConversationCounts","conversationCounts","loadingConversationCounts","useMessageCounts","messageCounts","loadingMessageCounts","useMailSettings","loadingMailSettings","loadingLabels","useEventManager","ShowMoved","useMemo","conversationCounters","messageCounters","labelIDs","values","label","conversationCountersMap","toMap","messageCountersMap","countersMap","getCounterMap","Loader","getItemParams","link","ariaCurrent","aside","onClick","pathname","list","SHOW_MOVED","redirectTo","Color","color","data-expanded","action","NEW","NavMenu","PrivateLayout","children","mainAreaRef","setExpand","useEffect","AppsSidebar","items","StorageSpaceStatus","upgradeButton","Href","keyword","log","normalize","Provider","getHumanLabelID","getLabelName","getI18nLabelID","labelsMap","isCustomLabel","pageCount","page","Math","ceil","total","size","emptyCache","params","pages","useElements","conversationMode","api","useApi","subscribe","loading","setLoading","localCache","setLocalCache","minPage","startIndex","endIndex","filtered","sortElements","isExpectedLength","expectedPageLength","shouldResetCache","shouldSendRequest","queryElement","elementID","query","getConversation","getMessage","Conversation","Message","queryElements","queryConversations","queryMessageMetadata","Page","PageSize","Limit","limit","LabelID","Sort","Desc","Total","Elements","Conversations","Messages","load","ConversationCounts","MessageCounts","count","Action","Element","EVENT_ACTIONS","DELETE","toDelete","UPDATE_DRAFT","UPDATE_FLAGS","toUpdate","CREATE","toCreate","existingElement","toUpdateCompleted","newReplacements","forEach","newElements","getSearchParams","URLSearchParams","search","changeSearchParams","newParams","delete","set","queryString","toString","urlFragment","setPathInUrl","sortToString","filterToString","pageFromUrl","string","pageNumber","parseInt","isNaN","stringToPage","ToolbarSeparator","ToolbarButton","disabled","rest","ReadUnreadButtons","selectedIDs","MessageButtons","MESSAGE_BUTTONS","READ_UNREAD","useLoading","withLoading","markAs","status","isUnread","markConversationsAsUnread","markConversationsAsRead","markMessageAsUnread","markMessageAsRead","buttons","title","UNREAD_READ","reverse","ToolbarDropdown","autoClose","generateUID","uid","usePopperAnchor","anchorRef","isOpen","toggle","close","DropdownButton","buttonRef","caretClassName","Dropdown","onClose","LayoutDropdown","currentLayoutIcon","updateLayout","viewLayout","updateViewLayout","DropdownMenu","DropdownMenuButton","ROW","MoveButtons","createNotification","useNotifications","handleMove","labelConversations","labelMessages","IDs","displayTrash","displayInbox","displayArchive","displaySpam","DeleteButton","createModal","useModals","displayDelete","displayEmpty","handleDelete","Confirm","ngettext","msgid","confirm","ErrorButton","onConfirm","Alert","deleteConversations","deleteMessages","handleEmpty","emptyLabel","AddressID","TIME","SIZE","ICONS","SortDropdown","onSort","FilterDropdown","onFilter","SelectAll","checked","onCheck","Checkbox","SearchInput","UntypedSearchInput","MoveDropdown","updateSearch","normSearch","folders","Boolean","folder","Tooltip","autoFocus","index","LabelDropdown","lastChecked","setLastChecked","alsoArchive","updateAlsoArchive","selectedLabelIDs","updateSelectedLabelIDs","handleApply","labelAction","unlabelAction","unlabelMessages","unlabelConversations","handleCheck","shiftKey","nativeEvent","start","findIndex","end","min","max","update","lineId","BackButton","PagingControls","onPage","setPage","String","Array","_","newPage","Toolbar","checkAll","onCheckAll","onBack","columnMode","ItemCheckbox","FLAG_RECEIVED","FLAG_SENT","FLAG_RECEIPT_REQUEST","FLAG_IMPORTED","FLAG_REPLIED","FLAG_REPLIEDALL","FLAG_FORWARDED","FLAG_INTERNAL","FLAG_AUTO","FLAG_E2E","FLAG_SIGN","FLAG_PUBLIC_KEY","PLAINTEXT","MIME_TYPES","hasMimeType","MIMEType","isMIME","MIME","isPlainText","isHTML","DEFAULT","hasFlag","flag","Flags","hasBit","isImported","isInternal","isExternal","isAuto","isReceived","isSent","isSentAndReceived","isDraft","isE2E","isSentEncrypted","isInternalEncrypted","isSign","isPGPEncrypted","inSigningPeriod","isEO","Password","addReceived","setBit","getSender","Sender","getRecipients","ToList","CCList","BCCList","getRecipientsAddresses","Address","identity","getParsedHeaders","parameter","ParsedHeaders","getAttachments","Attachments","hasAttachments","attachmentsSize","isSentAutoReply","h","k","v","toLowerCase","getHTML","exportPlainText","replace","html","appendLines","convertImages","turndownService","TurndownService","bulletListMarker","hr","protonSignature","node","classList","contains","replacement","trim","replaceBreakLine","parentElement","nodeName","childElementCount","textContent","lastElementChild","replaceImg","image","attribute","alt","replaceAnchor","replaceDiv","use","addRule","escape","output","turndown","startsWith","toText","getPlainText","downconvert","ItemStar","isConversation","isStarred","iconName","handleClick","ItemLabels","onUnlabel","orderBy","style","backgroundColor","borderColor","Link","ItemAttachmentIcon","ContextNumAttachments","ItemLocation","formatSimpleDate","date","format","isToday","locale","dateLocale","formatFullDate","FORMATERS","simple","full","distance","dateFnsFormatDistanceToNow","addSuffix","ItemDate","formater","NumMessages","conversation","ItemColumnLayout","senders","Subject","ItemRowLayout","humanSize","findEmailInCache","cache","email","Email","normalizeEmail","getContactsOfGroup","contacts","groupID","contact","REGEX_RECIPIENT","validateAddress","address","REGEX_EMAIL","test","removeEmailAlias","addPlusAlias","plus","atIndex","plusIndex","substring","domain","getByEmail","addresses","cleanEmail","isFallbackAddress","Receive","isOwnAddress","inputToRecipient","input","match","exec","recipientToInput","recipient","contactToRecipient","groupPath","Group","contactToInput","recipientsWithoutGroup","recipients","getRecipientLabel","getRecipientGroupLabel","recipientGroup","contactsInGroup","members","group","getRecipientOrGroupLabel","allContacts","recipientsToRecipientOrGroup","groups","existingGroup","recipientsOrGroup","Path","getAddressFromPlusAlias","Status","Send","plusPart","findSender","enabledAddresses","a1","a2","originalAddress","Item","contactGroups","displayRecipients","Senders","getSenders","sendersLabels","recipientsLabels","recipientOrGroup","ItemLayout","NumUnread","closest","stopPropagation","getInitial","join","EmptyView","isInbox","isFolder","noResultSearchSvg","noResultInboxSvg","data-if","useContactGroups","useCache","useCachedModelResult","useCallback","getContactGroupsModel","List","checkedIDs","useContactEmails","loadingContacts","loadingGroups","elementIDs","MessageBody","plain","dangerouslySetInnerHTML","__html","SIGNED_AND_INVALID","SIGNED_AND_VALID","I18N","pm","pgp","clear","sentEncrypted","auto","sentClear","draft","getFromType","isExternalEncrypted","MessageLock","inputClassName","displaySignature","verified","displaySignatureStatus","pgpEncrypted","tooltip","encType","getEncryptionType","href","internal","HeaderCollapsed","onExpand","inOutClass","ExtraImages","showRemoteImages","showEmbeddedImages","onLoadImages","ExtraUnsubscribe","getListUnsubscribe","HeaderExtra","onLoadRemoteImages","onLoadEmbeddedImages","HeaderRecipientsSimple","RecipientsList","HeaderRecipientsDetails","HeaderDropdown","HeaderExpanded","messageLoaded","onCollapse","useToggle","showDetails","state","toggleDetails","handleCompose","referenceMessage","ButtonGroup","REPLY","REPLY_ALL","FORWARD","embeddableTypes","isEmbeddable","fileType","getAttachment","attachmentID","method","uploadAttachment","decrypt","encryptedBinaryBuffer","sessionKey","encryptedBinary","Uint8Array","decryptMessage","sessionKeys","getRequest","getSessionKey","attachment","keyPackets","binaryStringToArray","decodeBase64","KeyPackets","privateKeys","decryptSessionKey","getDecryptedAttachment","blob","concatArrays","binary","getAndVerify","Preview","filename","signatures","has","attachmentdata","reverify","formatDownload","isError","generateDownload","download","downloadFile","Blob","formatDownloadAll","att","splitExtension","fileName","ext","newName","getZipAttachmentName","downloadAll","zip","JSZip","file","generateAsync","useAttachmentsCache","globalCache","Map","blobs","cids","OUTER_MAP_CLASSNAME","mp3","javascript","vcard","xls","mov","pdf","power","word","INNER_MAP_CLASSNAME","MessageAttachment","showLoader","setShowLoader","showInstant","setShowInstant","humanAttachmentSize","outerIcon","single","getInnerFileIconType","isEmbedded","Headers","disposition","embedded","Number","isEmbeddedLocal","classNames","clickHandler","showInner","aria-busy","MessageFooter","humanAttachmentsSize","attachments","numAttachments","numEmbedded","numPureAttachments","handleDownloadAll","OPEN_TAG_AUTOCOMPLETE","CLOSE_TAG_AUTOCOMPLETE","OPEN_TAG_AUTOCOMPLETE_RAW","CLOSE_TAG_AUTOCOMPLETE_RAW","ucFirst","charAt","toUpperCase","replaceLineBreaks","REGEXP_URL_ATTR","RegExp","attr","LIST_PROTON_ATTR","MAP_PROTON_ATTR","CONFIG","default","ALLOWED_URI_REGEXP","ADD_TAGS","ADD_ATTR","FORBID_TAGS","FORBID_ATTR","raw","WHOLE_DOCUMENT","RETURN_DOM","protonizer","ALLOW_UNKNOWN_PROTOCOLS","RETURN_DOM_FRAGMENT","escapeURLinStyle","handleEscape","unescapedEncoding","radix","ignored","val","fromCodePoint","unescape","char","escapeFlag","escapedStyle","beforeSanitizeElements","nodeType","from","attributes","item","getAttribute","removeAttribute","escaped","purifyHTMLHooks","active","DOMPurify","addHook","removeHook","getConfig","clean","config","clearConfig","sanitize","attachHooks","process","matches","selector","msMatchesSelector","parseInDiv","div","innerHTML","FORBIDDEN_SVG","HTML_STRING","VERIFY_ELEMENT_END","REGEXP_SVG_BREAK","removeBase64","activeCache","hash","random","now","put","escapeSVG","transformEscape","activeHooks","purifyHTML","PROTOCOLS","ALL_PROTOCOLS","MAP","getNormalizedHref","sanitizeRelativeHttpLinks","proto","linkUsesProtocols","disableAnchors","isEmptyAnchor","pointerEvents","transformLinks","querySelectorAll","hasHTTP","isRelative","httpInNewTab","noReferrerInfo","REGEXP_CID_START","getBodyParser","isDocument","trimQuotes","substr","readCID","findEmbedded","cid","extractEmbedded","convertMimeHeaders","headers","split","formatted","mimemessage","factory","CIDList","getMessageCIDs","embeddedAttachments","addMessageCID","listInlineAttachments","MAP_CID","contentId","contentName","contentDisposition","getAttachementName","urlCreator","URL","webkitURL","Blobs","MAP_BLOBS","getHashKey","msg","store","imageUrl","createObjectURL","isContentLocation","getBlob","hasBlob","isInlineEmbedded","wrapImage","img","container","wrapper","firstChild","outerHTML","parentNode","insertBefore","remove","wrap","getUrl","srcToCID","prepareImages","show","isReplyForward","isOutside","showEmbedded","add","removeChild","triggerSigVerification","wait","actionDirection","nodes","mutateHTML","direction","escapeSrc","noop","unescapeSrc","Encrypted","PGP_MIME","storeAttachement","buffer","transformEmbedded","attachmentsCache","ShowImages","SHOW_IMAGES","EMBEDDED","transformWelcome","images","str","quotes","transformBlockquotes","doc","blockquotes","parent","found","blockquote","child","before","after","button","transformStylesheet","firstElement","firstElementChild","position","WHITELIST","ATTRIBUTES","REGEXP_FIXER","prepareInjection","hasAttribute","mapAttributes","transformRemote","inputShowImages","regex","showImages","REMOTE","hasImages","$1","ELEMENTS","transformBase","base","querySelector","BASE_URL","baseUrl","getBaseURL","bindAttribute","el","keyproton","ptValue","convert","number","parsedAttachment","generatedFileName","transferEncoding","contentType","filenameOption","checksum","getId","JSON","stringify","Signature","attachmentData","convertSingle","getVerifiedStatus","pmcryptoVerified","publicKeys","signedInvalid","signedPubkey","decryptMimeMessage","headerFilename","sender","decryptMIMEMessage","Body","messageDate","getBody","body","mimetype","verify","getEncryptedSubject","encryptedSubject","decryptLegacyMessage","decryptMessageLegacy","useDecryptMessage","getPublicKeys","useGetPublicKeys","getAddressKeys","useGetAddressKeys","addressKeys","splitKeys","MessageContext","createContext","MessageProvider","useInstance","createCache","createLRU","useLayoutEffect","isArray","arrayToBase64","encodeBase64","arrayToBinaryString","emailInExtrInfo","contactEmail","ContactID","getInExtrInfo","usesDefaults","Defaults","encryptionEnabled","KEY_FLAGS","ENABLE_ENCRYPTION","getDefaultInfo","defaultMimeType","eoEnabled","globalSign","RecipientType","Keys","Warnings","warnings","RECIPIENT_TYPE","TYPE_INTERNAL","TYPE_EXTERNAL","settingsScheme","PGPScheme","settingsMime","PACKAGE_TYPE","SEND_PGP_MIME","ownAddress","fallbackAddress","getKeys","PublicKey","SEND_PM","encrypt","sign","publickeys","primaryPinned","scheme","pinned","isVerified","SEND_EO","SEND_CLEAR","mimetypeLogic","defaultMimetype","SEND_PGP_INLINE","isPrimaryPinned","base64Keys","sendKeys","sendKeyObjects","pinnedKey","pinnedFingerprint","getFingerprint","extractInfo","keyData","encryptFlag","signFlag","inputMimetype","emailKeys","inputScheme","isExternalWithKeys","pmKey","then","isExpiredKey","isExpired","keyObjs","keyObjects","getApiInfo","normalizedEmail","info","getCacheInfo","inCache","emails","contactEmailList","every","inExtractedInfoCache","getInfo","getSendPreferences","catchErrors","Sign","normEmails","unique","normInfos","normMap","assign","cur","extractContentValue","semicolonIndex","buildEmbeddedHtml","htmlEntity","contentTransferEncoding","relatedBody","buildPlaintextEntity","plaintext","buildBodyEntity","buildAlternateEntity","build","bodyEntity","attachmentEntities","attachmentName","contentTypeValue","contentDispositionValue","entity","header","buildAttachments","testDiv","getNormalAttachments","fetchMimeDependencies","constructMime","generateMimePackage","Addresses","generatePlainTextPackage","generateHTMLPackage","generateTopPackages","sendPrefs","packagesStatus","packages","demandedPackages","sendPM","Type","sendPMEncryptedOutside","warn","sendPGPMime","sendPGPInline","sendClear","attachSubPackages","bindPackageSet","pack","packageToUpdate","packageType","packToBase64","algorithm","Algorithm","Key","encryptKeyPacket","passwords","encryptSessionKey","packets","write","encryptAttachmentKeys","attachmentKeys","isEo","SessionKey","AttachmentKeyPackets","Attachment","AttachmentKeys","generateSessionKeyHelper","generateSessionKey","encryptBodyPackage","ownKeys","cleanPublicKeys","encryptMessage","returnSessionKey","compression","splitMessage","asymmetric","encrypted","encryptDraftBodyPackage","ownPublicKeys","flat","armorBytes","encryptBody","publicKeysList","encryptPack","counter","publicKey","BodyKeyPacket","subPack","BodyKey","encryptPackage","getAttachmentKeys","encryptPackages","packageList","useSendMessage","useAddresses","uniqueEmails","sendMessage","Packages","Sent","useEncryptMessage","mergeMessages","messageState","messageModel","mergeSavedMessage","messageSaved","messageReturned","ParentID","useMessage","inputMessage","useContext","computeCache","messageID","setMessageID","setMessage","lock","messageActivity","setMessageActivity","changedMessageID","transforms","loadData","markAsRead","createDraftApi","updateDraft","deleteRequest","activities","transform","runSingle","compute","simpleUpdateCache","newMessage","run","computes","updateCacheCallback","messagePromise","initialize","initialized","loadRemoteImages","loadEmbeddedImages","createDraft","saveDraft","send","deleteDraft","MessageView","initialExpand","conversationIndex","setExpanded","elementRef","loaded","prepareMessage","scrollIntoView","behavior","block","handleLoadRemoteImages","handleLoadEmbeddedImages","handleExpand","existingDraft","getFirstMessageToRead","messages","getLast","TrashWarning","inTrash","ConversationView","conversationID","miss","useConversation","conversationData","toggleFilter","filteredMessages","messagesToShow","showTrashWarning","realMessages","latest","findMessageToExpand","WelcomePane","labelCount","user","unreadsLabel","reportBugButton","LinkButton","AuthenticatedBugModal","DisplayName","capitalize","jt","unreadEmailsSvg","SelectionPane","onUncheckAll","checkeds","labelName","conversationManySvg","conversationSingleSvg","Button","PlaceholderView","welcomeRef","counters","MessageOnlyView","MailboxContainer","inputLabelID","inputElementID","searchParams","stringToSort","sortFromUrl","stringToFilter","filterFromUrl","checkedElements","setCheckedElements","setCheckAll","loadingUser","loadings","unreads","unreadString","useMailboxPageTitle","contactID","handleCheckAll","setPageInUrl","setSortInUrl","setFilterInUrl","PageContainer","ErrorBoundary","TitleBarButton","ComposerTitleBar","minimized","maximized","toggleMinimized","toggleMaximized","AddressesRecipientItem","onRemove","setModel","editableRef","validate","valid","setValid","handleChange","contentEditable","onKeyUp","onPaste","onBlur","useEventListener","eventName","handler","addEventListener","removeEventListener","AddressesAutocomplete","inputRef","onSelect","currentValue","awesomplete","setAwesomplete","containerRef","awesompleteInstance","Awesomplete","minChars","autoFirst","destroy","contactList","groupList","itemId","ITEM","open","AddressesGroupModal","isChecked","newValue","FormModal","submit","AddressesGroupItem","handleGroupModal","newRecipientGroup","AddressesInput","addressesFocusRef","inputModel","setInputModel","recipientsOrGroups","confirmInput","focus","handleRecipientRemove","toRemove","handleGroupChange","toChange","handleGroupRemove","groupContacts","Input","onKeyDown","keyCode","preventDefault","last","SearchInputUntyped","AddressesContactsModal","inputValue","setValue","setContacts","handleChangeCheckbox","searchInput","Table","TableHeader","cells","TableBody","colSpan","TableRow","AddressesEditor","toggleExpanded","handleContactModal","recipientTypes","AddressesSummary","onFocus","recipientOrGroups","addressesBlurRef","loadingContactGroups","editor","setEditor","ComposerMeta","addressesOptions","originalTo","plusAddress","unshift","getFromAdresses","AttachmentsList","Block","Quill","import","tagName","register","ComposerContent","onRemoveAttachment","contentFocusRef","readOnly","delta","source","AttachmentsButton","onAddAttachments","multiple","files","ATTACHMENT_ACTION","ComposerActions","activityInput","activity","onSave","onSend","onDelete","time","stack","setStack","setTimeoutState","runTimeout","first","useSlowChanges","dateMessage","dateString","readFileAsBuffer","reader","FileReader","onabort","readAsArrayBuffer","inline","armor","detached","signature","Filename","FileSize","Inline","encryptFile","pubKeys","privKey","TypeError","uploadFile","titleImage","tempPacket","uploading","ContentID","MessageID","DataPacket","upload","ATTACHMENT","INLINE","uploads","m1","m2","Composer","inputStyle","opening","setOpening","modelMessage","setModelMessage","syncedMessage","syncLock","syncActivity","useWindowSize","width","height","COMPOSER_VERTICAL_GUTTER","HEADER_HEIGHT","COMPOSER_HEIGHT","COMPOSER_SWITCH_MODE","autoSave","debounce","newModelMessage","save","messageToSave","handleAddAttachments","handleSave","handleSend","handleClose","right","COMPOSER_GUTTER","APP_BAR_WIDTH","computeStyle","dedentTpl","callSite","args","getProtonSignature","PMSignature","PM_SIGNATURE","isEmptyUserSignature","createSpace","tagOpen","getSpaces","isReply","isUserEmpty","isEmptySignature","between","getClassNamesSignature","isProtonEmpty","userClass","protonClass","containerClass","templateBuilder","noSpace","space","template","insertSignature","isAfter","insertAdjacentHTML","RE_PREFIX","FW_PREFIX","formatSubject","subject","prefix","hasPrefix","newCopy","useEncrypted","reply","ReplyTos","replyAll","userAddresses","CCListWithoutUserAddresses","forward","handleActions","generateBlockquote","previously","newContent","createNewDraft","DraftMIMEType","RightToLeft","AttachPublicKey","senderAddress","PasswordHint","ExpirationTime","ExpiresIn","hasFocus","rightPositions","maxHeight","zIndex","COMPOSER_ZINDEX","getComposeExisting","composeArgs","getComposeNew","ComposerContainer","loadingSettings","loadingAddresses","setMessages","focusedMessage","setFocusedMessage","useDraft","newMessages","handleFocus","range","share","computeRightPositions","composeExisting","composeNew","getComposeArgs","existingMessage","oldMessage","PrivateApp","onLogout","StandardPrivateApp","preloadModels","UserModel","UserSettingsModel","eventModels","AddressesModel","ConversationCountsModel","MessageCountsModel","MailSettingsModel","LabelsModel","SubscriptionModel","OrganizationModel","Route","path","render","routeProps","PublicLayout","Icons","LoginContainer","stopRedirect","onLogin","SignInLayout","LoginForm","needHelp","SignupContainer","propTypes","PropTypes","func","isRequired","shape","step","oneOfType","token","Coupon","Code","PublicApp","hasStopRedirect","setError","loadOpenPGP","catch","Switch","ResetPasswordContainer","component","ForgotUsernameContainer","Redirect","Setup","useAuthentication","UID","login","logout","hot","ProtonApp","ReactDOM","webpackContext","req","webpackContextResolve","code","webpackAsyncContext","ids","webpackEmptyAsyncContext"],"mappings":"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4CCtCpB,IAAIjB,EAAM,CACT,gBAAiB,CAChB,OACA,IAED,mBAAoB,CACnB,OACA,IAED,mBAAoB,CACnB,OACA,IAED,mBAAoB,CACnB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,GAED,gBAAiB,CAChB,OACA,GAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,mBAAoB,CACnB,OACA,IAED,mBAAoB,CACnB,OACA,IAED,mBAAoB,CACnB,OACA,IAED,mBAAoB,CACnB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,mBAAoB,CACnB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,mBAAoB,CACnB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,GAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,GAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,GAED,mBAAoB,CACnB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,GAED,gBAAiB,CAChB,OACA,GAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,mBAAoB,CACnB,OACA,IAED,mBAAoB,CACnB,OACA,KAGF,SAASymD,EAAoBH,GAC5B,IAAI9tD,EAAoBuD,EAAEiE,EAAKsmD,GAC9B,OAAOltD,QAAQC,UAAUsqC,MAAK,WAC7B,IAAI3qC,EAAI,IAAIwB,MAAM,uBAAyB8rD,EAAM,KAEjD,MADAttD,EAAEwtD,KAAO,mBACHxtD,KAIR,IAAI0tD,EAAM1mD,EAAIsmD,GAAMrlD,EAAKylD,EAAI,GAC7B,OAAOluD,EAAoBQ,EAAE0tD,EAAI,IAAI/iB,MAAK,WACzC,OAAOnrC,EAAoByI,MAG7BwlD,EAAoBloD,KAAO,WAC1B,OAAOjH,OAAOiH,KAAKyB,IAEpBymD,EAAoBxlD,GAAK,OACzBnI,EAAOD,QAAU4tD,G,mEChRjB,SAASE,EAAyBL,GAGjC,OAAOltD,QAAQC,UAAUsqC,MAAK,WAC7B,IAAI3qC,EAAI,IAAIwB,MAAM,uBAAyB8rD,EAAM,KAEjD,MADAttD,EAAEwtD,KAAO,mBACHxtD,KAGR2tD,EAAyBpoD,KAAO,WAAa,MAAO,IACpDooD,EAAyBttD,QAAUstD,EACnC7tD,EAAOD,QAAU8tD,EACjBA,EAAyB1lD,GAAK,Q","file":"index.12b12296.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// script path function\n \tfunction jsonpScriptSrc(chunkId) {\n \t\treturn __webpack_require__.p + \"\" + ({}[chunkId]||chunkId) + \".\" + {\"3\":\"c4110b0e\",\"4\":\"5748a625\",\"5\":\"d002b3b8\",\"6\":\"07acf1a8\",\"7\":\"7ad516d7\",\"8\":\"33928503\",\"9\":\"ae19bd00\",\"10\":\"8a208c96\",\"11\":\"877e3a7c\",\"12\":\"ff1aceda\",\"13\":\"25cb02e2\",\"14\":\"1a1e5032\",\"15\":\"14e81f6b\",\"16\":\"a9f7ed5b\",\"17\":\"b8a42e45\",\"18\":\"f1fc393a\",\"19\":\"f85e0da2\",\"20\":\"0eca0fa2\",\"21\":\"c710fa30\",\"22\":\"be043dcc\",\"23\":\"21a633e0\",\"24\":\"fe9d2c12\",\"25\":\"afe5354a\",\"26\":\"180da2c2\",\"27\":\"a583cf43\",\"28\":\"35eb7050\",\"29\":\"dd5d965c\",\"30\":\"9f5e9f6f\",\"31\":\"8ac4cff8\",\"32\":\"ecd51f02\",\"33\":\"f8bc733f\",\"34\":\"d08f2f2d\",\"35\":\"07a524d4\",\"36\":\"bd767790\",\"37\":\"0472a548\",\"38\":\"313ea7bb\",\"39\":\"ecd2b080\",\"40\":\"1d96dbee\",\"41\":\"9f7ce9e7\",\"42\":\"d7847233\",\"43\":\"a1e44c77\",\"44\":\"d4dd47a4\",\"45\":\"b8cdd3d2\",\"46\":\"118c5c6c\",\"47\":\"d21a0563\",\"48\":\"3456478a\",\"49\":\"448429bf\",\"50\":\"6c69c91b\",\"51\":\"7372a16e\",\"52\":\"6aaafc7a\",\"53\":\"5821bf6b\",\"54\":\"002e92c5\",\"55\":\"c1890cd2\",\"56\":\"72f9ea33\",\"57\":\"45fe19e8\",\"58\":\"f8968b27\",\"59\":\"c974f643\",\"60\":\"22b8c74c\",\"61\":\"8abf3a45\",\"62\":\"a72fc9e8\",\"63\":\"d8ceb1c9\",\"64\":\"02a35823\",\"65\":\"691e1fd1\",\"66\":\"eaefa986\"}[chunkId] + \".chunk.js\"\n \t}\n \tvar sriHashes = {\"3\":\"sha384-9934ABN6uqPEPFosQLqxuVhvYUV4okLUNbM0wPFOjE32xxR0586aPIAfPwsnK0aM\",\"4\":\"sha384-c8lzpMfT7HLNH/GninvVmldA6MAz78U7S67XgZ0sL1zC/XsvbAc1sk/8WCbo5DRm\",\"5\":\"sha384-lv7AR2bqV8OenkumNTiZZdadAbQfO2XuJbYqEt9AzFdGlC10pFrN3Cs+aZUgjPcD\",\"6\":\"sha384-zGs+rCNJ2ybc4gZG6rllZSyRoPEPzHKQsQdmg5Ct1obpLbhfrgY0Eh8xKnaVYAWQ\",\"7\":\"sha384-pYGHH3VUsYMwA4BAKILHXmvGjpaxZlX7K4Of8Vf0TpR1zS6KDsgHFNzDpzirDyBf\",\"8\":\"sha384-ACeUJuCEJ59IYImLrUenrF6deSrpeWezxLcOsBAQyORKzdpa17wYYLC3/lu9FXfx\",\"9\":\"sha384-i0T45goKd5FtPV6EQM7mrJpda8H8zPWOz5tjU9ymETt7xBC6jUjwNqHloDdlm24u\",\"10\":\"sha384-8jUnc1d4TZkeepUWsacU28Ba3xjVZQC+DhOPOUgsOujkW4AH00aKevnp3eALoF96\",\"11\":\"sha384-DArCUJcqJmVbAYO1HmaQBxRDAd1LhtMG3EtURSQnKJtwDiZ1YwnP2rwfkK69PMf4\",\"12\":\"sha384-XS0QUhEY75QdhPe6i1rnrb4KAI4vmxXrsCsUmdIWSbx+ZzXXqOOWQouR+Hua6ukg\",\"13\":\"sha384-m+5HhZASMNDlwdTS4rbCfY+uMTLoDEBuHkgo2eRz1U72aRnXBRtcFNIpYN8UcOw0\",\"14\":\"sha384-lRW/huJoiN9BopHCZ2RcPCpNHFtWg3585yWFpWhv+DHGLlUB9fgLWMA1V/Roj1+b\",\"15\":\"sha384-irOAQuzwBISkvtz8hzaB0WP9TNhpfAYByjaJsV8JxgV+2F+3umYIZtxCJDfclqux\",\"16\":\"sha384-BRfHejCiWsn28LbRHzgaPHBmWBeqhz+loh+/rXH2QTedcz0OMFYxD7pvQch4Maq8\",\"17\":\"sha384-UP9yAZvoLx3uOKiaRwDd8CnL+TG6XnvmCQ/dqZUmuxDfNZimQYs6mhtwaDm1mC/E\",\"18\":\"sha384-ES8l1C4+eGYE3gz5iokugFlvGNUc3Jkl+RqsyPcNNYjnbugjT4OPnWttCcelmjC/\",\"19\":\"sha384-zuIZQSzznBcH/aeP6dj/cfl9tnmBnFZ5OvQWlFuj6zTniPXSJ825U++zKvplDaFc\",\"20\":\"sha384-jKcgQSWZyXXAHZ7g5WNU6glCJtd1tVX4BAcyO+Qo4PJMWFI7EIYYfbb1ieSu4Eob\",\"21\":\"sha384-8kzw/z8VFEI4cFXKzDPIhxdSEz3rcKu7VL7Hb8dm/1jP9WDy3G/6Pq1sk0DwdlUQ\",\"22\":\"sha384-vQaEGDUlI+f05Zln/tyPRJX7Q+EH6KpzX5B+1Ksqeq6smzvDMRw/VcuU7WO/9UWo\",\"23\":\"sha384-AoehfZkceTHXRM5ePhp5CSnOVH2PoqIeL8gzUpv5R1Vw2lZJrXIDuzUsxp4KZgq3\",\"24\":\"sha384-hMnh3w0w1iPOFlEhpEHjBAlGJVlowHPzeZ0M2IgBRwTD2htzyWAa5MRvVPkTzdJA\",\"25\":\"sha384-W/vYvDOgjWSw6gxJmVjoKKQmMwfR9dWhEORiTWcPGpDRuwQORazeQfeyxzfjoXdW\",\"26\":\"sha384-l0G9EBxQrDdTWOPdCuYSNETCg5O6AtKYekF47wIyiTjGwE04QYa8SLMSFxd8o71d\",\"27\":\"sha384-6OO7XYx9E3QXkIhdIlHQVH8Ue44DVJp6nrwTvFmrbXg9Nli+uRZgKGomg8WeiR5q\",\"28\":\"sha384-kf5ojG+WPoIphDkrlnR3D8popMDAnND5JLIltB7TQ3ye6zb8uOGYlF9AbKB08a9+\",\"29\":\"sha384-tnX0KN/cE5IZdJclcW7QcVbgrkg9mJrThT3/qxojXwCgrikX9kQaSLV7HtGWEp0J\",\"30\":\"sha384-WkkBR/2HPdRYZvC42rOkNplMBjlRLXlN6PHAN44T7C/py4oriEnv33Ze51S6Rd82\",\"31\":\"sha384-UNRa2ZGZ41ii/29/KnlYViDgvnb2hA6l3XuLrgDQLwLazM8VuaURvhQ02mJeICwL\",\"32\":\"sha384-AsuQU0y81OeHG6H/atJuFNibNJ5XjvuskJjC8MqHRThMTaVPAmIOVriCK+2vvchr\",\"33\":\"sha384-LgLJ3EvoZtIH0CDV7fGICHlQSeplOQ91vtIYNNJDdA0ENr/Q8yHfcxRMibTRv2lT\",\"34\":\"sha384-hb/lMcKNyJvXHCaXxXXmGClN2mW6KRgbY+U2PjU1kOm93RG9Om+r8pX3Kpdnnqh4\",\"35\":\"sha384-z+Zv2ZTMH6JCh48NoXvxPueez9w8XAHZlpPDMY1Y7I/pt1eJSgxgxDwf0PK0JIOR\",\"36\":\"sha384-XSYUc6dvyA7SajIlM8GwH5oqi7VeUAjVBcc+vQzlmJa7ttnN2oEJLsCphFHkS5C0\",\"37\":\"sha384-5h0AJiBbQmnmdLoIV6T3+wDDvPlyPQt8iwni+MkRZDnYXO26pMsmc4d/l9zZV3N3\",\"38\":\"sha384-W8sU1K3akH3iR1b2CgC0NjRHd2navx73bLUlbH/kxAxjm80AEJ9+GkNHEwiGvtS8\",\"39\":\"sha384-VzYMHzEL3iG47djGZ8oFdSxk2k88lejaAAXa9j9sP8JFkQ9KO6juZrjnv0Qt+Qhv\",\"40\":\"sha384-T4PpKTsD9/LYiH7irzAx7ZNGJbC/5RGjEpsq+i/Sov/Ok3YDK/L6soiemAuLjJIN\",\"41\":\"sha384-PPuiSgLVtm9dKVr7s5Yf2+MmSsnBNsQizBIyR1tTgVclLmyp8M/+LaANz/QaZl4w\",\"42\":\"sha384-fjyvCz3D+xT+Y1DiQ1DXBeYM/yVCjVhkIMJIK7Hmj2KRnh/JgCmUS9Y3BchRLHKE\",\"43\":\"sha384-9cRxEJRfWCr3NJOWD5RWORkImWu7NhRUbdWmKRL4O30QZt5YHGWqGAHdu3nm6iJN\",\"44\":\"sha384-ojzmhdPobWffn3uS7YlXq8nUjrFSKnIEo5igI9VmsV0hf5sML1vuqo3WNQ8cVTd0\",\"45\":\"sha384-zx8A2SLhiOzCrp0YsZI3L67f601RtYZkG+T8Ypn7cEIxMb/5kfyjlu0AncxNsqRl\",\"46\":\"sha384-orcgeC+mhWxY99KH2JApmjOshTEcJ8ndZzOdUKfttrMZQPDlTULjWPOarYsXRrbC\",\"47\":\"sha384-nJ0DaYc5GWnwssOIfk5YahTBrNISX+r0xmSvJ0bF4pAIQejpnw1KPc2LOAKkK5x3\",\"48\":\"sha384-jzEKNGMf5XBJm1srqq8UZsYGD+XNEsV5YBMeGRWR0udJC4N3pC8R8pttnubZVHtk\",\"49\":\"sha384-WahoBLbM74PGDr/7/fXrnbvs2TwiYihLfkiAnqvHOqFsnZNmEasRBasd43J3F4X7\",\"50\":\"sha384-C4bS4nSOgnJlFMdjHgoFhiVjA+XiFeet6Tqtfgg7zRxg/kBVdibpD/2as6vLDNrA\",\"51\":\"sha384-wRNAFACmiKh7qvcPXQkjdrU2MwDDvwci1sZepkaQDh9RAPWI7RNjPoHAZGV5FYlW\",\"52\":\"sha384-a0b3xhuXCCBxCKwbP5wjNQc9ZCzDHmH+TTVVkdrpNKO4OwbDLA5UyJTJ90l9nGv8\",\"53\":\"sha384-XP0rQY7SqZIC5f/uxurYuYi0a8MNVdxarSV8Vb6nscMsXpLRjrUREf2siCZ6KvBM\",\"54\":\"sha384-VQiGyLj12mnQv4Gbq262pqG3ClZUAWoI4cOiClzNf9fqBd66eAI+Jp+I149+8Qe5\",\"55\":\"sha384-rV6u8eshKm1ESH0MK6LYeqyY5+8C2Nt/qVn8ooBr+GcZSUnFi2c9aXdddVrU/wIp\",\"56\":\"sha384-zaGeszS8oQHGzgMlYL0/wQkNyuEvpbswRtityiuS4y0GzxCjy+d+NIL3CNRSg4cn\",\"57\":\"sha384-hS/5RVkIw66sQdEqjl66X/YjLX3eBqWBSce7sbXdSbLGiEpb8nGbrj9SNx8hRqwy\",\"58\":\"sha384-s763XtDuYj/NBS8L6/uXd3TCBhjsztgBv2SZPbX/QtpaDiv0LgKLxIx2astqjLY5\",\"59\":\"sha384-TzW2aFz9aLA54S/yPUzTlCBuh1+hJ2iPVNdgtZIAP1LzEfKwF8ZvBhzWTpmz8CPr\",\"60\":\"sha384-skCRYdZpBI4T0RUlwriRgXKe5LNXomfke5BxGWyCbQJw5i3xUe3AFrEM/7F63s/0\",\"61\":\"sha384-Q4E0teznn7Aj66mYA9mT7JRn+zOhBcDvsEjxSOoAoV52jtiBsKJh7Tlh0MejtUB/\",\"62\":\"sha384-GZV2VNVAzNi975g0cLQQ/DKnCiLUkNI7Ooc00P42VLsnwOdxRt0e8DaO754mBJ6K\",\"63\":\"sha384-eU8Nu5+9hDL+VCxDT9Kl2XnXb08gLe5740xMLlDmOcE06oBYmO3l9Lwv0EelIyDy\",\"64\":\"sha384-XoiKA1IU2zJPo8CPBM/oQVuTJcij0q5Xr5oQMtlJLP4ArWl/A05zMuLZ03LCVVsy\",\"65\":\"sha384-kXB35rsIAZeMHgTP/xXQrOmSFKNEQDSBKGtmjjlmqhBXUgF+PKa+pxl6qci6xDuj\",\"66\":\"sha384-s7PoTREiuCZ+KKMKA3+C0mTUZc1eud5YmvkraUbSV6GUMSQVytJbp3jz0sro9HnC\"};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n\n\n \t\t// JSONP chunk loading for javascript\n\n \t\tvar installedChunkData = installedChunks[chunkId];\n \t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n \t\t\t// a Promise means \"currently loading\".\n \t\t\tif(installedChunkData) {\n \t\t\t\tpromises.push(installedChunkData[2]);\n \t\t\t} else {\n \t\t\t\t// setup Promise in chunk cache\n \t\t\t\tvar promise = new Promise(function(resolve, reject) {\n \t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n \t\t\t\t});\n \t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n \t\t\t\t// start chunk loading\n \t\t\t\tvar script = document.createElement('script');\n \t\t\t\tvar onScriptComplete;\n\n \t\t\t\tscript.charset = 'utf-8';\n \t\t\t\tscript.timeout = 120;\n \t\t\t\tif (__webpack_require__.nc) {\n \t\t\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n \t\t\t\t}\n \t\t\t\tscript.src = jsonpScriptSrc(chunkId);\n \t\t\t\tif (script.src.indexOf(window.location.origin + '/') !== 0) {\n \t\t\t\t\tscript.crossOrigin = \"anonymous\";\n \t\t\t\t}\n \t\t\t\t// create error before stack unwound to get useful stacktrace later\n \t\t\t\tvar error = new Error();\n \t\t\t\tonScriptComplete = function (event) {\n \t\t\t\t\t// avoid mem leaks in IE.\n \t\t\t\t\tscript.onerror = script.onload = null;\n \t\t\t\t\tclearTimeout(timeout);\n \t\t\t\t\tvar chunk = installedChunks[chunkId];\n \t\t\t\t\tif(chunk !== 0) {\n \t\t\t\t\t\tif(chunk) {\n \t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n \t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n \t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n \t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n \t\t\t\t\t\t\terror.type = errorType;\n \t\t\t\t\t\t\terror.request = realSrc;\n \t\t\t\t\t\t\tchunk[1](error);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tinstalledChunks[chunkId] = undefined;\n \t\t\t\t\t}\n \t\t\t\t};\n \t\t\t\tvar timeout = setTimeout(function(){\n \t\t\t\t\tonScriptComplete({ type: 'timeout', target: script });\n \t\t\t\t}, 120000);\n \t\t\t\tscript.onerror = script.onload = onScriptComplete;\n \t\t\t\tscript.integrity = sriHashes[chunkId];\n \t\t\t\tscript.crossOrigin = \"anonymous\";\n \t\t\t\tdocument.head.appendChild(script);\n \t\t\t}\n \t\t}\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// on error function for async loading\n \t__webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,2]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","export const CLIENT_ID = 'WebMail';\nexport const CLIENT_TYPE = 1;\nexport const CLIENT_SECRET = '';\nexport const APP_VERSION = '1.0.0';\nexport const APP_NAME = 'proton-mail';\nexport const API_URL = 'https://protonmail.blue/api';\nexport const SECURE_URL = 'https://secure.protonmail.blue';\nexport const LOCALES = {};\nexport const API_VERSION = '3';\nexport const DATE_VERSION = 'Wed, 29 Jan 2020 08:39:42 GMT';\nexport const CHANGELOG_PATH = 'assets/changelog.tpl.html';\nexport const VERSION_PATH = 'assets/version.json';\nexport const SENTRY_RELEASE = '';\nexport const SENTRY_DSN = '';","const locales = require.context('../i18n', true, /.json$/, 'lazy');\n\nexport default locales.keys().reduce((acc, key) => {\n    acc[key.slice(2, key.length - 5)] = () => locales(key);\n    return acc;\n}, {});\n","import React, { useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon, SimpleDropdown, PrimaryButton, Label, Select, useLabels } from 'react-components';\nimport { MAILBOX_LABEL_IDS, LABEL_EXCLUSIVE } from 'proton-shared/lib/constants';\nimport { c } from 'ttag';\n\nconst ALL = 'all';\nconst { INBOX, TRASH, SPAM, ARCHIVE } = MAILBOX_LABEL_IDS;\n\nconst AdvancedSearchDropdown = ({ location, history }) => {\n    const formRef = useRef();\n    const [model, updateModel] = useState({});\n    const [labels = []] = useLabels();\n    const locationOptions = [\n        { value: ALL, text: c('Option').t`All` },\n        { value: INBOX, text: c('Mailbox').t`Inbox` },\n        { value: ARCHIVE, text: c('Mailbox').t`Archive` },\n        { value: SPAM, text: c('Mailbox').t`Spam` },\n        { value: TRASH, text: c('Mailbox').t`Trash` }\n    ]\n        .concat(\n            labels\n                .filter(({ Exclusive }) => Exclusive === LABEL_EXCLUSIVE.FOLDER)\n                .map(({ ID: value, Name: text }) => ({ value, text }))\n        )\n        .concat(\n            labels\n                .filter(({ Exclusive }) => Exclusive === LABEL_EXCLUSIVE.LABEL)\n                .map(({ ID: value, Name: text }) => ({ value, text }))\n        );\n    const handleSubmit = () => {\n        const state = {}; // TODO\n        history.push({ ...location }, state);\n        formRef.current.reset();\n    };\n    return (\n        <SimpleDropdown\n            originalPlacement=\"bottom-right\"\n            hasCaret={false}\n            content={<Icon name=\"caret\" className=\"fill-white searchbox-advanced-search-icon\" />}\n            className=\"searchbox-advanced-search-button\"\n        >\n            <form ref={formRef} name=\"advanced-search\" className=\"p1\" onSubmit={handleSubmit}>\n                <div className=\"mb1\">\n                    <Label htmlFor=\"location\">{c('Label').t`Location`}</Label>\n                    <Select\n                        id=\"location\"\n                        options={locationOptions}\n                        onChange={({ target }) => updateModel({ ...model, location: target.value })}\n                    />\n                </div>\n                <div className=\"mb1 flex flex-nowrap\">\n                    <div className=\"mr1\">\n                        <Label>{c('Label').t`Sender`}</Label>\n                    </div>\n                    <div>\n                        <Label>{c('Label').t`Recipient`}</Label>\n                    </div>\n                </div>\n                <div className=\"mb1 flex flex-nowrap\">\n                    <div className=\"mr1\">\n                        <Label>{c('Label').t`Start date`}</Label>\n                    </div>\n                    <div>\n                        <Label>{c('Label').t`End date`}</Label>\n                    </div>\n                </div>\n                <div className=\"mb1 flex flex-nowrap\">\n                    <div className=\"mr1\">\n                        <Label>{c('Label').t`Address`}</Label>\n                    </div>\n                    <div>\n                        <Label>{c('Label').t`Attachments`}</Label>\n                    </div>\n                </div>\n                <div>\n                    <PrimaryButton className=\"w100\" type=\"submit\">{c('Action').t`Search`}</PrimaryButton>\n                </div>\n            </form>\n        </SimpleDropdown>\n    );\n};\n\nAdvancedSearchDropdown.propTypes = {\n    history: PropTypes.object.isRequired,\n    location: PropTypes.object.isRequired\n};\n\nexport default AdvancedSearchDropdown;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    MainLogo,\n    SupportDropdown,\n    Hamburger,\n    TopNavbar,\n    TopNavbarLink,\n    UpgradeButton,\n    Searchbox,\n    useUser\n} from 'react-components';\nimport { c } from 'ttag';\n\nimport AdvancedSearchDropdown from './AdvancedSearchDropdown';\n\nconst PrivateHeader = ({ location, history, expanded, onToggleExpand, onSearch }) => {\n    const [{ hasPaidMail }] = useUser();\n    return (\n        <header className=\"header flex flex-nowrap reset4print\">\n            <MainLogo url=\"/inbox\" className=\"nomobile\" />\n            <Hamburger expanded={expanded} onToggle={onToggleExpand} />\n            <Searchbox\n                placeholder={c('Placeholder').t`Search messages`}\n                onSearch={onSearch}\n                advanced={<AdvancedSearchDropdown location={location} history={history} />}\n            />\n            <TopNavbar>\n                {hasPaidMail ? null : <UpgradeButton external={true} />}\n                <TopNavbarLink to=\"/inbox\" icon=\"mailbox\" text={c('Title').t`Mailbox`} aria-current={true} />\n                <TopNavbarLink external={true} to=\"/settings\" icon=\"settings-master\" text={c('Title').t`Settings`} />\n                <SupportDropdown />\n            </TopNavbar>\n        </header>\n    );\n};\n\nPrivateHeader.propTypes = {\n    location: PropTypes.object.isRequired,\n    history: PropTypes.object.isRequired,\n    onSearch: PropTypes.func.isRequired,\n    expanded: PropTypes.bool,\n    onToggleExpand: PropTypes.func.isRequired\n};\n\nexport default PrivateHeader;\n","import React from 'react';\nimport { LabelCount } from '../../models/label';\nimport { Icon, classnames } from 'react-components';\n\nimport './RefreshRotation.scss';\n\ninterface Props {\n    labelID: string;\n    counterMap: { [labelID: string]: LabelCount | undefined };\n    currentLabelID: string;\n    refreshLabelID?: string;\n}\n\nconst LocationAside = ({ labelID, counterMap, currentLabelID, refreshLabelID }: Props) => {\n    const unread = counterMap[labelID]?.Unread;\n\n    return (\n        <>\n            {labelID === currentLabelID && (\n                <Icon\n                    className={classnames(['mr0-5', labelID === refreshLabelID && 'location-refresh-rotate'])}\n                    fill=\"light\"\n                    name=\"reload\"\n                />\n            )}\n            {unread ? <span className=\"navigation__counterItem flex-item-noshrink rounded\">{unread}</span> : null}\n        </>\n    );\n};\n\nexport default LocationAside;\n","import { c } from 'ttag';\nimport { MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\n\nexport const PAGE_SIZE = 50;\n\nexport const ELEMENT_TYPES = {\n    MESSAGE: 'message',\n    CONVERSATION: 'conversation'\n};\n\nexport const LABEL_IDS_TO_HUMAN = {\n    [MAILBOX_LABEL_IDS.INBOX]: 'inbox',\n    [MAILBOX_LABEL_IDS.ALL_DRAFTS]: 'all-drafts',\n    [MAILBOX_LABEL_IDS.ALL_SENT]: 'all-sent',\n    [MAILBOX_LABEL_IDS.TRASH]: 'trash',\n    [MAILBOX_LABEL_IDS.SPAM]: 'spam',\n    [MAILBOX_LABEL_IDS.ALL_MAIL]: 'all-mail',\n    [MAILBOX_LABEL_IDS.ARCHIVE]: 'archive',\n    [MAILBOX_LABEL_IDS.SENT]: 'sent',\n    [MAILBOX_LABEL_IDS.DRAFTS]: 'drafts',\n    [MAILBOX_LABEL_IDS.STARRED]: 'starred'\n};\n\nexport const HUMAN_TO_LABEL_IDS = Object.entries(LABEL_IDS_TO_HUMAN).reduce((acc, [key, value]) => {\n    acc[value] = key;\n    return acc;\n}, Object.create(null));\n\nexport const LABEL_IDS_TO_I18N = {\n    [MAILBOX_LABEL_IDS.INBOX]: c('Link').t`Inbox`,\n    [MAILBOX_LABEL_IDS.ALL_DRAFTS]: c('Link').t`Drafts`,\n    [MAILBOX_LABEL_IDS.ALL_SENT]: c('Link').t`Sent`,\n    [MAILBOX_LABEL_IDS.TRASH]: c('Link').t`Trash`,\n    [MAILBOX_LABEL_IDS.SPAM]: c('Link').t`Spam`,\n    [MAILBOX_LABEL_IDS.ALL_MAIL]: c('Link').t`All mail`,\n    [MAILBOX_LABEL_IDS.ARCHIVE]: c('Link').t`Archive`,\n    [MAILBOX_LABEL_IDS.SENT]: c('Link').t`Sent`,\n    [MAILBOX_LABEL_IDS.DRAFTS]: c('Link').t`Drafts`,\n    [MAILBOX_LABEL_IDS.STARRED]: c('Link').t`Starred`\n};\n\nexport const SIGNATURE_START = 1546300800; // January 1, 2019\n\nexport const VERIFICATION_STATUS = {\n    NOT_VERIFIED: -1,\n    NOT_SIGNED: 0,\n    SIGNED_AND_VALID: 1,\n    SIGNED_AND_INVALID: 2,\n    SIGNED_NO_PUB_KEY: 3\n};\n\nexport const MESSAGE_FLAGS = {\n    FLAG_RECEIVED: 1, // whether a message is received\n    FLAG_SENT: 2, // whether a message is sent\n    FLAG_INTERNAL: 4, // whether the message is between ProtonMail recipients\n    FLAG_E2E: 8, // whether the message is end-to-end encrypted\n    FLAG_AUTO: 16, // whether the message is an autoresponse\n    FLAG_REPLIED: 32, // whether the message is replied to\n    FLAG_REPLIEDALL: 64, // whether the message is replied all to\n    FLAG_FORWARDED: 128, // whether the message is forwarded\n    FLAG_AUTOREPLIED: 256, // whether the message has been responded to with an autoresponse\n    FLAG_IMPORTED: 512, // whether the message is an import\n    FLAG_OPENED: 1024, // whether the message has ever been opened by the user\n    FLAG_RECEIPT_SENT: 2048, // whether a read receipt has been sent in response to the message\n    // For drafts only\n    FLAG_RECEIPT_REQUEST: 65536, // whether to request a read receipt for the message\n    FLAG_PUBLIC_KEY: 131072, // whether to attach the public key\n    FLAG_SIGN: 262144 // whether to sign the message\n};\n\nexport enum ENCRYPTED_STATUS {\n    PGP_MIME = 8 // Used for attachment\n}\n\nexport const AES256 = 'aes256';\n\nexport enum MESSAGE_ACTIONS {\n    NEW = -1,\n    REPLY = 0,\n    REPLY_ALL = 1,\n    FORWARD = 2\n}\n","import { VIEW_LAYOUT, VIEW_MODE, MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\n\ninterface MailSettings {\n    ViewLayout?: number;\n    ViewMode?: number;\n}\n\nexport const isColumnMode = ({ ViewLayout = VIEW_LAYOUT.COLUMN }: MailSettings = {}) =>\n    ViewLayout === VIEW_LAYOUT.COLUMN;\n\nexport const isConversationMode = (labelID = '', { ViewMode = VIEW_MODE.GROUP }: MailSettings = {}) => {\n    const alwaysMessageLabels = [\n        MAILBOX_LABEL_IDS.DRAFTS,\n        MAILBOX_LABEL_IDS.ALL_DRAFTS,\n        MAILBOX_LABEL_IDS.SENT,\n        MAILBOX_LABEL_IDS.ALL_SENT\n    ];\n\n    return !alwaysMessageLabels.includes(labelID as MAILBOX_LABEL_IDS) && ViewMode === VIEW_MODE.GROUP;\n};\n","import { formatRelative, format } from 'date-fns';\nimport { toMap } from 'proton-shared/lib/helpers/object';\n\nimport { ELEMENT_TYPES } from '../constants';\nimport { Element } from '../models/element';\nimport { Sort } from '../models/tools';\nimport { Message } from '../models/message';\nimport { isConversationMode } from './mailSettings';\nimport { LabelCount, Label } from '../models/label';\nimport { MailSettings } from '../models/utils';\nimport { MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\n\nexport interface TypeParams {\n    labelID?: string;\n    mailSettings?: any;\n}\n\nexport const getCurrentType = ({ labelID, mailSettings }: TypeParams) =>\n    isConversationMode(labelID, mailSettings) ? ELEMENT_TYPES.CONVERSATION : ELEMENT_TYPES.MESSAGE;\n\nexport const isMessage = (element: Element): boolean => typeof (element as Message).ConversationID === 'string';\nexport const isConversation = (element: Element): boolean => !isMessage(element);\n\nexport const getDate = ({ Time = 0, ContextTime = 0 }: Element = {}) => new Date((ContextTime || Time) * 1000);\n\n/**\n * Get readable time to display from message / conversation\n * @param {Integer} element.Time\n * @return {String} Jan 17, 2016\n */\nexport const getReadableTime = ({ Time = 0, ContextTime = 0 }: Element = {}) => {\n    const date = new Date((ContextTime || Time) * 1000);\n    const now = new Date();\n    return formatRelative(date, now);\n};\n\nexport const getReadableFullTime = ({ Time = 0, ContextTime = 0 }: Element = {}) => {\n    const date = new Date((ContextTime || Time) * 1000);\n    return format(date, 'Ppp');\n};\n\nexport const isUnread = (element: Element) => {\n    if ('NumUnread' in element) {\n        return element.NumUnread !== 0;\n    }\n    if ('Unread' in element) {\n        return element.Unread !== 0;\n    }\n    return false;\n};\n\nexport const getLabel = ({ Labels = [] }: Element, labelID: string) => Labels.find(({ ID = '' }) => ID === labelID);\n\nexport const getLabelIds = ({ Labels, LabelIDs }: Element) =>\n    Labels ? Labels.map(({ ID }) => ID || '') : LabelIDs || [];\n\nexport const hasLabel = (element: Element, labelID: string) => {\n    return getLabelIds(element).some((ID) => labelID === ID);\n};\n\nexport const getTime = (element: Element, labelID: string) =>\n    element.ContextTime || element.Time || (getLabel(element, labelID) || {}).ContextTime || 0;\n\nexport const getSize = ({ Size = 0 }: Element) => Size;\n\nexport const sort = (elements: Element[], sort: Sort, labelID: string) => {\n    const getValue = {\n        Time: getTime,\n        Size: getSize\n    }[sort.sort];\n    const compare = (a: Element, b: Element) => {\n        const valueA = getValue(a, labelID);\n        const valueB = getValue(b, labelID);\n        if (valueA === valueB) {\n            return (a.Order || 0) - (b.Order || 0);\n        }\n        return sort.desc ? valueB - valueA : valueA - valueB;\n    };\n    return [...elements].sort((e1, e2) => compare(e1, e2));\n};\n\nexport const getCounterMap = (\n    labels: Label[],\n    conversationCounters: LabelCount[],\n    messageCounters: LabelCount[],\n    mailSettings: MailSettings\n) => {\n    const labelIDs = [...Object.values(MAILBOX_LABEL_IDS), ...labels.map((label) => label.ID || '')];\n    const conversationCountersMap = toMap(conversationCounters, 'LabelID') as { [labelID: string]: LabelCount };\n    const messageCountersMap = toMap(messageCounters, 'LabelID') as { [labelID: string]: LabelCount };\n\n    return labelIDs.reduce((acc, labelID) => {\n        const conversationMode = isConversationMode(labelID, mailSettings);\n        const countersMap = conversationMode ? conversationCountersMap : messageCountersMap;\n        acc[labelID] = countersMap[labelID];\n        return acc;\n    }, {} as { [labelID: string]: LabelCount | undefined });\n};\n","import React, { useMemo, useState } from 'react';\nimport { c } from 'ttag';\nimport { Location } from 'history';\nimport {\n    NavMenu,\n    MainLogo,\n    Loader,\n    useMailSettings,\n    useLabels,\n    useConversationCounts,\n    useMessageCounts,\n    PrimaryButton,\n    useEventManager\n} from 'react-components';\nimport { SHOW_MOVED, LABEL_EXCLUSIVE, MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\nimport { redirectTo } from 'proton-shared/lib/helpers/browser';\n\nimport LocationAside from './LocationAside';\nimport { LABEL_IDS_TO_HUMAN, MESSAGE_ACTIONS } from '../../constants';\nimport { Label } from '../../models/label';\nimport { OnCompose } from '../../containers/ComposerContainer';\nimport { getCounterMap } from '../../helpers/elements';\n\ninterface Props {\n    labelID: string;\n    expanded?: boolean;\n    location: Location;\n    onCompose: OnCompose;\n}\n\nconst PrivateSidebar = ({ labelID: currentLabelID, expanded = false, location, onCompose }: Props) => {\n    const [refresh, setRefresh] = useState<string>();\n    const [conversationCounts, loadingConversationCounts] = useConversationCounts();\n    const [messageCounts, loadingMessageCounts] = useMessageCounts();\n    const [mailSettings, loadingMailSettings] = useMailSettings();\n    const [labels, loadingLabels]: [Label[], boolean] = useLabels();\n    const { call } = useEventManager();\n    const { ShowMoved } = mailSettings || {};\n\n    const counterMap = useMemo(() => {\n        if (!mailSettings || !labels || !conversationCounts || !messageCounts) {\n            return {};\n        }\n\n        return getCounterMap(labels, conversationCounts, messageCounts, mailSettings);\n    }, [mailSettings, labels, conversationCounts, messageCounts]);\n\n    if (loadingMailSettings || loadingLabels || loadingConversationCounts || loadingMessageCounts) {\n        return <Loader />;\n    }\n\n    const getItemParams = (labelID: MAILBOX_LABEL_IDS | string) => {\n        const humanID = LABEL_IDS_TO_HUMAN[labelID as MAILBOX_LABEL_IDS]\n            ? LABEL_IDS_TO_HUMAN[labelID as MAILBOX_LABEL_IDS]\n            : labelID;\n        const link = `/${humanID}`;\n        return {\n            type: 'link',\n            link,\n            ariaCurrent: labelID === currentLabelID ? 'page' : undefined,\n            aside: (\n                <LocationAside\n                    labelID={labelID}\n                    counterMap={counterMap}\n                    currentLabelID={currentLabelID}\n                    refreshLabelID={refresh}\n                />\n            ),\n            onClick: async () => {\n                if (link === location.pathname) {\n                    setRefresh(labelID);\n                    await call();\n                    setRefresh(undefined);\n                }\n            }\n        };\n    };\n\n    const list = [\n        {\n            icon: 'inbox',\n            text: c('Link').t`Inbox`,\n            ...getItemParams(MAILBOX_LABEL_IDS.INBOX)\n        },\n        {\n            icon: 'drafts',\n            text: c('Link').t`Drafts`,\n            ...getItemParams(ShowMoved & SHOW_MOVED.DRAFTS ? MAILBOX_LABEL_IDS.ALL_DRAFTS : MAILBOX_LABEL_IDS.DRAFTS)\n        },\n        {\n            icon: 'sent',\n            text: c('Link').t`Sent`,\n            ...getItemParams(ShowMoved & SHOW_MOVED.SENT ? MAILBOX_LABEL_IDS.ALL_SENT : MAILBOX_LABEL_IDS.SENT)\n        },\n        {\n            icon: 'star',\n            text: c('Link').t`Starred`,\n            ...getItemParams(MAILBOX_LABEL_IDS.STARRED)\n        },\n        {\n            icon: 'archive',\n            text: c('Link').t`Archive`,\n            ...getItemParams(MAILBOX_LABEL_IDS.STARRED)\n        },\n        {\n            icon: 'spam',\n            text: c('Link').t`Spam`,\n            ...getItemParams(MAILBOX_LABEL_IDS.SPAM)\n        },\n        {\n            icon: 'trash',\n            text: c('Link').t`Trash`,\n            ...getItemParams(MAILBOX_LABEL_IDS.TRASH)\n        },\n        {\n            icon: 'all-emails',\n            text: c('Link').t`All mail`,\n            ...getItemParams(MAILBOX_LABEL_IDS.ALL_MAIL)\n        },\n        {\n            icon: 'folder-label',\n            text: c('Link').t`Folders/labels`,\n            className: 'alignleft',\n            type: 'button',\n            onClick() {\n                redirectTo('/settings/labels');\n            }\n        },\n        ...labels.map(({ ID = '', Name, Exclusive, Color }) => ({\n            icon: Exclusive === LABEL_EXCLUSIVE.LABEL ? 'label' : 'folder',\n            text: Name,\n            color: Color,\n            ...getItemParams(ID)\n        }))\n    ];\n\n    const handleCompose = () => {\n        onCompose({ action: MESSAGE_ACTIONS.NEW });\n    };\n\n    return (\n        <div className=\"sidebar flex flex-column noprint\" data-expanded={expanded}>\n            <div className=\"nodesktop notablet\">\n                <MainLogo url=\"/inbox\" />\n            </div>\n            <div className=\"pl1 pr1 mb1\">\n                <PrimaryButton className=\"w100 bold\" onClick={handleCompose}>{c('Action').t`Compose`}</PrimaryButton>\n            </div>\n            <nav className=\"navigation mw100 flex-item-fluid scroll-if-needed\">\n                <NavMenu list={list} className=\"mt0\" />\n            </nav>\n        </div>\n    );\n};\n\nexport default PrivateSidebar;\n","import React, { useRef, useState, useEffect, ReactNode } from 'react';\nimport { c } from 'ttag';\nimport { AppsSidebar, StorageSpaceStatus, MainAreaContext, Href } from 'react-components';\nimport { normalize } from 'proton-shared/lib/helpers/string';\n\nimport PrivateHeader from '../header/PrivateHeader';\nimport PrivateSidebar from '../sidebar/PrivateSidebar';\nimport { Location, History } from 'history';\nimport { OnCompose } from '../../containers/ComposerContainer';\n\ninterface Props {\n    children: ReactNode;\n    location: Location;\n    history: History;\n    labelID: string;\n    onCompose: OnCompose;\n}\n\nconst PrivateLayout = ({ children, location, history, labelID, onCompose }: Props) => {\n    const mainAreaRef = useRef<HTMLDivElement>(null);\n    const [expanded, setExpand] = useState(false);\n\n    const handleSearch = (keyword: string) => {\n        console.log(normalize(keyword));\n    };\n\n    useEffect(() => {\n        setExpand(false);\n    }, [location.pathname]);\n\n    return (\n        <div className=\"flex flex-nowrap no-scroll\">\n            <AppsSidebar\n                items={[\n                    <StorageSpaceStatus\n                        key=\"storage\"\n                        upgradeButton={\n                            <Href\n                                url=\"/settings/subscription\"\n                                target=\"_self\"\n                                className=\"pm-button pm-button--primary pm-button--small\"\n                            >\n                                {c('Action').t`Upgrade`}\n                            </Href>\n                        }\n                    ></StorageSpaceStatus>\n                ]}\n            />\n            <div className=\"content flex-item-fluid reset4print\">\n                <PrivateHeader\n                    location={location}\n                    history={history}\n                    expanded={expanded}\n                    onToggleExpand={() => setExpand(!expanded)}\n                    onSearch={handleSearch}\n                />\n                <div className=\"flex flex-nowrap\">\n                    <PrivateSidebar labelID={labelID} expanded={expanded} location={location} onCompose={onCompose} />\n                    <div className=\"main flex-item-fluid scroll-smooth-touch\" ref={mainAreaRef}>\n                        <div className=\"flex-item-fluid\">\n                            <MainAreaContext.Provider value={mainAreaRef}>{children}</MainAreaContext.Provider>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default PrivateLayout;\n","import { LABEL_IDS_TO_HUMAN, LABEL_IDS_TO_I18N } from '../constants';\nimport { MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\nimport { Label } from '../models/label';\nimport { toMap } from 'proton-shared/lib/helpers/object';\n\nexport const getHumanLabelID = (labelID: string) => LABEL_IDS_TO_HUMAN[labelID as MAILBOX_LABEL_IDS] || labelID;\n\nexport const getI18nLabelID = (labelID: string) => LABEL_IDS_TO_I18N[labelID as MAILBOX_LABEL_IDS] || labelID;\n\nexport const getLabelName = (labelID: string, labels: Label[]): string => {\n    if (labelID in LABEL_IDS_TO_HUMAN) {\n        return getI18nLabelID(labelID);\n    }\n\n    const labelsMap: { [key: string]: Label } = toMap(labels) as any;\n    if (labelID in labelsMap) {\n        return labelsMap[labelID].Name || labelID;\n    }\n\n    return labelID;\n};\n\nexport const isCustomLabel = (labelID: string) =>\n    !Object.values(MAILBOX_LABEL_IDS).includes(labelID as MAILBOX_LABEL_IDS);\n","import { Page } from '../models/tools';\n\nexport const pageCount = (page: Page) => Math.ceil(page.total / page.size);\n\nexport const expectedPageLength = (page: Page) => {\n    if (page.total === 0) {\n        return 0;\n    }\n    if (page.total % page.size === 0) {\n        return page.size;\n    }\n    if (pageCount(page) - 1 === page.page) {\n        return page.total % page.size;\n    }\n    return page.size;\n};\n","import { useState, useEffect, useMemo } from 'react';\nimport { useApi, useEventManager } from 'react-components';\nimport { queryConversations, getConversation } from 'proton-shared/lib/api/conversations';\nimport { queryMessageMetadata, getMessage } from 'proton-shared/lib/api/messages';\nimport { EVENT_ACTIONS } from 'proton-shared/lib/constants';\nimport { toMap } from 'proton-shared/lib/helpers/object';\n\nimport { Conversation } from '../models/conversation';\nimport { sort as sortElements, hasLabel } from '../helpers/elements';\nimport { Element } from '../models/element';\nimport { Page, Filter, Sort } from '../models/tools';\nimport { expectedPageLength } from '../helpers/paging';\nimport { ElementEvent, Event, ElementCountEvent, ConversationEvent, MessageEvent } from '../models/event';\n\ninterface Options {\n    conversationMode: boolean;\n    labelID: string;\n    page: Page;\n    sort: Sort;\n    filter: Filter;\n}\n\ninterface CacheParams {\n    labelID: string;\n    sort: Sort;\n    filter: Filter;\n}\n\ninterface Cache {\n    params: CacheParams;\n    page: Page;\n    pages: number[];\n    elements: { [ID: string]: Element };\n}\n\nconst emptyCache = (page: Page, params: CacheParams): Cache => ({ params, page, elements: {}, pages: [] });\n\nexport const useElements = ({\n    conversationMode,\n    labelID,\n    page,\n    sort,\n    filter\n}: Options): [string, Conversation[], boolean, number] => {\n    const api = useApi();\n    const { subscribe } = useEventManager();\n    const [loading, setLoading] = useState(false);\n    const [localCache, setLocalCache] = useState<Cache>(emptyCache(page, { labelID, sort, filter }));\n\n    // Compute the conversations list from the cache\n    const elements = useMemo(() => {\n        // Getting all params from the cache and not from scoped params\n        // To prevent any desynchronization between cache and the output of the memo\n        const {\n            params: { labelID, sort },\n            page\n        } = localCache;\n        const minPage = localCache.pages.reduce((acc, page) => (page < acc ? page : acc), localCache.pages[0]);\n        const startIndex = (page.page - minPage) * page.size;\n        const endIndex = startIndex + page.size;\n        const elementsArray = Object.values(localCache.elements);\n        const filtered = elementsArray.filter((element) => hasLabel(element, labelID));\n        const sorted = sortElements(filtered, sort, labelID);\n        return sorted.slice(startIndex, endIndex);\n    }, [localCache]);\n\n    const total = useMemo(() => localCache.page.total, [localCache.page.total]);\n\n    const paramsChanged = () =>\n        labelID !== localCache.params.labelID || sort !== localCache.params.sort || filter !== localCache.params.filter;\n\n    const pageCached = () => localCache.pages.includes(page.page);\n\n    const pageIsConsecutive = () =>\n        localCache.pages.some((p) => p === page.page || p === page.page - 1 || p === page.page + 1);\n\n    const isExpectedLength = () => elements.length === expectedPageLength({ ...page, total });\n\n    const shouldResetCache = () => !loading && (paramsChanged() || !pageIsConsecutive());\n\n    const shouldSendRequest = () => !loading && (shouldResetCache() || !pageCached() || !isExpectedLength());\n\n    const queryElement = async (elementID: string): Promise<Element> => {\n        const query = conversationMode ? getConversation : getMessage;\n        const result = await api(query(elementID));\n        return conversationMode ? result.Conversation : result.Message;\n    };\n\n    const queryElements = async (): Promise<{ Total: number; Elements: Element[] }> => {\n        const query = conversationMode ? queryConversations : queryMessageMetadata;\n        const result = await api(\n            query({\n                Page: page.page,\n                PageSize: page.size,\n                Limit: page.limit,\n                LabelID: labelID,\n                Sort: sort.sort,\n                Desc: sort.desc ? 1 : 0,\n                // Begin,\n                // End,\n                // BeginID,\n                // EndID,\n                // Keyword,\n                // To,\n                // From,\n                // Subject,\n                // Attachments,\n                // Starred,\n                Unread: filter.Unread\n                // AddressID,\n                // ID,\n                // AutoWildcard\n            } as any)\n        );\n        return {\n            Total: result.Total,\n            Elements: conversationMode ? result.Conversations : result.Messages\n        };\n    };\n\n    const resetCache = () => setLocalCache(emptyCache(page, { labelID, sort, filter }));\n\n    const load = async () => {\n        setLoading(true);\n        try {\n            const { Total, Elements } = await queryElements();\n            setLocalCache(\n                (localCache: Cache): Cache => {\n                    return {\n                        ...localCache,\n                        page: {\n                            ...localCache.page,\n                            page: page.page,\n                            total: Total\n                        },\n                        pages: [...localCache.pages, page.page],\n                        elements: {\n                            ...localCache.elements,\n                            ...(toMap(Elements, 'ID') as { [ID: string]: Element })\n                        }\n                    };\n                }\n            );\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    // Main effect watching all inputs and responsible to trigger actions on the cache\n    useEffect(() => {\n        shouldResetCache() && resetCache();\n        shouldSendRequest() && load();\n    }, [labelID, page, sort, filter]);\n\n    // Listen to event manager and update de cache\n    useEffect(\n        () => {\n            return subscribe(\n                async ({ Conversations = [], Messages = [], ConversationCounts = [], MessageCounts = [] }: Event) => {\n                    const Elements: ElementEvent[] = conversationMode ? Conversations : Messages;\n                    const Counts: ElementCountEvent[] = conversationMode ? ConversationCounts : MessageCounts;\n\n                    const count = Counts.find((count) => count.LabelID === labelID);\n\n                    console.log('event', Elements, count);\n\n                    const { toDelete, toUpdate, toCreate } = Elements.reduce(\n                        (acc, event) => {\n                            const { ID, Action } = event;\n                            const Element = conversationMode\n                                ? (event as ConversationEvent).Conversation\n                                : (event as MessageEvent).Message;\n                            switch (Action) {\n                                case EVENT_ACTIONS.DELETE:\n                                    acc.toDelete.push(ID);\n                                    break;\n                                case EVENT_ACTIONS.UPDATE_DRAFT:\n                                case EVENT_ACTIONS.UPDATE_FLAGS:\n                                    acc.toUpdate.push({ ID, ...Element });\n                                    break;\n                                case EVENT_ACTIONS.CREATE:\n                                    acc.toCreate.push(Element);\n                                    break;\n                            }\n                            return acc;\n                        },\n                        { toDelete: [] as string[], toUpdate: [] as Element[], toCreate: [] as Element[] }\n                    );\n\n                    const toUpdateCompleted = await Promise.all(\n                        toUpdate.map(async (element) => {\n                            const elementID = element.ID || '';\n                            const existingElement = localCache.elements[elementID];\n\n                            return existingElement ? { ...existingElement, ...element } : queryElement(elementID);\n                        })\n                    );\n\n                    setLocalCache((localCache) => {\n                        const newReplacements: { [ID: string]: Element } = {};\n\n                        [...toCreate, ...toUpdateCompleted].forEach((element) => {\n                            newReplacements[element.ID || ''] = element;\n                        });\n                        const newElements = {\n                            ...localCache.elements,\n                            ...newReplacements\n                        };\n                        toDelete.forEach((elementID) => {\n                            delete newElements[elementID];\n                        });\n\n                        return {\n                            ...localCache,\n                            elements: newElements,\n                            page: {\n                                ...localCache.page,\n                                total: count ? count.Total : localCache.page.total\n                            }\n                        };\n                    });\n                }\n            );\n        },\n        // Having the cache in dependency will subscribe / unsubscribe to the eventmanager many times\n        // But it's mandatory for the function to have the reference of the current localCache\n        [localCache]\n    );\n\n    return [localCache.params.labelID, elements, loading, localCache.page.total];\n};\n","import { Location } from 'history';\n\nexport const getSearchParams = (location: Location): { [key: string]: string } => {\n    const params = new URLSearchParams(location.search);\n\n    const result: { [key: string]: string } = {};\n\n    params.forEach((value, key) => {\n        result[key] = value;\n    });\n\n    return result;\n};\n\nexport const changeSearchParams = (location: Location, newParams: { [key: string]: string | undefined }) => {\n    const params = new URLSearchParams(location.search);\n\n    for (const key in newParams) {\n        if (newParams[key] === undefined) {\n            params.delete(key);\n        } else {\n            params.set(key, newParams[key] as string);\n        }\n    }\n\n    const queryString = params.toString();\n    const urlFragment = (queryString === '' ? '' : '?') + queryString;\n\n    return location.pathname + urlFragment;\n};\n","import { Sort, Filter } from '../models/tools';\nimport { getSearchParams, changeSearchParams } from './url';\nimport { Location } from 'history';\nimport { getHumanLabelID } from './labels';\n\nexport const setPathInUrl = (location: Location, labelID: string, elementID?: string): Location => {\n    const urlFragment = elementID === undefined ? '' : `/${elementID}`;\n    return {\n        ...location,\n        pathname: `/${getHumanLabelID(labelID)}${urlFragment}`\n    };\n};\n\nconst stringToPage = (string: string | undefined): number => {\n    if (string === undefined) {\n        return 0;\n    }\n    const pageNumber = parseInt(string, 10);\n    if (!isNaN(pageNumber)) {\n        return pageNumber - 1;\n    }\n    return 0;\n};\n\nconst stringToSort = (string: string | undefined): Sort => {\n    switch (string) {\n        case '-size':\n            return { sort: 'Size', desc: true };\n        case 'size':\n            return { sort: 'Size', desc: false };\n        case 'date':\n            return { sort: 'Time', desc: false };\n        default:\n            return { sort: 'Time', desc: true };\n    }\n};\n\nconst sortToString = (sort: Sort): string | undefined =>\n    sort.sort === 'Time' ? (sort.desc ? undefined : 'date') : sort.desc ? '-size' : 'size';\n\nconst stringToFilter = (string: string | undefined): Filter => {\n    switch (string) {\n        case 'read':\n            return { Unread: 0 };\n        case 'unread':\n            return { Unread: 1 };\n        default:\n            return {};\n    }\n};\n\nconst filterToString = (filter: Filter): string | undefined =>\n    filter.Unread === undefined ? undefined : filter.Unread === 0 ? 'read' : 'unread';\n\nexport const pageFromUrl = (location: Location) => stringToPage(getSearchParams(location).page);\n\nexport const sortFromUrl = (location: Location) => stringToSort(getSearchParams(location).sort);\n\nexport const filterFromUrl = (location: Location) => stringToFilter(getSearchParams(location).filter);\n\nexport const setPageInUrl = (location: Location, page: number) =>\n    changeSearchParams(location, { page: page === 0 ? undefined : String(page + 1) });\n\nexport const setSortInUrl = (location: Location, sort: Sort) =>\n    changeSearchParams(location, { sort: sortToString(sort) });\n\nexport const setFilterInUrl = (location: Location, filter: Filter) =>\n    changeSearchParams(location, { filter: filterToString(filter) });\n","import React from 'react';\n\nconst ToolbarSeparator = () => <span className=\"toolbar-separator\" />;\n\nexport default ToolbarSeparator;\n","import React, { ReactNode } from 'react';\nimport { classnames } from 'react-components';\n\ninterface Props {\n    disabled?: boolean;\n    loading?: boolean;\n    children: ReactNode;\n    className?: string;\n    title?: string;\n    [rest: string]: any;\n}\n\nconst ToolbarButton = ({ children, loading = false, disabled = false, className = '', ...rest }: Props) => {\n    return (\n        <button\n            type=\"button\"\n            disabled={disabled || loading}\n            className={classnames(['toolbar-button', className])}\n            {...rest}\n        >\n            {children}\n        </button>\n    );\n};\n\nexport default ToolbarButton;\n","import React from 'react';\nimport { MESSAGE_BUTTONS } from 'proton-shared/lib/constants';\nimport { Icon, useApi, useEventManager, useLoading } from 'react-components';\nimport { markMessageAsRead, markMessageAsUnread } from 'proton-shared/lib/api/messages';\nimport { markConversationsAsRead, markConversationsAsUnread } from 'proton-shared/lib/api/conversations';\nimport { c } from 'ttag';\n\nimport ToolbarButton from './ToolbarButton';\nimport { getCurrentType } from '../../helpers/elements';\nimport { ELEMENT_TYPES } from '../../constants';\n\nconst UNREAD = 0;\nconst READ = 1;\n\ninterface Props {\n    mailSettings: any;\n    selectedIDs: string[];\n    labelID: string;\n}\n\nconst ReadUnreadButtons = ({ mailSettings, labelID, selectedIDs = [] }: Props) => {\n    const api = useApi();\n    const { call } = useEventManager();\n    const { MessageButtons = MESSAGE_BUTTONS.READ_UNREAD } = mailSettings;\n    const type = getCurrentType({ mailSettings, labelID });\n    const [loading, withLoading] = useLoading();\n\n    const markAs = async (status = UNREAD) => {\n        const isUnread = status === UNREAD;\n        const action =\n            type === ELEMENT_TYPES.CONVERSATION\n                ? isUnread\n                    ? markConversationsAsUnread\n                    : markConversationsAsRead\n                : isUnread\n                ? markMessageAsUnread\n                : markMessageAsRead;\n        await api(action(selectedIDs));\n        await call();\n    };\n\n    const buttons = [\n        <ToolbarButton\n            key=\"read\"\n            title={c('Action').t`Mark as read`}\n            loading={loading}\n            disabled={!selectedIDs.length}\n            onClick={() => withLoading(markAs(READ))}\n        >\n            <Icon className=\"toolbar-icon mauto\" name=\"read\" />\n        </ToolbarButton>,\n        <ToolbarButton\n            key=\"unread\"\n            title={c('Action').t`Mark as unread`}\n            loading={loading}\n            disabled={!selectedIDs.length}\n            onClick={() => withLoading(markAs(UNREAD))}\n        >\n            <Icon className=\"toolbar-icon mauto\" name=\"unread\" />\n        </ToolbarButton>\n    ];\n\n    if (MessageButtons === MESSAGE_BUTTONS.UNREAD_READ) {\n        buttons.reverse();\n    }\n\n    // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/20356\n    return <>{buttons}</>;\n};\n\nexport default ReadUnreadButtons;\n","import React, { ReactNode, useState } from 'react';\nimport { classnames, usePopperAnchor, DropdownButton, Dropdown, generateUID } from 'react-components';\n\ninterface Props {\n    autoClose?: boolean;\n    title?: string;\n    className?: string;\n    content?: ReactNode;\n    children: ({ onClose }: { onClose: () => void }) => ReactNode;\n    disabled?: boolean;\n    size?: string;\n    [rest: string]: any;\n}\n\nconst ToolbarDropdown = ({\n    title,\n    content,\n    className,\n    children,\n    autoClose = true,\n    disabled = false,\n    size = 'normal',\n    ...rest\n}: Props) => {\n    const [uid] = useState(generateUID('dropdown'));\n\n    const { anchorRef, isOpen, toggle, close } = usePopperAnchor();\n\n    return (\n        <>\n            <DropdownButton\n                title={title}\n                buttonRef={anchorRef}\n                isOpen={isOpen}\n                onClick={toggle}\n                hasCaret={true}\n                disabled={disabled}\n                caretClassName=\"toolbar-icon\"\n                className={classnames(['flex-item-noshrink toolbar-button toolbar-button--dropdown', className])}\n                {...rest}\n            >\n                {content}\n            </DropdownButton>\n            <Dropdown\n                id={uid}\n                size={size}\n                autoClose={autoClose}\n                isOpen={isOpen}\n                anchorRef={anchorRef}\n                onClose={close}\n                className=\"toolbar-dropdown\"\n            >\n                {children({ onClose: close })}\n            </Dropdown>\n        </>\n    );\n};\n\nexport default ToolbarDropdown;\n","import React from 'react';\nimport { Icon, DropdownMenu, DropdownMenuButton, useApi, useEventManager, useLoading } from 'react-components';\nimport { VIEW_LAYOUT } from 'proton-shared/lib/constants';\nimport { updateViewLayout } from 'proton-shared/lib/api/mailSettings';\nimport { c } from 'ttag';\n\nimport ToolbarDropdown from './ToolbarDropdown';\n\ninterface Props {\n    mailSettings: any;\n}\n\nconst LayoutDropdown = ({ mailSettings = {} }: Props) => {\n    const { ViewLayout = VIEW_LAYOUT.COLUMN } = mailSettings;\n\n    const api = useApi();\n    const { call } = useEventManager();\n    const [loading, withLoading] = useLoading();\n    const currentLayoutIcon = ViewLayout === VIEW_LAYOUT.COLUMN ? 'layout-columns' : 'layout-rows';\n\n    const updateLayout = async (viewLayout: number) => {\n        await api(updateViewLayout(viewLayout));\n        await call();\n    };\n\n    return (\n        <ToolbarDropdown\n            title={c('Action').t`Change layout`}\n            content={<Icon className=\"toolbar-icon\" name={currentLayoutIcon} />}\n        >\n            {() => (\n                <DropdownMenu>\n                    <DropdownMenuButton\n                        disabled={ViewLayout === VIEW_LAYOUT.COLUMN}\n                        loading={loading}\n                        className=\"alignleft\"\n                        onClick={() => withLoading(updateLayout(VIEW_LAYOUT.COLUMN))}\n                    >\n                        <Icon name=\"layout-columns\" className=\"mr0-5\" />\n                        {c('Action').t`Column layout`}\n                    </DropdownMenuButton>\n                    <DropdownMenuButton\n                        disabled={ViewLayout === VIEW_LAYOUT.ROW}\n                        loading={loading}\n                        className=\"alignleft\"\n                        onClick={() => withLoading(updateLayout(VIEW_LAYOUT.ROW))}\n                    >\n                        <Icon name=\"layout-rows\" className=\"mr0-5\" />\n                        {c('Action').t`Row layout`}\n                    </DropdownMenuButton>\n                </DropdownMenu>\n            )}\n        </ToolbarDropdown>\n    );\n};\n\nexport default LayoutDropdown;\n","import React from 'react';\nimport { Icon, useLoading, useNotifications, useEventManager, useApi } from 'react-components';\nimport { MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\nimport { labelMessages } from 'proton-shared/lib/api/messages';\nimport { labelConversations } from 'proton-shared/lib/api/conversations';\nimport { c } from 'ttag';\n\nimport ToolbarButton from './ToolbarButton';\nimport { getCurrentType } from '../../helpers/elements';\nimport { ELEMENT_TYPES } from '../../constants';\n\nconst { TRASH, SPAM, DRAFTS, ARCHIVE, SENT, INBOX, ALL_DRAFTS, ALL_SENT } = MAILBOX_LABEL_IDS;\n\ninterface Props {\n    labelID: string;\n    mailSettings: any;\n    selectedIDs: string[];\n}\n\nconst MoveButtons = ({ labelID = '', mailSettings = {}, selectedIDs = [] }: Props) => {\n    const { createNotification } = useNotifications();\n    const { call } = useEventManager();\n    const api = useApi();\n    const [loading, withLoading] = useLoading();\n    const type = getCurrentType({ mailSettings, labelID });\n\n    const handleMove = async (LabelID: string) => {\n        const action = type === ELEMENT_TYPES.CONVERSATION ? labelConversations : labelMessages;\n        await api(action({ LabelID, IDs: selectedIDs }));\n        await call();\n        createNotification({ text: c('Success').t`Elements moved` });\n    };\n\n    const displayTrash = ![DRAFTS, ALL_DRAFTS, TRASH].includes(labelID as MAILBOX_LABEL_IDS);\n    const displayInbox = ![SENT, ALL_SENT, DRAFTS, ALL_DRAFTS].includes(labelID as MAILBOX_LABEL_IDS);\n    const displayArchive = ![DRAFTS, ALL_DRAFTS, ARCHIVE].includes(labelID as MAILBOX_LABEL_IDS);\n    const displaySpam = ![SENT, ALL_SENT, SPAM].includes(labelID as MAILBOX_LABEL_IDS);\n\n    return (\n        <>\n            {displayTrash ? (\n                <ToolbarButton\n                    loading={loading}\n                    title={c('Action').t`Move to trash`}\n                    onClick={() => withLoading(handleMove(TRASH))}\n                >\n                    <Icon className=\"toolbar-icon mauto\" name=\"trash\" />\n                </ToolbarButton>\n            ) : null}\n            {displayInbox ? (\n                <ToolbarButton\n                    loading={loading}\n                    title={c('Action').t`Move to inbox`}\n                    onClick={() => withLoading(handleMove(INBOX))}\n                >\n                    <Icon className=\"toolbar-icon mauto\" name=\"inbox\" />\n                </ToolbarButton>\n            ) : null}\n            {displayArchive ? (\n                <ToolbarButton\n                    loading={loading}\n                    title={c('Action').t`Move to archive`}\n                    onClick={() => withLoading(handleMove(ARCHIVE))}\n                >\n                    <Icon className=\"toolbar-icon mauto\" name=\"archive\" />\n                </ToolbarButton>\n            ) : null}\n            {displaySpam ? (\n                <ToolbarButton\n                    loading={loading}\n                    title={c('Action').t`Move to spam`}\n                    onClick={() => withLoading(handleMove(SPAM))}\n                >\n                    <Icon className=\"toolbar-icon mauto\" name=\"spam\" />\n                </ToolbarButton>\n            ) : null}\n        </>\n    );\n};\n\nexport default MoveButtons;\n","import React from 'react';\nimport {\n    Icon,\n    useLoading,\n    useNotifications,\n    useEventManager,\n    useApi,\n    ConfirmModal,\n    ErrorButton,\n    useModals,\n    Alert\n} from 'react-components';\nimport { MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\nimport { deleteMessages, emptyLabel } from 'proton-shared/lib/api/messages';\nimport { deleteConversations } from 'proton-shared/lib/api/conversations';\nimport { c, msgid } from 'ttag';\n\nimport ToolbarButton from './ToolbarButton';\nimport { getCurrentType } from '../../helpers/elements';\nimport { ELEMENT_TYPES } from '../../constants';\n\nconst { TRASH, SPAM, DRAFTS, ALL_DRAFTS, ALL_MAIL, INBOX, SENT, ALL_SENT, ARCHIVE } = MAILBOX_LABEL_IDS;\n\ninterface Props {\n    labelID: string;\n    mailSettings: any;\n    selectedIDs: string[];\n}\n\nconst DeleteButton = ({ labelID = '', mailSettings = {}, selectedIDs = [] }: Props) => {\n    const { createNotification } = useNotifications();\n    const { createModal } = useModals();\n    const { call } = useEventManager();\n    const api = useApi();\n    const [loading, withLoading] = useLoading();\n    const displayDelete = [TRASH, SPAM, DRAFTS, ALL_DRAFTS, SENT, ALL_SENT].includes(labelID as MAILBOX_LABEL_IDS);\n    const displayEmpty = ![INBOX, SENT, ALL_SENT, ARCHIVE, ALL_MAIL].includes(labelID as MAILBOX_LABEL_IDS);\n    const type = getCurrentType({ mailSettings, labelID });\n\n    const handleDelete = async () => {\n        await new Promise((resolve, reject) => {\n            createModal(\n                <ConfirmModal\n                    title={c('Title').ngettext(msgid`Delete email`, `Delete emails`, selectedIDs.length)}\n                    confirm={(<ErrorButton type=\"submit\" icon={null}>{c('Action').t`Delete`}</ErrorButton>) as any}\n                    onConfirm={resolve}\n                    onClose={reject}\n                >\n                    <Alert type=\"warning\">\n                        {c('Info').ngettext(\n                            msgid`This action will permanently delete the selected email. Are you sure you want to delete this email?`,\n                            `This action will permanently delete the selected emails. Are you sure you want to delete these emails?`,\n                            selectedIDs.length\n                        )}\n                    </Alert>\n                </ConfirmModal>\n            );\n        });\n        const action = type === ELEMENT_TYPES.CONVERSATION ? deleteConversations : deleteMessages;\n        await api(action(selectedIDs));\n        await call();\n        createNotification({ text: c('Success').t`Elements deleted` });\n    };\n\n    const handleEmpty = async () => {\n        await new Promise((resolve, reject) => {\n            createModal(\n                <ConfirmModal\n                    title={c('Title').t`Empty folder`}\n                    confirm={(<ErrorButton type=\"submit\" icon={null}>{c('Action').t`Empty`}</ErrorButton>) as any}\n                    onConfirm={resolve}\n                    onClose={reject}\n                >\n                    <Alert type=\"warning\">{c('Info')\n                        .t`This action will permanently delete your emails. Are you sure you want to empty this folder?`}</Alert>\n                </ConfirmModal>\n            );\n        });\n        c;\n        await api(emptyLabel({ LabelID: labelID, AddressID: undefined }));\n        await call();\n        createNotification({ text: c('Success').t`Folder cleared` });\n    };\n\n    return (\n        <>\n            {displayDelete ? (\n                <ToolbarButton\n                    loading={loading}\n                    title={c('Action').t`Delete`}\n                    onClick={() => withLoading(handleDelete())}\n                >\n                    <Icon className=\"toolbar-icon mauto\" name=\"delete\" />\n                </ToolbarButton>\n            ) : null}\n            {displayEmpty ? (\n                <ToolbarButton\n                    loading={loading}\n                    title={c('Action').t`Empty folder`}\n                    onClick={() => withLoading(handleEmpty())}\n                >\n                    <Icon className=\"toolbar-icon mauto\" name=\"empty-folder\" />\n                </ToolbarButton>\n            ) : null}\n        </>\n    );\n};\n\nexport default DeleteButton;\n","import React from 'react';\nimport { DropdownMenu, DropdownMenuButton, Icon } from 'react-components';\nimport { c } from 'ttag';\n\nimport ToolbarDropdown from './ToolbarDropdown';\nimport { Sort } from '../../models/tools';\n\nconst ASC = 0;\nconst DESC = 1;\nconst TIME = 'Time';\nconst SIZE = 'Size';\n\nconst ICONS = {\n    [SIZE]: {\n        [ASC]: 'sort-small-large',\n        [DESC]: 'sort-large-small'\n    },\n    [TIME]: {\n        [ASC]: 'sort-old-new',\n        [DESC]: 'sort-new-old'\n    }\n};\n\ninterface Props {\n    loading?: boolean;\n    sort: Sort;\n    onSort: (sort: Sort) => void;\n}\n\nconst SortDropdown = ({ loading, sort: { sort, desc }, onSort }: Props) => {\n    return (\n        <ToolbarDropdown content={<Icon className=\"toolbar-icon\" name={ICONS[sort][desc ? DESC : ASC]} />}>\n            {() => (\n                <DropdownMenu>\n                    <DropdownMenuButton\n                        disabled={sort === SIZE && !desc}\n                        className=\"alignleft\"\n                        loading={loading}\n                        onClick={() => onSort({ sort: SIZE, desc: false })}\n                    >\n                        <Icon name={ICONS[SIZE][ASC]} className=\"mr0-5\" />\n                        {c('Action').t`Size: small to large`}\n                    </DropdownMenuButton>\n                    <DropdownMenuButton\n                        disabled={sort === SIZE && desc}\n                        className=\"alignleft\"\n                        loading={loading}\n                        onClick={() => onSort({ sort: SIZE, desc: true })}\n                    >\n                        <Icon name={ICONS[SIZE][DESC]} className=\"mr0-5\" />\n                        {c('Action').t`Size: large to small`}\n                    </DropdownMenuButton>\n                    <DropdownMenuButton\n                        disabled={sort === TIME && desc}\n                        className=\"alignleft\"\n                        loading={loading}\n                        onClick={() => onSort({ sort: TIME, desc: true })}\n                    >\n                        <Icon name={ICONS[TIME][DESC]} className=\"mr0-5\" />\n                        {c('Action').t`Date: new to old`}\n                    </DropdownMenuButton>\n                    <DropdownMenuButton\n                        disabled={sort === TIME && !desc}\n                        className=\"alignleft\"\n                        loading={loading}\n                        onClick={() => onSort({ sort: TIME, desc: false })}\n                    >\n                        <Icon name={ICONS[TIME][ASC]} className=\"mr0-5\" />\n                        {c('Action').t`Date: old to new`}\n                    </DropdownMenuButton>\n                </DropdownMenu>\n            )}\n        </ToolbarDropdown>\n    );\n};\n\nexport default SortDropdown;\n","import React from 'react';\nimport { DropdownMenu, DropdownMenuButton, Icon } from 'react-components';\nimport { c } from 'ttag';\n\nimport ToolbarDropdown from './ToolbarDropdown';\nimport { Filter } from '../../models/tools';\n\ninterface Props {\n    loading?: boolean;\n    filter: Filter;\n    onFilter: (filter: Filter) => void;\n}\n\nconst FilterDropdown = ({ loading, filter = {}, onFilter }: Props) => {\n    return (\n        <ToolbarDropdown content={<Icon className=\"toolbar-icon\" name=\"bullet-points\" />}>\n            {() => (\n                <DropdownMenu>\n                    <DropdownMenuButton\n                        disabled={Object.values(filter).length === 0}\n                        className=\"alignleft\"\n                        loading={loading}\n                        onClick={() => onFilter({})}\n                    >\n                        <Icon name=\"bullet-points\" className=\"mr0-5\" />\n                        {c('Action').t`Show all`}\n                    </DropdownMenuButton>\n                    <DropdownMenuButton\n                        disabled={filter.Unread === 1}\n                        className=\"alignleft\"\n                        loading={loading}\n                        onClick={() => onFilter({ Unread: 1 })}\n                    >\n                        <Icon name=\"unread\" className=\"mr0-5\" />\n                        {c('Action').t`Show unread`}\n                    </DropdownMenuButton>\n                    <DropdownMenuButton\n                        disabled={filter.Unread === 0}\n                        className=\"alignleft\"\n                        loading={loading}\n                        onClick={() => onFilter({ Unread: 0 })}\n                    >\n                        <Icon name=\"read\" className=\"mr0-5\" />\n                        {c('Action').t`Show read`}\n                    </DropdownMenuButton>\n                </DropdownMenu>\n            )}\n        </ToolbarDropdown>\n    );\n};\n\nexport default FilterDropdown;\n","import React from 'react';\nimport { Checkbox, DropdownMenu, DropdownMenuButton, Icon } from 'react-components';\nimport { c } from 'ttag';\n\nimport ToolbarDropdown from './ToolbarDropdown';\n\ninterface Props {\n    loading?: boolean;\n    disabled?: boolean;\n    checked: boolean;\n    onCheck: (checked?: boolean) => void;\n}\n\nconst SelectAll = ({ loading, disabled, checked, onCheck }: Props) => {\n    return (\n        <>\n            <Checkbox\n                className=\"flex pl1\"\n                checked={checked}\n                disabled={disabled}\n                loading={loading}\n                onChange={({ target }) => onCheck(target.checked)}\n            />\n            <ToolbarDropdown\n                disabled={disabled}\n                loading={loading}\n                title={c('Title').t`Open actions dropdown`}\n                content=\"\"\n            >\n                {() => (\n                    <DropdownMenu>\n                        <DropdownMenuButton className=\"alignleft\" onClick={() => onCheck()}>\n                            <Icon name=\"show-all-emails\" className=\"mr0-5\" />\n                            {c('Action').t`Select all`}\n                        </DropdownMenuButton>\n                        <DropdownMenuButton className=\"alignleft\" onClick={() => onCheck()}>\n                            <Icon name=\"unread\" className=\"mr0-5\" />\n                            {c('Action').t`All unread`}\n                        </DropdownMenuButton>\n                        <DropdownMenuButton className=\"alignleft\" onClick={() => onCheck()}>\n                            <Icon name=\"read\" className=\"mr0-5\" />\n                            {c('Action').t`All read`}\n                        </DropdownMenuButton>\n                        <DropdownMenuButton className=\"alignleft\" onClick={() => onCheck()}>\n                            <Icon name=\"star\" className=\"mr0-5\" />\n                            {c('Action').t`All unstarred`}\n                        </DropdownMenuButton>\n                        <DropdownMenuButton className=\"alignleft\" onClick={() => onCheck()}>\n                            <Icon name=\"starfull\" className=\"mr0-5\" />\n                            {c('Action').t`All starred`}\n                        </DropdownMenuButton>\n                    </DropdownMenu>\n                )}\n            </ToolbarDropdown>\n        </>\n    );\n};\n\nexport default SelectAll;\n","import React, { useState } from 'react';\nimport {\n    LabelModal,\n    SearchInput as UntypedSearchInput,\n    Icon,\n    useLabels,\n    useModals,\n    PrimaryButton,\n    classnames,\n    Tooltip,\n    useLoading,\n    useApi,\n    useNotifications,\n    useEventManager\n} from 'react-components';\nimport { LABEL_EXCLUSIVE, MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\nimport { c } from 'ttag';\nimport { normalize } from 'proton-shared/lib/helpers/string';\nimport { labelMessages } from 'proton-shared/lib/api/messages';\nimport { labelConversations } from 'proton-shared/lib/api/conversations';\n\nimport { ELEMENT_TYPES } from '../../constants';\nimport { Label } from '../../models/label';\n\nimport './MoveDropdown.scss';\n\nconst SearchInput = UntypedSearchInput as any;\n\nconst { INBOX, TRASH, SPAM, ARCHIVE } = MAILBOX_LABEL_IDS;\n\ninterface Props {\n    selectedIDs: string[];\n    type: string;\n    onClose: () => void;\n}\n\nconst MoveDropdown = ({ selectedIDs = [], type, onClose }: Props) => {\n    const { createNotification } = useNotifications();\n    const [loading, withLoading] = useLoading();\n    const api = useApi();\n    const { call } = useEventManager();\n    const { createModal } = useModals();\n    const [labels = []]: [Label[]] = useLabels();\n    const [search, updateSearch] = useState('');\n    const normSearch = normalize(search);\n    const folders = labels\n        .filter(({ Exclusive }) => Exclusive === LABEL_EXCLUSIVE.FOLDER)\n        .concat(\n            [\n                { ID: INBOX, Name: c('Mailbox').t`Inbox`, icon: 'inbox' },\n                { ID: ARCHIVE, Name: c('Mailbox').t`Archive`, icon: 'archive' },\n                { ID: SPAM, Name: c('Mailbox').t`Spam`, icon: 'spam' },\n                { ID: TRASH, Name: c('Mailbox').t`Trash`, icon: 'trash' }\n            ].filter(Boolean)\n        )\n        .filter(({ Name = '' }) => {\n            if (!search) {\n                return true;\n            }\n            const normName = normalize(Name);\n            return normName.includes(normSearch);\n        });\n\n    const handleMove = async (folder: Label) => {\n        const action = type === ELEMENT_TYPES.CONVERSATION ? labelConversations : labelMessages;\n        await api(action({ LabelID: folder.ID, IDs: selectedIDs }));\n        await call();\n        onClose();\n        createNotification({ text: c('Success').t`Elements moved to ${folder.Name}` });\n    };\n\n    return (\n        <div className=\"p1\">\n            <div className=\"flex flex-spacebetween flex-items-center mb1\">\n                <label htmlFor=\"filter-folders\" className=\"bold\">{c('Label').t`Move to`}</label>\n                <Tooltip title={c('Title').t`Create folder`}>\n                    <PrimaryButton\n                        className=\"pm-button--small pm-button--for-smallicon\"\n                        onClick={() => {\n                            createModal(<LabelModal type=\"folder\" label={null} />);\n                        }}\n                    >\n                        <Icon name=\"folder\" fill=\"light\" className=\"flex-item-noshrink mr0-25\" />+\n                    </PrimaryButton>\n                </Tooltip>\n            </div>\n            <div className=\"mb1\">\n                <SearchInput\n                    autoFocus={true}\n                    value={search}\n                    onChange={updateSearch}\n                    id=\"filter-folders\"\n                    placeholder={c('Placeholder').t`Filter folders`}\n                />\n            </div>\n            <div className=\"scroll-if-needed scroll-smooth-touch moveDropdown-list-container\">\n                <ul className=\"unstyled mt0 mb0\">\n                    {folders.map((folder, index) => {\n                        return (\n                            <li key={folder.ID} className={classnames([index < folders.length - 1 && 'border-bottom'])}>\n                                <button\n                                    type=\"button\"\n                                    disabled={loading}\n                                    className=\"w100 flex flex-nowrap flex-items-center pt0-5 pb0-5\"\n                                    onClick={() => withLoading(handleMove(folder))}\n                                >\n                                    <Icon name=\"folder\" color={folder.Color} className=\"flex-item-noshrink mr0-5\" />\n                                    <span className=\"ellipsis\" title={folder.Name}>\n                                        {folder.Name}\n                                    </span>\n                                </button>\n                            </li>\n                        );\n                    })}\n                </ul>\n            </div>\n        </div>\n    );\n};\n\nexport default MoveDropdown;\n","import React, { useState, ChangeEvent } from 'react';\nimport { c } from 'ttag';\nimport {\n    SearchInput as UntypedSearchInput,\n    Icon,\n    useLabels,\n    useModals,\n    PrimaryButton,\n    LabelModal,\n    classnames,\n    Tooltip,\n    useLoading,\n    useApi,\n    useNotifications,\n    Checkbox,\n    useEventManager,\n    generateUID\n} from 'react-components';\nimport { LABEL_EXCLUSIVE } from 'proton-shared/lib/constants';\nimport { labelMessages, unlabelMessages } from 'proton-shared/lib/api/messages';\nimport { labelConversations, unlabelConversations } from 'proton-shared/lib/api/conversations';\nimport { normalize } from 'proton-shared/lib/helpers/string';\n\nimport { ELEMENT_TYPES } from '../../constants';\nimport { Label } from '../../models/label';\n\nimport './LabelDropdown.scss';\n\nconst SearchInput = UntypedSearchInput as any;\n\ninterface Props {\n    selectedIDs: string[];\n    type: string;\n    onClose: () => void;\n}\n\nconst LabelDropdown = ({ selectedIDs = [], type, onClose }: Props) => {\n    const [uid] = useState(generateUID('label-dropdown'));\n    const { createNotification } = useNotifications();\n    const [loading, withLoading] = useLoading();\n    const api = useApi();\n    const { call } = useEventManager();\n    const { createModal } = useModals();\n    const [labels = []]: [Label[]] = useLabels();\n    const [search, updateSearch] = useState('');\n    const [lastChecked, setLastChecked] = useState(''); // Store ID of the last label ID checked\n    const [alsoArchive, updateAlsoArchive] = useState(false);\n    const [selectedLabelIDs, updateSelectedLabelIDs] = useState<{ [labelID: string]: boolean }>({}); // TODO\n\n    const normSearch = normalize(search);\n    const list = labels\n        .filter(({ Exclusive }) => Exclusive === LABEL_EXCLUSIVE.LABEL)\n        .filter(({ Name = '' }) => {\n            if (!search) {\n                return true;\n            }\n            const normName = normalize(Name);\n            return normName.includes(normSearch);\n        });\n\n    const handleApply = async () => {\n        const labelAction = type === ELEMENT_TYPES.MESSAGE ? labelMessages : labelConversations;\n        const unlabelAction = type === ELEMENT_TYPES.MESSAGE ? unlabelMessages : unlabelConversations;\n        // TODO to improve: we call label / unlabel too much\n        const promises = list.map(({ ID: LabelID = '' }) => {\n            if (selectedLabelIDs[LabelID]) {\n                return api(labelAction({ LabelID, IDs: selectedIDs }));\n            } else {\n                return api(unlabelAction({ LabelID, IDs: selectedIDs }));\n            }\n        });\n        await Promise.all(promises);\n        await call();\n        onClose();\n        createNotification({ text: c('Success').t`Labels applied` });\n    };\n\n    const handleCheck = (labelID: string) => ({ target, nativeEvent }: ChangeEvent) => {\n        const { shiftKey } = nativeEvent as any;\n        const labelIDs = [labelID];\n\n        if (lastChecked && shiftKey) {\n            const start = list.findIndex(({ ID }) => ID === labelID);\n            const end = list.findIndex(({ ID }) => ID === lastChecked);\n            labelIDs.push(...list.slice(Math.min(start, end), Math.max(start, end) + 1).map(({ ID = '' }) => ID));\n        }\n\n        setLastChecked(labelID);\n        const update = labelIDs.reduce((acc, ID) => {\n            acc[ID] = (target as HTMLInputElement).checked;\n            return acc;\n        }, Object.create(null));\n\n        console.log('handleCheck', selectedLabelIDs, update);\n\n        updateSelectedLabelIDs({ ...selectedLabelIDs, ...update });\n    };\n\n    return (\n        <div className=\"p1\">\n            <div className=\"flex flex-spacebetween flex-items-center mb1\">\n                <label htmlFor=\"filter-labels\" className=\"bold\">{c('Label').t`Label as`}</label>\n                <Tooltip title={c('Title').t`Create label`}>\n                    <PrimaryButton\n                        className=\"pm-button--small pm-button--for-smallicon\"\n                        onClick={() => {\n                            createModal(<LabelModal type=\"label\" label={null} />);\n                        }}\n                    >\n                        <Icon name=\"label\" fill=\"light\" className=\"flex-item-noshrink mr0-25\" />+\n                    </PrimaryButton>\n                </Tooltip>\n            </div>\n            <div className=\"mb1\">\n                <SearchInput\n                    autoFocus={true}\n                    value={search}\n                    onChange={updateSearch}\n                    id=\"filter-labels\"\n                    placeholder={c('Placeholder').t`Filter labels`}\n                />\n            </div>\n            <div className=\"scroll-if-needed scroll-smooth-touch mb1 labelDropdown-list-container\">\n                <ul className=\"unstyled mt0 mb0\">\n                    {list.map(({ ID = '', Name = '', Color = '' }, index) => {\n                        // The dropdown is several times in the view, native html ids has to be different each time\n                        const lineId = `${uid}-${ID}`;\n                        return (\n                            <li\n                                key={lineId}\n                                className={classnames([\n                                    'w100 flex flex-nowrap flex-spacebetween flex-items-center pt0-5 pb0-5',\n                                    index < list.length - 1 && 'border-bottom'\n                                ])}\n                            >\n                                <div className=\"flex flex-nowrap flex-spacebetween flex-items-center\">\n                                    <Icon name=\"label\" color={Color} className=\"flex-item-noshrink mr0-5\" />\n                                    <label htmlFor={lineId} title={Name} className=\"ellipsis\">\n                                        {Name}\n                                    </label>\n                                </div>\n                                <Checkbox\n                                    className=\"flex-item-noshrink\"\n                                    id={lineId}\n                                    checked={selectedLabelIDs[ID] || false}\n                                    onChange={handleCheck(ID)}\n                                />\n                            </li>\n                        );\n                    })}\n                </ul>\n            </div>\n            <div className=\"mb1 flex flex-spacebetween\">\n                <label htmlFor=\"alsoArchive\">{c('Label').t`Also archive`}</label>\n                <Checkbox\n                    id=\"alsoArchive\"\n                    checked={alsoArchive}\n                    onChange={({ target }) => updateAlsoArchive(target.checked)}\n                />\n            </div>\n            <div>\n                <PrimaryButton className=\"w100\" loading={loading} onClick={() => withLoading(handleApply())}>\n                    {c('Action').t`Apply`}\n                </PrimaryButton>\n            </div>\n        </div>\n    );\n};\n\nexport default LabelDropdown;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon } from 'react-components';\n\nimport ToolbarButton from './ToolbarButton';\n\ninterface Props {\n    onClick: () => void;\n}\n\nconst BackButton = ({ onClick }: Props) => {\n    return (\n        <ToolbarButton onClick={onClick}>\n            <Icon className=\"toolbar-icon mauto\" name=\"arrow-left\" />\n        </ToolbarButton>\n    );\n};\n\nBackButton.propTypes = {\n    onClick: PropTypes.func.isRequired\n};\n\nexport default BackButton;\n","import React from 'react';\nimport { Icon, DropdownMenu, DropdownMenuButton } from 'react-components';\nimport { c } from 'ttag';\n\nimport ToolbarButton from './ToolbarButton';\nimport ToolbarDropdown from './ToolbarDropdown';\n\nimport { Page } from '../../models/tools';\nimport { pageCount } from '../../helpers/paging';\n\ninterface Props {\n    loading: boolean;\n    page: Page;\n    onPage: (page: number) => void;\n}\n\nconst PagingControls = ({ loading, page, onPage }: Props) => {\n    const setPage = (pageNumber: number) => onPage(pageNumber);\n    const handleNext = () => setPage(page.page + 1);\n    const handlePrevious = () => setPage(page.page - 1);\n    const handlePage = (newPage: number) => () => setPage(newPage);\n    const count = pageCount(page);\n\n    return (\n        <>\n            <ToolbarButton\n                loading={loading}\n                disabled={page.page <= 0}\n                title={c('Action').t`Previous`}\n                onClick={handlePrevious}\n            >\n                <Icon className=\"toolbar-icon rotateZ-90 mauto\" name=\"caret\" />\n            </ToolbarButton>\n            <ToolbarDropdown\n                title={c('Action').t`Change layout`}\n                content={String(page.page + 1)}\n                disabled={count <= 1}\n                size=\"narrow\"\n            >\n                {() => (\n                    <DropdownMenu>\n                        {[...Array(count)].map((_, i) => (\n                            <DropdownMenuButton\n                                key={i}\n                                loading={loading}\n                                disabled={page.page === i}\n                                onClick={handlePage(i)}\n                            >\n                                {i + 1}\n                            </DropdownMenuButton>\n                        ))}\n                    </DropdownMenu>\n                )}\n            </ToolbarDropdown>\n            <ToolbarButton\n                loading={loading}\n                disabled={page.page >= count - 1}\n                title={c('Action').t`Next`}\n                onClick={handleNext}\n            >\n                <Icon className=\"toolbar-icon rotateZ-270 mauto\" name=\"caret\" />\n            </ToolbarButton>\n        </>\n    );\n};\n\nexport default PagingControls;\n","import React from 'react';\nimport { Icon } from 'react-components';\n\nimport ToolbarSeparator from './ToolbarSeparator';\nimport ReadUnreadButtons from './ReadUnreadButtons';\nimport ToolbarDropdown from './ToolbarDropdown';\nimport LayoutDropdown from './LayoutDropdown';\nimport MoveButtons from './MoveButtons';\nimport DeleteButton from './DeleteButton';\nimport SortDropdown from './SortDropdown';\nimport FilterDropdown from './FilterDropdown';\nimport SelectAll from './SelectAll';\nimport MoveDropdown from '../dropdown/MoveDropdown';\nimport LabelDropdown from '../dropdown/LabelDropdown';\nimport BackButton from './BackButton';\nimport PagingControls from './PagingControls';\nimport { getCurrentType } from '../../helpers/elements';\nimport { isColumnMode } from '../../helpers/mailSettings';\nimport { Page, Sort, Filter } from '../../models/tools';\n\nimport './Toolbar.scss';\n\ninterface Props {\n    loading?: boolean;\n    checkAll: boolean;\n    onCheckAll: () => void;\n    labelID: string;\n    elementID?: string;\n    selectedIDs: string[];\n    mailSettings: any;\n    page: Page;\n    onPage: (page: number) => void;\n    sort: Sort;\n    onSort: (sort: Sort) => void;\n    filter: Filter;\n    onFilter: (filter: Filter) => void;\n    onBack: () => void;\n}\n\nconst Toolbar = ({\n    labelID = '',\n    elementID,\n    checkAll,\n    onCheckAll,\n    mailSettings = {},\n    selectedIDs = [],\n    loading = false,\n    onSort,\n    sort,\n    onFilter,\n    filter,\n    onBack,\n    page,\n    onPage\n}: Props) => {\n    const type = getCurrentType({ mailSettings, labelID });\n\n    const columnMode = isColumnMode(mailSettings);\n\n    return (\n        <nav className=\"toolbar flex noprint flex-spacebetween\">\n            <div className=\"flex\">\n                {columnMode || !elementID ? (\n                    <SelectAll checked={checkAll} onCheck={onCheckAll} loading={loading} />\n                ) : (\n                    <BackButton onClick={onBack} />\n                )}\n                <ToolbarSeparator />\n                <ReadUnreadButtons labelID={labelID} mailSettings={mailSettings} selectedIDs={selectedIDs} />\n                <ToolbarSeparator />\n                <MoveButtons labelID={labelID} mailSettings={mailSettings} selectedIDs={selectedIDs} />\n                <DeleteButton labelID={labelID} mailSettings={mailSettings} selectedIDs={selectedIDs} />\n                <ToolbarSeparator />\n                <ToolbarDropdown autoClose={false} content={<Icon className=\"toolbar-icon\" name=\"folder\" />}>\n                    {({ onClose }) => <MoveDropdown selectedIDs={selectedIDs} type={type} onClose={onClose} />}\n                </ToolbarDropdown>\n                <ToolbarDropdown autoClose={false} content={<Icon className=\"toolbar-icon\" name=\"label\" />}>\n                    {({ onClose }) => <LabelDropdown selectedIDs={selectedIDs} type={type} onClose={onClose} />}\n                </ToolbarDropdown>\n            </div>\n            <div className=\"flex\">\n                <FilterDropdown loading={loading} filter={filter} onFilter={onFilter} />\n                <SortDropdown loading={loading} sort={sort} onSort={onSort} />\n                <LayoutDropdown mailSettings={mailSettings} />\n                <ToolbarSeparator />\n                <PagingControls loading={loading} page={page} onPage={onPage} />\n            </div>\n        </nav>\n    );\n};\n\nexport default Toolbar;\n","import React, { ReactElement, ChangeEvent } from 'react';\nimport { Icon, classnames } from 'react-components';\n\ninterface Props {\n    children: ReactElement | string;\n    className: string;\n    checked: boolean;\n    onChange: (event: ChangeEvent) => void;\n}\n\nconst ItemCheckbox = ({ children, className, ...rest }: Props) => {\n    return (\n        <label className={classnames(['relative', className])}>\n            <input type=\"checkbox\" className=\"item-checkbox inner-ratio-container cursor-pointer m0\" {...rest} />\n            <span className=\"item-icon flex-item-noshrink rounded50 bg-white inline-flex\">\n                <span className=\"mauto item-abbr\">{children}</span>\n                <span className=\"item-icon-fakecheck mauto\">\n                    <Icon name=\"on\" className=\"fill-white\" />\n                </span>\n            </span>\n        </label>\n    );\n};\n\nexport default ItemCheckbox;\n","import { MIME_TYPES } from 'proton-shared/lib/constants';\nimport { hasBit, setBit } from 'proton-shared/lib/helpers/bitset';\nimport { identity } from 'proton-shared/lib/helpers/function';\n\nimport { MESSAGE_FLAGS, SIGNATURE_START } from '../../constants';\nimport { Message, MessageExtended } from '../../models/message';\nimport { toText } from '../parserHtml';\n\nconst {\n    FLAG_RECEIVED,\n    FLAG_SENT,\n    FLAG_RECEIPT_REQUEST,\n    FLAG_IMPORTED,\n    FLAG_REPLIED,\n    FLAG_REPLIEDALL,\n    FLAG_FORWARDED,\n    FLAG_INTERNAL,\n    FLAG_AUTO,\n    FLAG_E2E,\n    FLAG_SIGN,\n    FLAG_PUBLIC_KEY\n} = MESSAGE_FLAGS;\n\nconst { PLAINTEXT, MIME } = MIME_TYPES;\n\n/**\n * Check if a message has a mime type\n */\nconst hasMimeType = (type: MIME_TYPES) => ({ MIMEType }: Message = {}) => MIMEType === type;\n\nexport const isMIME = hasMimeType(MIME);\nexport const isPlainText = hasMimeType(PLAINTEXT);\nexport const isHTML = hasMimeType(MIME_TYPES.DEFAULT);\n\n/**\n * Check if a message has a flag in the flags bitmap\n */\nexport const hasFlag = (flag: number) => ({ Flags = 0 }: Message = {}) => hasBit(Flags, flag);\n\nexport const isRequestReadReceipt = hasFlag(FLAG_RECEIPT_REQUEST);\nexport const isImported = hasFlag(FLAG_IMPORTED);\nexport const isInternal = hasFlag(FLAG_INTERNAL);\nexport const isExternal = (message: Message) => !isInternal(message);\nexport const isAuto = hasFlag(FLAG_AUTO);\nexport const isReceived = hasFlag(FLAG_RECEIVED);\nexport const isSent = hasFlag(FLAG_SENT);\nexport const isReplied = hasFlag(FLAG_REPLIED);\nexport const isRepliedAll = hasFlag(FLAG_REPLIEDALL);\nexport const isForwarded = hasFlag(FLAG_FORWARDED);\nexport const isSentAndReceived = hasFlag(FLAG_SENT | FLAG_RECEIVED);\nexport const isDraft = (message: Message = {}) => !isSent(message) && !isReceived(message);\nexport const isE2E = hasFlag(FLAG_E2E);\nexport const isSentEncrypted = hasFlag(FLAG_E2E | FLAG_SENT);\nexport const isInternalEncrypted = hasFlag(FLAG_E2E | FLAG_INTERNAL);\nexport const isSign = hasFlag(FLAG_SIGN);\nexport const isAttachPublicKey = hasFlag(FLAG_PUBLIC_KEY);\nexport const isExternalEncrypted = (message: Message) => isE2E(message) && !isInternal(message);\nexport const isPGPEncrypted = (message: Message = {}) => isExternal(message) && isReceived(message) && isE2E(message);\nexport const inSigningPeriod = ({ Time = 0 }: Message) => Time >= SIGNATURE_START;\n\nexport const isPGPInline = (message: Message) => isPGPEncrypted(message) && !isMIME(message);\n\nexport const isEO = (message: Message = {}) => !!message.Password;\n\nexport const addReceived = (Flags = 0) => setBit(Flags, MESSAGE_FLAGS.FLAG_RECEIVED);\n\nexport const getSender = ({ Sender = {} }: Message = {}) => Sender;\nexport const getRecipients = ({ ToList = [], CCList = [], BCCList = [] }: Message = {}) => [\n    ...ToList,\n    ...CCList,\n    ...BCCList\n];\n// export const getRecipientsLabels = (message: Message = {}) => getRecipients(message).map(getRecipientLabel);\nexport const getRecipientsAddresses = (message: Message = {}) =>\n    getRecipients(message)\n        .map(({ Address }) => Address || '')\n        .filter(identity);\n\n/**\n * Extract and normalize recipients\n * @param {Object} message\n * @return {Array<String>}\n */\n// export const normalizeRecipients = (message = {}) => {\n//     return getRecipients(message).map(({ Address }) => normalizeEmail(Address));\n// };\n\n/**\n * Decrypt simple message body with password\n * @param {String} message.Body\n * @param {String} password\n * @return {String} body\n */\n// export async function decrypt({ Body = '' } = {}, password) {\n//     const message = await getMessage(Body);\n//     const { data: body } = await decryptMessage({\n//         message,\n//         passwords: [password]\n//     });\n//     return body;\n// }\n\n/**\n * Get the label ids to add for a message that has moved.\n *\n * Types definition\n *   - 1: a draft\n * if you move it to trash and back to inbox, it will go to draft instead\n *   - 2: is sent\n *  if you move it to trash and back, it will go back to sent\n *   - 3: is inbox and sent (a message sent to yourself)\n * if you move it from trash to inbox, it will acquire both the inbox and sent labels ( 0 and 2 ).\n *\n * @param {Message} message\n * @param {String} labelID label id to which it is moved\n * @returns {Array}\n */\n// export const getLabelIDsMoved = (message, labelID) => {\n//     const toInbox = labelID === MAILBOX_IDENTIFIERS.inbox;\n\n//     if (toInbox) {\n//         // This message is a draft, if you move it to trash and back to inbox, it will go to draft instead\n//         if (message.isDraft()) {\n//             return [MAILBOX_IDENTIFIERS.allDrafts, MAILBOX_IDENTIFIERS.drafts];\n//         }\n\n//         // If you move it from trash to inbox, it will acquire both the inbox and sent labels ( 0 and 2 ).\n//         if (message.isSentAndReceived()) {\n//             return [MAILBOX_IDENTIFIERS.inbox, MAILBOX_IDENTIFIERS.allSent, MAILBOX_IDENTIFIERS.sent];\n//         }\n\n//         // This message is sent, if you move it to trash and back, it will go back to sent\n//         if (message.isSent()) {\n//             return [MAILBOX_IDENTIFIERS.allSent, MAILBOX_IDENTIFIERS.sent];\n//         }\n//     }\n\n//     return [labelID];\n// };\n\n/**\n * Get date from message\n */\nexport const getDate = ({ Time = 0 }: Message = {}) => new Date(Time * 1000);\n\n/**\n * Check if these all messages shared the same sender (by email address)\n * @param {Array<message>} messages\n * @return {Boolean}\n */\n// export const sameSender = (messages = []) => {\n//     if (!messages.length) {\n//         return false;\n//     }\n\n//     const [{ Sender: firstSender } = {}] = messages;\n//     const firstAddress = normalizeEmail(firstSender.Address);\n\n//     return (\n//         messages.length ===\n//         messages.filter(({ Sender = {} }) => {\n//             return normalizeEmail(Sender.Address) === firstAddress;\n//         }).length\n//     );\n// };\n\nexport const getParsedHeaders = (message: Message, parameter: string) => {\n    const { ParsedHeaders = {} } = message;\n\n    if (parameter) {\n        return ParsedHeaders[parameter];\n    }\n\n    return ParsedHeaders;\n};\n\nexport const getListUnsubscribe = (message: Message) => {\n    return getParsedHeaders(message, 'List-Unsubscribe') || '';\n};\n\nexport const getListUnsubscribePost = (message: Message) => {\n    return getParsedHeaders(message, 'List-Unsubscribe-Post') || '';\n};\n\nexport const getAttachments = (message: Message = {}) => message.Attachments || [];\nexport const hasAttachments = (message: Message = {}) => getAttachments(message).length > 0;\nexport const attachmentsSize = (message: Message = {}) =>\n    getAttachments(message).reduce((acc, { Size = 0 } = {}) => acc + +Size, 0);\n\nexport const isSentAutoReply = ({ Flags, ParsedHeaders = {} }: Message) => {\n    if (!isSent({ Flags })) {\n        return false;\n    }\n\n    if (isAuto({ Flags })) {\n        return true;\n    }\n\n    const autoReplyHeaders = ['X-Autoreply', 'X-Autorespond', 'X-Autoreply-From', 'X-Mail-Autoreply'];\n    const autoReplyHeaderValues = [\n        ['Auto-Submitted', 'auto-replied'],\n        ['Precedence', 'auto_reply'],\n        ['X-Precedence', 'auto_reply'],\n        ['Delivered-To', 'autoresponder']\n    ];\n    // These headers are not always available. But we should check them to support\n    // outlook / mail autoresponses.\n    return (\n        autoReplyHeaders.some((h) => h in ParsedHeaders) ||\n        autoReplyHeaderValues.some(([k, v]) => k in ParsedHeaders && ParsedHeaders[k].toLowerCase() === v)\n    );\n};\n\n/**\n * We NEVER upconvert, if the user wants html: plaintext is actually fine as well\n */\nexport const getHTML = (message: MessageExtended) => (isHTML(message.data) ? message.content : undefined);\n\nexport const exportPlainText = (message: MessageExtended) => {\n    /*\n     * The replace removes any characters that are produced by the copying process (like zero width characters)\n     * See: http://www.berklix.org/help/majordomo/#quoted we want to avoid sending unnecessary quoted printable encodings\n     */\n    if (message.data?.MIMEType !== MIME_TYPES.DEFAULT) {\n        return message.content?.replace(/\\u200B/g, '');\n    }\n    return toText(message.content || '', true, true).replace(/\\u200B/g, '');\n};\n\n/**\n * Generates/Gets the plaintext body from the message. If the message is not composed in plaintext, it will downconvert\n * the html body to plaintext if downconvert is set. If downconvert is disabled it will return false.\n */\nexport const getPlainText = (message: MessageExtended, downconvert: boolean) => {\n    if (!isPlainText(message.data) && !downconvert) {\n        return undefined;\n    }\n    return exportPlainText(message);\n};\n","import TurndownService from 'turndown';\n\nimport { identity } from 'proton-shared/lib/helpers/function';\n\n/**\n * Transform HTML to text\n * Append lines before the content if it starts with a Signature\n */\nexport const toText = (html: string, appendLines = true, convertImages = false) => {\n    const turndownService = new TurndownService({\n        bulletListMarker: '-',\n        // strongDelimiter: '',\n        // emDelimiter: '',\n        hr: ''\n    });\n\n    const protonSignature = {\n        filter: (node: HTMLElement) => node.classList.contains('protonmail_signature_block'),\n        replacement(content: string) {\n            return `\\u200B${content.trim()}\\u200B`;\n        }\n    };\n\n    const replaceBreakLine = {\n        filter: 'br',\n        replacement(content: string, node: HTMLElement) {\n            // It matches the new line of a signature\n            if (node.parentElement?.nodeName === 'DIV' && node.parentElement.childElementCount === 1) {\n                return !node.parentElement.textContent ? '\\n\\n' : '\\n';\n            }\n\n            // ex <li>monique<br></li>\n            if (node.parentElement?.lastElementChild?.nodeName === 'BR' && node.parentElement.textContent) {\n                return node.parentElement.nodeName !== 'LI' ? '\\n' : '';\n            }\n\n            return '\\n\\n';\n        }\n    } as TurndownService.Rule;\n\n    const replaceImg = {\n        filter: 'img',\n        replacement(content: string, element: HTMLElement) {\n            if (!convertImages) {\n                return '';\n            }\n\n            const image = element as HTMLImageElement;\n\n            // needed for the automatic conversion done by pgp/inline, otherwise the conversion happens and people forget that they have selected this for some contacts\n            const attribute = image.alt || image.src;\n            return attribute ? `[${attribute}]` : '';\n        }\n    } as TurndownService.Rule;\n\n    const replaceAnchor = {\n        filter: 'a',\n        replacement(content: string, node: HTMLElement) {\n            return node.textContent;\n        }\n    } as TurndownService.Rule;\n\n    const replaceDiv = {\n        filter: ['div'],\n        replacement(content: string) {\n            return content;\n        }\n    } as TurndownService.Rule;\n\n    turndownService.use([\n        () => turndownService.addRule('replaceAnchor', replaceAnchor),\n        () => turndownService.addRule('replaceDiv', replaceDiv),\n        () => turndownService.addRule('replaceImg', replaceImg),\n        () => turndownService.addRule('replaceBreakLine', replaceBreakLine),\n        () => turndownService.addRule('protonSignature', protonSignature)\n    ]);\n\n    /**\n     * Override turndown to NOT escape any HTML. For example MONO_TLS_PROVIDER -> MONO\\_TLS\\_PROVIDER.\n     * Just return the value that is passed in.\n     * Fixes https://github.com/ProtonMail/Angular/issues/6556\n     */\n    turndownService.escape = identity;\n\n    const output = turndownService.turndown(html);\n\n    // It's the signature, we need some space\n    if (output.startsWith('\\u200B') && appendLines) {\n        return `\\n\\n\\n${output}\\n\\n`;\n    }\n\n    return output;\n};\n","import React from 'react';\nimport { Icon, useLoading, useApi, useEventManager, classnames } from 'react-components';\nimport { MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\nimport { labelMessages, unlabelMessages } from 'proton-shared/lib/api/messages';\nimport { labelConversations, unlabelConversations } from 'proton-shared/lib/api/conversations';\n\nimport { ELEMENT_TYPES } from '../../constants';\nimport { Element } from '../../models/element';\nimport { getLabelIds } from '../../helpers/elements';\n\ninterface Props {\n    element?: Element;\n    type: string;\n}\n\nconst ItemStar = ({ element = {}, type }: Props) => {\n    const api = useApi();\n    const isConversation = type === ELEMENT_TYPES.CONVERSATION;\n    const { call } = useEventManager();\n    const [loading, withLoading] = useLoading();\n    const labelIDs = getLabelIds(element);\n    const isStarred = labelIDs.includes(MAILBOX_LABEL_IDS.STARRED);\n    const iconName = isStarred ? 'starfull' : 'star';\n\n    const handleClick = async () => {\n        const action = isConversation\n            ? isStarred\n                ? unlabelConversations\n                : labelConversations\n            : isStarred\n            ? unlabelMessages\n            : labelMessages;\n        await api(action({ LabelID: MAILBOX_LABEL_IDS.STARRED, IDs: [element.ID] }));\n        await call();\n    };\n\n    return (\n        <button\n            disabled={loading}\n            type=\"button\"\n            className={classnames(['starbutton item-star inline-flex', isStarred && 'starbutton--is-starred'])}\n            onClick={() => withLoading(handleClick())}\n        >\n            <Icon name={iconName} fill=\"\" />\n        </button>\n    );\n};\n\nexport default ItemStar;\n","import React from 'react';\nimport { toMap } from 'proton-shared/lib/helpers/object';\nimport { orderBy } from 'proton-shared/lib/helpers/array';\nimport { Link } from 'react-router-dom';\nimport { Icon, classnames } from 'react-components';\n\nimport { Label } from '../../models/label';\nimport { getLabelIds } from '../../helpers/elements';\nimport { Element } from '../../models/element';\n\ninterface Props {\n    element: Element;\n    labels?: Label[];\n    max?: number;\n    onUnlabel?: (labelID: string) => void;\n    className?: string;\n}\n\nconst ItemLabels = ({ element, onUnlabel, max = 99, labels = [], className = '' }: Props) => {\n    const labelIDs = getLabelIds(element);\n    const labelsMap: { [labelID: string]: Label } = toMap(labels) as any;\n\n    return (\n        <div className={classnames(['inbl', className])}>\n            {orderBy(labelIDs.map((ID) => labelsMap[ID]).filter(Boolean), 'Order')\n                .slice(0, max)\n                .map(({ ID = '', Name = '', Color = '' }) => {\n                    const style = {\n                        backgroundColor: Color,\n                        borderColor: Color\n                    };\n                    const to = `/${ID}`;\n                    return (\n                        <span className=\"badgeLabel\" style={style} key={ID}>\n                            <Link to={to}>{Name}</Link>\n                            {onUnlabel ? (\n                                <button type=\"button\" onClick={() => onUnlabel(ID)}>\n                                    <Icon name=\"off\" />\n                                </button>\n                            ) : null}\n                        </span>\n                    );\n                })}\n        </div>\n    );\n};\n\nexport default ItemLabels;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon, classnames } from 'react-components';\n\nimport { ELEMENT_TYPES } from '../../constants';\nimport { hasAttachments } from '../../helpers/message/messages';\n\nconst ItemAttachmentIcon = ({ element = {}, type = ELEMENT_TYPES.CONVERSATION, className }) => {\n    const isConversation = type === ELEMENT_TYPES.CONVERSATION;\n    const hasAttachment = isConversation ? element.ContextNumAttachments : hasAttachments(element);\n\n    if (!hasAttachment) {\n        return null;\n    }\n\n    return <Icon name=\"attach\" fill=\"\" className={classnames(['fill-global-success', className])} />;\n};\n\nItemAttachmentIcon.propTypes = {\n    element: PropTypes.object,\n    type: PropTypes.oneOf([ELEMENT_TYPES.CONVERSATION, ELEMENT_TYPES.MESSAGE]).isRequired,\n    className: PropTypes.string\n};\n\nexport default ItemAttachmentIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { Icon } from 'react-components';\nimport { MAILBOX_LABEL_IDS, SHOW_MOVED } from 'proton-shared/lib/constants';\nimport { c } from 'ttag';\n\nimport { LABEL_IDS_TO_HUMAN } from '../../constants';\n\nconst { INBOX, TRASH, SPAM, ARCHIVE, SENT, DRAFTS } = MAILBOX_LABEL_IDS;\n\nconst getFolders = ({ ShowMoved }) => ({\n    [INBOX]: {\n        icon: 'inbox',\n        name: c('Mailbox').t`Inbox`,\n        to: '/inbox'\n    },\n    [TRASH]: {\n        icon: 'trash',\n        name: c('Mailbox').t`Trash`,\n        to: '/trash'\n    },\n    [SPAM]: {\n        icon: 'spam',\n        name: c('Mailbox').t`Spam`,\n        to: '/spam'\n    },\n    [ARCHIVE]: {\n        icon: 'archive',\n        name: c('Mailbox').t`Archive`,\n        to: '/archive'\n    },\n    [SENT]: {\n        icon: 'sent',\n        name: c('Mailbox').t`Sent`,\n        to:\n            ShowMoved & SHOW_MOVED.SENT\n                ? `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.ALL_SENT]}`\n                : `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.SENT]}`\n    },\n    [DRAFTS]: {\n        icon: 'drafts',\n        name: c('Mailbox').t`Drafts`,\n        to:\n            ShowMoved & SHOW_MOVED.DRAFTS\n                ? `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.ALL_DRAFTS]}`\n                : `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.DRAFTS]}`\n    }\n});\n\nconst ItemLocation = ({ message, mailSettings }) => {\n    const { LabelIDs = [] } = message;\n    const folders = getFolders(mailSettings);\n\n    return (\n        <>\n            {LabelIDs.filter((labelID) => folders[labelID]).map((labelID) => {\n                const { icon, name, to } = folders[labelID];\n                return (\n                    <Link to={to} className=\"mr0-25 flex-item-noshrink\" key={labelID} title={name}>\n                        <Icon name={icon} />\n                    </Link>\n                );\n            })}\n        </>\n    );\n};\n\nItemLocation.propTypes = {\n    message: PropTypes.object.isRequired,\n    mailSettings: PropTypes.object.isRequired\n};\n\nexport default ItemLocation;\n","import { format, formatDistanceToNow as dateFnsFormatDistanceToNow, isToday } from 'date-fns';\nimport { dateLocale } from 'proton-shared/lib/i18n';\n\nexport const formatSimpleDate = (date) => format(date, isToday(date) ? 'p' : 'PP', { locale: dateLocale });\n\nexport const formatFullDate = (date) => format(date, 'PPPPp', { locale: dateLocale });\n\nexport const formatDistanceToNow = (date) => dateFnsFormatDistanceToNow(date, { locale: dateLocale, addSuffix: true });\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { classnames } from 'react-components';\n\nimport { getDate } from '../../helpers/elements';\nimport { formatSimpleDate, formatFullDate, formatDistanceToNow } from '../../helpers/date';\n\nconst FORMATERS = {\n    simple: formatSimpleDate,\n    full: formatFullDate,\n    distance: formatDistanceToNow\n};\n\n// TODO: Update with a setInterval?\n\nconst ItemDate = ({ element, className, mode = 'simple' }) => {\n    const formater = FORMATERS[mode] || FORMATERS.distance;\n    return <span className={classnames(['item-date', className])}>{formater(getDate(element))}</span>;\n};\n\nItemDate.propTypes = {\n    element: PropTypes.object.isRequired,\n    className: PropTypes.string,\n    mode: PropTypes.string\n};\n\nexport default ItemDate;\n","import React from 'react';\nimport { Conversation } from '../../models/conversation';\n\ninterface Props {\n    conversation: Conversation;\n    className?: string;\n}\n\nconst NumMessages = ({ conversation, className }: Props) => {\n    // ContextNumMessages shoud not be used\n    const { NumMessages = 0 } = conversation;\n\n    if (NumMessages <= 1) {\n        return null;\n    }\n\n    return <span className={className}>({NumMessages})</span>;\n};\n\nexport default NumMessages;\n","import React from 'react';\nimport { classnames } from 'react-components';\n\nimport ItemStar from './ItemStar';\nimport { ELEMENT_TYPES } from '../../constants';\nimport ItemLabels from './ItemLabels';\nimport ItemAttachmentIcon from './ItemAttachmentIcon';\nimport ItemLocation from './ItemLocation';\nimport ItemDate from './ItemDate';\nimport NumMessages from '../conversation/NumMessages';\nimport { Label } from '../../models/label';\nimport { Element } from '../../models/element';\n\ninterface Props {\n    labels?: Label[];\n    element: Element;\n    mailSettings: any;\n    type: string;\n    senders: string;\n    unread: boolean;\n}\n\nconst ItemColumnLayout = ({ labels, element, mailSettings = {}, type, senders, unread }: Props) => {\n    const { Subject } = element;\n    const isConversation = type === ELEMENT_TYPES.CONVERSATION;\n\n    return (\n        <div className=\"flex-item-fluid flex flex-nowrap flex-column flex-spacebetween item-titlesender\">\n            <div className=\"flex\">\n                <div className=\"flex-item-fluid flex w0 pr1\">\n                    {isConversation ? (\n                        <NumMessages className={classnames(['mr0-25', unread && 'bold'])} conversation={element} />\n                    ) : (\n                        <ItemLocation message={element} mailSettings={mailSettings} />\n                    )}\n                    <span className={classnames(['inbl mw100 ellipsis', unread && 'bold'])}>{Subject}</span>\n                </div>\n                <ItemDate element={element} className={unread ? 'bold' : undefined} />\n            </div>\n            <div className=\"flex\">\n                <div className=\"flex-item-fluid flex pr1\">\n                    <span className={classnames(['inbl mw100 ellipsis', unread && 'bold'])}>{senders}</span>\n                </div>\n                <div className=\"item-icons\">\n                    <ItemLabels max={4} labels={labels} element={element} />\n                    {' ' /* This space is important to keep a small space between elements */}\n                    <ItemAttachmentIcon element={element} type={type} />\n                    {' ' /* This space is important to keep a small space between elements */}\n                    <ItemStar element={element} type={type} />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ItemColumnLayout;\n","import React from 'react';\nimport { classnames } from 'react-components';\n\nimport ItemStar from './ItemStar';\nimport { ELEMENT_TYPES } from '../../constants';\nimport ItemLabels from './ItemLabels';\nimport ItemAttachmentIcon from './ItemAttachmentIcon';\nimport ItemLocation from './ItemLocation';\nimport ItemDate from './ItemDate';\nimport NumMessages from '../conversation/NumMessages';\nimport humanSize from 'proton-shared/lib/helpers/humanSize';\nimport { Label } from '../../models/label';\nimport { Element } from '../../models/element';\n\ninterface Props {\n    labels?: Label[];\n    element: Element;\n    mailSettings: any;\n    type: string;\n    senders: string;\n    unread: boolean;\n}\n\nconst ItemRowLayout = ({ labels, element, mailSettings = {}, type, senders, unread }: Props) => {\n    const { Subject, Size } = element;\n    const isConversation = type === ELEMENT_TYPES.CONVERSATION;\n    const size = humanSize(Size);\n\n    return (\n        <div className=\"flex-item-fluid flex flex-nowrap flex-row flex-spacebetween item-titlesender\">\n            <div className={classnames(['w20 flex mauto pr1', unread && 'bold'])}>{senders}</div>\n            <div className=\"flex-item-fluid flex mauto\">\n                {isConversation ? (\n                    <NumMessages className={classnames(['mr0-25', unread && 'bold'])} conversation={element} />\n                ) : (\n                    <ItemLocation message={element} mailSettings={mailSettings} />\n                )}\n                <span className={classnames(['inbl mw100 ellipsis', unread && 'bold'])}>{Subject}</span>\n                <ItemLabels max={4} labels={labels} element={element} />\n                <ItemAttachmentIcon element={element} type={type} className=\"ml0-5\" />\n            </div>\n            <span className=\"mtauto mbauto mr1 ml1 ng-binding\">{size}</span>\n            <span className=\"mauto\">\n                <ItemDate element={element} className={unread ? 'bold' : undefined} />\n            </span>\n            <div className=\"mtauto mbauto ml0-5\">\n                <ItemStar element={element} type={type} />\n            </div>\n        </div>\n    );\n};\n\nexport default ItemRowLayout;\n","import { ContactEmailCache, ContactEmail } from '../models/contact';\nimport { normalizeEmail } from './addresses';\n\nexport const findEmailInCache = (cache: ContactEmailCache, email: string): ContactEmail =>\n    [...cache.values()].find(({ Email }) => {\n        return email === normalizeEmail(Email);\n    }) || {};\n\nexport const getContactsOfGroup = (contacts: ContactEmail[] = [], groupID = ''): ContactEmail[] =>\n    contacts.filter((contact) => contact.LabelIDs?.includes(groupID));\n","import { c } from 'ttag';\nimport { REGEX_EMAIL } from 'proton-shared/lib/constants';\n\nimport { Address, Recipient, RecipientGroup, RecipientOrGroup } from '../models/address';\nimport { Key } from '../models/key';\nimport { Message } from '../models/message';\nimport { ContactEmail, ContactGroup } from '../models/contact';\nimport { getContactsOfGroup } from './contacts';\n\nexport const REGEX_RECIPIENT = /(.*)\\s*<([^>]*)>/;\n\nexport const validateAddress = (address = '') => REGEX_EMAIL.test(address);\n\nexport const validateAddresses = (addresses: string[]) => addresses.every(validateAddress);\n\n/**\n * Transform value to be normalized (lowercase)\n */\nexport const normalizeEmail = (email = '') => email.toLowerCase();\n\n/**\n * Remove plus alias part present in the email value\n */\nexport const removeEmailAlias = (email = '') => {\n    return normalizeEmail(email)\n        .replace(/(\\+[^@]*)@/, '@')\n        .replace(/[._-](?=[^@]*@)/g, '');\n};\n\n/**\n * Add plus alias part for an email\n */\nexport const addPlusAlias = (email = '', plus = '') => {\n    const atIndex = email.indexOf('@');\n    const plusIndex = email.indexOf('+');\n\n    if (atIndex === -1 || plusIndex > -1) {\n        return email;\n    }\n\n    const name = email.substring(0, atIndex);\n    const domain = email.substring(atIndex, email.length);\n\n    return `${name}+${plus}${domain}`;\n};\n\n/**\n * Get address from email\n * Remove + alias and transform to lower case\n */\nexport const getByEmail = (addresses: Address[], email = '') => {\n    const cleanEmail = removeEmailAlias(email);\n    return addresses.find(({ Email }) => removeEmailAlias(Email) === cleanEmail);\n};\n\n/**\n * Check if the address is fallback (Can't receive but has keys)\n */\nexport const isFallbackAddress = (address?: Address, keys: Key[] = []) =>\n    !!address && !address.Receive && !!keys.length;\n\nexport const isOwnAddress = (address?: Address, keys: Key[] = []) => !!address && !isFallbackAddress(address, keys);\n\nexport const inputToRecipient = (input: string): Recipient => {\n    const match = REGEX_RECIPIENT.exec(input);\n\n    if (match !== null) {\n        return {\n            Name: match[1],\n            Address: match[2]\n        };\n    }\n    return {\n        Name: input,\n        Address: input\n    };\n};\n\nexport const recipientToInput = (recipient: Recipient = {}): string => {\n    if (recipient.Address && recipient.Name && recipient.Address !== recipient.Name) {\n        return `${recipient.Name} <${recipient.Address}>`;\n    }\n\n    if (recipient.Address === recipient.Name) {\n        return recipient.Address || '';\n    }\n\n    return `${recipient.Name} ${recipient.Address}`;\n};\n\nexport const contactToRecipient = (contact: ContactEmail = {}, groupPath?: string): Recipient => ({\n    Name: contact.Name,\n    Address: contact.Email,\n    Group: groupPath\n});\n\nexport const contactToInput = (contact: ContactEmail = {}): string => recipientToInput(contactToRecipient(contact));\n\nexport const recipientsWithoutGroup = (recipients: Recipient[], groupPath?: string) =>\n    recipients.filter((recipient) => recipient.Group !== groupPath);\n\nexport const getRecipientLabel = ({ Address, Name }: Recipient) => Name || Address || '';\n\nexport const getRecipientGroupLabel = (recipientGroup?: RecipientGroup, contactsInGroup = 0) => {\n    const count = recipientGroup?.recipients.length;\n    const members = c('Info').t`Members`;\n    return `${recipientGroup?.group?.Name} (${count}/${contactsInGroup} ${members})`;\n};\n\nexport const getRecipientOrGroupLabel = ({ recipient, group }: RecipientOrGroup, allContacts: ContactEmail[]) =>\n    recipient\n        ? getRecipientLabel(recipient)\n        : getRecipientGroupLabel(group, getContactsOfGroup(allContacts, group?.group?.ID).length);\n\nexport const recipientsToRecipientOrGroup = (recipients: Recipient[], groups: ContactGroup[]) =>\n    recipients.reduce((acc, value) => {\n        if (value.Group) {\n            const existingGroup = acc.find((recipientsOrGroup) => recipientsOrGroup.group?.group?.Path === value.Group);\n            if (existingGroup) {\n                existingGroup.group?.recipients.push(value);\n            } else {\n                const group = groups.find((group) => group.Path === value.Group);\n                if (group) {\n                    acc.push({ group: { group, recipients: [value] } });\n                } else {\n                    acc.push({ recipient: value });\n                }\n            }\n        } else {\n            acc.push({ recipient: value });\n        }\n        return acc;\n    }, [] as RecipientOrGroup[]);\n\n/**\n * Detect if the email address is a valid plus alias and returns the address model appropriate\n */\nexport const getAddressFromPlusAlias = (addresses: Address[], email = ''): Address | undefined => {\n    const plusIndex = email.indexOf('+');\n    const atIndex = email.indexOf('@');\n\n    if (plusIndex === -1 || atIndex === -1) {\n        return;\n    }\n\n    // Remove the plus alias part to find a match with existing addresses\n    const address = getByEmail(addresses, removeEmailAlias(email));\n    const { Status, Receive, Send } = address || {};\n\n    if (!Status || !Receive || !Send) {\n        // pm.me addresses on free accounts (Send = 0)\n        return;\n    }\n\n    const plusPart = email.substring(plusIndex + 1, atIndex);\n\n    // Returns an address where the Email is build to respect the exising capitalization and add the plus part\n    return { ...address, Email: addPlusAlias(address?.Email, plusPart) };\n};\n\n/**\n * Return list of addresses available in the FROM select\n * Reference: Angular/src/app/composer/factories/composerFromModel.js\n */\nexport const getFromAdresses = (addresses: Address[], originalTo = '') => {\n    const result = addresses\n        .filter(({ Status, Receive }) => Status === 1 && Receive === 1)\n        .sort((a1, a2) => (a1.Order || 0) - (a2.Order || 0));\n\n    const plusAddress = getAddressFromPlusAlias(addresses, originalTo);\n\n    if (plusAddress) {\n        // It's important to unshift the plus address to be found first with find()\n        result.unshift(plusAddress);\n    }\n\n    return result;\n};\n\n/**\n * Find the current sender for a message\n */\nexport const findSender = (addresses: Address[] = [], { AddressID = '' }: Message = {}): Address | undefined => {\n    const enabledAddresses = addresses\n        .filter((address) => address.Status === 1)\n        .sort((a1, a2) => (a1.Order || 0) - (a2.Order || 0));\n\n    if (AddressID) {\n        const originalAddress = enabledAddresses.find((address) => address.ID === AddressID);\n        if (originalAddress) {\n            return originalAddress;\n        }\n    }\n\n    return enabledAddresses[0];\n};\n","import React, { ChangeEvent } from 'react';\nimport { classnames } from 'react-components';\nimport { getInitial } from 'proton-shared/lib/helpers/string';\nimport { MAILBOX_LABEL_IDS, VIEW_LAYOUT } from 'proton-shared/lib/constants';\n\nimport ItemCheckbox from './ItemCheckbox';\nimport { getRecipients as getMessageRecipients, getSender, getRecipients } from '../../helpers/message/messages';\nimport { getCurrentType, isUnread } from '../../helpers/elements';\nimport ItemColumnLayout from './ItemColumnLayout';\nimport ItemRowLayout from './ItemRowLayout';\nimport { Label } from '../../models/label';\nimport { Element } from '../../models/element';\nimport { ELEMENT_TYPES } from '../../constants';\nimport { getSenders } from '../../helpers/conversation';\nimport { getRecipientLabel, recipientsToRecipientOrGroup, getRecipientOrGroupLabel } from '../../helpers/addresses';\nimport { ContactEmail, ContactGroup } from '../../models/contact';\n\nconst { SENT, ALL_SENT, DRAFTS, ALL_DRAFTS } = MAILBOX_LABEL_IDS;\n\ninterface Props {\n    labels?: Label[];\n    labelID: string;\n    elementID?: string;\n    mailSettings: any;\n    element: Element;\n    checked?: boolean;\n    contacts: ContactEmail[];\n    contactGroups: ContactGroup[];\n    onCheck: (event: ChangeEvent) => void;\n    onClick: (element: Element) => void;\n}\n\nconst Item = ({\n    labelID,\n    labels,\n    element,\n    elementID,\n    mailSettings = {},\n    checked = false,\n    contacts,\n    contactGroups,\n    onCheck,\n    onClick\n}: Props) => {\n    const { ID = '' } = element;\n    const displayRecipients = [SENT, ALL_SENT, DRAFTS, ALL_DRAFTS].includes(labelID as MAILBOX_LABEL_IDS);\n    const type = getCurrentType({ mailSettings, labelID });\n    const isConversation = type === ELEMENT_TYPES.CONVERSATION;\n    const senders = isConversation ? getSenders(element) : [getSender(element)];\n    const recipients = isConversation ? getRecipients(element) : getMessageRecipients(element);\n    const sendersLabels = senders.map(getRecipientLabel);\n    const recipientsOrGroup = recipientsToRecipientOrGroup(recipients, contactGroups);\n    const recipientsLabels = recipientsOrGroup.map((recipientOrGroup) =>\n        getRecipientOrGroupLabel(recipientOrGroup, contacts)\n    );\n\n    const { ViewLayout = VIEW_LAYOUT.COLUMN } = mailSettings;\n    const isColumnMode = ViewLayout === VIEW_LAYOUT.COLUMN;\n    const ItemLayout = isColumnMode ? ItemColumnLayout : ItemRowLayout;\n    const unread = isUnread(element);\n\n    const clickHandler = (event: React.MouseEvent) => {\n        const target = event.target as HTMLElement;\n        if (target.classList.contains('item-checkbox') || target.closest('.item-checkbox')) {\n            event.stopPropagation();\n            return;\n        }\n        onClick(element);\n    };\n\n    return (\n        <div\n            onClick={clickHandler}\n            className={classnames([\n                'flex flex-nowrap cursor-pointer',\n                isColumnMode ? 'item-container' : 'item-container-row',\n                elementID === ID && 'item-is-selected',\n                !unread && 'read'\n            ])}\n        >\n            <ItemCheckbox className=\"mr1 item-checkbox\" checked={checked} onChange={onCheck}>\n                {getInitial(displayRecipients ? recipientsLabels[0] : sendersLabels[0])}\n            </ItemCheckbox>\n            <ItemLayout\n                labels={labels}\n                element={element}\n                mailSettings={mailSettings}\n                type={type}\n                senders={(displayRecipients ? recipientsLabels : sendersLabels).join(', ')}\n                unread={unread}\n            />\n        </div>\n    );\n};\n\nexport default Item;\n","import { Conversation } from '../models/conversation';\n\nexport const getSenders = ({ Senders = [] }: Conversation = {}) => Senders;\n\nexport const getRecipients = ({ Recipients = [] }: Conversation) => Recipients;\n","import React from 'react';\nimport { c } from 'ttag';\n\nimport { MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\nimport noResultSearchSvg from 'design-system/assets/img/shared/no-result-search.svg';\nimport noResultInboxSvg from 'design-system/assets/img/shared/no-result-inbox.svg';\n\ninterface Props {\n    labelID: string;\n}\n\nconst EmptyView = ({ labelID }: Props) => {\n    const isInbox = labelID === MAILBOX_LABEL_IDS.INBOX;\n    const isFolder = !isInbox;\n    const isSearch = false; // TODO: when the search will be implemented\n\n    return (\n        <div className=\"m2\">\n            <figure className=\"flex-item-fluid aligncenter p3\">\n                {isSearch && <img src={noResultSearchSvg} alt={c('Search - no results').t`No results found`} />}\n                {isFolder && <img src={noResultSearchSvg} alt={c('Search - no results').t`No messages found`} />}\n                {isInbox && <img src={noResultInboxSvg} alt={c('Search - no results').t`No messages found`} />}\n\n                <figcaption className=\"mt2\">\n                    <h3 className=\"bold\">\n                        {isSearch\n                            ? c('Search - no results').t`No results found`\n                            : isFolder\n                            ? c('Search - no results').t`No messages found`\n                            : c('Search - no results').t`No messages found`}\n                    </h3>\n                    <p data-if=\"folder\">\n                        {isSearch\n                            ? // TODO: Add a link on clear it when search will work\n                              c('Info').t`Search - no results: You can either update your search query or clear it`\n                            : isFolder\n                            ? c('Info').t`You do not have any messages here`\n                            : c('Info').t`Seems like you are all caught up for now`}\n                    </p>\n                </figcaption>\n            </figure>\n        </div>\n    );\n};\n\nexport default EmptyView;\n","import { useCallback } from 'react';\nimport { useApi, useCache, useCachedModelResult } from 'react-components';\nimport { getContactGroupsModel } from 'proton-shared/lib/models/contactGroupsModel';\nimport { ContactGroup } from '../models/contact';\n\n/**\n * Temporary hook waiting for a solution about cache overriding in proton-shared\n * https://github.com/ProtonMail/proton-shared/pull/107\n * Workaround: manual use of the cache\n */\nexport const useContactGroups = () => {\n    const api = useApi();\n    const cache = useCache();\n\n    return useCachedModelResult(\n        cache,\n        'ContactGroups',\n        useCallback(() => getContactGroupsModel(api), [api])\n    ) as [ContactGroup[], boolean, any];\n};\n","import React, { useState, ChangeEvent } from 'react';\nimport { useLabels, useContactEmails } from 'react-components';\n\nimport Item from './Item';\nimport { Element } from '../../models/element';\nimport EmptyView from '../view/EmptyView';\nimport { ContactEmail } from '../../models/contact';\nimport { useContactGroups } from '../../hooks/useContactGroups';\n\ninterface Props {\n    labelID: string;\n    elementID?: string;\n    mailSettings: any;\n    elements?: Element[];\n    checkedIDs?: string[];\n    onCheck: (IDs?: string[], checked?: boolean) => void;\n    onClick: (element: Element) => void;\n}\n\nconst List = ({ labelID, elementID, mailSettings = {}, elements = [], checkedIDs = [], onCheck, onClick }: Props) => {\n    const [contacts, loadingContacts]: [ContactEmail[], boolean] = useContactEmails();\n    const [contactGroups, loadingGroups] = useContactGroups();\n    const [labels] = useLabels();\n    const [lastChecked, setLastChecked] = useState(); // Store ID of the last element ID checked\n\n    if (loadingContacts || loadingGroups) {\n        return null;\n    }\n\n    const handleCheck = (elementID: string) => (event: ChangeEvent) => {\n        const target = event.target as HTMLInputElement;\n        const { shiftKey } = event.nativeEvent as any;\n        const elementIDs = [elementID];\n\n        if (lastChecked && shiftKey) {\n            const start = elements.findIndex(({ ID }) => ID === elementID);\n            const end = elements.findIndex(({ ID }) => ID === lastChecked);\n            elementIDs.push(\n                ...elements.slice(Math.min(start, end), Math.max(start, end) + 1).map(({ ID }) => ID || '')\n            );\n        }\n\n        setLastChecked(elementID);\n        onCheck(elementIDs, target.checked);\n    };\n\n    return elements.length === 0 ? (\n        <EmptyView labelID={labelID} />\n    ) : (\n        <>\n            {elements.map((element) => {\n                return (\n                    <Item\n                        labels={labels}\n                        labelID={labelID}\n                        key={element.ID}\n                        elementID={elementID}\n                        element={element}\n                        checked={checkedIDs.includes(element.ID || '')}\n                        contacts={contacts}\n                        contactGroups={contactGroups}\n                        onCheck={handleCheck(element.ID || '')}\n                        onClick={onClick}\n                        mailSettings={mailSettings}\n                    />\n                );\n            })}\n        </>\n    );\n};\n\nexport default List;\n","import React from 'react';\nimport { classnames } from 'react-components';\n\nimport { isPlainText } from '../../helpers/message/messages';\nimport { MessageExtended } from '../../models/message';\n\nimport './MessageBody.scss';\n\ninterface Props {\n    message: MessageExtended;\n}\n\nconst MessageBody = ({ message: { content = '', data: message = {} } }: Props) => {\n    const plain = isPlainText(message);\n    return (\n        <div\n            className={classnames(['message-content bodyDecrypted', plain && 'plain'])}\n            dangerouslySetInnerHTML={{ __html: content }}\n        />\n    );\n};\n\nexport default MessageBody;\n","import { VERIFICATION_STATUS } from '../constants';\n\nimport { isAuto, isImported, inSigningPeriod } from './message/messages';\n\nconst { SIGNED_AND_INVALID, SIGNED_AND_VALID, NOT_SIGNED } = VERIFICATION_STATUS;\n\n/**\n * Some complicated logic after internal discussions.\n * This function returns whether we should display a lock with check / warning (indicating the signature status)\n * or we just display a lock.\n * The following logic is applied:\n *  1. Old SENT messages (not imported, not autoresponse) are not signed\n *  2. If a SENT message has been correctly verified, a lonesome lock is displayed, unaccompanied by its check\n *      (because we don't consciously do key pinning here)\n *  3. If a SENT message doesn't have a signature, but should have, we display a warning. A SENT message should have a signature if:\n *      - it is not an autoreply AND\n *      - it is not an import AND\n *      - it is send after the time when we started signing all messages\n *  4. If a message fails the signature check, we display a warning\n *  5. If a (non-sent) message has been correctly verified, we display a check.\n *  6. Else we just display the appropriate lock.\n *      - this happens when there is no signature or it hasn't been verified (meaning unverified SENT message fall in this case).\n *  This logic is caused by sent message's signatures always being verified without requiring the user to enable key pinning\n *  (key pinning for your own keys happens as a consequence of our authentication method).\n *  Thus we don't want to display this check for people that don't understand key pinning, but still keep the\n *  same security.\n *  @return {() => boolean} whether to display the signature status\n */\nexport const displaySignatureStatus = ({ data: message = {}, verified = 0 }) => {\n    // TODO: const isSentByMe = message.isSentByMe();\n    const isSentByMe = false;\n\n    // Rule 4 + 5 + 6 for non-SENT messages\n    if (!isSentByMe) {\n        return verified === SIGNED_AND_INVALID || verified === SIGNED_AND_VALID;\n    }\n    // SENT messages\n    const imported = isImported(message.data);\n    const auto = isAuto(message.data);\n    const period = inSigningPeriod(message.data.Time);\n    // Rule 1:\n    if (!auto && !imported && !period) {\n        return false;\n    }\n    // Rule 2:\n    if (verified === SIGNED_AND_VALID) {\n        return false;\n    }\n    // Rule 3:\n    if (verified === NOT_SIGNED && !auto && !imported && period) {\n        // warning\n        return true;\n    }\n    // Rule 4 + 6:\n    return verified === SIGNED_AND_INVALID;\n};\n","import { c } from 'ttag';\n\nimport {\n    isSentEncrypted,\n    isAuto,\n    isSent,\n    isDraft,\n    isInternalEncrypted,\n    isExternalEncrypted,\n    inSigningPeriod,\n    isImported\n} from './message/messages';\n\nconst I18N = {\n    pm: [\n        c('Message encryption status').t`End-to-end encrypted message`,\n        // gettextCatalog.getString('End-to-end encrypted message', null, 'Message encryption status'),\n        c('Message encryption status').t`End-to-end encrypted message from verified address`,\n        // gettextCatalog.getString(\n        //     'End-to-end encrypted message from verified address',\n        //     null,\n        //     'Message encryption status'\n        // ),\n        c('Message encryption status').t`Sender verification failed`\n        // gettextCatalog.getString('Sender verification failed', null, 'Message encryption status')\n    ],\n    pgp: [\n        c('Message encryption status').t`PGP-encrypted message`,\n        // gettextCatalog.getString('PGP-encrypted message', null, 'Message encryption status'),\n        c('Message encryption status').t`PGP-encrypted message from verified address`,\n        // gettextCatalog.getString('PGP-encrypted message from verified address', null, 'Message encryption status'),\n        c('Message encryption status').t`Sender verification failed`\n        // gettextCatalog.getString('Sender verification failed', null, 'Message encryption status')\n    ],\n    clear: [\n        c('Message encryption status').t`Stored with zero access encryption`,\n        // gettextCatalog.getString('Stored with zero access encryption', null, 'Message encryption status'),\n        c('Message encryption status').t`PGP-signed message from verified address`,\n        // gettextCatalog.getString('PGP-signed message from verified address', null, 'Message encryption status'),\n        c('Message encryption status').t`Sender verification failed`\n        // gettextCatalog.getString('Sender verification failed', null, 'Message encryption status')\n    ],\n    sentEncrypted: [\n        c('Message encryption status').t`Sent by you with end-to-end encryption`,\n        // gettextCatalog.getString('Sent by you with end-to-end encryption', null, 'Message encryption status'),\n        c('Message encryption status').t`Sent by you with end-to-end encryption`,\n        // gettextCatalog.getString('Sent by you with end-to-end encryption', null, 'Message encryption status'),\n        c('Message encryption status').t`Sender verification failed`\n        // gettextCatalog.getString('Sender verification failed', null, 'Message encryption status')\n    ],\n    auto: [\n        c('Message encryption status').t`Sent by ProtonMail with zero access encryption`\n        // gettextCatalog.getString('Sent by ProtonMail with zero access encryption', null, 'Message encryption status')\n    ],\n    sentClear: [\n        c('Message encryption status').t`Stored with zero access encryption`,\n        // gettextCatalog.getString('Stored with zero access encryption', null, 'Message encryption status'),\n        c('Message encryption status').t`Stored with zero access encryption`,\n        // gettextCatalog.getString('Stored with zero access encryption', null, 'Message encryption status'),\n        c('Message encryption status').t`Sender verification failed`\n        // gettextCatalog.getString('Sender verification failed', null, 'Message encryption status')\n    ],\n    draft: [\n        c('Message encryption status').t`Encrypted message`\n        //gettextCatalog.getString('Encrypted message', null, 'Message encryption status')\n    ]\n};\n\nconst getFromType = (message) => {\n    if (isSentEncrypted(message)) {\n        return I18N.sentEncrypted;\n    }\n\n    if (isAuto(message)) {\n        return I18N.auto;\n    }\n\n    if (isSent(message)) {\n        return I18N.sentClear;\n    }\n\n    if (isDraft(message)) {\n        return I18N.draft;\n    }\n\n    if (isInternalEncrypted(message)) {\n        return I18N.pm;\n    }\n\n    if (isExternalEncrypted(message)) {\n        return I18N.pgp;\n    }\n\n    return I18N.clear;\n};\n\nexport const getEncryptionType = ({ data: message = {}, verified = 0 }) => {\n    const encType = getFromType(message);\n\n    if (encType.length > verified) {\n        // Old messages are not signed, so missing sender signatures should be treated like external missing signatures, no warning\n        if (!inSigningPeriod(message) && isSentEncrypted(message) && !isImported(message)) {\n            return encType[0];\n        }\n\n        return encType[verified];\n    }\n\n    return encType[0];\n};\n","import React from 'react';\nimport { Icon, Tooltip, Href, classnames } from 'react-components';\nimport { displaySignatureStatus } from '../../helpers/displaySignature';\nimport { isPGPEncrypted, isInternal, isSentEncrypted, isDraft, isAuto } from '../../helpers/message/messages';\nimport { getEncryptionType } from '../../helpers/encryptionType';\nimport { MessageExtended } from '../../models/message';\n\n// Reference: Angular/src/templates/message/encryptionStatus.tpl.html\n\ninterface Props {\n    message: MessageExtended;\n    className?: string;\n}\n\nconst MessageLock = ({ message, className: inputClassName }: Props) => {\n    const displaySignature = displaySignatureStatus(message);\n    const pgpEncrypted = isPGPEncrypted(message.data);\n\n    const tooltip = getEncryptionType(message);\n    const href = displaySignature\n        ? 'https://protonmail.com/support/knowledge-base/digital-signature/'\n        : pgpEncrypted\n        ? 'https://protonmail.com/support/knowledge-base/how-to-use-pgp'\n        : 'https://protonmail.com/support/knowledge-base/what-is-encrypted/';\n    // TODO: add lock-signed lock-warning in design system\n    // const icon = displaySignature ? (message.verified ? 'lock-signed' : 'lock-warning') : 'lock';\n    const icon = 'lock';\n    const internal =\n        isInternal(message.data) || isSentEncrypted(message.data) || isDraft(message.data) || isAuto(message.data);\n    const className = classnames([\n        inputClassName,\n        'no-pointer-events-children',\n        ...(displaySignature\n            ? [\n                  message.verified === 1 && 'valid-sig',\n                  message.verified !== 1 && 'invalid-sig',\n                  internal && 'color-pm-blue', // 'internal',\n                  pgpEncrypted && 'pgp'\n              ]\n            : ['nodecoration color-global-grey flex', internal && 'color-pm-blue'])\n    ]);\n\n    return (\n        <Tooltip title={tooltip} className=\"inbl\">\n            <Href className={className} href={href}>\n                <Icon name={icon} className=\"fill-currentColor\" />\n            </Href>\n        </Tooltip>\n    );\n};\n\nexport default MessageLock;\n","import React, { MouseEvent } from 'react';\nimport { c } from 'ttag';\n\nimport ItemStar from '../../list/ItemStar';\nimport ItemDate from '../../list/ItemDate';\nimport { ELEMENT_TYPES } from '../../../constants';\nimport MessageLock from '../MessageLock';\nimport { isSent, isDraft } from '../../../helpers/message/messages';\nimport ItemLabels from '../../list/ItemLabels';\nimport ItemAttachmentIcon from '../../list/ItemAttachmentIcon';\nimport { MessageExtended } from '../../../models/message';\nimport { Label } from '../../../models/label';\n\ninterface Props {\n    message: MessageExtended;\n    labels: Label[];\n    onExpand: () => void;\n}\n\nconst HeaderCollapsed = ({ message, labels, onExpand }: Props) => {\n    const { Name, Address } = (message.data || {}).Sender || {};\n\n    const handleClick = (event: MouseEvent) => {\n        const target = event.target as HTMLElement;\n        if (target.classList.contains('item-star') || target.closest('.item-star')) {\n            event.stopPropagation();\n            return;\n        }\n\n        onExpand();\n    };\n\n    const inOutClass = isSent(message.data) ? 'is-outbound' : 'is-inbound';\n\n    return (\n        <div\n            className={`message-header message-header-collapsed flex flex-nowrap flex-items-center flex-spacebetween cursor-pointer ${inOutClass}`}\n            onClick={handleClick}\n        >\n            <div>\n                <span className=\"mr0-5\">{c('Label').t`From:`}</span>\n                <span className=\"bold mr0-5\" title={Name}>\n                    {Name}\n                </span>\n                <i title={Address}>&lt;{Address}&gt;</i>\n                <MessageLock message={message} />\n            </div>\n            <div>\n                {isDraft(message.data) && <span className=\"badgeLabel-success\">{c('Info').t`Draft`}</span>}\n                <ItemAttachmentIcon element={message.data} type={ELEMENT_TYPES.MESSAGE} />\n                <ItemLabels element={message.data || {}} labels={labels} className=\"mr1\" />\n                <ItemDate className=\"mr1\" element={message.data || {}} mode=\"distance\" />\n                <ItemStar element={message.data} type={ELEMENT_TYPES.MESSAGE} />\n            </div>\n        </div>\n    );\n};\n\nexport default HeaderCollapsed;\n","import React from 'react';\nimport { Icon } from 'react-components';\nimport { c } from 'ttag';\nimport { MessageExtended } from '../../../models/message';\n\ninterface Props {\n    message: MessageExtended;\n    type: string;\n    onLoadImages: () => void;\n}\n\nconst ExtraImages = ({\n    message: { showRemoteImages = true, showEmbeddedImages = true },\n    type,\n    onLoadImages\n}: Props) => {\n    // Flags will not be setted if there is no images\n    if ((type === 'remote' && showRemoteImages !== false) || (type === 'embedded' && showEmbeddedImages !== false)) {\n        return null;\n    }\n\n    return (\n        <div className=\"bg-white rounded bordered-container p0-5 mb0-5 flex flex-nowrap\">\n            <Icon name=\"insert-image\" className=\"fill-global-grey mtauto mbauto\" />\n            <span className=\"pl0-5 pr0-5 flex-item-fluid\">\n                {type === 'remote'\n                    ? c('Action').t`This message contains remote content`\n                    : c('Action').t`This message contains embedded images`}\n            </span>\n            <a onClick={onLoadImages} className=\"bold\">\n                {c('Action').t`Load`}\n            </a>\n        </div>\n    );\n};\n\nexport default ExtraImages;\n","import React from 'react';\nimport { Icon, Href } from 'react-components';\nimport { c } from 'ttag';\nimport { getListUnsubscribe } from '../../../helpers/message/messages';\nimport { MessageExtended } from '../../../models/message';\n\ninterface Props {\n    message: MessageExtended;\n}\n\nconst ExtraUnsubscribe = ({ message: { data: message = {} } }: Props) => {\n    if (/*unsubscribed || */ !getListUnsubscribe(message)) {\n        return null;\n    }\n\n    return (\n        <div className=\"bg-white rounded bordered-container p0-5 mb0-5 flex flex-nowrap\">\n            <Icon name=\"email\" className=\"flex-item-noshrink fill-global-grey mtauto mbauto\" />\n            <span className=\"pl0-5 pr0-5 flex-item-fluid\">{c('Info').t`This message is from a mailing list`}</span>\n            <span className=\"flex-item-noshrink flex\">\n                <Href\n                    className=\"bold mr1 pl0-5 pr0-5\"\n                    href=\"https://protonmail.com/support/knowledge-base/auto-unsubscribe\"\n                >\n                    {c('Info').t`Learn more`}\n                </Href>\n                <a className=\"bold\">{c('Action').t`Unsubscribe`}</a>\n            </span>\n        </div>\n    );\n};\n\nexport default ExtraUnsubscribe;\n","import React from 'react';\nimport ExtraImages from '../extras/ExtraImages';\nimport ExtraUnsubscribe from '../extras/ExtraUnsubscribe';\nimport { MessageExtended } from '../../../models/message';\n\ninterface Props {\n    message: MessageExtended;\n    onLoadRemoteImages: () => void;\n    onLoadEmbeddedImages: () => void;\n}\n\nconst HeaderExtra = ({ message, onLoadRemoteImages, onLoadEmbeddedImages }: Props) => {\n    return (\n        <section className=\"ml1 mr1 mt0-5\">\n            {/* TODO: ExpirationTime */}\n            {/* TODO: SpamScore */}\n            {/* TODO: MIMEParsingFailed */}\n            {/* TODO: hasError */}\n            <ExtraUnsubscribe message={message} />\n            {/* TODO: requireReadReceiptConfirmation */}\n            {/* TODO: isAutoReply */}\n            {/* TODO: attachedPublicKey */}\n            {/* TODO: promptKeyPinning */}\n            {/* TODO: askResign */}\n            <ExtraImages message={message} type=\"remote\" onLoadImages={onLoadRemoteImages} />\n            <ExtraImages message={message} type=\"embedded\" onLoadImages={onLoadEmbeddedImages} />\n        </section>\n    );\n};\n\nexport default HeaderExtra;\n","import React from 'react';\nimport { c } from 'ttag';\nimport { Message } from '../../../models/message';\nimport { getRecipients } from '../../../helpers/message/messages';\nimport { recipientsToRecipientOrGroup, getRecipientOrGroupLabel } from '../../../helpers/addresses';\nimport { ContactGroup, ContactEmail } from '../../../models/contact';\n\ninterface Props {\n    message?: Message;\n    contacts: ContactEmail[];\n    contactGroups: ContactGroup[];\n}\n\nconst HeaderRecipientsSimple = ({ message = {}, contacts, contactGroups }: Props) => {\n    const recipients = getRecipients(message);\n    const recipientsOrGroup = recipientsToRecipientOrGroup(recipients, contactGroups);\n\n    return (\n        <div className=\"flex\">\n            <span className=\"opacity-50 flex-self-vcenter container-to\">{c('Label').t`To:`}</span>\n            <span className=\"flex-self-vcenter mr1\">\n                {recipientsOrGroup.map((recipientOrGroup, index) => {\n                    const label = getRecipientOrGroupLabel(recipientOrGroup, contacts);\n                    return (\n                        <span key={index} className=\"mr0-5\" title={label}>\n                            {label}\n                            {index < recipientsOrGroup.length - 1 && ','}\n                        </span>\n                    );\n                })}\n            </span>\n        </div>\n    );\n};\n\nexport default HeaderRecipientsSimple;\n","import React from 'react';\nimport { c } from 'ttag';\nimport { Message } from '../../../models/message';\nimport { Recipient } from '../../../models/address';\nimport { ContactEmail, ContactGroup } from '../../../models/contact';\nimport { recipientsToRecipientOrGroup, getRecipientLabel, getRecipientGroupLabel } from '../../../helpers/addresses';\nimport { getContactsOfGroup } from '../../../helpers/contacts';\n\ninterface Props {\n    message?: Message;\n    contacts: ContactEmail[];\n    contactGroups: ContactGroup[];\n}\n\ninterface ListProps {\n    list: Recipient[];\n    contacts: ContactEmail[];\n    contactGroups: ContactGroup[];\n}\n\nconst RecipientsList = ({ list, contacts, contactGroups }: ListProps) => {\n    const recipientsOrGroup = recipientsToRecipientOrGroup(list, contactGroups);\n\n    return (\n        <span className=\"flex-self-vcenter flex flex-column\">\n            {recipientsOrGroup.map((recipientOrGroup, index) =>\n                recipientOrGroup.recipient ? (\n                    <span key={index}>\n                        {getRecipientLabel(recipientOrGroup.recipient)}{' '}\n                        <span className=\"opacity-50\">&lt;{recipientOrGroup.recipient.Address}&gt;</span>{' '}\n                    </span>\n                ) : (\n                    <span key={index}>\n                        {getRecipientGroupLabel(\n                            recipientOrGroup?.group,\n                            getContactsOfGroup(contacts, recipientOrGroup?.group?.group?.ID).length\n                        )}\n                    </span>\n                )\n            )}\n        </span>\n    );\n};\n\nconst HeaderRecipientsDetails = ({ message = {}, contacts, contactGroups }: Props) => {\n    const { ToList = [], CCList = [], BCCList = [] } = message;\n\n    return (\n        <div className=\"flex flex-column\">\n            {ToList.length > 0 && (\n                <span className=\"flex\">\n                    <span className=\"opacity-50 container-to\">{c('Label').t`To:`}</span>\n                    <span className=\"flex-self-vcenter mr1\">\n                        <RecipientsList list={ToList} contacts={contacts} contactGroups={contactGroups} />\n                    </span>\n                </span>\n            )}\n            {CCList.length > 0 && (\n                <span className=\"flex\">\n                    <span className=\"opacity-50 container-to\">{c('Label').t`CC:`}</span>\n                    <span className=\"flex-self-vcenter mr1\">\n                        <RecipientsList list={CCList} contacts={contacts} contactGroups={contactGroups} />\n                    </span>\n                </span>\n            )}\n            {BCCList.length > 0 && (\n                <span className=\"flex\">\n                    <span className=\"opacity-50 container-to\">{c('Label').t`BCC:`}</span>\n                    <span className=\"flex-self-vcenter mr1\">\n                        <RecipientsList list={BCCList} contacts={contacts} contactGroups={contactGroups} />\n                    </span>\n                </span>\n            )}\n        </div>\n    );\n};\n\nexport default HeaderRecipientsDetails;\n","import React, { useState, ReactNode } from 'react';\nimport { generateUID, usePopperAnchor, DropdownButton, Dropdown } from 'react-components';\n\ninterface Props {\n    content?: ReactNode;\n    children: ({ onClose }: { onClose: () => void }) => ReactNode;\n    autoClose?: boolean;\n    [rest: string]: any;\n}\n\nconst HeaderDropdown = ({ content, children, autoClose, ...rest }: Props) => {\n    const [uid] = useState(generateUID('dropdown'));\n\n    const { anchorRef, isOpen, toggle, close } = usePopperAnchor();\n\n    return (\n        <>\n            <DropdownButton {...rest} buttonRef={anchorRef} isOpen={isOpen} onClick={toggle} caretClassName={null}>\n                {content}\n            </DropdownButton>\n            <Dropdown id={uid} autoClose={autoClose} isOpen={isOpen} anchorRef={anchorRef} onClose={close}>\n                {children({ onClose: close })}\n            </Dropdown>\n        </>\n    );\n};\n\nexport default HeaderDropdown;\n","import React, { MouseEvent } from 'react';\nimport { c } from 'ttag';\nimport { Icon, Group, ButtonGroup, useToggle, useContactEmails } from 'react-components';\nimport humanSize from 'proton-shared/lib/helpers/humanSize';\n\nimport ItemStar from '../../list/ItemStar';\nimport ItemDate from '../../list/ItemDate';\nimport { ELEMENT_TYPES, MESSAGE_ACTIONS } from '../../../constants';\nimport ItemLabels from '../../list/ItemLabels';\nimport ItemLocation from '../../list/ItemLocation';\nimport MoveDropdown from '../../dropdown/MoveDropdown';\nimport LabelDropdown from '../../dropdown/LabelDropdown';\nimport HeaderExtra from './HeaderExtra';\nimport MessageLock from '../MessageLock';\nimport { isSent } from '../../../helpers/message/messages';\nimport HeaderRecipientsSimple from './HeaderRecipientsSimple';\nimport HeaderRecipientsDetails from './HeaderRecipientsDetails';\nimport ItemAttachmentIcon from '../../list/ItemAttachmentIcon';\nimport { MessageExtended } from '../../../models/message';\nimport { Label } from '../../../models/label';\nimport HeaderDropdown from './HeaderDropdown';\nimport { OnCompose } from '../../../containers/ComposerContainer';\n\nimport './MessageHeader.scss';\nimport { ContactEmail } from '../../../models/contact';\nimport { useContactGroups } from '../../../hooks/useContactGroups';\n\ninterface Props {\n    labels?: Label[];\n    mailSettings: any;\n    message: MessageExtended;\n    messageLoaded: boolean;\n    onLoadRemoteImages: () => void;\n    onLoadEmbeddedImages: () => void;\n    onCollapse: () => void;\n    onCompose: OnCompose;\n}\n\nconst HeaderExpanded = ({\n    labels,\n    message,\n    messageLoaded,\n    onLoadRemoteImages,\n    onLoadEmbeddedImages,\n    mailSettings,\n    onCollapse,\n    onCompose\n}: Props) => {\n    const [contacts]: [ContactEmail[]] = useContactEmails();\n    const [contactGroups] = useContactGroups();\n    const { state: showDetails, toggle: toggleDetails } = useToggle();\n\n    const { Name, Address } = (message.data || {}).Sender || {};\n    const inOutClass = isSent(message.data) ? 'is-outbound' : 'is-inbound';\n\n    const handleClick = (event: MouseEvent) => {\n        if ((event.target as HTMLElement).closest('.stop-propagation')) {\n            event.stopPropagation();\n            return;\n        }\n\n        onCollapse();\n    };\n    const handleCompose = (action: MESSAGE_ACTIONS) => () => {\n        onCompose({\n            action,\n            referenceMessage: message\n        });\n    };\n\n    return (\n        <div className={`message-header message-header-expanded ${inOutClass}`}>\n            <div\n                className=\"flex flex-nowrap flex-items-center flex-spacebetween pt1 pl1 pr1 pb0-5 cursor-pointer\"\n                onClick={handleClick}\n            >\n                <div>\n                    <span className=\"mr0-5\">{c('Label').t`From:`}</span>\n                    <span className=\"bold mr0-5\" title={Name}>\n                        {Name}\n                    </span>\n                    <i title={Address}>&lt;{Address}&gt;</i>\n                    <MessageLock message={message} className=\"stop-propagation\" />\n                </div>\n                <div>\n                    <ItemDate element={message.data || {}} mode=\"distance\" />\n                </div>\n            </div>\n            <div className=\"flex flex-nowrap flex-items-start flex-spacebetween ml1 mr1 mb0-5\">\n                {showDetails ? (\n                    <HeaderRecipientsDetails message={message.data} contacts={contacts} contactGroups={contactGroups} />\n                ) : (\n                    <HeaderRecipientsSimple message={message.data} contacts={contacts} contactGroups={contactGroups} />\n                )}\n                <div>\n                    <ItemAttachmentIcon element={message.data || {}} type={ELEMENT_TYPES.MESSAGE} />\n                    {' ' /* This space is important to keep a small space between elements */}\n                    <ItemLabels max={4} element={message.data || {}} labels={labels} />\n                    {' ' /* This space is important to keep a small space between elements */}\n                    <ItemLocation message={message.data || {}} mailSettings={mailSettings} />\n                    {' ' /* This space is important to keep a small space between elements */}\n                    <ItemStar element={message.data || {}} type={ELEMENT_TYPES.MESSAGE} />\n                </div>\n            </div>\n            {showDetails ? (\n                <>\n                    <div className=\"ml1 mr1 mb0-5\">\n                        <span className=\"mr0-5\">{c('Label').t`Size:`}</span>\n                        <span>{humanSize((message.data || {}).Size || 0)}</span>\n                    </div>\n                    <div className=\"ml1 mr1 mb0-5\">\n                        <ItemDate element={message.data || {}} mode=\"full\" />\n                    </div>\n                </>\n            ) : null}\n            <div className=\"flex flex-spacebetween ml1 mr1 mb1 flex-nowrap\">\n                <a onClick={toggleDetails} className=\"bold flex-self-vcenter\">\n                    {showDetails ? c('Action').t`Hide details` : c('Action').t`Show details`}\n                </a>\n                <div>\n                    <Group className=\"mr1\">\n                        <HeaderDropdown autoClose={false} content={<Icon name=\"folder\" />}>\n                            {({ onClose }) => (\n                                <MoveDropdown\n                                    selectedIDs={[(message.data || {}).ID || '']}\n                                    type={ELEMENT_TYPES.MESSAGE}\n                                    onClose={onClose}\n                                />\n                            )}\n                        </HeaderDropdown>\n                        <HeaderDropdown autoClose={false} content={<Icon name=\"label\" />}>\n                            {({ onClose }) => (\n                                <LabelDropdown\n                                    selectedIDs={[(message.data || {}).ID || '']}\n                                    type={ELEMENT_TYPES.MESSAGE}\n                                    onClose={onClose}\n                                />\n                            )}\n                        </HeaderDropdown>\n                    </Group>\n\n                    <Group>\n                        <ButtonGroup disabled={!messageLoaded} onClick={handleCompose(MESSAGE_ACTIONS.REPLY)}>\n                            <Icon name=\"reply\" />\n                        </ButtonGroup>\n                        <ButtonGroup disabled={!messageLoaded} onClick={handleCompose(MESSAGE_ACTIONS.REPLY_ALL)}>\n                            <Icon name=\"reply-all\" />\n                        </ButtonGroup>\n                        <ButtonGroup disabled={!messageLoaded} onClick={handleCompose(MESSAGE_ACTIONS.FORWARD)}>\n                            <Icon name=\"forward\" />\n                        </ButtonGroup>\n                    </Group>\n                </div>\n            </div>\n            <HeaderExtra\n                message={message}\n                onLoadRemoteImages={onLoadRemoteImages}\n                onLoadEmbeddedImages={onLoadEmbeddedImages}\n            />\n        </div>\n    );\n};\n\nexport default HeaderExpanded;\n","import { Attachment } from '../../models/attachment';\n\nexport const embeddableTypes = ['image/gif', 'image/jpeg', 'image/png', 'image/bmp'];\n\nexport const isEmbeddedLocal = ({\n    Headers: { 'content-disposition': disposition, embedded } = {}\n}: Attachment = {}) => {\n    return disposition === 'inline' || Number(embedded) === 1;\n};\n\nexport const isEmbeddable = (fileType: string) => embeddableTypes.includes(fileType);\n","export const getAttachment = (attachmentID: string) => ({\n    method: 'get',\n    url: `attachments/${attachmentID}`,\n    output: 'arrayBuffer'\n});\n\nexport const uploadAttachment = (data: {\n    Filename: string;\n    MessageID: string;\n    ContentID: string;\n    MIMEType: string;\n    KeyPackets: Blob;\n    DataPacket: Blob;\n    Signature?: Blob;\n}) => ({\n    method: 'post',\n    url: 'attachments',\n    input: 'form',\n    data\n});\n\nexport const removeAttachment = (attachmentID: string, messageID: string) => ({\n    method: 'delete',\n    url: `attachments/${attachmentID}`,\n    params: { MessageID: messageID }\n});\n","import {\n    binaryStringToArray,\n    concatArrays,\n    decodeBase64,\n    decryptMessage,\n    decryptSessionKey,\n    getMessage,\n    SessionKey,\n    BinaryResult\n} from 'pmcrypto';\n\nimport { getAttachment } from '../../api/attachments';\nimport { MessageExtended } from '../../models/message';\nimport { Attachment } from '../../models/attachment';\nimport { AttachmentsDataCache } from '../../hooks/useAttachments';\nimport { Api } from '../../models/utils';\n\n// Reference: Angular/src/app/attachments/services/AttachmentLoader.js\n\n// TODO: Handle isOutside()\n\nexport const decrypt = async (encryptedBinaryBuffer: ArrayBuffer, sessionKey: SessionKey): Promise<BinaryResult> => {\n    const encryptedBinary = new Uint8Array(encryptedBinaryBuffer);\n\n    try {\n        return decryptMessage({\n            message: await getMessage(encryptedBinary),\n            sessionKeys: [sessionKey],\n            format: 'binary'\n        }) as BinaryResult;\n    } catch (err) {\n        console.error(err);\n        throw err;\n    }\n};\n\nexport const getRequest = ({ ID = '' }: Attachment = {}, api: Api): Promise<ArrayBuffer> => {\n    // if (isOutside()) {\n    //     const decryptedToken = eoStore.getToken();\n    //     const token = $stateParams.tag;\n    //     return Eo.attachment(decryptedToken, token, ID);\n    // }\n\n    return api(getAttachment(ID));\n};\n\nexport const getSessionKey = async (attachment: Attachment, message: MessageExtended): Promise<SessionKey> => {\n    // if (attachment.sessionKey) {\n    //     return attachment;\n    // }\n\n    const keyPackets = binaryStringToArray(decodeBase64(attachment.KeyPackets) || '');\n    const options = { message: await getMessage(keyPackets), privateKeys: message.privateKeys as any };\n\n    // if (isOutside()) {\n    //     options.passwords = [eoStore.getPassword()];\n    // } else {\n    //     options.privateKeys = keysModel.getPrivateKeys(message.AddressID);\n    // }\n\n    const sessionKey = await decryptSessionKey(options);\n\n    if (sessionKey === undefined) {\n        throw new Error('Error while decrypting session keys');\n    }\n\n    return sessionKey;\n};\n\nexport const getDecryptedAttachment = async (\n    attachment: Attachment,\n    message: MessageExtended,\n    api: Api\n): Promise<BinaryResult> => {\n    const encryptedBinary = await getRequest(attachment, api);\n    try {\n        const sessionKey = await getSessionKey(attachment, message);\n        return await decrypt(encryptedBinary, sessionKey);\n    } catch (error) {\n        const blob = concatArrays([\n            binaryStringToArray(decodeBase64(attachment.KeyPackets) || ''),\n            new Uint8Array(encryptedBinary)\n        ]);\n        // Fallback download raw attachment\n        throw { data: attachment, binary: blob, error };\n    }\n};\n\nexport const getAndVerify = async (\n    attachment: Attachment = {},\n    message: MessageExtended = {},\n    reverify = false,\n    cache: AttachmentsDataCache,\n    api: Api\n): Promise<BinaryResult> => {\n    let attachmentdata: BinaryResult;\n\n    const attachmentID = attachment.ID || '';\n\n    if (attachment.Preview) {\n        return { data: attachment.Preview, filename: 'preview', signatures: [] };\n    }\n\n    if (cache.has(attachmentID)) {\n        attachmentdata = cache.get(attachmentID) as BinaryResult;\n    } else {\n        attachmentdata = await getDecryptedAttachment(attachment, message, api);\n\n        if (reverify) {\n            // await verify(attachment, newAttachment, message, signatures, signatureCache));\n        }\n    }\n\n    cache.set(attachmentID, attachmentdata);\n\n    return attachmentdata;\n};\n\nexport const get = (\n    attachment: Attachment = {},\n    message: MessageExtended = {},\n    cache: AttachmentsDataCache,\n    api: Api\n): Promise<BinaryResult> => {\n    const reverify = false;\n    return getAndVerify(attachment, message, reverify, cache, api);\n};\n\nexport const reverify = (\n    attachment: Attachment = {},\n    message: MessageExtended = {},\n    cache: AttachmentsDataCache,\n    api: Api\n): Promise<BinaryResult> => {\n    const reverify = true;\n    return getAndVerify(attachment, message, reverify, cache, api);\n};\n","import JSZip from 'jszip';\nimport downloadFile from 'proton-shared/lib/helpers/downloadFile';\nimport { splitExtension } from 'proton-shared/lib/helpers/file';\n\nimport { MessageExtended, Message } from '../../models/message';\nimport { Attachment } from '../../models/attachment';\nimport { getAndVerify } from './attachmentLoader';\nimport { AttachmentsDataCache } from '../../hooks/useAttachments';\nimport { Api, Binary } from '../../models/utils';\n\ninterface Download {\n    attachment: Attachment;\n    data: Binary;\n    isError?: boolean;\n}\n\n/**\n * Format attachment for the download\n */\nconst formatDownload = async (\n    attachment: Attachment,\n    message: MessageExtended,\n    cache: AttachmentsDataCache,\n    api: Api\n): Promise<Download> => {\n    try {\n        const { data } = await getAndVerify(attachment, message, false, cache, api);\n        return {\n            attachment,\n            data: data as Binary\n        };\n    } catch (e) {\n        // If the decryption fails we download the encrypted version\n        if (e.data) {\n            return {\n                attachment: {\n                    Name: `${attachment.Name}.pgp`,\n                    MIMEType: 'application/pgp',\n                    ID: attachment.ID\n                },\n                data: e.data,\n                isError: true\n            };\n        }\n        throw e;\n    }\n};\n\n/**\n * Generate a download for an attachment\n */\nconst generateDownload = async (download: Download /*, message: MessageExtended*/) => {\n    // TODO: uncomment\n    // try {\n    //     await checkAllSignatures(message, [attachment]);\n    // } catch (e) {\n    //     // swallow as the user is informed already by a confirmation and actually caused this error\n    //     return;\n    // }\n\n    downloadFile(new Blob([download.data], { type: download.attachment.MIMEType }), download.attachment.Name);\n};\n\n/**\n * Download an attachment\n */\nexport const download = async (\n    attachment: Attachment,\n    message: MessageExtended,\n    cache: AttachmentsDataCache,\n    api: Api\n): Promise<void> => {\n    const download = await formatDownload(attachment, message, cache, api);\n\n    // TODO: uncomment\n    // if (download.isError) {\n    //     if (!(await allowDownloadBrokenAtt())) {\n    //         return; // We don't want to download it\n    //     }\n    // }\n\n    return generateDownload(download);\n};\n\n/**\n * The attachment's Name is not unique we need a unique name in order to make the zip.\n * The lib doesn't allow duplicates\n */\nconst formatDownloadAll = async (\n    message: MessageExtended,\n    cache: AttachmentsDataCache,\n    api: Api\n): Promise<Download[]> => {\n    const { Attachments = [] } = message.data || {};\n    const { list }: { list: Attachment[] } = Attachments.reduce(\n        (acc: any, att) => {\n            const name = att.Name || '';\n            if (!acc.map[name]) {\n                acc.map[name] = { index: 0 };\n            } else {\n                acc.map[name].index++;\n                const [fileName, ext] = splitExtension(name);\n                const newName = `${fileName} (${acc.map[name].index}).${ext}`;\n                att.Name = newName;\n            }\n            acc.list.push(att);\n            return acc;\n        },\n        { list: [], map: {} }\n    );\n\n    return Promise.all(list.map((att) => formatDownload(att, message, cache, api)));\n};\n\nconst getZipAttachmentName = (message: Message = {}) => `Attachments-${message.Subject}.zip`;\n\n/**\n * Download all attachments as a zipfile\n */\nexport const downloadAll = async (\n    message: MessageExtended = {},\n    cache: AttachmentsDataCache,\n    api: Api\n): Promise<void> => {\n    const list = await formatDownloadAll(message, cache, api);\n\n    // TODO: uncomment\n    // try {\n    //     await checkAllSignatures(message, list);\n    // } catch (e) {\n    //     // swallow as the user is informed already by a confirmation and actually caused this error\n    //     return;\n    // }\n\n    // TODO: uncomment\n    // // Detect if we have at least one error\n    // if (list.some(({ isError }) => isError)) {\n    //     if (!(await allowDownloadBrokenAtt())) {\n    //         return; // We don't want to download it\n    //     }\n    // }\n\n    const zip = new JSZip();\n    list.forEach(({ attachment: { Name = '' }, data }) => zip.file(Name, data));\n    const content = await zip.generateAsync({ type: 'blob' });\n    downloadFile(content, getZipAttachmentName(message.data));\n};\n","import { useCache } from 'react-components';\nimport { BinaryResult } from 'pmcrypto';\nimport { Attachment } from '../models/attachment';\n\nconst CACHE_KEY = 'Attachments';\n\nexport interface BlobInfo {\n    url: string;\n    isContentLocation: boolean;\n}\n\nexport type AttachmentsDataCache = Map<string, BinaryResult>;\nexport type AttachmentsBlobsCache = Map<string, BlobInfo>;\nexport type AttachmentsCidsCache = Map<string, Map<string, Attachment>>;\n// export type AttachmentsUploadQueue = Map<string, File[]>;\n\nexport interface AttachmentsCache {\n    data: AttachmentsDataCache;\n    blobs: AttachmentsBlobsCache;\n    cids: AttachmentsCidsCache;\n    // uploads: AttachmentsUploadQueue;\n}\n\nexport const useAttachmentsCache = (): AttachmentsCache => {\n    const globalCache = useCache();\n\n    if (!globalCache.has(CACHE_KEY)) {\n        globalCache.set(CACHE_KEY, {\n            data: new Map(),\n            blobs: new Map(),\n            cids: new Map()\n            // uploads: []\n        });\n    }\n\n    return globalCache.get(CACHE_KEY);\n};\n","import React, { useState } from 'react';\nimport humanSize from 'proton-shared/lib/helpers/humanSize';\nimport { Icon, classnames, useApi } from 'react-components';\nimport { MessageExtended } from '../../models/message';\nimport { isEmbeddedLocal } from '../../helpers/attachment/attachments';\nimport { Attachment } from '../../models/attachment';\nimport { download } from '../../helpers/attachment/attachmentDownloader';\nimport { useAttachmentsCache } from '../../hooks/useAttachments';\n\n// Reference: Angular/src/templates/attachments/attachmentElement.tpl.html\n\nconst OUTER_MAP_CLASSNAME: { [key: string]: string } = {\n    zip: 'file-rar-zip',\n    mp3: 'file-video',\n    javascript: 'file-unknown',\n    vcard: 'file-unknown',\n    xls: 'file-xls',\n    mov: 'file-video',\n    pdf: 'file-pdf',\n    power: 'file-ppt',\n    word: 'file-doc'\n};\n\nconst INNER_MAP_CLASSNAME: { [key: string]: string } = {\n    'pgp-keys': 'fa-key'\n};\n\nconst getFileIconType = ({ MIMEType = '' }: Attachment) => {\n    const key = Object.keys(OUTER_MAP_CLASSNAME).find((key) => MIMEType.includes(key));\n    return OUTER_MAP_CLASSNAME[key || ''] || '';\n};\n\nconst getInnerFileIconType = ({ MIMEType = '' }: Attachment) => {\n    const key = Object.keys(INNER_MAP_CLASSNAME).find((key) => MIMEType.includes(key));\n    return INNER_MAP_CLASSNAME[key || ''] || '';\n};\n\ninterface Props {\n    attachment: Attachment;\n    message: MessageExtended;\n}\n\nconst MessageAttachment = ({ attachment, message }: Props) => {\n    const cache = useAttachmentsCache();\n    const api = useApi();\n    const [showLoader, setShowLoader] = useState(false);\n    const [showInstant, setShowInstant] = useState(false);\n\n    const humanAttachmentSize = humanSize(attachment.Size);\n\n    const outerIcon = getFileIconType(attachment) || 'file-image';\n    const single = !getInnerFileIconType(attachment);\n    const isEmbedded = isEmbeddedLocal(attachment);\n\n    const classNames = classnames([\n        'listAttachments-icon listAttachments-signature-icon mauto file-outer-icon',\n        single && 'single',\n        isEmbedded && 'is-embedded'\n    ]);\n\n    const clickHandler = async () => {\n        setShowLoader(true);\n        await download(attachment, message, cache.data, api);\n        setShowLoader(false);\n        setShowInstant(true);\n    };\n\n    const icon = showLoader ? '' : showInstant ? 'download' : outerIcon;\n    const showInner = !single && !showLoader && !showInstant;\n\n    return (\n        <li className=\"mr1 mb1\">\n            <a\n                className=\"message-attachment inline-flex flex-nowrap mw100 pm-button listAttachments-item relative no-pointer-events-children\"\n                title={`${attachment.Name} ${humanAttachmentSize}`}\n                onClick={clickHandler}\n            >\n                <span className=\"flex flex-item-noshrink message-attachmentIcon relative flex\">\n                    <Icon name={icon} size={20} className={classNames} aria-busy={showLoader} />\n                    {showInner && <Icon name=\"key\" className=\"file-inner-icon mauto\" />}\n                </span>\n                <span className=\"inbl ellipsis flex flex-column message-attachmentInfo\">\n                    <span className=\"bl ellipsis mw100\">{attachment.Name}</span>\n                    <span className=\"bl message-attachmentSize\">{humanAttachmentSize}</span>\n                </span>\n            </a>\n        </li>\n    );\n};\n\nexport default MessageAttachment;\n","import React, { useState } from 'react';\nimport { c, msgid } from 'ttag';\nimport { Icon, useApi } from 'react-components';\nimport humanSize from 'proton-shared/lib/helpers/humanSize';\n\nimport { attachmentsSize, getAttachments } from '../../helpers/message/messages';\nimport MessageAttachment from './MessageAttachment';\nimport { MessageExtended } from '../../models/message';\nimport { useAttachmentsCache } from '../../hooks/useAttachments';\nimport { downloadAll } from '../../helpers/attachment/attachmentDownloader';\n\ninterface Props {\n    message: MessageExtended;\n}\n\nconst MessageFooter = ({ message }: Props) => {\n    const cache = useAttachmentsCache();\n    const api = useApi();\n    const [showLoader, setShowLoader] = useState(false);\n    const [showInstant, setShowInstant] = useState(false);\n\n    const humanAttachmentsSize = humanSize(attachmentsSize(message.data));\n    const attachments = getAttachments(message.data);\n    const numAttachments = attachments.length;\n    const numEmbedded = message.numEmbedded || 0;\n    const numPureAttachments = numAttachments - numEmbedded;\n\n    const handleDownloadAll = async () => {\n        setShowLoader(true);\n        await downloadAll(message, cache.data, api);\n        setShowLoader(false);\n        setShowInstant(true);\n    };\n\n    return (\n        <div className=\"message-attachments\">\n            <div className=\"flex flex-spacebetween mb1\">\n                <span className=\"title\">\n                    <strong className=\"listAttachments-title-size mr0-5\">{humanAttachmentsSize}</strong>\n                    {numPureAttachments > 0 && (\n                        <span className=\"listAttachments-title-files mr0-5\">\n                            <Icon name=\"attach\" className=\"mr0-5\" />\n                            {c('Info').ngettext(\n                                msgid`${numPureAttachments} file attached`,\n                                `${numPureAttachments} files attached`,\n                                numPureAttachments\n                            )}\n                        </span>\n                    )}\n                    {numEmbedded > 0 && (\n                        <span className=\"listAttachments-title-embedded mr0-5\">\n                            {/* TODO: color=\"pm-blue\" */}\n                            <Icon name=\"file-image\" className=\"mr0-5\" />\n                            {c('Info').ngettext(\n                                msgid`${numEmbedded} embedded image`,\n                                `${numEmbedded} embedded images`,\n                                numEmbedded\n                            )}\n                        </span>\n                    )}\n                </span>\n                {numAttachments > 0 && (\n                    <div>\n                        <button onClick={handleDownloadAll} className=\"link strong mr0-5\">\n                            {c('Download attachments').t`Download all`}\n                        </button>\n                        {(showInstant || showLoader) && (\n                            <Icon name={showInstant ? 'download' : ''} aria-busy={showLoader} />\n                        )}\n                    </div>\n                )}\n            </div>\n\n            <ul className=\"listAttachments-list unstyled flex mb0\">\n                {attachments.map((attachment) => (\n                    <MessageAttachment key={attachment.ID} attachment={attachment} message={message} />\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default MessageFooter;\n","// import getRandomValues from 'get-random-values';\n\n// import { EMAIL_FORMATING } from '../app/constants';\n\nexport const EMAIL_FORMATING = {\n    OPEN_TAG_AUTOCOMPLETE: '‹',\n    CLOSE_TAG_AUTOCOMPLETE: '›',\n    OPEN_TAG_AUTOCOMPLETE_RAW: '<',\n    CLOSE_TAG_AUTOCOMPLETE_RAW: '>'\n};\n\nconst {\n    OPEN_TAG_AUTOCOMPLETE,\n    CLOSE_TAG_AUTOCOMPLETE,\n    OPEN_TAG_AUTOCOMPLETE_RAW,\n    CLOSE_TAG_AUTOCOMPLETE_RAW\n} = EMAIL_FORMATING;\n\nexport const MAP_TAGS = {\n    [OPEN_TAG_AUTOCOMPLETE_RAW]: OPEN_TAG_AUTOCOMPLETE,\n    [CLOSE_TAG_AUTOCOMPLETE_RAW]: CLOSE_TAG_AUTOCOMPLETE,\n    [OPEN_TAG_AUTOCOMPLETE]: OPEN_TAG_AUTOCOMPLETE_RAW,\n    [CLOSE_TAG_AUTOCOMPLETE]: CLOSE_TAG_AUTOCOMPLETE_RAW\n};\n\nexport const escape = (string: string) => {\n    const UNESCAPE_HTML_REGEX = /[&<>\"']/g;\n    const HTML_ESCAPES = {\n        '&': '&amp;',\n        '<': '&lt;',\n        '>': '&gt;',\n        '\"': '&quot;',\n        \"'\": '&#39;'\n    };\n\n    return string.replace(UNESCAPE_HTML_REGEX, HTML_ESCAPES as any);\n};\n\nexport const unescape = (string: string) => {\n    const ESCAPED_HTML_REGEX = /&(?:amp|lt|gt|quot|#39);/g;\n    const HTML_UNESCAPES = {\n        '&amp;': '&',\n        '&lt;': '<',\n        '&gt;': '>',\n        '&quot;': '\"',\n        '&#39;': \"'\"\n    };\n\n    return string.replace(ESCAPED_HTML_REGEX, HTML_UNESCAPES as any);\n};\n\n/**\n * Replace custom unicode escape for chevrons by default\n * Replace <> (for a tag) via unicode or reverse it\n * mode undefined for toUnicode, reverse for unicode -> <|>\n */\nexport function unicodeTag(input = '', mode: 'reverse' | undefined) {\n    if (mode === 'reverse') {\n        const matchTagUnicodeOpenClose = () => new RegExp(`${OPEN_TAG_AUTOCOMPLETE}|${CLOSE_TAG_AUTOCOMPLETE}`, 'ig');\n\n        return input.replace(matchTagUnicodeOpenClose(), (match) => MAP_TAGS[match] || '');\n    }\n\n    const matchTagOpenClose = () => new RegExp(`${OPEN_TAG_AUTOCOMPLETE_RAW}|${CLOSE_TAG_AUTOCOMPLETE_RAW}`, 'ig');\n    return input.replace(matchTagOpenClose(), (match) => MAP_TAGS[match] || '');\n}\n\n/**\n * Converts the integer to a 32-bit base encoded string in 2s complement format, so that it doesn't contain a sign \"-\"\n * @param val The integer to be encoded\n * @param bits The amount of bits per character\n */\nexport const toUnsignedString = (val: number, bits: number) => {\n    const base = 1 << bits;\n    const wordCount = Math.ceil(32 / bits);\n    const bottomBits = (wordCount - 1) * bits;\n\n    const bottom = val & ((1 << bottomBits) - 1);\n    const top = val >>> bottomBits;\n    if (top === 0) {\n        return bottom.toString(base);\n    }\n    const topString = top.toString(base);\n    const bottomString = bottom.toString(base);\n    const padLength = wordCount - topString.length - bottomString.length;\n    const middleString = '0'.repeat(padLength);\n    return topString + middleString + bottomString;\n};\n\n/**\n * Unescape a string in hex or octal encoding.\n * See https://www.w3.org/International/questions/qa-escapes#css_other for all possible cases.\n */\nexport const unescapeCSSEncoding = (str: string) => {\n    // Regexp declared inside the function to reset its state (because of the global flag).\n    // cf https://stackoverflow.com/questions/1520800/why-does-a-regexp-with-global-flag-give-wrong-results\n    const UNESCAPE_CSS_ESCAPES_REGEX = /\\\\([0-9A-Fa-f]{1,6}) ?/g;\n    const UNESCAPE_HTML_DEC_REGEX = /&#(\\d+)(;|(?=[^\\d;]))/g;\n    const UNESCAPE_HTML_HEX_REGEX = /&#x([0-9A-Fa-f]+)(;|(?=[^\\d;]))/g;\n    const OTHER_ESC = /\\\\(.)/g;\n\n    const handleEscape = (radix: number) => (ignored: any, val: string) =>\n        String.fromCodePoint(Number.parseInt(val, radix));\n    /*\n     * basic unescaped named sequences: &amp; etcetera, lodash does not support a lot, but that is not a problem for our case.\n     * Actually handling all escaped sequences would mean keeping track of a very large and ever growing amount of named sequences\n     */\n    const namedUnescaped = unescape(str);\n    // lodash doesn't unescape &#160; or &#xA0; sequences, we have to do this manually:\n    const decUnescaped = namedUnescaped.replace(UNESCAPE_HTML_DEC_REGEX, handleEscape(10));\n    const hexUnescaped = decUnescaped.replace(UNESCAPE_HTML_HEX_REGEX, handleEscape(16));\n    // unescape css backslash sequences\n    const strUnescapedHex = hexUnescaped.replace(UNESCAPE_CSS_ESCAPES_REGEX, handleEscape(16));\n\n    return strUnescapedHex.replace(OTHER_ESC, (_, char) => char);\n};\n\nexport const ucFirst = (input = '') => {\n    return input.charAt(0).toUpperCase() + input.slice(1);\n};\n\n/**\n * Extract value between chevrons\n * @param str ex: Andy <andy@pm.me>\n * @return ex: andy@pm.me\n */\nexport const extractChevrons = (str = '') => {\n    const CHEVRONS_REGEX = /<([^>]+)>/g;\n    const [, match = ''] = CHEVRONS_REGEX.exec(str) || [];\n    return match;\n};\n\n/**\n * @{link https://css-tricks.com/snippets/javascript/htmlentities-for-javascript/}\n */\nexport const htmlEntities = (str = '') => {\n    return String(str)\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;');\n};\n\nexport const uniqID = () => {\n    return `pt${Math.random()\n        .toString(32)\n        .slice(2, 12)}-${Date.now()}`;\n};\n\n/**\n * Generates a contact UID of the form 'proton-web-uuid'\n * @return {String}\n */\nexport function generateUID() {\n    const s4 = () => {\n        return Math.floor((1 + Math.random()) * 0x10000)\n            .toString(16)\n            .substring(1);\n    };\n\n    return `proton-web-${s4()}${s4()}-${s4()}-${s4()}-${s4()}-${s4()}${s4()}${s4()}`;\n}\n\n/**\n * Generate a random string.\n * @param {Number} length\n * @return {string}\n */\n// export const getRandomString = (length) => {\n//     const charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n//     let i;\n//     let result = '';\n\n//     const values = getRandomValues(new Uint32Array(length));\n\n//     for (i = 0; i < length; i++) {\n//         result += charset[values[i] % charset.length];\n//     }\n\n//     return result;\n// };\n\nexport const replaceLineBreaks = (content: string) => {\n    return content.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />');\n};\n","import DOMPurify from 'dompurify';\n\nimport { unicodeTag, unescapeCSSEncoding, escape } from './string';\n\n/*\nThis is valid\n    - background:&#117;r&#108;(\n    - background:url&lpar;\n    - etc.\n*/\nconst CSS_URL = '((url)(\\\\(|&(#40|#x00028|lpar);))';\nconst REGEXP_URL_ATTR = new RegExp(CSS_URL, 'gi');\nconst { LIST_PROTON_ATTR, MAP_PROTON_ATTR } = [\n    'data-src',\n    'src',\n    'srcset',\n    'background',\n    'poster',\n    'xlink:href'\n].reduce(\n    (acc, attr) => {\n        acc.LIST_PROTON_ATTR.push(`proton-${attr}`);\n        acc.MAP_PROTON_ATTR[attr] = true;\n        return acc;\n    },\n    {\n        LIST_PROTON_ATTR: [] as string[],\n        MAP_PROTON_ATTR: Object.create(null)\n    }\n);\n\nconst CONFIG: { [key: string]: any } = {\n    default: {\n        ALLOWED_URI_REGEXP: /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|blob|xmpp|data):|[^a-z]|[a-z+.\\-]+(?:[^a-z+.\\-:]|$))/i, // eslint-disable-line no-useless-escape\n        ADD_TAGS: ['proton-src', 'base', 'proton-svg'],\n        ADD_ATTR: ['target', 'proton-src'],\n        FORBID_TAGS: ['style', 'input', 'form'],\n        FORBID_ATTR: ['srcset']\n    },\n    // When we display a message we need to be global and return more informations\n    raw: { WHOLE_DOCUMENT: true, RETURN_DOM: true },\n    html: { WHOLE_DOCUMENT: false, RETURN_DOM: true },\n    protonizer: {\n        FORBID_ATTR: {},\n        ADD_ATTR: ['target'].concat(LIST_PROTON_ATTR),\n        WHOLE_DOCUMENT: true,\n        RETURN_DOM: true\n    },\n    content: {\n        ALLOW_UNKNOWN_PROTOCOLS: true,\n        WHOLE_DOCUMENT: false,\n        RETURN_DOM: true,\n        RETURN_DOM_FRAGMENT: true\n    }\n};\n\n/**\n * Escape some WTF from the CSSParser, cf spec files\n * @param  {String} style\n * @return {String}\n */\nconst escapeURLinStyle = (style: string) => {\n    // handle the case where the value is html encoded, e.g.:\n    // background:&#117;rl(&quot;https://i.imgur.com/WScAnHr.jpg&quot;)\n\n    const unescapedEncoding = unescapeCSSEncoding(style);\n    const escapeFlag = unescapedEncoding !== style;\n\n    const escapedStyle = unescapedEncoding.replace(/\\\\r/g, 'r').replace(REGEXP_URL_ATTR, 'proton-url(');\n\n    if (escapedStyle === unescapedEncoding) {\n        // nothing escaped: just return input\n        return style;\n    }\n\n    return escapeFlag ? escape(escapedStyle) : escapedStyle;\n};\n\nfunction beforeSanitizeElements(node: Element) {\n    // We only work on elements\n    if (node.nodeType !== 1) {\n        return node;\n    }\n\n    Array.from(node.attributes).forEach((type) => {\n        const item = type.name;\n        if (MAP_PROTON_ATTR[item]) {\n            node.setAttribute('proton-' + item, node.getAttribute(item) || '');\n            node.removeAttribute(item);\n        }\n\n        if (item === 'style') {\n            const escaped = escapeURLinStyle(node.getAttribute('style') || '');\n            node.setAttribute('style', escaped);\n        }\n    });\n\n    return node;\n}\n\nexport const purifyHTMLHooks = (active: boolean) => {\n    if (active) {\n        return DOMPurify.addHook('beforeSanitizeElements', beforeSanitizeElements);\n    }\n\n    DOMPurify.removeHook('beforeSanitizeElements');\n};\n\nconst getConfig = (type: string) => ({ ...CONFIG.default, ...(CONFIG[type] || {}) });\n\nconst clean = (mode: string) => {\n    const config = getConfig(mode);\n\n    return (input: string | Node): string | Node => {\n        DOMPurify.clearConfig();\n        const value = DOMPurify.sanitize(input, config);\n        purifyHTMLHooks(false); // Always remove the hooks\n        if (mode === 'str') {\n            // When trusted types is available, DOMPurify returns a trustedHTML object and not a string, force cast it.\n            return value + '';\n        }\n        return value;\n    };\n};\n\n/**\n * Custom config only for messages\n */\nexport const message = clean('str') as (input: string) => string;\n\n/**\n * Sanitize input with a config similar than Squire + ours\n */\nexport const html = clean('raw') as (input: Node) => Node;\n\n/**\n * Sanitize input with a config similar than Squire + ours\n */\nexport const protonizer = (input: string, attachHooks: boolean): Node => {\n    const process = clean('protonizer');\n    purifyHTMLHooks(attachHooks);\n    return process(input) as Node;\n};\n\n/**\n * Sanitize input and returns the whole document\n\n */\nexport const content = clean('content') as (input: string) => Node;\n\n/**\n * Default config we don't want any custom behaviour\n */\nexport const input = (str: string) => DOMPurify.sanitize(str, {}) + '';\n\nexport const toTagUnicode = unicodeTag;\n","// const JUICE_OPTIONS = {\n//     applyAttributesTableElements: false\n// };\n\n// const DECLASSIFY_OPTIONS = {\n//     ignore: BLOCKQUOTE_SELECTORS.filter((selector) => selector.startsWith('.'))\n//         .map((selector) => selector.replace('.', ''))\n//         .concat(/proton-.*/)\n//         .concat(/protonmail.*/)\n// };\n\n/**\n * Iterates through all parent nodes (including current), comparing against cb.\n * @param {DOMNode} node\n * @param {Function} cb\n * @returns {*}\n */\n// eslint-disable-next-line import/prefer-default-export\n// export const findParent = (node, cb) => {\n//     let traverse = node;\n//     if (traverse && cb(traverse)) {\n//         return traverse;\n//     }\n//     while (traverse.parentNode) {\n//         traverse = traverse.parentNode;\n//         if (cb(traverse)) {\n//             return traverse;\n//         }\n//     }\n// };\n\n/**\n * Inline css into an element and remove all obsolete class names.\n * @param {String} html\n * @returns {String}\n */\n// export const inlineCss = (html = '') => {\n//     try {\n//         return declassify.process(juice(html, JUICE_OPTIONS), DECLASSIFY_OPTIONS);\n//     } catch (err) {\n//         console.error(err);\n//         return html;\n//     }\n// };\n\n/**\n * Set an element to be hidden.\n * @param {DOMNode} el\n * @param {Boolean} value Hidden or shown\n */\n// export const setHidden = (el, value = false) => {\n//     el.style.display = value ? 'none' : '';\n// };\n\n/**\n * Force redraw of an element.\n * Copied from https://stackoverflow.com/a/3485654\n * @param {HTMLElement} el\n */\n// export const forceRedraw = (el) => {\n//     el.style.display = 'none';\n//     // eslint-disable-next-line no-unused-expressions\n//     el.offsetHeight;\n//     el.style.display = '';\n// };\n\nexport const escapeSrc = (value = '') => value.replace(/ src=/g, ' data-src=');\nexport const unescapeSrc = (value = '') => value.replace(/ data-src=/g, ' src=');\n\n/**\n * Toggle class on element depending on conditon\n * @param {DOMNode} element\n * @param {String} className\n * @param {Boolean} value\n */\n// export const toggle = (element, className, value) => {\n//     element.classList.contains(className) === value || element.classList.toggle(className);\n// };\n\n/**\n * Returns whether the element is a node.\n * See {@link https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType}\n * @param {DOMNode} node\n * @returns {boolean}\n */\n// export const isElement = (node) => node && node.nodeType === 1;\n\n/**\n * Get children configuration for a node/fragment\n * As IE is not able to deal with the dom API we need to \"emulate it\"\n * @param  {Element} node Can be a fragment\n * @return {Object}      {children: <Array>, first:<Element>, last:<Element>}\n */\n// export const getChildrenElements = (node) => {\n//     if (!isIE11() || node.firstElementChild) {\n//         return {\n//             first: node.firstElementChild,\n//             last: node.lastElementChild,\n//             children: node.children\n//         };\n//     }\n//     const children = _.filter(node.childNodes, isElement);\n\n//     return {\n//         first: children[0],\n//         last: _.last(children),\n//         children\n//     };\n// };\n\n/**\n * Test if the string contains HTML data\n * It doesn't have loading resources side effects\n * @param {String} str\n * @return {Object}\n */\n// export const isHTML = (str = '') => {\n//     const doc = new DOMParser().parseFromString(str, 'text/html');\n//     const firstChild = doc.body.childNodes[0];\n//     return {\n//         isHtml: Array.from(doc.body.childNodes).some(isElement),\n//         isWrapped: !!isElement(firstChild)\n//     };\n// };\n\nexport const matches = (element: Element, selector: string) =>\n    (element.matches || (element as any).msMatchesSelector).call(element, selector);\n\nexport const wrap = (element: Element, html: string) => {\n    const container = document.createElement('div');\n    container.innerHTML = html;\n\n    const wrapper = container.firstChild as Element;\n\n    wrapper.innerHTML = element.outerHTML;\n\n    element.parentNode?.insertBefore(wrapper, element);\n    element.remove();\n};\n\nexport const parseInDiv = (content: string) => {\n    const div = document.createElement('div');\n    div.innerHTML = content;\n    return div;\n};\n","import { uniqID } from '../string';\nimport { protonizer as purifyHTML } from '../purify';\nimport { parseInDiv } from '../dom';\n\n/*\n * match attributes or elements with svg, xlink, srcset, src, background, poster.\n * the regex checks that the element/attribute is actually in an element by looking forward and seeing if it\n * ends properly with a >\n *\n * Another assumption in these regex are: all attributes use the \" quotes instead of the ' quote. This is satisfied\n * by the previous standardization steps\n */\nconst SVG_LIST = ['svg'];\nconst FORBIDDEN_SVG = `(${SVG_LIST.join('|')})`;\nconst NO_SPECIALS = '([^\"><\\\\\\\\]|\\\\\\\\[^><])';\nconst NO_QUOTS = '(\\\\\\\\.|[^\"\\\\\\\\])';\nconst HTML_STRING = `(\"${NO_QUOTS}*\")`;\nconst VERIFY_ELEMENT_END = `(?=(${NO_SPECIALS}|${HTML_STRING})*>)`;\nconst VERIFY_UNIQUE = '([^-])';\n\n// Ensure that the forbidden attributes are not already escaped with proton- by checking that there is no '-' character in front of them.\nconst REGEXP_SVG_BREAK = new RegExp(VERIFY_UNIQUE + FORBIDDEN_SVG + VERIFY_ELEMENT_END, 'gi');\n\n/**\n * Parsing base64 is expensive and can create a crash.\n * Here we can reduce input string from many Mb to less than 100kb, which is way easier to escape.\n * So instead of escaping everything with it too, we remove them from the HTML\n * and we replace it with an attribute with an uniq hash so we can load them\n * later for the user via injectMessageMedia component.\n * Store it inside inside a cache, an Angular Factory as we will need it for:\n *     - lazy load the image post render message\n *     - open the composer we need to lazy load it here too\n *\n * Source: regexp https://www.regextester.com/95505\n * @param  {String} input       Raw unescaped HTML\n * @param  {Object} cache       cacheBase64 factory\n * @param  {Boolean} activeCache\n * @return {String}\n */\nfunction removeBase64(input, cache, activeCache) {\n    /* eslint no-useless-escape: \"off\" */\n    return input.replace(/src=\"data:image\\/([a-zA-Z]*);base64,([^\\\"]*)\\\"/g, (match) => {\n        const hash = uniqID();\n        activeCache && cache.put(hash, match);\n        return `data-proton-replace-base=\"${hash}\"`;\n    });\n}\n\n/**\n * Parse the dom and find all matching base64 custom tags we added\n * then replace them by the valid SRC for the base64.\n * @param  {Element} node\n * @param  {Object} cache cacheBase64 service\n * @return {String}       HTML\n */\nexport function attachBase64Parser(node, cache) {\n    const nodes = [...node.querySelectorAll('[data-proton-replace-base]')];\n    nodes.forEach((node) => {\n        const hash = node.getAttribute('data-proton-replace-base');\n\n        // Clean the string and remove \\n else it won't load inside the browser\n        const src = (cache.get(hash) || '')\n            .replace(/^src=\"/, '')\n            .replace(/\"$/, '')\n            .replace(/\\n/, '');\n        src && node.setAttribute('src', src);\n        node.removeAttribute('data-proton-replace-base');\n    });\n    return node.innerHTML;\n}\n\n/**\n * Attach escaped base64 to the dom if the input is a txt\n * @param  {String} input HTML\n * @param  {Object} cache cacheBase64 service\n * @return {String}       HTML\n */\nexport function attachBase64(input, cache) {\n    // const [$parser] = $.parseHTML(`<div>${input}</div>`);\n    const div = parseInDiv(input);\n    return attachBase64Parser(div, cache);\n}\n\nfunction escapeSVG(input = '') {\n    return input.replace(REGEXP_SVG_BREAK, '$1proton-$2');\n}\n\n/**\n * Escape content for a message\n * Content can be a Document when we open a message, it's useful\n * in order to bind the base if it exists\n * @param  {MessageExtended} message         Content to escape\n * @param  {Options} options.action           Type of action\n * @return {MessageExtended}                            Parser\n */\nexport const transformEscape = async ({ raw, action }, { cache, activeCache = true } = {}) => {\n    const value = removeBase64(raw, cache, activeCache);\n    const activeHooks = action !== 'user.inject';\n    return { document: purifyHTML(escapeSVG(value), activeHooks) };\n};\n","import { matches } from '../dom';\n\nconst PROTOCOLS = ['ftp://', 'http://', 'https://', 'xmpp:', 'tel:', 'callto:'];\nconst ALL_PROTOCOLS = PROTOCOLS.concat(['mailto:']);\nconst MAP = PROTOCOLS.reduce((acc, key) => ((acc[key] = true), acc), {});\nconst EXCLUDE_ANCHORS = ':not([href=\"\"]):not([href^=\"#\"])';\n\nconst getNormalizedHref = (link) => {\n    return link\n        .getAttribute('href')\n        .trim()\n        .toLowerCase();\n};\n\nconst linkUsesProtocols = (link) => ALL_PROTOCOLS.some((proto) => getNormalizedHref(link).startsWith(proto));\n\nconst isEmptyAnchor = (link) => {\n    const href = getNormalizedHref(link);\n    return href === '' || MAP[href];\n};\n\nconst noReferrerInfo = (link) => {\n    link.setAttribute('rel', 'noreferrer nofollow noopener');\n};\n\n/**\n * make links open in a new tab\n * @param  {Array} links Collection of links\n * @return {Array}       links\n */\nconst httpInNewTab = (link) => {\n    if (matches(link, EXCLUDE_ANCHORS)) {\n        const href = link.getAttribute('href') || '';\n        const hasHTTP = href.indexOf('http') === 0;\n        const isRelative = href.indexOf('/') === 0;\n        // Prevent issue for Edge/IE A security problem cf https://jsfiddle.net/dpaoxoks/7/\n        if (hasHTTP || isRelative) {\n            link.setAttribute('target', '_blank');\n        }\n    }\n};\n\n/**\n * turn these relative links into absolute links\n * (example.com/a -> http://example.com)\n * @param  {Array} links Collection of links\n * @return {Array}       links\n */\nconst sanitizeRelativeHttpLinks = (link) => {\n    if (matches(link, EXCLUDE_ANCHORS) && !linkUsesProtocols(link) && link.nodeName === 'A') {\n        // link.href is the absolute value of the link: mail.protonmail.com is prepended, use getAttribute\n        const url = link.getAttribute('href');\n\n        link.setAttribute('href', `http://${url}`);\n    }\n};\n\n/*\n * Anchors will work on the whole protonmail page, so we need to disable them\n * opening them in a new tab will just open a empty page.\n */\nconst disableAnchors = (link) => {\n    isEmptyAnchor(link) && (link.style.pointerEvents = 'none');\n};\n\nexport const transformLinks = ({ document }) => {\n    const links = [...document.querySelectorAll('[href]')];\n\n    links.forEach((link) => {\n        httpInNewTab(link);\n        noReferrerInfo(link);\n        sanitizeRelativeHttpLinks(link);\n        disableAnchors(link);\n    });\n\n    return { document };\n};\n","import mimemessage from 'mimemessage';\n\nimport { ucFirst } from '../string';\nimport { Attachment } from '../../models/attachment';\nimport { transformEscape } from '../transforms/transformEscape';\n\nexport const REGEXP_CID_START = /^cid:/g;\n\n/**\n * Flush the container HTML and return the container\n */\nexport const getBodyParser = (content = '', activeCache = false) => {\n    return transformEscape(\n        { raw: content, action: '' },\n        {\n            activeCache,\n            isDocument: false,\n            cache: {}\n        }\n    );\n};\n\n/**\n * Removes enclosing quotes (\"\", '', &lt;&gt;) from a string\n */\nconst trimQuotes = (input: string) => {\n    const value = `${input || ''}`.trim(); // input can be a number\n\n    if (['\"', \"'\", '<'].indexOf(value.charAt(0)) > -1 && ['\"', \"'\", '>'].indexOf(value.charAt(value.length - 1)) > -1) {\n        return value.substr(1, value.length - 2);\n    }\n\n    return value;\n};\n\nexport const readCID = (Headers: any = {}) => {\n    if (Headers['content-id']) {\n        return trimQuotes(Headers['content-id']);\n    }\n\n    // We can find an image without cid so base64 the location\n    if (Headers['content-location']) {\n        return trimQuotes(Headers['content-location']);\n    }\n\n    return '';\n};\n\n/**\n * Find embedded element in div\n */\nexport const findEmbedded = (cid: string, document: Element) => {\n    // If cid is an empty string, it can give a false positive\n    if (!cid) {\n        return [];\n    }\n    const selector = [\n        `img[src=\"${cid}\"]`,\n        `img[src=\"cid:${cid}\"]`,\n        `img[data-embedded-img=\"${cid}\"]`,\n        `img[data-embedded-img=\"cid:${cid}\"]`,\n        `img[data-src=\"cid:${cid}\"]`,\n        `img[proton-src=\"cid:${cid}\"]`\n    ];\n    return [...document.querySelectorAll(selector.join(', '))];\n};\n\n/**\n * Extract embedded attachment from body\n */\nexport const extractEmbedded = (attachments: Attachment[] = [], document: Element) => {\n    return attachments.filter(({ Headers = {} }) => {\n        const cid = readCID(Headers);\n        const nodes = findEmbedded(cid, document);\n\n        return nodes.length;\n    });\n};\n\n/**\n * Convert raw headers to better format handled by the mimemessage lib\n */\nexport const convertMimeHeaders = (config: { [key: string]: string } = {}) => {\n    const headers = Object.keys(config)\n        .filter((key) => key.startsWith('content'))\n        .reduce((acc, key) => {\n            const [, type] = key.split('-');\n            acc[`content${ucFirst(type)}`] = config[key];\n            return acc;\n        }, Object.create(null));\n\n    return {\n        formatted: mimemessage.factory(headers),\n        headers\n    };\n};\n\nexport const getAttachementName = (Headers: { [key: string]: string } = {}) => {\n    if (Headers['content-disposition'] !== 'inline') {\n        const { formatted = {} as any } = convertMimeHeaders(Headers);\n        const { params: { filename = '' } = {} } = formatted.contentDisposition() || {};\n        if (filename) {\n            return filename.replace(/\"/g, '');\n        }\n    }\n\n    return '';\n};\n\n/**\n * Get the url for an embedded image\n */\nexport const srcToCID = (node: Element) => {\n    const attribute = node.getAttribute('data-embedded-img') || '';\n    return attribute.replace(REGEXP_CID_START, '');\n};\n","import { Message } from '../../models/message';\nimport { Attachment } from '../../models/attachment';\nimport { readCID } from './embeddedUtils';\n\nconst CIDList: { [ID: string]: { [cid: string]: Attachment } } = {};\n\nexport const getMessageCIDs = ({ ID = '' }: Message = {}) => CIDList[ID] || {};\n\nexport const containsMessageCIDs = ({ ID = '' }: Message = {}) => Object.keys(CIDList[ID] || {}).length > 0;\n\nexport const addMessageCID = ({ ID = '' }: Message, { Headers = {}, Name = '' }: Attachment) => {\n    !CIDList[ID] && (CIDList[ID] = {});\n    // !message.NumEmbedded && (message.NumEmbedded = 0);\n\n    const cid = readCID(Headers);\n    Headers.embedded = '1';\n    // message.NumEmbedded++;\n    CIDList[ID][cid] = { Headers, Name };\n};\n\n/**\n * Check if the cid exist for a specific message\n */\nexport const existMessageCID = (message: Message, cid: string) => {\n    return !!getMessageCIDs(message)[cid];\n};\n","import { MessageExtended, Message } from '../../models/message';\nimport { extractEmbedded, getAttachementName, REGEXP_CID_START } from '../embedded/embeddedUtils';\nimport { addMessageCID, getMessageCIDs } from './embeddedStoreCids';\nimport { Attachment } from '../../models/attachment';\n\nexport const getAttachment = (message: Message = {}, src = '') => {\n    const cid = src.replace(REGEXP_CID_START, '');\n    return getMessageCIDs(message)[cid] || {};\n};\n\nexport const find = (message: MessageExtended) => {\n    const list = (message.data || {}).Attachments || [];\n\n    if (!list.length || !message.document) {\n        return [];\n    }\n\n    const embeddedAttachments = extractEmbedded(list, message.document);\n\n    embeddedAttachments.forEach((attachment) => {\n        addMessageCID(message.data || {}, attachment);\n    });\n\n    return embeddedAttachments;\n};\n\n/**\n * Find all attachements inline\n */\nexport const listInlineAttachments = (message: MessageExtended) => {\n    const list = (message.data || {}).Attachments || [];\n    const MAP_CID = getMessageCIDs(message.data);\n\n    return Object.keys(MAP_CID).reduce((acc, cid) => {\n        // Extract current attachement content-id\n        const contentId = ((MAP_CID[cid] || {}).Headers || {})['content-id'];\n        const contentName = getAttachementName(MAP_CID[cid].Headers);\n\n        // Find the matching attachement\n        const attachment = list.find(({ Headers = {}, Name = '' } = {}) => {\n            if (Headers['content-id']) {\n                return Headers['content-id'] === contentId;\n            }\n\n            if (Headers['content-location']) {\n                return Name === contentName;\n            }\n\n            return false;\n        });\n\n        attachment && acc.push({ cid, attachment });\n        return acc;\n    }, [] as { cid: string; attachment: Attachment }[]);\n};\n","import { Message } from '../../models/message';\nimport { isDraft } from '../message/messages';\nimport { getMessageCIDs } from './embeddedStoreCids';\n\nexport interface BlobInfo {\n    url: string;\n    isContentLocation: boolean;\n}\n\nconst PREFIX_DRAFT = 'draft_';\n\nconst urlCreator = () => window.URL || window.webkitURL;\n\nconst Blobs: { [cid: string]: BlobInfo } = {};\nconst MAP_BLOBS: { [key: string]: string[] } = {};\n\nconst getHashKey = (msg: Message) => {\n    const draft = isDraft(msg);\n    const prefix = draft ? PREFIX_DRAFT : '';\n    return `${prefix}${msg.ConversationID || msg.ID}`.trim();\n};\n\n/**\n * The URL.revokeObjectURL() static method releases an existing object URL\n * which was previously created by calling URL.createObjectURL().\n * Call this method when you've finished using a object URL, in order to let\n * the browser know it doesn't need to keep the reference to the file\n * any longer.\n */\nfunction deallocateList(key: string) {\n    const list = MAP_BLOBS[key] || [];\n    list.forEach((cid) => {\n        if (Blobs[cid]) {\n            urlCreator().revokeObjectURL(Blobs[cid].url);\n            // Remove the Blob ref from our store\n            delete Blobs[cid];\n        }\n    });\n    delete MAP_BLOBS[key];\n}\n\n/**\n * blob URLs never get deallocated automatically--\n * we manage deallocation to avoid a massive memory leak\n * once we navigate away from a conversation\n * eg. this can be triggered from the conversations controller\n */\nexport function deallocate(message: Message = {}) {\n    const key = getHashKey(message);\n    Object.keys(MAP_BLOBS)\n        .filter((k) => k !== key && k.indexOf(PREFIX_DRAFT) !== 0) // Do nothing for draft and itself\n        .forEach(deallocateList);\n}\n\n/**\n * Use the Blobs array to store CIDs url reference\n * once the attachment has been decrypted\n * so we can re-use the blob instead of decrypting\n * this should be rewritted a bit to work with\n * the service store\n */\nexport const store = (message: Message = {}, cid = '') => {\n    const Attachments = getMessageCIDs(message);\n    const { Headers = {} } = Attachments[cid] || {};\n\n    const key = getHashKey(message);\n\n    MAP_BLOBS[key] = MAP_BLOBS[key] || [];\n\n    return (data: Uint8Array, MIME = '') => {\n        // If you switch to another conversation the MAP_BLOBS won't exist anymore\n        if (MAP_BLOBS[key]) {\n            // Turn the decrypted attachment data into a blob.\n            let blob: Blob | null = new Blob([data], { type: MIME });\n            // Generate the URL\n            let imageUrl: string | null = urlCreator().createObjectURL(blob);\n            // Store the generated URL\n            Blobs[cid] = {\n                url: imageUrl,\n                isContentLocation:\n                    typeof Headers['content-location'] !== 'undefined' && typeof Headers['content-id'] === 'undefined'\n            };\n            // this is supposed to remove the blob so it\n            // can be garbage collected. we dont save it (for now)\n            blob = null;\n            imageUrl = null;\n\n            MAP_BLOBS[key].push(cid);\n            // dispatcher.embeddedStore('store', { cid });\n        }\n    };\n};\n\nexport const getBlob = (cid: string) => Blobs[cid] || {};\n\nexport const hasBlob = (cid: string) => !!Blobs[cid];\n","// import { REGEX_IMAGE_EXTENSION } from 'proton-shared/lib/constants';\n\n/**\n * Convert base64 string to Image\n * @param  {String} base64str\n * @return {Object}\n */\n// export const toImage = (base64str) => {\n//     return new Promise((resolve) => {\n//         const image = new Image();\n\n//         image.onload = () => {\n//             resolve(image);\n//         };\n\n//         image.src = base64str;\n//     });\n// };\n\n/**\n * Resizes a picture to a maximum length/width (based on largest dimension)\n * @param {String} original Base64 representation of image to be resized.\n * @param {Number} maxSize Amount of pixels that largest dimention (whether width or length) should have.\n * @param {String} finalMimeType Mime type of the resulting resized image.\n * @param {Number} encoderOptions A Number between 0 and 1 indicating image quality if the requested type is image/jpeg or image/webp\n * @return {Promise} receives base64 string of resized image.\n */\n// export const resizeImage = (original, maxSize, finalMimeType = 'image/jpeg', encoderOptions = 1) => {\n//     return toImage(original).then((image) => {\n//         // Resize the image\n//         const canvas = document.createElement('canvas');\n//         let width = image.width;\n//         let height = image.height;\n\n//         if (width > height && width > maxSize) {\n//             height *= maxSize / width;\n//             width = maxSize;\n//         } else if (height > maxSize) {\n//             width *= maxSize / height;\n//             height = maxSize;\n//         }\n\n//         canvas.width = width;\n//         canvas.height = height;\n//         canvas.getContext('2d').drawImage(image, 0, 0, width, height);\n\n//         return canvas.toDataURL(finalMimeType, encoderOptions);\n//     });\n// };\n\n/**\n * Extract the mime and base64 str from a base64 image.\n * @param {String} str\n * @returns {Promise} {mime, base64}\n */\n// const extractBase64Image = (str = '') => {\n//     const [mimeInfo = '', base64 = ''] = (str || '').split(',');\n//     const [, mime = ''] = mimeInfo.match(/:(.*?);/) || [];\n//     return { mime, base64 };\n// };\n\n/**\n * Convert a base 64 str to an uint8 array.\n * @param base64str\n * @returns {Uint8Array}\n */\n// const toUint8Array = (base64str) => {\n//     const bstr = atob(base64str);\n//     let n = bstr.length;\n//     const u8arr = new Uint8Array(n);\n//     while (n--) {\n//         u8arr[n] = bstr.charCodeAt(n);\n//     }\n//     return u8arr;\n// };\n\n/**\n * Convert a data URL to a Blob Object\n * @param {String} base64str\n * @param {String} filename\n * @return {Object}\n */\n// export const toFile = (base64str, filename = 'file') => {\n//     const { base64, mime } = extractBase64Image(base64str);\n//     return new File([toUint8Array(base64)], filename, { type: mime });\n// };\n\n/**\n * Convert a data URL to a Blob Object\n * @param  {String} base64str\n * @return {Blob}\n */\n// export const toBlob = (base64str) => {\n//     const { base64, mime } = extractBase64Image(base64str);\n//     return new Blob([toUint8Array(base64)], { type: mime });\n// };\n\n/**\n * Down size image to reach the max size limit\n * @param  {String} base64str\n * @param  {} maxSize in bytes\n * @param  {String} mimeType\n * @param  {Number} encoderOptions\n * @return {Promise}\n */\n// export const downSize = (base64str, maxSize, mimeType = 'image/jpeg', encoderOptions = 1) => {\n//     const process = (source, max) => {\n//         return resizeImage(source, max, mimeType, encoderOptions).then((resized) => {\n//             const { size } = toBlob(resized);\n\n//             if (size <= maxSize) {\n//                 return resized;\n//             }\n\n//             return process(resized, Math.round(max * 0.9));\n//         });\n//     };\n\n//     return toImage(base64str).then(({ height, width }) => process(base64str, height > width ? height : width));\n// };\n\n/**\n * Returns true if the URL is an inline embedded image.\n * @param {String} src\n * @returns {boolean}\n */\nexport const isInlineEmbedded = (src = '') => src.startsWith('data:');\n\n/**\n * Returns true if the URL is an embedded image.\n * @param {String} src\n * @returns {boolean}\n */\nexport const isEmbedded = (src = '') => src.startsWith('cid:');\n\n/**\n * Prepare image source to be display\n * @param {String} value\n * @return {String}\n */\n// export const formatImage = (value = '') => {\n//     if (!value) {\n//         return value;\n//     }\n\n//     if (REGEX_IMAGE_EXTENSION.test(value)) {\n//         return value;\n//     }\n\n//     if (value.startsWith('data:')) {\n//         return value;\n//     }\n\n//     return `data:image/png;base64,${value}`;\n// };\n","import { MessageExtended } from '../../models/message';\nimport { escapeSrc, unescapeSrc, wrap } from '../dom';\nimport { Api } from '../../models/utils';\nimport { ENCRYPTED_STATUS } from '../../constants';\nimport { listInlineAttachments, getAttachment } from './embeddedFinder';\nimport { hasBlob, store, getBlob, BlobInfo } from './embeddedStoreBlobs';\nimport { get } from '../attachment/attachmentLoader';\nimport { Attachment } from '../../models/attachment';\nimport { noop } from 'proton-shared/lib/helpers/function';\nimport { wait } from 'proton-shared/lib/helpers/promise';\nimport { getMessageCIDs } from './embeddedStoreCids';\nimport { findEmbedded, srcToCID } from './embeddedUtils';\nimport { isInlineEmbedded, isEmbedded } from '../image';\nimport { AttachmentsDataCache } from '../../hooks/useAttachments';\n\nconst EMBEDDED_CLASSNAME = 'proton-embedded';\n\nconst wrapImage = (img: Element) => wrap(img, '<div class=\"image loading\"></div>');\n\n/**\n * Get the url for an embedded image\n */\nexport const getUrl = (node: Element) => {\n    // If it's an inline embedded img, just return the src because that contains the img data.\n    const src = node.getAttribute('data-embedded-img') || '';\n    if (isInlineEmbedded(src)) {\n        return src;\n    }\n    const cid = srcToCID(node);\n    const { url = '' } = getBlob(cid);\n    return url;\n};\n\n/**\n * Prepare embedded images in the document\n */\nexport const prepareImages = (message: MessageExtended, show: boolean, isReplyForward: boolean, isOutside: boolean) => {\n    if (!message.document) {\n        return;\n    }\n\n    let showEmbedded = message.showEmbeddedImages;\n\n    const images = [...message.document.querySelectorAll('img[proton-src]')];\n\n    images.forEach((image) => {\n        const src = image.getAttribute('proton-src') || undefined;\n        image.setAttribute('referrerPolicy', 'no-referrer');\n        const attachment = getAttachment(message.data, src);\n\n        if (!image.classList.contains(EMBEDDED_CLASSNAME)) {\n            image.classList.add(EMBEDDED_CLASSNAME);\n        }\n\n        if (!image.parentElement) {\n            return;\n        }\n\n        // check if the attachment exist before processing\n        if (!(attachment && Object.keys(attachment).length > 0)) {\n            /**\n             * If the attachment does not exist and the proton-src attribute\n             * starts with cid:, it's an embedded image that does not exist in the list of attachments,\n             * or is not a valid image.\n             * So remove the element from the DOM because it will not display anything useful anyway.\n             */\n            if (isEmbedded(src)) {\n                image.parentElement.removeChild(image);\n            }\n            // If it's not an inline embedded image, it's either an embedded image or a remote image. So stop here.\n            // Otherwise, continue so that the inline image is detected as an embedded image.\n            if (!isInlineEmbedded(src)) {\n                return;\n            }\n        }\n\n        if (show) {\n            image.setAttribute('data-embedded-img', src || '');\n            /**\n             * Since the image is supposed to be displayed, remove the proton-src attribute.\n             * Then it will be parsed by the embeddedParser in the blob or cid direction.\n             */\n            image.removeAttribute('proton-src');\n\n            // Auto load image inside a reply draft\n            if (isReplyForward) {\n                // `getUrl` may return undefined here because the embedded attachments have not yet been decrypted and put in the blob store.\n                const url = getUrl(image);\n                // only set it if it is defined, otherwise the unescapeSrc will add two src=\"\"\n                url && image.setAttribute('src', url);\n                return;\n            }\n\n            // We don't need to add it outside\n            if (!isOutside) {\n                !image.parentElement.classList.contains('loading') && wrapImage(image);\n                image.removeAttribute('src');\n            }\n            return;\n        }\n\n        showEmbedded = false;\n\n        // Inline embedded images does not have an attachment.\n        if (attachment) {\n            image.setAttribute('alt', attachment.Name || '');\n        }\n    });\n\n    return showEmbedded;\n};\n\n/**\n * launch and forget: we don't need to do anything with the result\n * wait a bit before disabling the invalidsignature modal\n * this allows the user to see the change icon popup.\n *\n * More elaborate explanation:\n * We're addressing a fairly rare UX thing here.\n * We want to avoid showing a popup saying the confirmmodal when the signature is invalid to often.\n * For instance, when embedding images you can see that the icon says the signature is invalid,\n * so we don't show this icon (as the user can know it before clicking).\n *\n * However, if you would click on the embedded attachment before it has downloaded the attachment, it will not show this icon.\n * So consider you clicking on this attachment when it didn't verify the attachment yet.\n * Then just after that the attachment loader downloaded the attachment and\n * verified it signature and sets invalidSignature.askAgain to false.\n * Then you don't know that this happened, but in this case you should get a popup.\n *\n * Note when thinking  this is just a race condition: also consider the case where you are clicking\n * on the icon and it shows the icon just before you click: it's not humanly possible to see that it\n * changed and is not valid. So even in that case we want to show the icon.\n */\nconst triggerSigVerification = (\n    message: MessageExtended,\n    attachments: Attachment[],\n    api: Api,\n    cache: Map<string, any>\n) => {\n    /*\n     * launch and forget: we don't need to do anything with the result\n     * wait a bit before disabling the invalidsignature modal\n     * this allows the user to see the change icon popup.\n     */\n    Promise.all(\n        attachments.map(async (attachment) => {\n            await get(attachment, message, cache, api);\n            await wait(1000);\n            // invalidSignature.askAgain(message, attachment, false);\n        })\n    );\n};\n\n/**\n * It works on data-src attribute for this reason:\n * Don't set the src attribute since it's evaluated and cid:cid create an error (#3330)\n * NET::ERR_UNKNOWN_URL_SCHEME because src=\"cid:xxxx\" is not valid HTML\n * This function expects the content to be properly unescaped later.\n */\nconst actionDirection: { [key: string]: (nodes: Element[], cid: string, url: string) => void } = {\n    blob(nodes: Element[], cid: string, url: string) {\n        nodes.forEach((node) => {\n            // Always remove the `data-` src attribute set by the cid function, otherwise it can get displayed if the user does not auto load embedded images.\n            node.removeAttribute('data-src');\n            if (node.getAttribute('proton-src')) {\n                return;\n            }\n            node.setAttribute('data-src', url);\n            node.setAttribute('data-embedded-img', cid);\n            node.classList.add(EMBEDDED_CLASSNAME);\n        });\n    },\n    cid(nodes: Element[], cid: string) {\n        nodes.forEach((node) => {\n            node.removeAttribute('data-embedded-img');\n            node.removeAttribute('src');\n            node.setAttribute('data-src', `cid:${cid}`);\n        });\n    }\n};\n\n/**\n * Parse the content to inject the generated blob src\n */\nexport const mutateHTML = (message: MessageExtended, direction: string) => {\n    if (!message.document) {\n        return;\n    }\n\n    const document = message.document;\n\n    document.innerHTML = escapeSrc(document.innerHTML);\n\n    Object.keys(getMessageCIDs(message.data)).forEach((cid) => {\n        const nodes = findEmbedded(cid, document);\n\n        if (nodes.length) {\n            const { url = '' } = getBlob(cid);\n\n            (actionDirection[direction] || noop)(nodes, cid, url);\n        }\n    });\n\n    document.innerHTML = unescapeSrc(document.innerHTML);\n};\n\nexport const decrypt = async (message: MessageExtended, api: Api, cache: AttachmentsDataCache) => {\n    const list = listInlineAttachments(message);\n    const attachments = list.map(({ attachment }) => attachment);\n    // const show = message.showEmbeddedImages === true || mailSettings.ShowImages & SHOW_IMAGES.EMBEDDED;\n    // const sigList = show ? list : list.filter(({ attachment }) => cache.has(attachment.ID));\n\n    // For a draft if we close it before the end of the attachment upload, there are no keyPackets\n    // pgp attachments do not have keypackets.\n\n    const promises = list\n        .filter(({ attachment }) => attachment.KeyPackets || attachment.Encrypted === ENCRYPTED_STATUS.PGP_MIME)\n        .filter(({ cid }) => !hasBlob(cid))\n        .map(async ({ cid, attachment }) => {\n            const storeAttachement = store(message.data, cid);\n            const buffer = await get(attachment, message, cache, api);\n            return storeAttachement(buffer.data, attachment.MIMEType);\n        });\n\n    if (!promises.length) {\n        // all cid was already stored, we can resolve\n        triggerSigVerification(message, attachments, api, cache);\n        return {};\n    }\n\n    await Promise.all(promises);\n\n    // We need to trigger on the original list not after filtering: after filter they are just stored\n    // somewhere else\n    triggerSigVerification(message, attachments, api, cache);\n    return list.reduce((acc, { cid }) => {\n        acc[cid] = getBlob(cid);\n        return acc;\n    }, {} as { [cid: string]: BlobInfo });\n};\n","import { SHOW_IMAGES } from 'proton-shared/lib/constants';\nimport { Computation } from '../../hooks/useMessage';\nimport { find } from '../embedded/embeddedFinder';\nimport { mutateHTML, decrypt, prepareImages } from '../embedded/embeddedParser';\nimport { MESSAGE_ACTIONS } from '../../constants';\n\nexport const transformEmbedded: Computation = async (message, { attachmentsCache, api, mailSettings }) => {\n    const { ShowImages = 0 } = mailSettings as { ShowImages: number };\n    const show = message.showEmbeddedImages === true || ShowImages === SHOW_IMAGES.EMBEDDED;\n    const isReplyForward =\n        message.action === MESSAGE_ACTIONS.REPLY ||\n        message.action === MESSAGE_ACTIONS.REPLY_ALL ||\n        message.action === MESSAGE_ACTIONS.FORWARD;\n    const isOutside = false; // TODO: const isEoReply = $state.is('eo.reply');\n\n    const attachments = find(message);\n    const showEmbeddedImages = prepareImages(message, show, isReplyForward, isOutside);\n\n    const direction = 'blob';\n\n    if (attachments.length === 0 || !show) {\n        /**\n         * cf #5088 we need to escape the body again if we forgot to set the password First.\n         * Prevent unescaped HTML.\n         *\n         * Don't do it everytime because it's \"slow\" and we don't want to slow down the process.\n         */\n        if (isOutside) {\n            mutateHTML(message, direction);\n        }\n    } else {\n        await decrypt(message, api, attachmentsCache.data);\n        mutateHTML(message, direction);\n    }\n\n    return { document: message.document, showEmbeddedImages, numEmbedded: attachments.length };\n};\n","export const transformWelcome = ({ document }) => {\n    // For the welcome email, we need to change the path to the welcome image lock\n    const images = [...document.querySelectorAll('img[src=\"/img/app/welcome_lock.gif\"]')];\n\n    if (images.length > 0) {\n        images.forEach((image) => {\n            image.src = '/assets/img/emails/welcome_lock.gif';\n        });\n    }\n\n    return { document };\n};\n","import { c } from 'ttag';\n\nconst BLOCKQUOTE_SELECTORS = [\n    '.protonmail_quote',\n    '.gmail_quote',\n    '.yahoo_quoted',\n    '.gmail_extra',\n    '.moz-cite-prefix',\n    // '.WordSection1',\n    '#isForwardContent',\n    '#isReplyContent',\n    '#mailcontent:not(table)',\n    '#origbody',\n    '#reply139content',\n    '#oriMsgHtmlSeperator',\n    'blockquote[type=\"cite\"]'\n];\n\nconst quotes = BLOCKQUOTE_SELECTORS.map((selector) => `${selector}:not(:empty)`).join(',');\n\nexport const transformBlockquotes = ({ document: doc }) => {\n    const blockquotes = [...doc.querySelectorAll(quotes)];\n    const parent = doc.textContent;\n    let found = false;\n\n    blockquotes.forEach((blockquote) => {\n        if (!found) {\n            const child = blockquote.textContent;\n            const [before = '', after = ''] = parent.split(child);\n\n            if (child.length < parent.length && before.length && !after.length) {\n                const button = document.createElement('button');\n                const title = c('Title').t`Show previous message`;\n\n                button.className = 'pm-button pm-button--small more proton-message-blockquote-toggle';\n                button.textContent = '...'; // perf issue we can't use <icon> as we don't want to compile.\n                button.setAttribute('title', title);\n\n                // For some messages, the content of the message before <button> is not inside <div>\n                blockquote.parentNode.insertBefore(document.createElement('BR'), blockquote);\n                blockquote.parentNode.insertBefore(button, blockquote);\n\n                found = true;\n            }\n        }\n    });\n\n    return { document: doc };\n};\n","import { flow, filter, reduce } from 'lodash/fp';\n\nimport { SHOW_IMAGES } from 'proton-shared/lib/constants';\n\nconst WHITELIST = ['notify@protonmail.com'];\n\n// const { dispatcher } = dispatchers(['message.open']);\n\nconst ATTRIBUTES = ['url', 'xlink:href', 'srcset', 'src', 'svg', 'background', 'poster'].map(\n    (name) => `proton-${name}`\n);\n\nconst REGEXP_FIXER = (() => {\n    const str = ATTRIBUTES.map((key) => {\n        if (key === 'proton-src') {\n            return `${key}=(?!\"(cid|data):)`;\n        }\n        return key;\n    }).join('|');\n    return `(${str})`;\n})();\n\n/**\n * Find inside the current parser DOM every content escaped\n * and build a list of Object <attribute>:<value> but don't parse them if\n * it is an embedded content.\n * As we have many differents attributes we create a list\n * @param  {Node} html parser\n * @return {Array}\n */\nfunction prepareInjection(html) {\n    // Query selector\n    const selector = ATTRIBUTES.map((attr) => {\n        const [key] = attr.split(':');\n        return `[${key}]`;\n    })\n        .concat('[style]')\n        .join(', ');\n\n    /**\n     * Create a map of every proton-x attribute and its value\n     * @param  {Node} node Current element\n     * @return {Object}\n     */\n    const mapAttributes = (node) => {\n        return flow(\n            filter((attr) => ATTRIBUTES.indexOf(attr.name) !== -1),\n            reduce((acc, attr) => ((acc[`${attr.name}`] = attr.value), acc), {})\n        )(node.attributes);\n    };\n\n    const $list = [].slice.call(html.querySelectorAll(selector));\n\n    // Create a list containing a map of every attributes (proton-x) per node\n    const attributes = $list.reduce((acc, node) => {\n        if (node.hasAttribute('proton-src')) {\n            const src = node.getAttribute('proton-src');\n\n            // We don't want to unescape attachments or inline embedded as we are going to process them later\n            if (src.indexOf('cid:') !== -1) {\n                return acc;\n            }\n            if (src.indexOf('data:') !== -1) {\n                return acc;\n            }\n        }\n        acc.push(mapAttributes(node));\n        return acc;\n    }, []);\n\n    return attributes;\n}\n\nexport const transformRemote = (\n    { data: message = {}, document = null, showRemoteImages: inputShowImages = false },\n    { action = null, mailSettings }\n) => {\n    const regex = new RegExp(REGEXP_FIXER, 'g');\n    const showImages =\n        inputShowImages ||\n        !!(mailSettings.ShowImages & SHOW_IMAGES.REMOTE || WHITELIST.includes(message.Sender.Address));\n    const content = document.innerHTML;\n    const hasImages = regex.test(content);\n\n    if (showImages) {\n        // If load:manual we use a custom directive to inject the content\n        if (action === 'user.inject') {\n            // TODO: uncoment this block\n            // const list = prepareInjection(html);\n            prepareInjection(document);\n            // const hasSVG = /svg/.test(html.innerHTML);\n            // if (list.length || hasSVG) {\n            //     dispatcher['message.open']('remote.injected', { action, list, message, hasSVG });\n            // }\n        } else {\n            document.innerHTML = content.replace(regex, (match, $1) => $1.substring(7));\n        }\n    }\n    return { document, showRemoteImages: hasImages ? showImages : undefined };\n};\n","export const transformStylesheet = ({ document }) => {\n    const firstElement = document.firstElementChild;\n\n    /**\n     * Some emails from ex: tripit contains a position absolute on the container\n     * => hack to prevent margin on android/ios\n     * @{@link https://twitter.com/HTeuMeuLeu/status/852110032045035520}\n     * Gmail changes the dom too.\n     */\n    if (firstElement && /absolute/.test(firstElement.style.position)) {\n        firstElement.style.position = 'inherit';\n    }\n    return { document };\n};\n","const ELEMENTS = [\n    {\n        selector: 'a:not([href^=\"http\"])',\n        attribute: 'href'\n    },\n    {\n        selector: 'img:not([src^=\"http\"]):not([proton-src^=\"cid\"])',\n        attribute: 'proton-src'\n    }\n];\n\nconst getBaseURL = (base) => {\n    // Make sure base has trailing slash\n    const baseUrl = base.getAttribute('href');\n    if (baseUrl.substr(-1, 1) !== '/') {\n        return `${baseUrl}/`;\n    }\n    return baseUrl;\n};\n\n/**\n * Append base url to any href/src if we need to\n * @param  {Node} html HTML document from DOMPurify\n * @return {Node}      Dom based\n */\nexport const transformBase = ({ document }) => {\n    const base = document.querySelector('base');\n\n    if (!base || !base.getAttribute('href')) {\n        return { document };\n    }\n\n    // Make sure base has trailing slash\n    const BASE_URL = getBaseURL(base);\n\n    const bindAttribute = (node, key, value = '') => {\n        if (!value.startsWith('http')) {\n            node.setAttribute(key, BASE_URL + value);\n        }\n    };\n\n    ELEMENTS.forEach(({ selector, attribute }) => {\n        [...document.querySelectorAll(selector)].forEach((el) => {\n            const keyproton = `proton-${attribute}`;\n            const value = el.getAttribute(attribute) || '';\n            const ptValue = el.getAttribute(keyproton) || '';\n            // Ensure we don't add a useless / if we already have one\n            const url = value.charAt(0) === '/' ? value.slice(1) : value;\n\n            /*\n                Bind the value only when we need, if there is a proton-src we don't need\n                to add the src else it will generate a request to the domain\n             */\n            !ptValue && bindAttribute(el, attribute, url);\n            ptValue && bindAttribute(el, keyproton, ptValue);\n        });\n    });\n\n    return { document };\n};\n","import { BinaryResult } from 'pmcrypto';\n\nimport { Message } from '../../models/message';\nimport { ENCRYPTED_STATUS } from '../../constants';\nimport { Attachment, AttachmentMime } from '../../models/attachment';\nimport { AttachmentsDataCache } from '../../hooks/useAttachments';\n\n// This prefix is really useful to distinguish 'real' attachments from pgp attachments.\nconst ID_PREFIX = 'PGPAttachment';\n\nconst getId = (message: Message, parsedAttachment: any, number: number) =>\n    `${ID_PREFIX}_${message.ID}_${parsedAttachment.checksum}_${number}`;\n\n/**\n * Unfortunately mailparser doesn't expose header data directly so we will reconstruct the headers\n */\nconst getHeaders = ({\n    generatedFileName = '',\n    contentDisposition = '',\n    contentId = '',\n    transferEncoding = '',\n    contentType = ''\n}: AttachmentMime) => {\n    const headers: { [key: string]: any } = {};\n    const filenameOption = '; filename=' + JSON.stringify(generatedFileName);\n    headers['content-disposition'] = contentDisposition + filenameOption;\n    // test if this is an assigned content id\n    if (!/^.*@mailparser$/.test(contentId)) {\n        headers['content-id'] = /^<.*>$/.test(contentId) ? contentId : `<${contentId}>`;\n    }\n    if (contentDisposition.toLowerCase() === 'inline') {\n        headers.embedded = 1;\n    }\n    if (transferEncoding) {\n        headers['content-transfer-encoding'] = transferEncoding;\n    }\n    headers['content-type'] = contentType + filenameOption;\n    return headers;\n};\n\n/**\n * Convert a single attachment\n */\nconst convertSingle = (\n    message: Message,\n    parsedAttachment: AttachmentMime,\n    number: number,\n    verified: number,\n    cache: AttachmentsDataCache\n): Attachment => {\n    const ID = getId(message, parsedAttachment, number);\n\n    const attachment: Attachment = {\n        ID,\n        Headers: getHeaders(parsedAttachment),\n        Name: parsedAttachment.generatedFileName,\n        KeyPackets: null, // already decrypted;\n        MIMEType: parsedAttachment.contentType,\n        Signature: null,\n        Size: parsedAttachment.length,\n        Encrypted: ENCRYPTED_STATUS.PGP_MIME\n    };\n\n    const attachmentData: BinaryResult = {\n        data: parsedAttachment.content,\n        filename: '',\n        signatures: []\n    };\n\n    cache.set(ID, attachmentData /*, verified*/);\n    // invalidSignature.askAgain(message, attachment, false);\n    return attachment;\n};\n\n/**\n * Converts the parsedAttachment coming from mailparser to an attachment linked to the message provided.\n */\nexport const convert = (\n    message: Message,\n    attachments: AttachmentMime[],\n    verified: number,\n    cache: AttachmentsDataCache\n): Attachment[] => {\n    return attachments.map((attachment, number) => convertSingle(message, attachment, number, verified, cache));\n};\n","import { decryptMIMEMessage, decryptMessageLegacy } from 'pmcrypto';\nimport { MIME_TYPES } from 'proton-shared/lib/constants';\nimport { c } from 'ttag';\n\nimport { Message, MessageExtended } from '../../models/message';\nimport { convert } from '../attachment/attachmentConverter';\nimport { VERIFICATION_STATUS } from '../../constants';\nimport { getDate } from './messages';\nimport { AttachmentsDataCache } from '../../hooks/useAttachments';\n\nconst getVerifiedStatus = (pmcryptoVerified: number, publicKeys: any) => {\n    const signedInvalid = VERIFICATION_STATUS.SIGNED_AND_INVALID;\n    const signedPubkey = VERIFICATION_STATUS.SIGNED_NO_PUB_KEY;\n    return !publicKeys.length && pmcryptoVerified === signedInvalid ? signedPubkey : pmcryptoVerified;\n};\n\nexport const decryptMimeMessage = async (\n    message: Message,\n    privateKeys: any,\n    publicKeys: any,\n    attachmentsCache: AttachmentsDataCache\n): Promise<MessageExtended> => {\n    const headerFilename = c('Encrypted Headers').t`Encrypted Headers filename`;\n    const sender = (message.Sender || {}).Address;\n\n    const result = await decryptMIMEMessage({\n        message: message.Body,\n        messageDate: getDate(message),\n        privateKeys,\n        publicKeys,\n        headerFilename,\n        sender\n    });\n\n    const { body = c('Message empty').t`Message content if empty`, mimetype = MIME_TYPES.PLAINTEXT } =\n        (await result.getBody()) || {};\n\n    const verified = getVerifiedStatus(await result.verify(), publicKeys);\n\n    const attachments = convert(message, await result.getAttachments(), verified, attachmentsCache);\n    const encryptedSubject = await result.getEncryptedSubject();\n\n    return { raw: body, data: { ...message, Attachments: attachments }, verified, encryptedSubject, mimetype };\n};\n\nexport const decryptLegacyMessage = async (\n    message: Message,\n    privateKeys: any,\n    publicKeys: any\n): Promise<MessageExtended> => {\n    const { data, verified: pmcryptoVerified = VERIFICATION_STATUS.NOT_SIGNED } = (await decryptMessageLegacy({\n        message: message.Body,\n        messageDate: getDate(message),\n        privateKeys,\n        publicKeys\n    })) as any;\n\n    const verified = getVerifiedStatus(pmcryptoVerified, publicKeys);\n\n    return { raw: data, verified, publicKeys, privateKeys };\n};\n","import { useCallback } from 'react';\nimport { useGetPublicKeys, useGetAddressKeys } from 'react-components';\nimport { splitKeys } from 'proton-shared/lib/keys/keys';\nimport { MessageExtended } from '../models/message';\nimport { isMIME } from '../helpers/message/messages';\nimport { decryptLegacyMessage, decryptMimeMessage } from '../helpers/message/messageDecrypt';\nimport { useAttachmentsCache } from './useAttachments';\n\n// Reference: Angular/src/app/message/factories/messageModel.js decryptBody\n\nexport const useDecryptMessage = () => {\n    const getPublicKeys = useGetPublicKeys();\n    const getAddressKeys = useGetAddressKeys();\n    const attachmentsCache = useAttachmentsCache();\n\n    return useCallback(\n        async ({ data: message = {} }: MessageExtended): Promise<MessageExtended> => {\n            const [{ publicKeys = [] }, addressKeys] = await Promise.all([\n                getPublicKeys((message.Sender || {}).Address),\n                getAddressKeys(message.AddressID)\n            ]);\n            const { privateKeys } = splitKeys(addressKeys) as any;\n\n            // TODO: filter out compromised addresses (if not done already)\n\n            if (isMIME(message)) {\n                return decryptMimeMessage(message, privateKeys, publicKeys, attachmentsCache.data);\n            }\n\n            return decryptLegacyMessage(message, privateKeys, publicKeys);\n        },\n        [getPublicKeys, getAddressKeys, attachmentsCache]\n    );\n};\n","import React, { useLayoutEffect, createContext } from 'react';\nimport { useInstance, useEventManager } from 'react-components';\nimport createCache from 'proton-shared/lib/helpers/cache';\nimport createLRU from 'proton-shared/lib/helpers/lru';\nimport { EVENT_ACTIONS } from 'proton-shared/lib/constants';\nimport { MessageExtended } from '../models/message';\nimport { Event } from '../models/event';\n\ninterface Props {\n    children: JSX.Element;\n}\n\nexport interface Cache<Key, Value> {\n    has: (key: Key) => boolean;\n    get: (key: Key) => Value;\n    set: (key: Key, value: Value) => void;\n    delete: (key: Key) => void;\n    subscribe: (handler: (key: Key) => void) => () => void;\n}\n\nexport type MessageCache = Cache<string, MessageExtended>;\n\nexport const MessageContext = createContext<MessageCache>(null as any /* Just to please TS */);\n\n/**\n * The purpose of this provider is to synchronize individual message fetches with updates from the event manager,\n * and to have a separate LRU cache for it.\n */\nconst MessageProvider = ({ children }: Props) => {\n    const { subscribe } = useEventManager();\n    const cache: MessageCache = useInstance(() => {\n        return createCache(createLRU({ max: 50 } as any));\n    });\n\n    useLayoutEffect(() => {\n        return subscribe(({ Messages }: Event) => {\n            if (!Array.isArray(Messages)) {\n                return;\n            }\n            for (const { ID, Action, Message } of Messages) {\n                // Ignore updates for non-fetched messages.\n                if (!cache.has(ID)) {\n                    continue;\n                }\n                if (Action === EVENT_ACTIONS.DELETE) {\n                    cache.delete(ID);\n                }\n                if (Action === EVENT_ACTIONS.UPDATE_DRAFT || Action === EVENT_ACTIONS.UPDATE_FLAGS) {\n                    cache.set(ID, { ...cache.get(ID), ...Message });\n                }\n            }\n        });\n    }, []);\n\n    return <MessageContext.Provider value={cache}>{children}</MessageContext.Provider>;\n};\n\nexport default MessageProvider;\n","import { encodeBase64, decodeBase64 } from 'pmcrypto';\nimport { arrayToBinaryString, binaryStringToArray } from 'proton-shared/lib/helpers/string';\nimport { Binary } from '../models/utils';\n\nexport const arrayToBase64 = (data: Binary): string => encodeBase64(arrayToBinaryString(data)) || '';\n\nexport const base64ToArray = (data: string): Binary => binaryStringToArray(decodeBase64(data) || '');\n","import { getKeys, decodeBase64, binaryStringToArray, getFingerprint, isExpiredKey, PmcryptoKey } from 'pmcrypto';\n\nimport { unique } from 'proton-shared/lib/helpers/array';\nimport { PACKAGE_TYPE, RECIPIENT_TYPE, MIME_TYPES, KEY_FLAGS } from 'proton-shared/lib/constants';\n\nimport { Message } from '../../models/message';\nimport { isEO, isSign } from '../message/messages';\nimport { normalizeEmail } from '../addresses';\nimport { Address } from '../../models/address';\nimport { getByEmail, isOwnAddress, isFallbackAddress } from '../addresses';\nimport { KeyData, Key } from '../../models/key';\nimport { findEmailInCache } from '../contacts';\nimport { ContactEmailCache, ContactEmail } from '../../models/contact';\nimport { base64ToArray } from '../base64';\n\nexport type MapPreference = { [email: string]: SendPreference };\n\nexport interface SendPreference {\n    encrypt: boolean;\n    sign: boolean;\n    mimetype: MIME_TYPES;\n    publickeys: PmcryptoKey[];\n    primaryPinned: boolean;\n    scheme: PACKAGE_TYPE;\n    pinned: boolean;\n    isVerified: boolean;\n    warnings: any[];\n    ownAddress: boolean;\n}\n\ntype CachePreference = { [contactID: string]: { [email: string]: PreferenceInfo } };\n\ninterface PreferenceInfo {\n    encryptFlag: boolean;\n    signFlag: boolean;\n    emailKeys: string[];\n    mimetype: MIME_TYPES;\n    scheme: PACKAGE_TYPE;\n    isVerified: boolean;\n}\n\nconst cache: CachePreference = {};\n\nconst emailInExtrInfo = (contactEmail: ContactEmail) =>\n    cache[contactEmail.ContactID || ''] && cache[contactEmail.ContactID || ''][normalizeEmail(contactEmail.Email)];\n\nconst getInExtrInfo = (contactEmail: ContactEmail) =>\n    (cache[contactEmail.ContactID || ''] || {})[normalizeEmail(contactEmail.Email)] || {};\n\nconst usesDefaults = (contactEmail: ContactEmail) => !contactEmail || contactEmail.Defaults;\n\n/**\n * Determines if a certain key object is allowed to be used for encryption\n */\nconst encryptionEnabled = ({ Flags }: Key) => Flags & KEY_FLAGS.ENABLE_ENCRYPTION;\n\n/**\n * Returns the default send preferences if no contact is available for the specified email address.\n * The global settings, composer mode and API keys can still change the defaults though.\n */\nconst getDefaultInfo = async (\n    email: string,\n    { RecipientType, Keys = [], Warnings: warnings = [] }: KeyData,\n    defaultMimeType: MIME_TYPES,\n    eoEnabled: boolean,\n    globalSign: boolean,\n    mailSettings: any,\n    addresses: Address[]\n): Promise<SendPreference> => {\n    const isInternal = RecipientType === RECIPIENT_TYPE.TYPE_INTERNAL;\n    const isExternal = RecipientType === RECIPIENT_TYPE.TYPE_EXTERNAL;\n    const settingsScheme = mailSettings.PGPScheme;\n    const settingsMime = settingsScheme === PACKAGE_TYPE.SEND_PGP_MIME ? MIME_TYPES.MIME : MIME_TYPES.PLAINTEXT;\n    const address = getByEmail(addresses, email);\n    const ownAddress = isOwnAddress(address, Keys);\n\n    if ((isInternal || isExternal) && Keys.length) {\n        const fallbackAddress = isFallbackAddress(address, Keys);\n\n        return {\n            warnings,\n            encrypt: true,\n            sign: true,\n            mimetype: isExternal ? settingsMime : defaultMimeType,\n            publickeys: await getKeys(Keys[0].PublicKey),\n            primaryPinned: !fallbackAddress,\n            scheme: isInternal ? PACKAGE_TYPE.SEND_PM : settingsScheme,\n            pinned: ownAddress,\n            ownAddress,\n            isVerified: true\n        };\n    }\n    if (eoEnabled) {\n        return {\n            warnings,\n            encrypt: true,\n            sign: false,\n            mimetype: defaultMimeType,\n            publickeys: [],\n            primaryPinned: true,\n            scheme: PACKAGE_TYPE.SEND_EO,\n            pinned: false,\n            ownAddress,\n            isVerified: true\n        };\n    }\n    return {\n        warnings,\n        encrypt: false,\n        sign: globalSign,\n        mimetype: globalSign ? settingsMime : defaultMimeType,\n        publickeys: [],\n        primaryPinned: true,\n        scheme: globalSign ? settingsScheme : PACKAGE_TYPE.SEND_CLEAR,\n        pinned: false,\n        ownAddress,\n        isVerified: true\n    };\n};\n\nconst mimetypeLogic = (\n    mimetype: MIME_TYPES,\n    defaultMimetype: MIME_TYPES,\n    scheme: PACKAGE_TYPE,\n    sign: boolean,\n    encrypt: boolean\n) => {\n    /*\n     * PGP/MIME can only send using the MIME encoding as it doesn't support separate attachments and we need to encode\n     * them in the body\n     */\n    if (scheme === PACKAGE_TYPE.SEND_PGP_MIME && (sign || encrypt)) {\n        return MIME_TYPES.MIME;\n    }\n    if (scheme === PACKAGE_TYPE.SEND_PGP_INLINE && (sign || encrypt)) {\n        return MIME_TYPES.PLAINTEXT;\n    }\n    // If sending EO, respect the mime type of the composer, since it will be what the API returns when retrieving the message.\n    if (scheme === PACKAGE_TYPE.SEND_EO) {\n        return defaultMimetype;\n    }\n    if (defaultMimetype === MIME_TYPES.PLAINTEXT || mimetype === null) {\n        // NEVER upconvert\n        return defaultMimetype;\n    }\n    return mimetype;\n};\n\n/**\n * Checks if one of the allowed sending keys is pinned. This function returns true if key pinning is disabled\n * or if atleast on of the Sending keys are in the contacts\n * Should be done on extract, so API changes (the other user resetting their password) are noticed.\n */\nconst isPrimaryPinned = async (base64Keys: string[], Keys: Key[], email: string, addresses: Address[]) => {\n    if (base64Keys.length === 0) {\n        const address = getByEmail(addresses, email);\n        return !isFallbackAddress(address, Keys);\n    }\n\n    const sendKeys = Keys.filter(encryptionEnabled).map((key) => key.PublicKey);\n    const keys = await Promise.all(sendKeys.map(getKeys));\n    const sendKeyObjects = keys.filter(([k = false]: any) => !!k);\n    const [pinnedKey] = await getKeys(base64ToArray(base64Keys[0]) as any);\n    const pinnedFingerprint = getFingerprint(pinnedKey);\n\n    return (\n        sendKeyObjects.length === 0 || sendKeyObjects.map(([k]: any) => getFingerprint(k)).includes(pinnedFingerprint)\n    );\n};\n\n/**\n * Generates the sendpreferences using the extracted information after parsing the contacts.\n * This function is the counterpart extractInfo\n */\nconst extractInfo = async (\n    { encryptFlag, signFlag, mimetype: inputMimetype, emailKeys, scheme: inputScheme, isVerified }: PreferenceInfo,\n    keyData: KeyData,\n    defaultMimeType: MIME_TYPES,\n    eoEnabled: boolean,\n    globalSign: boolean,\n    email: string,\n    mailSettings: any,\n    addresses: Address[]\n): Promise<SendPreference> => {\n    const { RecipientType, Warnings = [], Keys = [] } = keyData;\n    const isInternal = RecipientType === RECIPIENT_TYPE.TYPE_INTERNAL;\n    const isExternalWithKeys = RecipientType === RECIPIENT_TYPE.TYPE_EXTERNAL && Keys.length > 0;\n    const primaryPinned =\n        isInternal || isExternalWithKeys ? await isPrimaryPinned(emailKeys, Keys, email, addresses) : true;\n    const pmKey = isInternal || isExternalWithKeys ? await getKeys(Keys[0].PublicKey) : [];\n    // In case the pgp packet list contains multiple keys, only the first one is taken.\n    const keyObjs = await Promise.all(\n        emailKeys\n            .map((s) => decodeBase64(s) || '')\n            .map(binaryStringToArray)\n            .map((a) => {\n                return getKeys(a).then(([k]) => isExpiredKey(k).then((isExpired: boolean) => (isExpired ? null : [k])));\n            })\n    );\n    const keyObjects = (keyObjs.filter((k) => k !== null) as unknown) as PmcryptoKey[];\n\n    const publickeys = keyObjects.length && primaryPinned ? [keyObjects[0]] : pmKey;\n    const warnings = Warnings;\n    let encrypt = isInternal || isExternalWithKeys || (encryptFlag && !!keyObjects.length);\n    let sign = isInternal || isExternalWithKeys || (signFlag === null ? !!globalSign : signFlag);\n    sign = sign || encryptFlag;\n\n    let scheme: PACKAGE_TYPE;\n    if (isInternal) {\n        scheme = PACKAGE_TYPE.SEND_PM;\n    } else {\n        scheme = sign || encrypt ? inputScheme : PACKAGE_TYPE.SEND_CLEAR;\n    }\n    scheme = scheme === null ? mailSettings.PGPScheme : scheme;\n\n    if (eoEnabled && !encrypt) {\n        sign = false;\n        encrypt = true;\n        scheme = PACKAGE_TYPE.SEND_EO;\n    }\n\n    const mimetype = mimetypeLogic(inputMimetype, defaultMimeType, scheme, sign, encrypt);\n    const pinned = keyObjects.length > 0;\n    const ownAddress = false;\n\n    return { publickeys, warnings, encrypt, sign, scheme, mimetype, primaryPinned, isVerified, pinned, ownAddress };\n};\n\n/**\n * Extracts the preferences from the contacts and stores it in the cache for reusage.\n * The logic is straightforward but we see for more info\n * https://docs.google.com/document/d/1lEBkG0DC5FOWlumInKtu4a9Cc1Eszp48ZhFy9UpPQso\n */\nconst getApiInfo = async (\n    email: string,\n    keyData: KeyData,\n    defaultMimeType: MIME_TYPES,\n    eoEnabled: boolean,\n    globalSign: boolean,\n    mailSettings: any,\n    addresses: Address[],\n    cache: ContactEmailCache\n) => {\n    const normalizedEmail = normalizeEmail(email);\n    // const isInternal = keyData.RecipientType === RECIPIENT_TYPE.TYPE_INTERNAL;\n    // const isExternalWithKeys = keyData.RecipientType === RECIPIENT_TYPE.TYPE_EXTERNAL && keyData.Keys.length > 0;\n\n    const contactEmail = findEmailInCache(cache, normalizedEmail);\n    if (usesDefaults(contactEmail)) {\n        const info = await getDefaultInfo(\n            email,\n            keyData,\n            defaultMimeType,\n            eoEnabled,\n            globalSign,\n            mailSettings,\n            addresses\n        );\n        return { [email]: info };\n    }\n\n    // TODO: Decrypt contacts\n\n    ////////////////////////////////////\n    ////////////// MOCK ////////////////\n    ////////////////////////////////////\n\n    const info = await getDefaultInfo(email, keyData, defaultMimeType, eoEnabled, globalSign, mailSettings, addresses);\n    return { [email]: info };\n\n    ////////////////////////////////////\n    ////////////// MOCK ////////////////\n    ////////////////////////////////////\n\n    // const { vCard, errors } = await Contact.get(contactEmail.ContactID);\n\n    // const keyList = toList(vCard.get('key'));\n    // const encryptFlagList = toList(vCard.get('x-pm-encrypt'));\n    // const signFlagList = toList(vCard.get('x-pm-sign'));\n    // const schemeList = toList(vCard.get('x-pm-scheme'));\n    // const mimeList = toList(vCard.get('x-pm-mimetype'));\n    // const emailList = toList(vCard.get('email'));\n\n    // const group = getGroup(emailList, normalizedEmail);\n    // if (!group) {\n    //     return { [email]: await getDefaultInfo(email, keyData, defaultMimeType, eoEnabled, globalSign) };\n    // }\n\n    // const matchesGroup = groupMatcher(group.toLowerCase());\n    // const emailKeys = _.filter(keyList, matchesGroup);\n    // const encryptFlag = _.find(encryptFlagList, matchesGroup);\n    // const signFlag = _.find(signFlagList, matchesGroup);\n    // const mimetypeProp = _.find(mimeList, matchesGroup);\n    // const mimetype = mimetypeProp ? mimetypeProp.valueOf() : null;\n    // const schemeProp = _.find(schemeList, matchesGroup);\n    // const scheme = schemeProp ? toSchemeConstant(schemeProp.valueOf()) : null;\n    // const base64Keys = await reorderKeys(\n    //     keyData,\n    //     (await Promise.all(_.map(emailKeys, (prop) => contactKey.getBase64Value(prop)))).filter(Boolean) // In case the key is expired or revoked we don't get the base 64 value but false\n    // );\n    // const data = {\n    //     encryptFlag:\n    //         isInternal ||\n    //         isExternalWithKeys ||\n    //         ((encryptFlag ? encryptFlag.valueOf().toLowerCase() !== 'false' : false) && emailKeys.length > 0),\n    //     signFlag:\n    //         isInternal ||\n    //         isExternalWithKeys ||\n    //         (signFlag ? signFlag.valueOf().toLowerCase() !== 'false' : !!globalSign),\n    //     emailKeys: base64Keys,\n    //     mimetype: mimetype !== 'text/plain' && mimetype !== 'text/html' ? null : mimetype,\n    //     scheme: isInternal ? PACKAGE_TYPE.SEND_PM : scheme,\n    //     isVerified: !errors.includes(CONTACT_ERROR.TYPE2_CONTACT_VERIFICATION)\n    // };\n\n    // // We don't support encryption without signing\n    // data.signFlag = data.signFlag || data.encryptFlag;\n\n    // CACHE.EXTRACTED_INFO[contactEmail.ContactID] = CACHE[contactEmail.ContactID] || {};\n    // CACHE.EXTRACTED_INFO[contactEmail.ContactID][normalizedEmail] = data;\n\n    // return { [email]: await extractInfo(data, keyData, defaultMimeType, eoEnabled, globalSign, email) };\n};\n\n/**\n * Extracts send preferences from the cache if available\n */\nconst getCacheInfo = async (\n    email: string,\n    keyData: KeyData,\n    defaultMimeType: MIME_TYPES,\n    eoEnabled: boolean,\n    globalSign: boolean,\n    mailSettings: any,\n    addresses: Address[],\n    cache: ContactEmailCache\n): Promise<MapPreference> => {\n    const normalizedEmail = normalizeEmail(email);\n    const contactEmail = findEmailInCache(cache, normalizedEmail);\n\n    if (usesDefaults(contactEmail)) {\n        return {\n            [email]: await getDefaultInfo(\n                email,\n                keyData,\n                defaultMimeType,\n                eoEnabled,\n                globalSign,\n                mailSettings,\n                addresses\n            )\n        };\n    }\n\n    if (!emailInExtrInfo(contactEmail)) {\n        // return { [email]: null };\n        return {};\n    }\n\n    return {\n        [email]: await extractInfo(\n            getInExtrInfo(contactEmail),\n            keyData,\n            defaultMimeType,\n            eoEnabled,\n            globalSign,\n            email,\n            mailSettings,\n            addresses\n        )\n    };\n};\n\nconst inExtractedInfoCache = (contactEmailList: ContactEmail[]) =>\n    contactEmailList.every((e) => usesDefaults(e) || emailInExtrInfo(e));\n\nconst inCache = (emails: string[], cache: ContactEmailCache) => {\n    const normalizedEmails = emails.map(normalizeEmail);\n    const contactEmailList = normalizedEmails.map((email) => findEmailInCache(cache, email));\n\n    return inExtractedInfoCache(contactEmailList);\n};\n\nconst getInfo = async (\n    email: string,\n    keyData: KeyData,\n    defaultMimeType: MIME_TYPES,\n    eoEnabled: boolean,\n    globalSign: boolean,\n    mailSettings: any,\n    addresses: Address[],\n    cache: ContactEmailCache\n): Promise<MapPreference> => {\n    const address = getByEmail(addresses, email);\n\n    if (isOwnAddress(address, keyData.Keys)) {\n        const info = await getDefaultInfo(\n            email,\n            keyData,\n            defaultMimeType,\n            eoEnabled,\n            globalSign,\n            mailSettings,\n            addresses\n        );\n        return { [email]: info };\n    }\n\n    if (inCache([email], cache)) {\n        return getCacheInfo(email, keyData, defaultMimeType, eoEnabled, globalSign, mailSettings, addresses, cache);\n    }\n\n    return getApiInfo(email, keyData, defaultMimeType, eoEnabled, globalSign, mailSettings, addresses, cache);\n};\n\n/**\n * The goal of this service is to provide all the encryption + encoding preferences for a recipient by parsing the\n * contact of the recipient, considering the general settings, inputs from the message that we want to send and API stuff\n *\n * For the general logic see:\n * https://docs.google.com/document/d/1lEBkG0DC5FOWlumInKtu4a9Cc1Eszp48ZhFy9UpPQso\n * This is the specification it should implement and should be the right way to do this\n *\n * primaryPinned basically just says if the primary key is available for sending (so either pinned or key pinning is disabled\n * It differs from pinned as pinned just says is key pinning is enabled.\n * primaryPinned is a flag that tells the FE that we first need to fix the sendPreference before sending.\n */\nexport const getSendPreferences = async (\n    emails: string[] = [],\n    message: Message,\n    mailSettings: any,\n    addresses: Address[],\n    cache: ContactEmailCache,\n    getPublicKeys: (email: string) => Promise<KeyData>,\n    catchErrors = false\n): Promise<MapPreference> => {\n    const defaultMimeType: MIME_TYPES = message ? (message.MIMEType as MIME_TYPES) : MIME_TYPES.DEFAULT;\n    const eoEnabled = isEO(message);\n    const globalSign = message ? isSign(message) : mailSettings.Sign;\n    const normEmails: string[] = unique(emails.map(normalizeEmail));\n    const normInfos = await Promise.all(\n        normEmails.map(async (email) => {\n            try {\n                const keyData = await getPublicKeys(email);\n                return getInfo(email, keyData, defaultMimeType, eoEnabled, globalSign, mailSettings, addresses, cache);\n            } catch (e) {\n                if (!catchErrors) {\n                    throw e;\n                }\n            }\n        })\n    );\n    const normMap = Object.assign({}, ...normInfos);\n\n    return emails.reduce((acc, cur) => {\n        const result = normMap[normalizeEmail(cur)];\n        if (!result) {\n            return acc;\n        }\n        acc[cur] = result;\n        return acc;\n    }, {} as MapPreference);\n};\n","import mimemessage from 'mimemessage';\nimport { BinaryResult, arrayToBinaryString } from 'pmcrypto';\n\nimport { MessageExtended } from '../../models/message';\nimport { getPlainText, getHTML, getAttachments } from '../message/messages';\nimport { Attachment } from '../../models/attachment';\nimport { MIME_TYPES } from 'proton-shared/lib/constants';\nimport { get } from '../attachment/attachmentLoader';\nimport { AttachmentsDataCache } from '../../hooks/useAttachments';\nimport { Api } from '../../models/utils';\nimport { getBodyParser, extractEmbedded } from '../embedded/embeddedUtils';\n\n// Reference: Angular/src/app/composer/services/mimeMessageBuilder.js\n\ninterface AttachmentData {\n    attachment: Attachment;\n    data: BinaryResult;\n}\n\n/**\n * Remove '; name=' and '; filename=' values\n */\nconst extractContentValue = (value = '') => {\n    const semicolonIndex = value.indexOf(';');\n    if (semicolonIndex === -1) {\n        return value;\n    }\n    return value.substr(0, semicolonIndex);\n};\n\nconst buildAttachments = (attachments: AttachmentData[]) =>\n    attachments.map(({ attachment, data }) => {\n        const attachmentName = JSON.stringify(attachment.Name);\n        const headers = attachment.Headers || {};\n        const contentTypeValue =\n            extractContentValue(headers['content-type']) || attachment.MIMEType || 'application/octet-stream';\n        const contentDispositionValue = extractContentValue(headers['content-disposition']) || 'attachment';\n        const entity = mimemessage.factory({\n            contentType: `${contentTypeValue}; filename=${attachmentName}; name=${attachmentName}`,\n            contentTransferEncoding: 'base64',\n            body: arrayToBinaryString(data.data)\n        });\n\n        entity.header(\n            'content-disposition',\n            `${contentDispositionValue}; filename=${attachmentName}; name=${attachmentName}`\n        );\n\n        if (headers['content-id']) {\n            entity.header('content-id', headers['content-id']);\n        }\n\n        return entity;\n    });\n\nconst buildEmbeddedHtml = (html?: string, attachments?: AttachmentData[]) => {\n    const htmlEntity = mimemessage.factory({\n        contentType: 'text/html;charset=utf-8',\n        contentTransferEncoding: 'base64',\n        body: html\n    });\n\n    if (attachments && attachments.length > 0) {\n        console.log('attachments in mime message ignored as not supported yet', attachments);\n    }\n    // TODO: Attachments\n    // const testDiv = embeddedUtils.getBodyParser(html);\n    // const inlineAttachments = embeddedUtils.extractEmbedded(attachments, testDiv);\n    // const attachmentEntities = buildAttachments(inlineAttachments);\n\n    // add the attachments\n    // const relatedBody = [htmlEntity].concat(attachmentEntities);\n    const relatedBody = [htmlEntity];\n\n    return mimemessage.factory({\n        contentType: 'multipart/related',\n        body: relatedBody\n    });\n};\n\n/**\n * Quoted printable for compatibility with old clients\n * Mimemessagefactory doesn't handle the empty string well.\n */\nconst buildPlaintextEntity = (plaintext?: string) =>\n    mimemessage.factory({\n        body: plaintext,\n        contentTransferEncoding: 'quoted-printable'\n    });\n\n/**\n * Build the multipart/alternate MIME entity containing both the HTML and plain text entities.\n */\nconst buildAlternateEntity = (plaintext?: string, html?: string, attachments?: AttachmentData[]) =>\n    mimemessage.factory({\n        contentType: 'multipart/alternative',\n        body: [buildPlaintextEntity(plaintext), buildEmbeddedHtml(html, attachments)]\n    });\n\n/**\n * Builds a mime body given the plaintext, html source and a list of attachments to fetch embedded images from\n */\nconst buildBodyEntity = (plaintext?: string, html?: string, attachments?: AttachmentData[]) => {\n    if (html !== undefined && plaintext !== undefined) {\n        return buildAlternateEntity(plaintext, html, attachments);\n    }\n    return html !== undefined ? buildEmbeddedHtml(html, attachments) : buildPlaintextEntity(plaintext);\n};\n\n/**\n * Extracts the non-inline attachments from the given html.\n */\nconst getNormalAttachments = (html?: string, attachments: AttachmentData[] = []) => {\n    if (html === undefined) {\n        return attachments;\n    }\n    const testDiv = getBodyParser(html);\n    const embeddedAttachments = extractEmbedded(attachments, testDiv);\n    return attachments.filter((attachment) => !embeddedAttachments.includes(attachment));\n};\n\n/**\n * Builds a multipart message from the given plaintext, html bodies and attachments.\n * The html body is not necessary to create a valid mime body\n */\nconst build = (plaintext?: string, html?: string, attachments?: AttachmentData[]): string => {\n    const bodyEntity = buildBodyEntity(plaintext, html, attachments);\n    const normalAttachments = getNormalAttachments(html, attachments);\n    const attachmentEntities = buildAttachments(normalAttachments);\n    const body = [bodyEntity].concat(attachmentEntities);\n\n    const msgentity = mimemessage.factory({\n        contentType: 'multipart/mixed',\n        body\n    });\n\n    // this trailing line space is important: if it's not there outlook.com adds it and breaks pgp/mime signatures.\n    return msgentity.toString() + '\\r\\n';\n};\n\nconst fetchMimeDependencies = async (\n    message: MessageExtended,\n    cache: AttachmentsDataCache,\n    api: Api\n): Promise<AttachmentData[]> => {\n    return Promise.all(\n        getAttachments(message.data).map(async (attachment) => ({\n            attachment,\n            data: await get(attachment, message, cache, api)\n        }))\n    );\n};\n\nexport const constructMime = async (\n    message: MessageExtended,\n    cache: AttachmentsDataCache,\n    api: Api,\n    downconvert = true\n) => {\n    // TODO: ?\n    // if (message.isMIME() && message.decryptedMIME) {\n    //     return message.decryptedMIME;\n    // }\n\n    const plaintext = getPlainText(message, downconvert);\n    const html = message.data?.MIMEType === MIME_TYPES.DEFAULT ? getHTML(message) : undefined;\n    const attachments = await fetchMimeDependencies(message, cache, api);\n\n    return build(plaintext, html, attachments);\n};\n","import { MIME_TYPES, PACKAGE_TYPE } from 'proton-shared/lib/constants';\n\nimport { MessageExtended } from '../../models/message';\nimport { MapPreference } from './sendPreferences';\n\nimport { constructMime } from './sendMimeBuilder';\nimport { addReceived, getPlainText, getHTML } from '../message/messages';\nimport { PmcryptoKey } from 'pmcrypto';\nimport { AttachmentsDataCache } from '../../hooks/useAttachments';\nimport { Api } from '../../models/utils';\n\n// Reference: Angular/src/app/composer/services/encryptMessage.js\n// Reference: Angular/src/app/composer/services/generateTopPackages.js\n\nconst { PLAINTEXT, DEFAULT, MIME } = MIME_TYPES;\n\ntype PackageStatus = {\n    [key in MIME_TYPES]?: boolean;\n};\n\nexport type Packages = {\n    [key in MIME_TYPES]?: Package;\n};\n\nexport interface Package {\n    Flags?: number;\n    Addresses?: { [email: string]: Package };\n    MIMEType?: MIME_TYPES;\n    Body?: string;\n    BodyKey?: any;\n    BodyKeyPacket?: string;\n    Type?: PACKAGE_TYPE;\n    PublicKey?: PmcryptoKey;\n    AttachmentKeys?: { [AttachmentID: string]: { Key: string; Algorithm: string } };\n    AttachmentKeyPackets?: { [AttachmentID: string]: string };\n}\n\n/**\n * Generates the mime top-level packages, which include all attachments in the body.\n * Build the multipart/alternate MIME entity containing both the HTML and plain text entities.\n */\nconst generateMimePackage = async (\n    message: MessageExtended,\n    cache: AttachmentsDataCache,\n    api: Api\n): Promise<Package> => ({\n    Flags: addReceived(message.data?.Flags),\n    Addresses: {},\n    MIMEType: MIME,\n    Body: await constructMime(message, cache, api)\n});\n\nconst generatePlainTextPackage = async (message: MessageExtended): Promise<Package> => ({\n    Flags: addReceived(message.data?.Flags),\n    Addresses: {},\n    MIMEType: PLAINTEXT,\n    Body: getPlainText(message, true)\n});\n\nconst generateHTMLPackage = async (message: MessageExtended): Promise<Package> => ({\n    Flags: addReceived(message.data?.Flags),\n    Addresses: {},\n    MIMEType: DEFAULT,\n    Body: getHTML(message)\n});\n\n/**\n * Generates all top level packages. The top level packages have unencrypted bodies which are encrypted later on\n * once the sub level packages are attached, so we know with which keys we need to encrypt the bodies with.\n * Top level packages that are not needed are not generated.\n */\nexport const generateTopPackages = async (\n    message: MessageExtended,\n    sendPrefs: MapPreference,\n    cache: AttachmentsDataCache,\n    api: Api\n): Promise<Packages> => {\n    const packagesStatus: PackageStatus = Object.values(sendPrefs).reduce(\n        (packages, info) => ({\n            [PLAINTEXT]: packages[PLAINTEXT] || info.mimetype === MIME_TYPES.PLAINTEXT,\n            [DEFAULT]:\n                packages[DEFAULT] ||\n                info.mimetype === DEFAULT ||\n                (info.scheme === PACKAGE_TYPE.SEND_PGP_MIME && !info.encrypt && !info.sign),\n            [MIME]: packages[MIME] || (info.scheme === PACKAGE_TYPE.SEND_PGP_MIME && (info.encrypt || info.sign))\n        }),\n        {\n            [PLAINTEXT]: false,\n            [DEFAULT]: false,\n            [MIME]: false\n        } as PackageStatus\n    );\n\n    const demandedPackages = Object.values(MIME_TYPES).filter((k) => packagesStatus[k]);\n\n    const packages: Packages = {};\n\n    await Promise.all(\n        demandedPackages.map(async (type) => {\n            switch (type) {\n                case MIME:\n                    packages[MIME] = await generateMimePackage(message, cache, api);\n                    return;\n                case PLAINTEXT:\n                    packages[PLAINTEXT] = await generatePlainTextPackage(message);\n                    return;\n                case DEFAULT:\n                    packages[DEFAULT] = await generateHTMLPackage(message);\n                    return;\n                default:\n                    throw new Error(); // Should never happen.\n            }\n        })\n    );\n\n    return packages;\n};\n","import { MIME_TYPES, PACKAGE_TYPE } from 'proton-shared/lib/constants';\n\nimport { Package, Packages } from './sendTopPackages';\nimport { MessageExtended, Message } from '../../models/message';\nimport { MapPreference, SendPreference } from './sendPreferences';\nimport { isEO, getAttachments } from '../message/messages';\n\nconst { PLAINTEXT, DEFAULT, MIME } = MIME_TYPES;\nconst { SEND_PM, SEND_CLEAR, SEND_PGP_INLINE, SEND_PGP_MIME, SEND_EO } = PACKAGE_TYPE;\n\nexport const SEND_MIME = 32; // TODO update proton-shared constant\n\n/**\n * Package for a ProtonMail user.\n */\nconst sendPM = async ({ publickeys }: SendPreference, message: Message = {}) => ({\n    Type: SEND_PM,\n    PublicKey: publickeys.length ? publickeys[0] : undefined,\n    Signature: getAttachments(message).every(({ Signature }) => Signature)\n});\n\n/**\n * Package for a outside user using ProtonMail encryption\n */\nconst sendPMEncryptedOutside = async (message: Message = {}) => {\n    console.warn('Unsuported yet', message);\n\n    // TODO\n\n    return {};\n\n    // try {\n    //     const Token = await message.generateReplyToken();\n\n    //     const [{ data: EncToken }, { Auth }] = await Promise.all([\n    //         encryptMessage({ data: Token, publicKeys: [], passwords: [message.Password] }),\n    //         srp.getVerify({ Password: message.Password })\n    //     ]);\n\n    //     return {\n    //         Auth,\n    //         Type: SEND_TYPES.SEND_EO,\n    //         PasswordHint: message.PasswordHint,\n    //         Token,\n    //         EncToken,\n    //         Signature: +message.Attachments.every(({ Signature }) => Signature)\n    //     };\n    // } catch (err) {\n    //     message.encrypting = false;\n    //     dispatchMessageAction(message);\n    //     console.error(err);\n    //     throw err;\n    // }\n};\n\n/**\n * Package for a PGP/MIME user.\n */\nconst sendPGPMime = async ({ publickeys, sign, encrypt }: SendPreference) => {\n    if (encrypt) {\n        return {\n            Type: SEND_PGP_MIME,\n            PublicKey: publickeys.length ? publickeys[0] : undefined\n        };\n    }\n\n    // PGP/MIME signature only\n    return {\n        Type: SEND_MIME,\n        Signature: +sign\n    };\n};\n\n/**\n * Package for a PGP/Inline user.\n */\nconst sendPGPInline = async ({ publickeys, sign, encrypt }: SendPreference, message: Message = {}) => {\n    if (encrypt) {\n        return {\n            Type: SEND_PGP_INLINE,\n            PublicKey: publickeys.length ? publickeys[0] : undefined,\n            Signature: getAttachments(message).every(({ Signature }) => Signature)\n        };\n    }\n\n    // PGP/Inline signature only\n    return {\n        Type: SEND_CLEAR,\n        Signature: +sign\n    };\n};\n\n/**\n * Package for an unencrypted user\n */\nconst sendClear = async () => ({ Type: SEND_CLEAR, Signature: 0 });\n\n/**\n * Attach the subpackages for encryptMessage to the given top level packages. The packages need to be encrypted before\n * they can be send to the api. See encryptPackages for that.\n */\nexport const attachSubPackages = async (\n    packages: Packages,\n    message: MessageExtended,\n    emails: string[],\n    sendPrefs: MapPreference\n): Promise<Packages> => {\n    const bindPackageSet = async (promise: Promise<Package>, email: string, type: MIME_TYPES) => {\n        const pack = await promise;\n        const packageToUpdate = packages[type] as Package;\n\n        if (!packageToUpdate.Addresses) {\n            packageToUpdate.Addresses = {};\n        }\n        if (!packageToUpdate.Type) {\n            packageToUpdate.Type = 0;\n        }\n\n        packageToUpdate.Addresses[email] = pack;\n        packageToUpdate.Type |= pack.Type || 0;\n    };\n\n    const promises = emails.map((email: string) => {\n        const info = sendPrefs[email];\n\n        const mimeType = info.mimetype === null ? message.data?.MIMEType : info.mimetype;\n        const packageType = mimeType === 'text/html' ? DEFAULT : PLAINTEXT;\n\n        switch (info.scheme) {\n            case SEND_PM:\n                return bindPackageSet(sendPM(info, message.data), email, packageType);\n            case SEND_PGP_MIME:\n                if (!info.sign && !info.encrypt) {\n                    return bindPackageSet(sendClear(), email, DEFAULT);\n                }\n                return bindPackageSet(sendPGPMime(info), email, MIME);\n            case SEND_PGP_INLINE:\n                return bindPackageSet(sendPGPInline(info, message.data), email, PLAINTEXT);\n            case SEND_EO:\n            case SEND_CLEAR:\n                // Encrypted for outside (EO)\n                if (isEO(message.data)) {\n                    return bindPackageSet(sendPMEncryptedOutside(message.data), email, packageType);\n                }\n\n                return bindPackageSet(sendClear(), email, packageType);\n        }\n    });\n\n    await Promise.all(promises);\n    return packages;\n};\n","import {\n    encryptMessage,\n    splitMessage,\n    armorBytes,\n    concatArrays,\n    generateSessionKey,\n    encryptSessionKey,\n    SessionKey,\n    PmcryptoKey\n} from 'pmcrypto';\n\nimport { identity } from 'proton-shared/lib/helpers/function';\nimport { splitKeys } from 'proton-shared/lib/keys/keys';\nimport { hasBit } from 'proton-shared/lib/helpers/bitset';\n\nimport { MessageExtended, Message } from '../../models/message';\nimport { Packages, Package } from './sendTopPackages';\nimport { getAttachments } from '../message/messages';\nimport { getSessionKey } from '../attachment/attachmentLoader';\nimport { AddressKeys } from '../../models/key';\nimport { arrayToBase64 } from '../base64';\nimport { PACKAGE_TYPE, MIME_TYPES } from 'proton-shared/lib/constants';\nimport { AES256 } from '../../constants';\nimport { SEND_MIME } from './sendSubPackages';\nimport { Attachment } from '../../models/attachment';\n\n// Reference: Angular/src/app/composer/services/encryptPackages.js\n\ninterface AttachmentKeys {\n    Attachment: Attachment;\n    SessionKey: SessionKey;\n}\n\nconst { SEND_CLEAR, SEND_EO } = PACKAGE_TYPE;\n\nconst packToBase64 = ({ data, algorithm: Algorithm = AES256 }: SessionKey) => {\n    return { Key: arrayToBase64(data), Algorithm };\n};\n\nconst encryptKeyPacket = async ({\n    sessionKeys = [],\n    publicKeys = [],\n    passwords = []\n}: {\n    sessionKeys?: SessionKey[];\n    publicKeys?: PmcryptoKey[];\n    passwords?: string[];\n}) =>\n    Promise.all(\n        sessionKeys.map(async (sessionKey) => {\n            const { message } = await encryptSessionKey({\n                data: sessionKey.data,\n                algorithm: sessionKey.algorithm,\n                publicKeys: publicKeys.length > 0 ? publicKeys : undefined,\n                passwords\n            });\n            const data = message.packets.write();\n            return arrayToBase64(data as Uint8Array);\n        })\n    );\n\n/**\n * Encrypt the attachment session keys and add them to the package\n */\nconst encryptAttachmentKeys = async (pack: Package, message: MessageExtended, attachmentKeys: AttachmentKeys[]) => {\n    // multipart/mixed bodies already include the attachments so we don't add them here\n    if (pack.MIMEType === MIME_TYPES.MIME) {\n        return;\n    }\n\n    const promises = Object.values(pack.Addresses || {}).map(async (address) => {\n        const isEo = hasBit(address.Type, PACKAGE_TYPE.SEND_EO);\n\n        if (!(isEo || address.PublicKey)) {\n            return;\n        }\n\n        const keys = await encryptKeyPacket({\n            sessionKeys: attachmentKeys.map(({ SessionKey }) => SessionKey),\n            passwords: isEo ? [message.data?.Password || ''] : undefined,\n            publicKeys: isEo ? undefined : [address.PublicKey as PmcryptoKey]\n        });\n\n        const AttachmentKeyPackets: { [AttachmentID: string]: string } = {};\n        attachmentKeys.forEach(({ Attachment }, i) => (AttachmentKeyPackets[Attachment.ID || ''] = keys[i]));\n        address.AttachmentKeyPackets = AttachmentKeyPackets;\n    });\n\n    if (hasBit(pack.Type, PACKAGE_TYPE.SEND_CLEAR)) {\n        const AttachmentKeys: { [AttachmentID: string]: { Key: string; Algorithm: string } } = {};\n        attachmentKeys.forEach(({ Attachment, SessionKey }) => {\n            AttachmentKeys[Attachment.ID || ''] = packToBase64(SessionKey);\n        });\n        pack.AttachmentKeys = AttachmentKeys;\n    }\n\n    return Promise.all(promises);\n};\n\n/**\n * Generate random session key in the format openpgp creates them\n */\nconst generateSessionKeyHelper = async (): Promise<SessionKey> => ({\n    algorithm: AES256,\n    data: await generateSessionKey(AES256)\n});\n\n/**\n * Encrypt the body in the given package. Should only be used if the package body differs from message body\n * (i.e. the draft body)\n */\nconst encryptBodyPackage = async (pack: Package, ownKeys: AddressKeys[], publicKeys: PmcryptoKey[]) => {\n    const { privateKeys } = splitKeys(ownKeys) as any;\n    const cleanPublicKeys = publicKeys.filter(identity);\n\n    const { data, sessionKey } = await encryptMessage({\n        data: pack.Body || '',\n        publicKeys: cleanPublicKeys,\n        sessionKey: cleanPublicKeys.length ? undefined : await generateSessionKeyHelper(),\n        privateKeys,\n        returnSessionKey: true,\n        compression: true\n    });\n\n    const { asymmetric: keys, encrypted } = await splitMessage(data);\n    return { keys, encrypted, sessionKey };\n};\n\n/**\n * Encrypts the draft body. This is done separately from the other bodies so we can make sure that the send body\n * (the encrypted body in the message object) is the same as the other emails so we can use 1 blob for them in the api\n * (i.e. deduplication)\n */\nconst encryptDraftBodyPackage = async (\n    pack: Package,\n    ownKeys: AddressKeys[],\n    publicKeys: PmcryptoKey[],\n    message: MessageExtended\n) => {\n    // TODO: Do the change is equivalent?\n    // const ownPublicKeys = await getKeys(message.From.Keys[0].PublicKey);\n    // const publicKeys = ownPublicKeys.concat(_.filter(publicKeysList));\n\n    const { privateKeys, publicKeys: ownPublicKeys } = splitKeys(ownKeys) as any;\n    const cleanPublicKeys = [...ownPublicKeys, ...publicKeys].filter(identity);\n\n    const { data, sessionKey } = await encryptMessage({\n        data: pack.Body || '',\n        publicKeys: cleanPublicKeys,\n        privateKeys,\n        returnSessionKey: true,\n        compression: true\n    });\n\n    const packets = await splitMessage(data);\n\n    const { asymmetric, encrypted } = packets;\n\n    // rebuild the data without the send keypackets\n    packets.asymmetric = packets.asymmetric.slice(0, ownPublicKeys.length);\n    // combine message\n    const value = concatArrays(Object.values(packets).flat() as Uint8Array[]);\n    // _.flowRight(concatArrays, _.flatten, _.values)(packets);\n\n    (message.data as Message).Body = await armorBytes(value);\n\n    return { keys: asymmetric.slice(ownPublicKeys.length), encrypted, sessionKey };\n};\n\n/**\n * Encrypts the body of the package and then overwrites the body in the package and adds the encrypted session keys\n * to the subpackages. If we send clear message the unencrypted session key is added to the (top-level) package too.\n */\nconst encryptBody = async (pack: Package, ownKeys: AddressKeys[], message: MessageExtended): Promise<void> => {\n    const addressKeys = Object.keys(pack.Addresses || {});\n    const addresses = Object.values(pack.Addresses || {});\n    const publicKeysList = addresses.map(({ PublicKey }) => PublicKey as PmcryptoKey);\n    /*\n     * Special case: reuse the encryption packet from the draft, this allows us to do deduplication on the back-end.\n     * In fact, this will be the most common case.\n     */\n    const encryptPack = message.data?.MIMEType === pack.MIMEType ? encryptDraftBodyPackage : encryptBodyPackage;\n\n    const { keys, encrypted, sessionKey } = await encryptPack(pack, ownKeys, publicKeysList, message);\n\n    let counter = 0;\n    publicKeysList.forEach((publicKey, index) => {\n        if (!publicKey) {\n            return;\n        }\n\n        const key = keys[counter++];\n        (pack.Addresses || {})[addressKeys[index]].BodyKeyPacket = arrayToBase64(key);\n    });\n\n    await Promise.all(\n        addresses.map(async (subPack) => {\n            if (subPack.Type !== SEND_EO) {\n                return;\n            }\n            const [BodyKeyPacket] = await encryptKeyPacket({\n                sessionKeys: [sessionKey],\n                passwords: [message.data?.Password || '']\n            });\n\n            // eslint-disable-next-line require-atomic-updates\n            subPack.BodyKeyPacket = BodyKeyPacket;\n        })\n    );\n\n    if ((pack.Type || 0) & (SEND_CLEAR | SEND_MIME)) {\n        // eslint-disable-next-line require-atomic-updates\n        pack.BodyKey = packToBase64(sessionKey);\n    }\n    // eslint-disable-next-line require-atomic-updates\n    pack.Body = arrayToBase64(encrypted[0]);\n};\n\nconst encryptPackage = async (\n    pack: Package,\n    message: MessageExtended,\n    ownKeys: AddressKeys[],\n    attachmentKeys: AttachmentKeys[]\n): Promise<Package> => {\n    await Promise.all([encryptBody(pack, ownKeys, message), encryptAttachmentKeys(pack, message, attachmentKeys)]);\n\n    Object.values(pack.Addresses || {}).forEach((address: any) => delete address.PublicKey);\n\n    return pack;\n};\n\nconst getAttachmentKeys = async (message: MessageExtended): Promise<AttachmentKeys[]> =>\n    Promise.all(\n        getAttachments(message.data).map(async (attachment) => ({\n            Attachment: attachment,\n            SessionKey: await getSessionKey(attachment, message)\n        }))\n    );\n\n/**\n * Encrypts the packages and removes all temporary values that should not be send to the API\n */\nexport const encryptPackages = async (\n    message: MessageExtended,\n    packages: Packages,\n    getAddressKeys: (addressID?: string) => Promise<AddressKeys[]>\n): Promise<Packages> => {\n    const attachmentKeys = await getAttachmentKeys(message);\n    const ownKeys = await getAddressKeys(message.data?.AddressID); // Original code: message.From.ID, don't know of From property\n    const packageList = Object.values(packages) as Package[];\n    await Promise.all(packageList.map((pack) => encryptPackage(pack, message, ownKeys, attachmentKeys)));\n\n    return packages;\n};\n","import { useCallback } from 'react';\nimport { unique } from 'proton-shared/lib/helpers/array';\nimport { sendMessage } from 'proton-shared/lib/api/messages';\nimport { useMailSettings, useAddresses, useGetPublicKeys, useGetAddressKeys, useApi } from 'react-components';\n\nimport { MessageExtended } from '../models/message';\nimport { getRecipientsAddresses } from '../helpers/message/messages';\n\nimport { getSendPreferences } from '../helpers/send/sendPreferences';\nimport { generateTopPackages } from '../helpers/send/sendTopPackages';\nimport { attachSubPackages } from '../helpers/send/sendSubPackages';\nimport { encryptPackages } from '../helpers/send/sendEncrypt';\nimport { useAttachmentsCache } from './useAttachments';\n\n// Reference: Angular/src/app/composer/services/sendMessage.js\n\nexport const useSendMessage = () => {\n    const [mailSettings] = useMailSettings();\n    const [addresses] = useAddresses();\n    const cache = new Map(); // TODO\n    const getPublicKeys = useGetPublicKeys();\n    const getAddressKeys = useGetAddressKeys();\n    const api = useApi();\n    const { data } = useAttachmentsCache();\n\n    return useCallback(\n        async (message: MessageExtended) => {\n            // TODO: Prepare embedded\n            const emails = getRecipientsAddresses(message.data);\n            // TODO: handleAttachmentSigs\n\n            const uniqueEmails = unique(emails);\n            // eslint-disable-next-line\n            const sendPrefs = await getSendPreferences(\n                uniqueEmails,\n                message.data || {},\n                mailSettings,\n                addresses,\n                cache,\n                getPublicKeys\n            );\n            // todo regression testing: https://github.com/ProtonMail/Angular/issues/5088\n\n            console.log('sendPrefs', sendPrefs);\n\n            let packages = await generateTopPackages(message, sendPrefs, data, api);\n            packages = await attachSubPackages(packages, message, emails, sendPrefs);\n            packages = await encryptPackages(message, packages, getAddressKeys);\n\n            console.log('packages', packages);\n\n            // return;\n\n            // Old code save the draft here\n            // New one should have saved it just before\n            // TODO: Do I miss something?\n            //\n            // /*\n            //  * we do not re-encrypt the draft body if the packages contain the draft body: the generatePackages call will have\n            //  * generated the body correctly (otherwise it breaks deduplication)\n            //  */\n            // const encrypt = !packages.map(({ MIMEType }) => MIMEType).includes(message.MIMEType);\n            // // save the draft with the re-encrypted body\n            // await postMessage(message, { loader: false, encrypt });\n\n            // TODO: Restore that with attachments management\n            // // wait on the signature promise after the encrypt, so it can be done in parallel with the encryption\n            // // which is better for performance.\n            // await attachmentUpdates;\n            // message.encrypting = false;\n            // dispatchMessageAction(message);\n\n            // TODO: Define if this risk exist in the new architecture\n            // // Avoid to have SAVE and SEND request in the same time\n            // // Make sure to keep that just before the send message API request\n            // await composerRequestModel.chain(message);\n\n            // TODO: Implement retry system\n            // const suppress = retry ? [API_CUSTOM_ERROR_CODES.MESSAGE_VALIDATE_KEY_ID_NOT_ASSOCIATED] : [];\n            // try {\n            const { Sent } = await api(sendMessage(message.data?.ID, { Packages: packages } as any));\n            console.log('Sent', Sent);\n            return { data: Sent };\n            // } catch (e) {\n            //     if (retry && e.data.Code === API_CUSTOM_ERROR_CODES.MESSAGE_VALIDATE_KEY_ID_NOT_ASSOCIATED) {\n            //         sendPreferences.clearCache();\n            //         keyCache.clearCache();\n            //         // retry if we used the wrong keys\n            //         return send(message, parameters, false);\n            //     }\n            //     throw e;\n            // }\n        },\n        [mailSettings, addresses, cache, getPublicKeys]\n    );\n};\n","import { encryptMessage, PmcryptoKey } from 'pmcrypto';\nimport { MessageExtended } from '../../models/message';\n\n// Reference: Angular/src/app/message/factories/messageModel.js encryptBody\n\nexport const encryptBody = async (\n    message: MessageExtended,\n    privateKeys: PmcryptoKey[],\n    publicKeys: PmcryptoKey[]\n): Promise<MessageExtended> => {\n    const { data } = await encryptMessage({\n        data: message.content || '',\n        publicKeys: [publicKeys[0]],\n        privateKeys,\n        format: 'utf8',\n        compression: true\n    });\n\n    return { ...message, data: { ...message.data, Body: data } };\n};\n","import { useCallback } from 'react';\nimport { useGetPublicKeys, useGetAddressKeys } from 'react-components';\nimport { splitKeys } from 'proton-shared/lib/keys/keys';\n\nimport { encryptBody } from '../helpers/message/messageEncrypt';\nimport { MessageExtended } from '../models/message';\n\nexport const useEncryptMessage = () => {\n    const getPublicKeys = useGetPublicKeys();\n    const getAddressKeys = useGetAddressKeys();\n\n    // TODO: Cache result\n    return useCallback(\n        async (message: MessageExtended): Promise<MessageExtended> => {\n            const [{ publicKeys = [] }, addressKeys] = await Promise.all([\n                getPublicKeys(message.data?.Sender?.Address),\n                getAddressKeys(message.data?.AddressID)\n            ]);\n            const { privateKeys } = splitKeys(addressKeys) as any;\n\n            return encryptBody(message, privateKeys, publicKeys);\n        },\n        [getPublicKeys, getAddressKeys]\n    );\n};\n","import { useContext, useEffect, useCallback, useState, useMemo } from 'react';\nimport { c } from 'ttag';\nimport { useApi, useEventManager } from 'react-components';\nimport {\n    getMessage,\n    markMessageAsRead,\n    createDraft as createDraftApi,\n    updateDraft,\n    deleteMessages\n} from 'proton-shared/lib/api/messages';\nimport { wait } from 'proton-shared/lib/helpers/promise';\n\nimport { transformEscape } from '../helpers/transforms/transformEscape';\nimport { transformLinks } from '../helpers/transforms/transformLinks';\nimport { transformEmbedded } from '../helpers/transforms/transformEmbedded';\nimport { transformWelcome } from '../helpers/transforms/transformWelcome';\nimport { transformBlockquotes } from '../helpers/transforms/transformBlockquotes';\nimport { transformStylesheet } from '../helpers/transforms/transformStylesheet';\nimport { transformRemote } from '../helpers/transforms/transformRemote';\nimport { transformBase } from '../helpers/transforms/transformBase';\nimport { useDecryptMessage } from './useDecryptMessage';\nimport { AttachmentsCache, useAttachmentsCache } from './useAttachments';\nimport { MessageContext } from '../containers/MessageProvider';\nimport { Message, MessageExtended } from '../models/message';\nimport { useSendMessage } from './useSendMessage';\nimport { MailSettings, Api } from '../models/utils';\nimport { useEncryptMessage } from './useEncryptMessage';\nimport { MESSAGE_ACTIONS } from '../constants';\n\nexport interface ComputationOption {\n    cache: any;\n    mailSettings: MailSettings;\n    api: Api;\n    attachmentsCache: AttachmentsCache;\n}\n\nexport interface Computation {\n    (message: MessageExtended, options: ComputationOption):\n        | Promise<Partial<MessageExtended>>\n        | Partial<MessageExtended>;\n}\n\ninterface MessageActions {\n    load: () => Promise<void>;\n    initialize: () => Promise<void>;\n    loadRemoteImages: () => Promise<void>;\n    loadEmbeddedImages: () => Promise<void>;\n    createDraft: (message: MessageExtended) => Promise<void>;\n    saveDraft: (message: MessageExtended) => Promise<void>;\n    send: (message: MessageExtended) => Promise<void>;\n    deleteDraft: () => Promise<void>;\n}\n\ninterface MessageActivity {\n    lock: boolean;\n    current: string;\n}\n\n/**\n * Apply updates from the message model to the message in state\n */\nexport const mergeMessages = (messageState: MessageExtended, messageModel: MessageExtended) => {\n    if (messageState.document) {\n        messageState.document.innerHTML = messageModel.content || '';\n    }\n    const message = {\n        ...messageState,\n        content: messageModel.content,\n        data: { ...messageState.data, ...messageModel.data }\n    };\n    return message;\n};\n\n/**\n * Only takes technical stuff from the updated message\n */\nexport const mergeSavedMessage = (messageSaved: Message = {}, messageReturned: Message) => ({\n    ...messageSaved,\n    ID: messageReturned.ID,\n    ParentID: messageReturned.ParentID,\n    Time: messageReturned.Time,\n    ContextTime: messageReturned.ContextTime,\n    ConversationID: messageReturned.ConversationID\n});\n\nexport const useMessage = (\n    inputMessage: Message = {},\n    mailSettings: any\n): [MessageExtended, MessageActions, MessageActivity] => {\n    const api = useApi();\n    const { call } = useEventManager();\n    const cache = useContext(MessageContext);\n    const computeCache = useMemo(() => new Map(), []);\n    const attachmentsCache = useAttachmentsCache();\n\n    // messageID change ONLY when a draft is created\n    const [messageID, setMessageID] = useState(inputMessage.ID || '');\n    const [message, setMessage] = useState<MessageExtended>(\n        cache.has(messageID) ? cache.get(messageID) : { data: inputMessage }\n    );\n    const [messageActivity, setMessageActivity] = useState<MessageActivity>({ lock: false, current: '' });\n\n    const decrypt = useDecryptMessage();\n    const encrypt = useEncryptMessage();\n    const sendMessage = useSendMessage();\n\n    // Update messageID if component is reused for another message\n    useEffect(() => {\n        if (!!inputMessage.ID && inputMessage.ID !== messageID) {\n            setMessageID(inputMessage.ID);\n        }\n    }, [inputMessage]);\n\n    // Update message state and listen to cache for updates on the current message\n    useEffect(() => {\n        cache.has(messageID) ? setMessage(cache.get(messageID)) : setMessage({ data: inputMessage });\n\n        return cache.subscribe((changedMessageID) => {\n            // Prevent updates on message deltion from the cache to prevent undefined message in state.\n            if (changedMessageID === messageID && cache.has(messageID)) {\n                setMessage(cache.get(messageID));\n            }\n        });\n    }, [messageID, cache]);\n\n    const transforms = [\n        transformEscape,\n        transformBase,\n        transformLinks,\n        transformEmbedded,\n        transformWelcome,\n        transformBlockquotes,\n        transformStylesheet,\n        transformRemote\n    ] as Computation[];\n\n    const loadData = useCallback(\n        async ({ data: message = {} }: MessageExtended) => {\n            // If the Body is already there, no need to send a request\n            if (!message.Body) {\n                const { Message } = await api(getMessage(message.ID));\n                return { data: Message as Message };\n            }\n            return {} as MessageExtended;\n        },\n        [api]\n    );\n\n    const markAsRead = useCallback(\n        async ({ data: message = {} }: MessageExtended) => {\n            const markAsRead = async () => {\n                await api(markMessageAsRead([message.ID || '']));\n                call();\n            };\n\n            if (message.Unread) {\n                markAsRead(); // No await to not slow down the UX\n                return { data: { ...message, Unread: 0 } } as MessageExtended;\n            }\n\n            return {} as MessageExtended;\n        },\n        [api]\n    );\n\n    const create = useCallback(\n        async (message: MessageExtended = {}) => {\n            const { Message } = await api(\n                createDraftApi({\n                    Action: message.action !== MESSAGE_ACTIONS.NEW ? message.action : undefined,\n                    Message: message.data\n                } as any)\n            );\n            call();\n            return { data: mergeSavedMessage(message.data, Message) };\n        },\n        [api]\n    );\n\n    const update = useCallback(\n        async (message: MessageExtended = {}) => {\n            const { Message } = await api(updateDraft(message.data?.ID, message.data));\n            call();\n            return { data: mergeSavedMessage(message.data, Message) };\n        },\n        [api]\n    );\n\n    const deleteRequest = useCallback(\n        async (message: MessageExtended = {}) => {\n            await api(deleteMessages([message.data?.ID]));\n            call();\n            return {};\n        },\n        [api]\n    );\n\n    const activities = new Map<Computation, string>([\n        [encrypt, c('Action').t`Encrypting`],\n        [create, c('Action').t`Creating`],\n        [update, c('Action').t`Saving`],\n        [sendMessage, c('Action').t`Sending`],\n        [deleteRequest, c('Action').t`Deleting`]\n    ]);\n    transforms.forEach((transform) => activities.set(transform, c('Action').t`Processing`));\n\n    /**\n     * Run a computation on a message, wait until it finish\n     * Return the message extanded with the result of the computation\n     */\n    const runSingle = useCallback(\n        async (message: MessageExtended, compute: Computation) => {\n            let current = '';\n            if (activities.has(compute)) {\n                current = activities.get(compute) as string;\n            }\n            setMessageActivity({ lock: true, current });\n\n            const result = (await compute(message, { cache: computeCache, mailSettings, api, attachmentsCache })) || {};\n\n            if (result.document) {\n                result.content = result.document.innerHTML;\n            }\n\n            return { ...message, ...result } as MessageExtended;\n        },\n        [cache]\n    );\n\n    type CacheUpdate = (newMessage: MessageExtended) => Promise<void> | void;\n\n    const simpleUpdateCache: CacheUpdate = (newMessage: MessageExtended) => {\n        cache.set(messageID, newMessage);\n    };\n\n    /**\n     * Run a list of computation sequentially\n     * updateCacheCallback is used to update the cache value after computations but before unlocking the message\n     * A callback is needed here because it's better to position precisely the moment where to update the cache\n     */\n    const run = useCallback(\n        async (\n            message: MessageExtended,\n            computes: Computation[],\n            updateCacheCallback: CacheUpdate = simpleUpdateCache\n        ) => {\n            setMessageActivity({ lock: true, current: '' });\n            const result = await computes.reduce(\n                async (messagePromise: Promise<MessageExtended>, compute: Computation) => {\n                    return runSingle(await messagePromise, compute);\n                },\n                Promise.resolve(message)\n            );\n            await updateCacheCallback(result);\n            // Allow the cache update to be dispatched in React before resolving (simplify several race conditions)\n            await wait(0);\n            setMessageActivity({ lock: false, current: '' });\n            return result;\n        },\n        [runSingle, cache]\n    );\n\n    const load = useCallback(async () => {\n        await run(message, [loadData]);\n    }, [messageID, message, run, cache]);\n\n    const initialize = useCallback(async () => {\n        cache.set(messageID, { ...message, initialized: false });\n        await run(\n            message,\n            [loadData, decrypt, markAsRead, ...transforms] as Computation[],\n            (newMessage: MessageExtended) => cache.set(messageID, { ...newMessage, initialized: true })\n        );\n    }, [messageID, message, run, cache]);\n\n    const loadRemoteImages = useCallback(async () => {\n        await run({ ...message, showRemoteImages: true }, [transformRemote as Computation]);\n    }, [messageID, message, message, run, cache]);\n\n    const loadEmbeddedImages = useCallback(async () => {\n        await run({ ...message, showEmbeddedImages: true }, [transformEmbedded]);\n    }, [messageID, message, run, cache]);\n\n    const createDraft = useCallback(\n        async (message: MessageExtended) => {\n            await run(message, [encrypt, create] as Computation[], (newMessage: MessageExtended) => {\n                cache.set(newMessage.data?.ID || '', newMessage);\n                setMessageID(newMessage.data?.ID || '');\n            });\n        },\n        [message, run, cache]\n    );\n\n    const saveDraft = useCallback(\n        async (messageModel: MessageExtended) => {\n            await run(mergeMessages(message, messageModel), [encrypt, update]);\n        },\n        [message, run, cache]\n    );\n\n    const send = useCallback(\n        async (messageModel: MessageExtended) => {\n            await run(mergeMessages(message, messageModel), [encrypt, update, sendMessage]);\n        },\n        [message, run, cache]\n    );\n\n    const deleteDraft = useCallback(async () => {\n        await run(message, [deleteRequest], () => cache.delete(messageID));\n    }, [message, run, cache]);\n\n    return [\n        message,\n        {\n            load,\n            initialize,\n            loadRemoteImages,\n            loadEmbeddedImages,\n            createDraft,\n            saveDraft,\n            send,\n            deleteDraft\n        },\n        messageActivity\n    ];\n};\n","import React, { useEffect, useRef } from 'react';\nimport { useToggle, Loader, classnames } from 'react-components';\n\nimport { hasAttachments, isDraft } from '../../helpers/message/messages';\nimport { Label } from '../../models/label';\nimport MessageBody from './MessageBody';\nimport HeaderCollapsed from './header/HeaderCollapsed';\nimport HeaderExpanded from './header/HeaderExpanded';\nimport MessageFooter from './MessageFooter';\nimport { Message } from '../../models/message';\nimport { useMessage } from '../../hooks/useMessage';\nimport { OnCompose } from '../../containers/ComposerContainer';\n\ninterface Props {\n    labels: Label[];\n    message: Message;\n    mailSettings: any;\n    initialExpand?: boolean;\n    conversationIndex?: number;\n    onCompose: OnCompose;\n}\n\nconst MessageView = ({\n    labels = [],\n    message: inputMessage,\n    mailSettings,\n    initialExpand = true,\n    conversationIndex = 0,\n    onCompose\n}: Props) => {\n    const draft = isDraft(inputMessage);\n\n    const { state: expanded, set: setExpanded } = useToggle(initialExpand && !draft);\n    const elementRef = useRef<HTMLElement>(null);\n    const [message, { load, initialize, loadRemoteImages, loadEmbeddedImages }] = useMessage(\n        inputMessage,\n        mailSettings\n    );\n\n    const loaded = !!message?.initialized;\n\n    const prepareMessage = async () => {\n        if (typeof message?.initialized === 'undefined') {\n            await initialize();\n        }\n\n        // Don't scroll if it's the first message of the conversation and only on the first automatic expand\n        if (conversationIndex !== 0 && initialExpand) {\n            elementRef.current && elementRef.current.scrollIntoView({ behavior: 'smooth', block: 'start' });\n        }\n    };\n\n    useEffect(() => {\n        if (!draft && !loaded && expanded) {\n            prepareMessage();\n        }\n\n        if (draft && message.data?.Subject === undefined) {\n            load();\n        }\n    }, [message, loaded, expanded]);\n\n    const handleLoadRemoteImages = async () => {\n        await loadRemoteImages();\n    };\n\n    const handleLoadEmbeddedImages = async () => {\n        await loadEmbeddedImages();\n    };\n\n    const handleExpand = (value: boolean) => () => {\n        if (draft) {\n            onCompose({ existingDraft: message });\n        } else {\n            setExpanded(value);\n        }\n    };\n\n    return (\n        <article ref={elementRef} className={classnames(['message-container mb2', expanded && 'is-opened'])}>\n            {expanded ? (\n                <>\n                    <HeaderExpanded\n                        message={message}\n                        messageLoaded={loaded}\n                        onLoadRemoteImages={handleLoadRemoteImages}\n                        onLoadEmbeddedImages={handleLoadEmbeddedImages}\n                        labels={labels}\n                        mailSettings={mailSettings}\n                        onCollapse={handleExpand(false)}\n                        onCompose={onCompose}\n                    />\n                    {loaded ? (\n                        <>\n                            <MessageBody message={message} />\n                            {hasAttachments(message.data) ? <MessageFooter message={message} /> : null}\n                        </>\n                    ) : (\n                        <Loader />\n                    )}\n                </>\n            ) : (\n                <HeaderCollapsed message={message} labels={labels} onExpand={handleExpand(true)} />\n            )}\n        </article>\n    );\n};\n\nexport default MessageView;\n","import { Message } from '../../models/message';\nimport { MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\nimport { isCustomLabel } from '../labels';\nimport { hasLabel } from '../elements';\nimport { isDraft, isSentAutoReply } from './messages';\n\n// Reference: Angular/src/app/message/services/findExpandableMessage.js\n\n/**\n * Filter the list of message to find the first readable message\n * - iterate backwards\n * - check if the previous item is read\n * - if the previous isRead === 1, break the iteration\n */\nconst getFirstMessageToRead = (messages: Message[]): Message => {\n    // Else we open the first message unread beginning to the end list\n    let index = messages.length;\n    let contains = false;\n\n    while (--index > 0) {\n        if (messages[index - 1].Unread === 0) {\n            // Is read\n            contains = true;\n            break;\n        }\n    }\n\n    const position = contains ? index : 0;\n    // A conversation can contains only one draft\n    return messages.length ? messages[position] : messages[0];\n};\n\nconst getLast = (messages: Message[]): Message => {\n    if (messages.length === 0) {\n        return {};\n    }\n    return messages[messages.length - 1];\n};\n\n/**\n * Find in the message to scroll and expand\n */\nexport const findMessageToExpand = (labelID = '', messages: Message[] = []): Message => {\n    if (labelID === MAILBOX_LABEL_IDS.STARRED || isCustomLabel(labelID)) {\n        return getFirstMessageToRead(messages.filter((message) => hasLabel(message, labelID) && !isDraft(message)));\n    }\n\n    if (labelID === MAILBOX_LABEL_IDS.DRAFTS || labelID === MAILBOX_LABEL_IDS.ALL_DRAFTS) {\n        return getLast(messages.filter(isDraft));\n    }\n\n    const realMessages = messages.filter((message) => !isDraft(message) && !isSentAutoReply(message));\n    const latest = getLast(realMessages);\n\n    if (latest && latest.Unread === 0) {\n        return latest;\n    }\n\n    return getFirstMessageToRead(realMessages);\n};\n","import React from 'react';\nimport { c } from 'ttag';\n\ninterface Props {\n    inTrash: boolean;\n    filter: boolean;\n    onToggle: () => void;\n}\n\nconst TrashWarning = ({ inTrash, filter, onToggle }: Props) => {\n    return (\n        <div className=\"containsMessage flex flex-column\">\n            <p className=\"bordered-container flex pt0-5 pb0-5 pl1 pr1\">\n                {inTrash\n                    ? c('Info').t`This conversation contains non-trashed messages.`\n                    : c('Info').t`This conversation contains trashed messages.`}\n                <a onClick={onToggle} className=\"ml0-5\">\n                    {inTrash\n                        ? filter\n                            ? c('Action').t`Show non-trashed messages`\n                            : c('Action').t`Hide non-trashed messages`\n                        : filter\n                        ? c('Action').t`Show trashed messages`\n                        : c('Action').t`Hide trashed messages`}\n                </a>\n            </p>\n        </div>\n    );\n};\n\nexport default TrashWarning;\n","import React from 'react';\nimport { Loader, useLabels, useToggle } from 'react-components';\n\nimport MessageView from '../message/MessageView';\nimport ItemStar from '../list/ItemStar';\nimport { ELEMENT_TYPES } from '../../constants';\nimport NumMessages from './NumMessages';\nimport ItemLabels from '../list/ItemLabels';\nimport { useConversation } from '../../hooks/useConversation';\nimport { findMessageToExpand } from '../../helpers/message/messageExpandable';\nimport TrashWarning from './TrashWarning';\nimport { MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\nimport { hasLabel } from '../../helpers/elements';\nimport { OnCompose } from '../../containers/ComposerContainer';\n\ninterface Props {\n    labelID: string;\n    conversationID: string;\n    messageID?: string;\n    mailSettings: any;\n    onCompose: OnCompose;\n}\n\nconst ConversationView = ({ labelID, conversationID, mailSettings, onCompose }: Props) => {\n    const [labels] = useLabels();\n    const [conversationData, loading] = useConversation(conversationID);\n    const { state: filter, toggle: toggleFilter } = useToggle(true);\n\n    if (loading) {\n        return <Loader />;\n    }\n\n    const { Conversation: conversation, Messages: messages = [] } = conversationData;\n\n    if (!conversation) {\n        return null;\n    }\n\n    const inTrash = labelID === MAILBOX_LABEL_IDS.TRASH;\n    const filteredMessages = messages.filter((message) => inTrash === hasLabel(message, MAILBOX_LABEL_IDS.TRASH));\n    const messagesToShow = filter ? filteredMessages : messages;\n    const showTrashWarning = filteredMessages.length !== messages.length;\n\n    const initialExpand = findMessageToExpand(labelID, messagesToShow).ID;\n\n    return (\n        <>\n            <header className=\"flex flex-column mb1\">\n                <div className=\"flex flex-nowrap flex-spacebetween flex-items-center mb1\">\n                    <h2 className=\"mb0\">\n                        <NumMessages className=\"mr0-25\" conversation={conversation} />\n                        {conversation.Subject}\n                    </h2>\n                    <div>\n                        <ItemLabels labels={labels} max={4} element={conversation} />\n                        <ItemStar element={conversation} type={ELEMENT_TYPES.CONVERSATION} />\n                    </div>\n                </div>\n                {showTrashWarning && <TrashWarning inTrash={inTrash} filter={filter} onToggle={toggleFilter} />}\n            </header>\n            {messagesToShow.map((message, index) => (\n                <MessageView\n                    key={message.ID}\n                    message={message}\n                    initialExpand={message.ID === initialExpand}\n                    labels={labels}\n                    mailSettings={mailSettings}\n                    conversationIndex={index}\n                    onCompose={onCompose}\n                />\n            ))}\n        </>\n    );\n};\n\nexport default ConversationView;\n","import { useContext, useCallback } from 'react';\nimport { getConversation } from 'proton-shared/lib/api/conversations';\nimport { useCachedModelResult, useApi } from 'react-components';\n\nimport { MessageContext, Cache } from '../containers/MessageProvider';\nimport { Conversation } from '../models/conversation';\nimport { Message } from '../models/message';\n\nexport type ConversationCache = Cache<string, Conversation>;\n\ninterface ConversationResult {\n    Conversation: Conversation;\n    Messages?: Message[];\n}\n\nconst getKey = (ID: string) => `Conversation-${ID}`;\n\nexport const useConversation = (conversationID: string): [ConversationResult, boolean, any] => {\n    // Pretty ugly \"reuse\" of the MessageCache\n    // TODO: either use a different cache or properly handle mix types\n    const cache = (useContext(MessageContext) as any) as ConversationCache;\n    const api = useApi();\n\n    const miss = useCallback(() => {\n        return api(getConversation(conversationID));\n    }, [conversationID, api, cache]);\n\n    return useCachedModelResult(cache as any, getKey(conversationID), miss);\n};\n","import React from 'react';\nimport { useUser, useModals, LinkButton, AuthenticatedBugModal } from 'react-components';\nimport { c, ngettext, msgid } from 'ttag';\nimport { capitalize } from 'proton-shared/lib/helpers/string';\n\nimport unreadEmailsSvg from 'design-system/assets/img/shared/unread-emails.svg';\nimport { LabelCount } from '../../models/label';\n\ninterface Props {\n    labelCount: LabelCount;\n}\n\nconst WelcomePane = ({ labelCount }: Props) => {\n    const [user] = useUser();\n    const { createModal } = useModals();\n\n    const Unread = labelCount.Unread || 0;\n\n    const unreadsLabel = (\n        <strong key=\"unreads-label\">\n            {ngettext(msgid`${Unread} unread email`, `${Unread} unread emails`, Unread)}\n        </strong>\n    );\n\n    const reportBugButton = (\n        <LinkButton key=\"report-bug-btn\" onClick={() => createModal(<AuthenticatedBugModal />)}>{c('Action')\n            .t`report a bug`}</LinkButton>\n    );\n\n    return (\n        <div className=\"flex-item-fluid aligncenter p3\">\n            <h1>\n                {user.DisplayName ? c('Title').t`Welcome, ${capitalize(user.DisplayName)}!` : c('Title').t`Welcome`}\n            </h1>\n            {Unread ? <p>{c('Info').jt`You have ${unreadsLabel} in this folder`}</p> : null}\n            {user.hasPaidMail ? (\n                <>\n                    <p className=\"mw40e center mb2\">\n                        {c('Info')\n                            .jt`Having trouble sending or receiving emails? Interested in helping us improve our service? Feel free to ${reportBugButton}.`}\n                    </p>\n                    <img src={unreadEmailsSvg} alt={c('Alternative text for welcome image').t`Welcome`} />\n                </>\n            ) : (\n                <>\n                    <p>{c('Info')\n                        .t`Upgrade to a paid plan starting from $4/month only and get additional storage capacity and more addresses with ProtonMail Plus.`}</p>\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default WelcomePane;\n","import React, { useMemo } from 'react';\nimport { Button, useLabels } from 'react-components';\nimport { c, ngettext, msgid } from 'ttag';\n\nimport conversationSingleSvg from 'design-system/assets/img/shared/selected-conversation-single.svg';\nimport conversationManySvg from 'design-system/assets/img/shared/selected-conversation-many.svg';\nimport { LabelCount } from '../../models/label';\nimport { getLabelName } from '../../helpers/labels';\n\ninterface Props {\n    labelCount: LabelCount;\n    checkedIDs?: string[];\n    onUncheckAll: () => void;\n}\n\nconst SelectionPane = ({ labelCount, checkedIDs = [], onUncheckAll }: Props) => {\n    const [labels] = useLabels();\n\n    const total = labelCount.Total || 0;\n    const checkeds = checkedIDs.length;\n\n    const labelName = useMemo(() => getLabelName(labelCount.LabelID || '', labels), [labels, labelCount]);\n\n    return (\n        <div className=\"flex-item-fluid aligncenter p3\">\n            {checkeds === 0 && labelName && <h3 className=\"bold\">{labelName}</h3>}\n            <p className=\"mb2\">\n                {checkeds === 0\n                    ? ngettext(\n                          msgid`You have ${total} stored in this folder`,\n                          `You have ${total} stored in this folder`,\n                          total\n                      )\n                    : ngettext(\n                          msgid`You selected ${checkeds} element from this folder`,\n                          `You selected ${checkeds} elements from this folder`,\n                          checkeds\n                      )}\n            </p>\n            <div className=\"mb2\">\n                <img\n                    src={checkeds > 1 ? conversationManySvg : conversationSingleSvg}\n                    alt={c('Alternative text for conversation image').t`Conversation`}\n                />\n            </div>\n            {checkeds > 0 && <Button onClick={onUncheckAll}>{c('Action').t`Deselect`}</Button>}\n        </div>\n    );\n};\n\nexport default SelectionPane;\n","import React, { useEffect, useMemo } from 'react';\n\nimport WelcomePane from './WelcomePane';\nimport SelectionPane from './SelectionPane';\nimport { ELEMENT_TYPES } from '../../constants';\nimport { useConversationCounts, useMessageCounts } from 'react-components';\nimport { getCurrentType } from '../../helpers/elements';\nimport { LabelCount } from '../../models/label';\n\ninterface Props {\n    labelID: string;\n    checkedIDs?: string[];\n    onUncheckAll: () => void;\n    welcomeRef: any;\n    mailSettings: any;\n}\n\nconst PlaceholderView = ({ labelID = '', checkedIDs = [], onUncheckAll, welcomeRef, mailSettings }: Props) => {\n    const [conversationCounts] = useConversationCounts();\n    const [messageCounts] = useMessageCounts();\n    const type = getCurrentType({ mailSettings, labelID });\n\n    useEffect(\n        () => () => {\n            welcomeRef.current = true;\n        },\n        []\n    );\n\n    const labelCount: LabelCount = useMemo(() => {\n        const counters = type === ELEMENT_TYPES.CONVERSATION ? conversationCounts : messageCounts;\n\n        if (!Array.isArray(counters)) {\n            return 0;\n        }\n\n        return counters.find((counter) => counter.LabelID === labelID) || { LabelID: '', Unread: 0, Total: 0 };\n    }, [labelID, conversationCounts, messageCounts]);\n\n    return welcomeRef.current || checkedIDs.length > 0 ? (\n        <SelectionPane labelCount={labelCount} checkedIDs={checkedIDs} onUncheckAll={onUncheckAll} />\n    ) : (\n        <WelcomePane labelCount={labelCount} />\n    );\n};\n\nexport default PlaceholderView;\n","import React from 'react';\nimport { useLabels } from 'react-components';\n\nimport MessageView from '../message/MessageView';\nimport ItemStar from '../list/ItemStar';\nimport { ELEMENT_TYPES } from '../../constants';\nimport ItemLabels from '../list/ItemLabels';\nimport { useMessage } from '../../hooks/useMessage';\nimport { OnCompose } from '../../containers/ComposerContainer';\n\ninterface Props {\n    messageID: string;\n    mailSettings: any;\n    onCompose: OnCompose;\n}\n\nconst MessageOnlyView = ({ messageID, mailSettings, onCompose }: Props) => {\n    const [labels] = useLabels();\n\n    // There is only reading on the message here, no actions\n    // MessageView will be in charge to trigger all messages actions\n    const [message] = useMessage({ ID: messageID }, mailSettings);\n\n    if (!message.data) {\n        return null;\n    }\n\n    return (\n        <>\n            <header className=\"flex flex-nowrap flex-spacebetween flex-items-center mb1\">\n                <h2 className=\"mb0\">{message.data?.Subject}</h2>\n                <div>\n                    <ItemLabels labels={labels} max={4} element={message.data} />\n                    <ItemStar element={message.data} type={ELEMENT_TYPES.MESSAGE} />\n                </div>\n            </header>\n            <MessageView\n                message={message.data}\n                initialExpand={true}\n                labels={labels}\n                mailSettings={mailSettings}\n                onCompose={onCompose}\n            />\n        </>\n    );\n};\n\nexport default MessageOnlyView;\n","import React, { useState, useMemo, useRef, useEffect } from 'react';\nimport { Loader, classnames } from 'react-components';\nimport { History, Location } from 'history';\n\nimport { Element } from '../models/element';\nimport { Sort, Filter, Page } from '../models/tools';\n\nimport { useMailboxPageTitle } from '../hooks/useMailboxPageTitle';\nimport { useElements } from '../hooks/useElements';\n\nimport { isColumnMode, isConversationMode } from '../helpers/mailSettings';\nimport { getSearchParams } from '../helpers/url';\nimport {\n    pageFromUrl,\n    sortFromUrl,\n    filterFromUrl,\n    setPageInUrl,\n    setSortInUrl,\n    setFilterInUrl,\n    setPathInUrl\n} from '../helpers/mailboxUrl';\n\nimport Toolbar from '../components/toolbar/Toolbar';\nimport List from '../components/list/List';\nimport ConversationView from '../components/conversation/ConversationView';\nimport PlaceholderView from '../components/view/PlaceholderView';\nimport MessageOnlyView from '../components/message/MessageOnlyView';\nimport { OnCompose } from './ComposerContainer';\nimport { PAGE_SIZE } from '../constants';\nimport { isMessage } from '../helpers/elements';\nimport { isDraft } from '../helpers/message/messages';\n\nimport './main-area.scss';\n\ninterface Props {\n    labelID: string;\n    mailSettings: any;\n    elementID?: string;\n    location: Location;\n    history: History;\n    onCompose: OnCompose;\n}\n\nconst MailboxContainer = ({\n    labelID: inputLabelID,\n    mailSettings,\n    elementID: inputElementID,\n    location,\n    history,\n    onCompose\n}: Props) => {\n    const columnMode = isColumnMode(mailSettings);\n    const conversationMode = isConversationMode(inputLabelID, mailSettings);\n\n    // Page state is hybrid: page number is handled by the url, total computed in useElements, size and limit are constants\n    // Yet, it is simpler to co-localize all these data in one object\n    const [page, setPage] = useState<Page>({\n        page: pageFromUrl(location),\n        total: 0,\n        size: PAGE_SIZE,\n        limit: PAGE_SIZE\n    });\n\n    const searchParams = getSearchParams(location);\n\n    const sort = useMemo<Sort>(() => sortFromUrl(location), [searchParams.sort]);\n    const filter = useMemo<Filter>(() => filterFromUrl(location), [searchParams.filter]);\n\n    const [checkedElements, setCheckedElements] = useState(Object.create(null));\n    const [checkAll, setCheckAll] = useState(false);\n    const welcomeRef = useRef(false);\n\n    const [labelID, elements, loading, total] = useElements({\n        conversationMode,\n        labelID: inputLabelID,\n        page,\n        sort,\n        filter\n    });\n\n    useEffect(() => setPage({ ...page, page: pageFromUrl(location) }), [searchParams.page]);\n    useEffect(() => setPage({ ...page, total }), [total]);\n\n    useMailboxPageTitle(labelID);\n\n    const checkedIDs = useMemo(() => {\n        return Object.entries(checkedElements).reduce((acc, [elementID, isChecked]) => {\n            if (!isChecked) {\n                return acc;\n            }\n            acc.push(elementID);\n            return acc;\n        }, [] as string[]);\n    }, [checkedElements]);\n\n    const elementID = useMemo(() => {\n        if (checkedIDs.length > 0) {\n            return undefined;\n        }\n        return inputElementID;\n    }, [inputElementID, checkedIDs]);\n\n    const selectedIDs = useMemo(() => {\n        if (checkedIDs.length) {\n            return checkedIDs;\n        }\n        if (elementID) {\n            return [elementID];\n        }\n        return [];\n    }, [checkedIDs, elementID]);\n\n    const handleElement = (element: Element) => {\n        history.push(setPathInUrl(location, labelID, element.ID));\n        if (isMessage(element) && isDraft(element)) {\n            onCompose({ existingDraft: { data: element } });\n        }\n    };\n    const handleBack = () => history.push(setPathInUrl(location, labelID));\n    const handlePage = (pageNumber: number) => history.push(setPageInUrl(location, pageNumber));\n    const handleSort = (sort: Sort) => history.push(setSortInUrl(location, sort));\n    const handleFilter = (filter: Filter) => history.push(setFilterInUrl(location, filter));\n\n    const handleCheck = (IDs: string[] = [], checked = false) => {\n        const update = IDs.reduce((acc, contactID) => {\n            acc[contactID] = checked;\n            return acc;\n        }, Object.create(null));\n        setCheckedElements({ ...checkedElements, ...update });\n        setCheckAll(checked && IDs.length === elements.length);\n    };\n\n    const handleCheckAll = (checked = false) =>\n        handleCheck(\n            elements.map(({ ID = '' }: Element) => ID),\n            checked\n        );\n\n    const handleUncheckAll = () => handleCheckAll(false);\n\n    return (\n        <>\n            <Toolbar\n                labelID={labelID}\n                elementID={elementID}\n                selectedIDs={selectedIDs}\n                mailSettings={mailSettings}\n                checkAll={checkAll}\n                onCheckAll={handleCheckAll}\n                page={page}\n                onPage={handlePage}\n                sort={sort}\n                onSort={handleSort}\n                filter={filter}\n                onFilter={handleFilter}\n                onBack={handleBack}\n            />\n            <div\n                className={classnames([\n                    'main-area--withToolbar flex-item-fluid flex reset4print',\n                    !columnMode && 'main-area--rowMode'\n                ])}\n            >\n                {(columnMode || !elementID) && (\n                    <div className=\"items-column-list scroll-if-needed scroll-smooth-touch\">\n                        {loading ? (\n                            <div className=\"flex flex-justify-center h100\">\n                                <Loader />\n                            </div>\n                        ) : (\n                            <List\n                                labelID={labelID}\n                                mailSettings={mailSettings}\n                                elementID={elementID}\n                                elements={elements}\n                                checkedIDs={checkedIDs}\n                                onCheck={handleCheck}\n                                onClick={handleElement}\n                            />\n                        )}\n                    </div>\n                )}\n                {(columnMode || elementID) && (\n                    <section className=\"view-column-detail p2 flex-item-fluid scroll-if-needed\">\n                        {elementID ? (\n                            conversationMode ? (\n                                <ConversationView\n                                    labelID={labelID}\n                                    mailSettings={mailSettings}\n                                    conversationID={elementID}\n                                    onCompose={onCompose}\n                                />\n                            ) : (\n                                <MessageOnlyView\n                                    mailSettings={mailSettings}\n                                    messageID={elementID}\n                                    onCompose={onCompose}\n                                />\n                            )\n                        ) : (\n                            <PlaceholderView\n                                labelID={labelID}\n                                mailSettings={mailSettings}\n                                welcomeRef={welcomeRef}\n                                checkedIDs={checkedIDs}\n                                onUncheckAll={handleUncheckAll}\n                            />\n                        )}\n                    </section>\n                )}\n            </div>\n        </>\n    );\n};\n\nexport default MailboxContainer;\n","import { useEffect } from 'react';\nimport { useLabels, useUser, useConversationCounts, useMessageCounts, useMailSettings } from 'react-components';\nimport { getLabelName } from '../helpers/labels';\nimport { isConversationMode } from '../helpers/mailSettings';\nimport { toMap } from 'proton-shared/lib/helpers/object';\nimport { LabelCount } from '../models/label';\n\nexport const useMailboxPageTitle = (labelID: string) => {\n    const [mailSettings, loadingMailSettings] = useMailSettings();\n    const [labels, loadingLabels] = useLabels();\n    const [user, loadingUser] = useUser();\n    const [conversationCounts, loadingConversationCounts] = useConversationCounts() as [LabelCount[], boolean];\n    const [messageCounts, loadingMessageCounts] = useMessageCounts() as [LabelCount[], boolean];\n\n    const loadings = [loadingMailSettings, loadingLabels, loadingUser, loadingConversationCounts, loadingMessageCounts];\n\n    useEffect(() => {\n        if (loadings.every((loading) => !loading)) {\n            const conversationMode = isConversationMode(labelID, mailSettings);\n            const counters = conversationMode ? conversationCounts : messageCounts;\n            const countersMap = toMap(counters, 'LabelID') as { [labelID: string]: LabelCount };\n            const unreads = (countersMap[labelID] || {}).Unread || 0;\n            const unreadString = unreads > 0 ? `(${unreads}) ` : '';\n            const labelName = getLabelName(labelID, labels);\n            const address = user.Email;\n            document.title = `${unreadString}${labelName} | ${address} | ProtonMail`;\n        }\n    }, [labelID, ...loadings]);\n};\n","import React, { useLayoutEffect } from 'react';\nimport { ErrorBoundary, useMailSettings, Loader, useEventManager } from 'react-components';\n\nimport PrivateLayout from '../components/layout/PrivateLayout';\nimport MailboxContainer from './MailboxContainer';\nimport { HUMAN_TO_LABEL_IDS } from '../constants';\nimport { OnCompose } from './ComposerContainer';\nimport { RouteProps } from '../PrivateApp';\nimport { Event } from '../models/event';\nimport { EVENT_ACTIONS } from 'proton-shared/lib/constants';\nimport { setPathInUrl } from '../helpers/mailboxUrl';\n\ninterface Props extends RouteProps {\n    onCompose: OnCompose;\n}\n\nconst PageContainer = ({ match, location, history, onCompose }: Props) => {\n    const [mailSettings, loadingMailSettings] = useMailSettings();\n    const { subscribe } = useEventManager();\n\n    const { elementID, labelID: currentLabelID = '' } = (match || {}).params || {};\n    const labelID = HUMAN_TO_LABEL_IDS[currentLabelID] || currentLabelID;\n\n    // Detect if the element in URL has been deleted and come back to the label if so\n    useLayoutEffect(\n        () =>\n            subscribe(({ Messages }: Event) => {\n                const match = Messages?.find(({ ID, Action }) => Action === EVENT_ACTIONS.DELETE && ID === elementID);\n\n                if (match) {\n                    history.push(setPathInUrl(location, labelID));\n                }\n            }),\n        [elementID]\n    );\n\n    return (\n        <PrivateLayout labelID={labelID} location={location} history={history} onCompose={onCompose}>\n            <ErrorBoundary>\n                {loadingMailSettings ? (\n                    <Loader />\n                ) : (\n                    <MailboxContainer\n                        labelID={labelID}\n                        mailSettings={mailSettings}\n                        elementID={elementID}\n                        location={location}\n                        history={history}\n                        onCompose={onCompose}\n                    />\n                )}\n            </ErrorBoundary>\n        </PrivateLayout>\n    );\n};\n\nexport default PageContainer;\n","import React from 'react';\nimport { c } from 'ttag';\nimport { Icon, Button, classnames } from 'react-components';\n\nimport { MessageExtended } from '../../models/message';\n\ninterface ButtonProps {\n    onClick: () => void;\n    iconName: string;\n    className?: string;\n}\n\nconst TitleBarButton = ({ onClick, iconName, className = '' }: ButtonProps) => {\n    return (\n        <Button className={classnames(['composer-title-bar-button', className])} onClick={onClick}>\n            <Icon className=\"mauto\" name={iconName} color=\"currentColor\" />\n        </Button>\n    );\n};\n\ninterface Props {\n    message: MessageExtended;\n    minimized: boolean;\n    maximized: boolean;\n    toggleMinimized: () => void;\n    toggleMaximized: () => void;\n    onClose: () => void;\n}\n\nconst ComposerTitleBar = ({ message = {}, minimized, maximized, toggleMinimized, toggleMaximized, onClose }: Props) => {\n    const title = message.data?.Subject || c('Title').t`New message`;\n\n    return (\n        <header className=\"composer-title-bar flex flex-row\">\n            <span className=\"flex-self-vcenter flex-item-fluid pl0-5 pr1 ellipsis\">{title}</span>\n            <TitleBarButton\n                iconName=\"minimize\"\n                className={classnames([minimized && 'rotateX-180'])}\n                onClick={toggleMinimized}\n            />\n            <TitleBarButton iconName={maximized ? 'contract-window' : 'expand'} onClick={toggleMaximized} />\n            <TitleBarButton iconName=\"close\" onClick={onClose} />\n        </header>\n    );\n};\n\nexport default ComposerTitleBar;\n","import React, { SyntheticEvent, useState, useEffect, useRef } from 'react';\nimport { Icon, classnames } from 'react-components';\nimport { noop } from 'proton-shared/lib/helpers/function';\n\nimport { validateAddress, recipientToInput, inputToRecipient } from '../../../helpers/addresses';\nimport { Recipient } from '../../../models/address';\n\ninterface Props {\n    recipient: Recipient;\n    onChange?: (value: Recipient) => void;\n    onRemove: () => void;\n}\n\nconst AddressesRecipientItem = ({ recipient, onChange = noop, onRemove }: Props) => {\n    const [model, setModel] = useState(recipientToInput(recipient));\n    const editableRef = useRef<HTMLSpanElement>(null);\n\n    const validate = () => {\n        // TODO: Check server\n        const recipient = inputToRecipient(model);\n        return validateAddress(recipient.Address);\n    };\n\n    const [valid, setValid] = useState(validate());\n\n    useEffect(() => {\n        // TODO: Manage recipient names\n        const value = recipientToInput(recipient);\n\n        if (editableRef.current) {\n            editableRef.current.textContent = value;\n        }\n        setModel(value);\n    }, [recipient]);\n\n    const handleChange = (event: SyntheticEvent) => {\n        setModel((event.target as HTMLSpanElement).textContent || '');\n    };\n    const handleBlur = () => {\n        setValid(validate());\n        onChange(inputToRecipient(model));\n    };\n\n    return (\n        <div\n            className={classnames([\n                'composer-addresses-item bordered-container flex flex-items-center flex-nowrap flex-row mw80 stop-propagation',\n                !valid && 'invalid'\n            ])}\n        >\n            {/* TODO: Icon lock */}\n            <span\n                className=\"composer-addresses-item-label mtauto mbauto pl0-5 ellipsis pr0-5\"\n                contentEditable={onChange !== noop}\n                onKeyUp={handleChange}\n                onPaste={handleChange}\n                onBlur={handleBlur}\n                ref={editableRef}\n            />\n            <button\n                className=\"composer-addresses-item-remove inline-flex pl0-5 pr0-5 no-pointer-events-children h100\"\n                onClick={onRemove}\n            >\n                <Icon name=\"off\" size={12} className=\"mauto\" />\n            </button>\n        </div>\n    );\n};\n\nexport default AddressesRecipientItem;\n","import { useEffect, MutableRefObject } from 'react';\n\nconst useEventListener = (\n    ref: MutableRefObject<Element | null | undefined>,\n    eventName: string,\n    handler: EventListenerOrEventListenerObject\n) => {\n    useEffect(() => {\n        ref.current?.addEventListener(eventName, handler);\n        return () => ref.current?.removeEventListener(eventName, handler);\n    }, [ref.current, handler]);\n};\n\nexport default useEventListener;\n","import React, { useState, useEffect, MutableRefObject, useRef, ReactNode } from 'react';\nimport Awesomplete from 'awesomplete';\n\nimport { contactToInput } from '../../../helpers/addresses';\nimport { ContactEmail, ContactGroup, ContactOrGroup } from '../../../models/contact';\nimport useEventListener from '../../../hooks/useEventListener';\nimport { Recipient } from '../../../models/address';\n\ninterface Props {\n    inputRef: MutableRefObject<HTMLInputElement | undefined>;\n    contacts: ContactEmail[];\n    contactGroups: ContactGroup[];\n    children: ReactNode;\n    onSelect: (value: ContactOrGroup) => void;\n    currentValue: Recipient[];\n}\n\nconst AddressesAutocomplete = ({ inputRef, contacts, contactGroups, onSelect, currentValue, children }: Props) => {\n    const [awesomplete, setAwesomplete] = useState<Awesomplete>();\n    const containerRef = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        const awesompleteInstance = new Awesomplete(\n            inputRef.current as HTMLElement,\n            {\n                container: () => containerRef.current as HTMLElement,\n                minChars: 0,\n                autoFirst: true\n            } as Awesomplete.Options\n        );\n        setAwesomplete(awesompleteInstance);\n\n        return () => awesompleteInstance.destroy();\n    }, []);\n\n    useEffect(() => {\n        if (awesomplete) {\n            const contactList = contacts\n                .filter((contact) => !currentValue.find((recipient) => recipient.Address === contact.Email))\n                .map((contact) => ({\n                    label: contactToInput(contact),\n                    value: `Contact:${contact.ID}`\n                }));\n\n            const groupList = contactGroups\n                .filter((group) => !currentValue.find((recipient) => recipient.Group === group.Path))\n                .map((group) => ({\n                    label: group.Name,\n                    value: `Group:${group.ID}`\n                }));\n\n            awesomplete.list = [...contactList, ...groupList];\n\n            (awesomplete as any).item = (text: string, input: string, itemId: string) =>\n                (Awesomplete.ITEM as any)(text.replace('<', '&lt;'), input, itemId);\n\n            // Prevent Awesomplete to open immediately\n            awesomplete.close();\n        }\n    }, [awesomplete, contacts, contactGroups, currentValue]);\n\n    const handleSelect = (event: any) => {\n        const value = event.text.value;\n        const contactID = /Contact:(.*)/.exec(value)?.[1];\n        const contact = contacts.find((contact) => contact.ID === contactID);\n        const groupID = /Group:(.*)/.exec(value)?.[1];\n        const group = contactGroups.find((group) => group.ID === groupID);\n        if (contact || group) {\n            onSelect({ contact, group });\n        }\n        awesomplete?.close();\n    };\n\n    useEventListener(inputRef, 'awesomplete-selectcomplete', handleSelect);\n\n    useEventListener(inputRef, 'click', () => {\n        if (awesomplete) {\n            awesomplete.open();\n        }\n    });\n\n    return (\n        <div className=\"composer-addresses-autocomplete flex-item-fluid relative\" ref={containerRef}>\n            {children}\n        </div>\n    );\n};\n\nexport default AddressesAutocomplete;\n","import React, { useState, ChangeEvent } from 'react';\nimport { c } from 'ttag';\nimport { Checkbox, FormModal, generateUID, Label } from 'react-components';\n\nimport { ContactEmail } from '../../../models/contact';\nimport { contactToInput } from '../../../helpers/addresses';\nimport { RecipientGroup } from '../../../models/address';\n\ninterface Props {\n    recipientGroup?: RecipientGroup;\n    contacts: ContactEmail[];\n    onClose?: () => void;\n    onSubmit: (recipientGroup: RecipientGroup) => void;\n}\n\nconst AddressesGroupModal = ({ onSubmit, onClose, recipientGroup, contacts, ...rest }: Props) => {\n    const [uid] = useState(generateUID('addresses-group-modal'));\n    const [model, setModel] = useState(recipientGroup as RecipientGroup);\n\n    const isChecked = (contact: ContactEmail) =>\n        !!model?.recipients.find((recipient) => contact.Email === recipient.Address);\n\n    const handleChange = (contact: ContactEmail) => (event: ChangeEvent<HTMLInputElement>) => {\n        const checked = event.target.checked;\n        const recipients = model.recipients || [];\n        let newValue;\n        if (checked) {\n            newValue = [\n                ...recipients,\n                { Name: contact.Name, Address: contact.Email, Group: recipientGroup?.group?.Path }\n            ];\n        } else {\n            newValue = recipients.filter((recipient) => recipient.Address !== contact.Email);\n        }\n        setModel({ group: model?.group, recipients: newValue });\n    };\n\n    const handleSubmit = () => {\n        onSubmit(model);\n        onClose?.();\n    };\n\n    const members = c('Info').t`Members`;\n    const title = `${recipientGroup?.group?.Name} (${contacts.length} ${members})`;\n\n    return (\n        <FormModal submit={c('Action').t`Save`} title={title} onSubmit={handleSubmit} onClose={onClose} {...rest}>\n            <ul className=\"unstyled\">\n                {contacts.map((contact) => {\n                    const id = `${uid}-${contact.ID}`;\n                    return (\n                        <li key={contact.ID} className=\"mb0-5\">\n                            <Checkbox id={id} checked={isChecked(contact)} onChange={handleChange(contact)} />\n                            <Label htmlFor={id} className=\"pt0 pl0-5\">\n                                {contactToInput(contact)}\n                            </Label>\n                        </li>\n                    );\n                })}\n            </ul>\n        </FormModal>\n    );\n};\n\nexport default AddressesGroupModal;\n","import React from 'react';\nimport { Icon, useModals } from 'react-components';\n\nimport { ContactEmail } from '../../../models/contact';\nimport AddressesGroupModal from './AddressesGroupModal';\nimport { getRecipientGroupLabel } from '../../../helpers/addresses';\nimport { RecipientGroup } from '../../../models/address';\nimport { getContactsOfGroup } from '../../../helpers/contacts';\n\ninterface Props {\n    recipientGroup?: RecipientGroup;\n    contacts: ContactEmail[];\n    onChange: (value: RecipientGroup) => void;\n    onRemove: () => void;\n}\n\nconst AddressesGroupItem = ({ recipientGroup, contacts, onChange, onRemove }: Props) => {\n    const { createModal } = useModals();\n\n    const contactsInGroup = getContactsOfGroup(contacts, recipientGroup?.group?.ID);\n    const label = getRecipientGroupLabel(recipientGroup, contactsInGroup.length);\n\n    const handleGroupModal = async () => {\n        const newRecipientGroup = (await new Promise((resolve) => {\n            createModal(\n                <AddressesGroupModal recipientGroup={recipientGroup} contacts={contactsInGroup} onSubmit={resolve} />\n            );\n        })) as RecipientGroup;\n\n        onChange(newRecipientGroup);\n    };\n\n    return (\n        <div className=\"composer-addresses-item bordered-container flex flex-items-center flex-nowrap flex-row mw80 stop-propagation\">\n            <span className=\"inline-flex pl0-5 pr0-5 no-pointer-events-children h100\">\n                <Icon name=\"contacts-groups\" size={12} className=\"mauto\" />\n            </span>\n            <span\n                className=\"composer-addresses-item-label mtauto mbauto pl0-5 ellipsis pr0-5\"\n                onClick={handleGroupModal}\n            >\n                {label}\n            </span>\n            <button\n                className=\"composer-addresses-item-remove inline-flex pl0-5 pr0-5 no-pointer-events-children h100\"\n                onClick={onRemove}\n            >\n                <Icon name=\"off\" size={12} className=\"mauto\" />\n            </button>\n        </div>\n    );\n};\n\nexport default AddressesGroupItem;\n","import React, { useState, useEffect, ChangeEvent, MutableRefObject, useRef, MouseEvent } from 'react';\nimport { Input } from 'react-components';\nimport { noop } from 'proton-shared/lib/helpers/function';\n\nimport AddressesRecipientItem from './AddressesRecipientItem';\nimport {\n    inputToRecipient,\n    contactToRecipient,\n    recipientsWithoutGroup,\n    recipientsToRecipientOrGroup\n} from '../../../helpers/addresses';\nimport { ContactEmail, ContactGroup, ContactOrGroup } from '../../../models/contact';\nimport AddressesAutocomplete from './AddressesAutocomplete';\nimport AddressesGroupItem from './AddressesGroupItem';\nimport { RecipientGroup, Recipient } from '../../../models/address';\n\ninterface Props {\n    id: string;\n    recipients?: Recipient[];\n    onChange: (value: Recipient[]) => void;\n    addressesFocusRef?: MutableRefObject<() => void>;\n    contacts: ContactEmail[];\n    contactGroups: ContactGroup[];\n}\n\nconst AddressesInput = ({ id, recipients = [], onChange, addressesFocusRef, contacts, contactGroups }: Props) => {\n    const [inputModel, setInputModel] = useState('');\n    const inputRef = useRef<HTMLInputElement>();\n\n    const recipientsOrGroups = recipientsToRecipientOrGroup(recipients, contactGroups);\n\n    const confirmInput = () => {\n        onChange([...recipients, inputToRecipient(inputModel)]);\n        setInputModel('');\n    };\n\n    useEffect(() => {\n        if (addressesFocusRef) {\n            addressesFocusRef.current = inputRef.current?.focus.bind(inputRef.current) || noop;\n        }\n    }, []);\n\n    const handleInputChange = (event: ChangeEvent) => {\n        const input = event.target as HTMLInputElement;\n        setInputModel(input.value);\n    };\n\n    const handleBlur = () => {\n        if (inputModel.trim().length > 0) {\n            confirmInput();\n        }\n    };\n\n    const handleClick = (event: MouseEvent) => {\n        if ((event.target as HTMLElement).closest('.stop-propagation')) {\n            event.stopPropagation();\n            return;\n        }\n\n        inputRef.current?.focus();\n    };\n\n    const handleRecipientChange = (toChange: Recipient) => (value: Recipient) => {\n        onChange(recipients.map((recipient) => (recipient === toChange ? value : recipient)));\n    };\n\n    const handleRecipientRemove = (toRemove: Recipient) => () => {\n        onChange(recipients.filter((recipient) => recipient !== toRemove));\n    };\n\n    const handleGroupChange = (toChange?: RecipientGroup) => (value: RecipientGroup) => {\n        onChange([...recipientsWithoutGroup(recipients, toChange?.group?.Path), ...value.recipients]);\n    };\n\n    const handleGroupRemove = (toRemove?: RecipientGroup) => () => {\n        onChange(recipientsWithoutGroup(recipients, toRemove?.group?.Path));\n    };\n\n    const handleInputKey = (event: KeyboardEvent) => {\n        // Enter or Tab\n        if ((event.keyCode === 13 || event.keyCode === 9) && inputModel.length !== 0) {\n            confirmInput();\n            event.preventDefault(); // Prevent tab to switch field\n        }\n        // Backspace\n        if (event.keyCode === 8 && inputModel.length === 0 && recipientsOrGroups.length > 0) {\n            const last = recipientsOrGroups[recipientsOrGroups.length - 1];\n            if (last.recipient) {\n                handleRecipientRemove(last.recipient)();\n            } else {\n                handleGroupRemove(last.group)();\n            }\n        }\n    };\n\n    const handleAutocompleteSelect = ({ contact, group }: ContactOrGroup) => {\n        if (contact) {\n            onChange([...recipients, contactToRecipient(contact)]);\n        }\n        if (group) {\n            const groupContacts = contacts\n                .filter((contact) => contact.LabelIDs?.includes(group.ID || ''))\n                .map((contact) => contactToRecipient(contact, group.Path));\n            onChange([...recipients, ...groupContacts]);\n        }\n        setInputModel('');\n    };\n\n    return (\n        <AddressesAutocomplete\n            inputRef={inputRef}\n            contacts={contacts}\n            contactGroups={contactGroups}\n            onSelect={handleAutocompleteSelect}\n            currentValue={recipients}\n        >\n            <div\n                className=\"composer-addresses-container flex-item-fluid bordered-container pl1-25 pr1-25\"\n                onClick={handleClick}\n            >\n                {recipientsOrGroups.map((recipientsOrGroup, i) =>\n                    recipientsOrGroup.recipient ? (\n                        <AddressesRecipientItem\n                            key={i}\n                            recipient={recipientsOrGroup.recipient}\n                            onChange={handleRecipientChange(recipientsOrGroup.recipient)}\n                            onRemove={handleRecipientRemove(recipientsOrGroup.recipient)}\n                        />\n                    ) : (\n                        <AddressesGroupItem\n                            key={i}\n                            recipientGroup={recipientsOrGroup.group}\n                            contacts={contacts}\n                            onChange={handleGroupChange(recipientsOrGroup.group)}\n                            onRemove={handleGroupRemove(recipientsOrGroup.group)}\n                        />\n                    )\n                )}\n                <div className=\"flex-item-fluid\">\n                    <Input\n                        id={id}\n                        value={inputModel}\n                        onChange={handleInputChange}\n                        onKeyDown={handleInputKey}\n                        onBlur={handleBlur}\n                        ref={inputRef}\n                    />\n                </div>\n            </div>\n        </AddressesAutocomplete>\n    );\n};\n\nexport default AddressesInput;\n","import React, { useState, ChangeEvent } from 'react';\nimport { c } from 'ttag';\nimport {\n    Table,\n    TableHeader,\n    Checkbox,\n    TableRow,\n    TableBody,\n    FormModal,\n    SearchInput as SearchInputUntyped\n} from 'react-components';\nimport { ContactEmail } from '../../../models/contact';\nimport AddressesRecipientItem from './AddressesRecipientItem';\nimport { Recipient } from '../../../models/address';\n\nconst SearchInput = SearchInputUntyped as any;\n\ninterface Props {\n    inputValue?: Recipient[];\n    allContacts?: ContactEmail[];\n    onClose?: () => void;\n    onSubmit: (recipients: Recipient[]) => void;\n}\n\nconst AddressesContactsModal = ({ onSubmit, onClose, inputValue = [], allContacts = [], ...rest }: Props) => {\n    const [value, setValue] = useState(inputValue);\n    const [contacts, setContacts] = useState<ContactEmail[]>(allContacts);\n\n    const handleChangeSearch = (searchInput = '') => {\n        const search = searchInput.toLowerCase();\n        const contacts = allContacts?.filter(\n            (contact) => contact.Name?.toLowerCase().includes(search) || contact.Email?.toLowerCase().includes(search)\n        );\n        setContacts(contacts || []);\n    };\n\n    const handleChangeCheckbox = (contact: ContactEmail) => (event: ChangeEvent<HTMLInputElement>) => {\n        const checked = event.target.checked;\n        let newValue: Recipient[];\n        if (checked) {\n            newValue = [...value, { Name: contact.Name, Address: contact.Email }];\n        } else {\n            newValue = value.filter((recipient) => recipient.Address !== contact.Email);\n        }\n        setValue(newValue);\n    };\n\n    const handleRemove = (toRemove: Recipient) => () => {\n        setValue(value.filter((recipient) => recipient !== toRemove));\n    };\n\n    const isChecked = (contact: ContactEmail) => !!value.find((recipient) => recipient.Address === contact.Email);\n\n    const handleSubmit = () => {\n        onSubmit(value);\n        onClose?.();\n    };\n\n    return (\n        <FormModal\n            submit={c('Action').t`Add`}\n            title={c('Info').t`Add multiple recipients`}\n            onSubmit={handleSubmit}\n            onClose={onClose}\n            {...rest}\n        >\n            <SearchInput placeholder={c('Info').t`Search for contacts`} onChange={handleChangeSearch} />\n            <Table className=\"addresses-contacts-table\">\n                <TableHeader cells={[<Checkbox key={0} />, c('Info').t`Name`, c('Info').t`Email`]} />\n                <TableBody colSpan={0}>\n                    {contacts.map((contact) => (\n                        <TableRow\n                            key={contact.ID}\n                            cells={[\n                                <Checkbox\n                                    key={0}\n                                    checked={isChecked(contact)}\n                                    onChange={handleChangeCheckbox(contact)}\n                                />,\n                                contact.Name,\n                                contact.Email\n                            ]}\n                        />\n                    ))}\n                </TableBody>\n            </Table>\n            {value.length > 0 && (\n                <div className=\"composer-addresses-container flex-item-fluid bordered-container pl1-25 pr1-25\">\n                    {value.map((recipient, i) => (\n                        <AddressesRecipientItem key={i} recipient={recipient} onRemove={handleRemove(recipient)} />\n                    ))}\n                </div>\n            )}\n        </FormModal>\n    );\n};\n\nexport default AddressesContactsModal;\n","import React, { useState, MutableRefObject } from 'react';\nimport { c } from 'ttag';\nimport { Label, generateUID, Button, Tooltip, classnames, useModals } from 'react-components';\n\nimport { MessageExtended } from '../../../models/message';\nimport AddressesInput from './AddressesInput';\nimport AddressesContactsModal from './AddressesContactsModal';\nimport { ContactEmail, ContactGroup } from '../../../models/contact';\nimport { RecipientType, Recipient } from '../../../models/address';\n\ninterface Props {\n    message: MessageExtended;\n    contacts: ContactEmail[];\n    contactGroups: ContactGroup[];\n    onChange: (message: MessageExtended) => void;\n    expanded: boolean;\n    toggleExpanded: () => void;\n    addressesFocusRef: MutableRefObject<() => void>;\n}\n\nconst AddressesEditor = ({\n    message,\n    contacts,\n    contactGroups,\n    onChange,\n    expanded,\n    toggleExpanded,\n    addressesFocusRef\n}: Props) => {\n    const [uid] = useState(generateUID('composer'));\n    const { createModal } = useModals();\n\n    const handleChange = (type: RecipientType) => (value: Recipient[]) => {\n        onChange({ data: { [type]: value } });\n    };\n\n    const handleContactModal = (type: RecipientType) => async () => {\n        const recipients = await new Promise((resolve) => {\n            createModal(\n                <AddressesContactsModal inputValue={message.data?.[type]} allContacts={contacts} onSubmit={resolve} />\n            );\n        });\n\n        onChange({ data: { [type]: recipients } });\n    };\n\n    return (\n        <div className=\"flex flex-row flex-nowrap flex-items-start pl0-5 mb0-5\">\n            <div className=\"flex flex-column composer-meta-label\">\n                <Label htmlFor={`to-${uid}`}>\n                    <Tooltip title={c('Title').t`Add contacts`}>\n                        <a onClick={handleContactModal('ToList')}>{c('Title').t`To`}</a>\n                    </Tooltip>\n                </Label>\n                {expanded && (\n                    <>\n                        <Label htmlFor={`cc-${uid}`}>\n                            <Tooltip title={c('Title').t`Add contacts`}>\n                                <a onClick={handleContactModal('CCList')}>{c('Title').t`CC`}</a>\n                            </Tooltip>\n                        </Label>\n                        <Label htmlFor={`bcc-${uid}`}>\n                            <Tooltip title={c('Title').t`Add contacts`}>\n                                <a onClick={handleContactModal('BCCList')}>{c('Title').t`BCC`}</a>\n                            </Tooltip>\n                        </Label>\n                    </>\n                )}\n            </div>\n\n            <div className=\"flex flex-column flex-item-fluid w100\">\n                <div className=\"flex flex-row w100 composer-addresses-container-line\">\n                    <AddressesInput\n                        id={`to-${uid}`}\n                        recipients={message.data?.ToList}\n                        onChange={handleChange('ToList')}\n                        addressesFocusRef={addressesFocusRef}\n                        contacts={contacts}\n                        contactGroups={contactGroups}\n                    />\n                    <Tooltip originalPlacement=\"left\" title={c('Title').t`CC BCC`}>\n                        <Button\n                            icon=\"caret\"\n                            className={classnames(['pm-button--link ml0-5 mr0-5', expanded && 'rotateX-180'])}\n                            onClick={toggleExpanded}\n                        />\n                    </Tooltip>\n                </div>\n                {expanded && (\n                    <>\n                        <div className=\"flex flex-row w100 mt0-5 composer-addresses-container-line\">\n                            <AddressesInput\n                                id={`cc-${uid}`}\n                                recipients={message.data?.CCList}\n                                onChange={handleChange('CCList')}\n                                contacts={contacts}\n                                contactGroups={contactGroups}\n                            />\n                        </div>\n                        <div className=\"flex flex-row w100 mt0-5 composer-addresses-container-line\">\n                            <AddressesInput\n                                id={`bcc-${uid}`}\n                                recipients={message.data?.BCCList}\n                                onChange={handleChange('BCCList')}\n                                contacts={contacts}\n                                contactGroups={contactGroups}\n                            />\n                        </div>\n                    </>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default AddressesEditor;\n","import { ContactGroup } from './contact';\n\nexport interface Address {\n    ID?: string;\n    Email?: string;\n    DisplayName?: string;\n    Priority?: number;\n    Receive?: number;\n    Status?: number;\n    Order?: number;\n    Send?: number;\n    Signature?: string;\n}\n\nexport type RecipientType = 'ToList' | 'CCList' | 'BCCList';\nexport const recipientTypes: RecipientType[] = ['ToList', 'CCList', 'BCCList'];\n\nexport interface Recipient {\n    Name?: string;\n    Address?: string;\n    Group?: string;\n}\n\nexport interface RecipientGroup {\n    group?: ContactGroup;\n    recipients: Recipient[];\n}\n\nexport interface RecipientOrGroup {\n    recipient?: Recipient;\n    group?: RecipientGroup;\n}\n","import React, { Fragment } from 'react';\nimport { c } from 'ttag';\nimport { Label, Button } from 'react-components';\n\nimport { MessageExtended } from '../../../models/message';\nimport { Recipient, recipientTypes } from '../../../models/address';\nimport { recipientsToRecipientOrGroup, getRecipientOrGroupLabel } from '../../../helpers/addresses';\nimport { ContactEmail, ContactGroup } from '../../../models/contact';\n\ninterface Props {\n    message: MessageExtended;\n    contacts: ContactEmail[];\n    contactGroups: ContactGroup[];\n    onFocus: () => void;\n}\n\nconst AddressesSummary = ({ message: { data = {} }, contacts, contactGroups, onFocus }: Props) => {\n    return (\n        <div className=\"flex flex-row flex-nowrap flex-items-center pl0-5 mb0-5\" onClick={onFocus}>\n            <Label htmlFor={null} className=\"composer-meta-label color-pm-blue\">\n                {c('Title').t`To`}\n            </Label>\n            <div className=\"flex flex-row flex-item-fluid w100\">\n                <span className=\"flex-item-fluid bordered-container flex composer-addresses-fakefield\">\n                    <span className=\"ellipsis mw100\">\n                        {recipientTypes.map((type) => {\n                            const recipients: Recipient[] = data[type] || [];\n                            if (recipients.length === 0) {\n                                return null;\n                            }\n                            const recipientOrGroups = recipientsToRecipientOrGroup(recipients, contactGroups);\n                            return (\n                                <Fragment key={type}>\n                                    {type === 'CCList' && (\n                                        <span className=\"mr0-5 color-pm-blue\">{c('Title').t`CC`}:</span>\n                                    )}\n                                    {type === 'BCCList' && (\n                                        <span className=\"mr0-5 color-pm-blue\">{c('Title').t`BCC`}:</span>\n                                    )}\n                                    {recipientOrGroups.map((recipientOrGroup, i) => (\n                                        <span key={i} className=\"mr0-5\">\n                                            {getRecipientOrGroupLabel(recipientOrGroup, contacts)}\n                                            {i !== recipientOrGroups.length - 1 && ','}\n                                        </span>\n                                    ))}\n                                </Fragment>\n                            );\n                        })}\n                    </span>\n                </span>\n                <Button icon=\"caret\" className=\"pm-button--link ml0-5 mr0-5 \" />\n            </div>\n        </div>\n    );\n};\n\nexport default AddressesSummary;\n","import React, { MutableRefObject, useEffect } from 'react';\nimport { useToggle, useContactEmails } from 'react-components';\n\nimport { MessageExtended } from '../../../models/message';\nimport AddressesEditor from './AddressesEditor';\nimport AddressesSummary from './AddressesSummary';\nimport { getRecipients } from '../../../helpers/message/messages';\nimport { ContactEmail } from '../../../models/contact';\nimport { useContactGroups } from '../../../hooks/useContactGroups';\n\ninterface Props {\n    message: MessageExtended;\n    onChange: (message: MessageExtended) => void;\n    addressesBlurRef: MutableRefObject<() => void>;\n    addressesFocusRef: MutableRefObject<() => void>;\n}\n\nconst Addresses = ({ message, onChange, addressesBlurRef, addressesFocusRef }: Props) => {\n    const [contacts, loadingContacts]: [ContactEmail[], boolean] = useContactEmails();\n    const [contactGroups, loadingContactGroups] = useContactGroups();\n\n    // Summary of selected addresses or addresses editor\n    const { state: editor, set: setEditor } = useToggle(true);\n\n    // CC and BCC visible in expanded mode\n    const { state: expanded, set: setExpanded, toggle: toggleExpanded } = useToggle(\n        getRecipients(message.data).length > 0\n    );\n\n    useEffect(() => {\n        addressesBlurRef.current = () => setEditor(false);\n    }, []);\n\n    if (loadingContacts || loadingContactGroups) {\n        return null;\n    }\n\n    const handleFocus = () => {\n        setEditor(true);\n        setExpanded(true);\n        setTimeout(() => {\n            addressesFocusRef.current();\n        });\n    };\n\n    return editor ? (\n        <AddressesEditor\n            message={message}\n            contacts={contacts}\n            contactGroups={contactGroups}\n            onChange={onChange}\n            expanded={expanded}\n            toggleExpanded={toggleExpanded}\n            addressesFocusRef={addressesFocusRef}\n        />\n    ) : (\n        <AddressesSummary message={message} contacts={contacts} contactGroups={contactGroups} onFocus={handleFocus} />\n    );\n};\n\nexport default Addresses;\n","import React, { useState, ChangeEvent, MutableRefObject } from 'react';\nimport { c } from 'ttag';\nimport { Label, Select, Input, generateUID } from 'react-components';\n\nimport ComposerAddresses from './addresses/Addresses';\nimport { MessageExtended } from '../../models/message';\nimport { Address } from '../../models/address';\nimport { getFromAdresses } from '../../helpers/addresses';\n\ninterface Props {\n    message: MessageExtended;\n    addresses: Address[];\n    onChange: (message: MessageExtended) => void;\n    addressesBlurRef: MutableRefObject<() => void>;\n    addressesFocusRef: MutableRefObject<() => void>;\n}\n\nconst ComposerMeta = ({ message, addresses, onChange, addressesBlurRef, addressesFocusRef }: Props) => {\n    const [uid] = useState(generateUID('composer'));\n\n    const addressesOptions = getFromAdresses(addresses, message.originalTo).map((address: Address) => ({\n        text: address.Email,\n        value: address.ID\n    }));\n\n    const handleFromChange = (event: ChangeEvent) => {\n        const select = event.target as HTMLSelectElement;\n        const AddressID = select.value;\n        const address = addresses.find((address: Address) => address.ID === AddressID);\n        const Sender = { Name: address?.DisplayName, Address: address?.Email };\n        onChange({ data: { AddressID, Sender } });\n    };\n\n    const handleSubjectChange = (event: ChangeEvent) => {\n        const input = event.target as HTMLInputElement;\n        onChange({ data: { Subject: input.value } });\n    };\n\n    return (\n        <div className=\"composer-meta w100\">\n            <div className=\"flex flex-row flex-nowrap flex-items-center pl0-5 mb0-5\">\n                <Label htmlFor={`from-${uid}`} className=\"composer-meta-label\">\n                    {c('Info').t`From`}\n                </Label>\n                <Select\n                    id={`from-${uid}`}\n                    options={addressesOptions}\n                    value={message.data?.AddressID}\n                    onChange={handleFromChange}\n                    onFocus={addressesBlurRef.current}\n                ></Select>\n            </div>\n            <ComposerAddresses\n                message={message}\n                onChange={onChange}\n                addressesBlurRef={addressesBlurRef}\n                addressesFocusRef={addressesFocusRef}\n            />\n            <div className=\"flex flex-row flex-nowrap flex-items-center pl0-5 mb0-5\">\n                <Label htmlFor={`subject-${uid}`} className=\"composer-meta-label\">\n                    {c('Info').t`Subject`}\n                </Label>\n                <Input\n                    id={`subject-${uid}`}\n                    value={message.data?.Subject}\n                    placeholder={c('Placeholder').t`Subject`}\n                    onChange={handleSubjectChange}\n                    onFocus={addressesBlurRef.current}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default ComposerMeta;\n","import React from 'react';\nimport { c, msgid } from 'ttag';\nimport { Icon, useToggle } from 'react-components';\nimport humanSize from 'proton-shared/lib/helpers/humanSize';\n\nimport { Message } from '../../../models/message';\nimport { attachmentsSize, getAttachments } from '../../../helpers/message/messages';\nimport { Attachment } from '../../../models/attachment';\n\ninterface Props {\n    message?: Message;\n    onRemove: (attachment: Attachment) => () => void;\n}\n\nconst AttachmentsList = ({ message, onRemove }: Props) => {\n    const { state: expanded, toggle: toggleExpanded } = useToggle(false);\n\n    const attachments = getAttachments(message);\n    const size = humanSize(attachmentsSize(message));\n\n    return (\n        <div className=\"flex flex-column relative w100 flex-nowrap\">\n            <button className=\"flex flex-row flex-spacebetween w100 p0-5\" onClick={toggleExpanded}>\n                <div>\n                    <strong className=\"mr0-5\">{size}</strong>\n                    <Icon name=\"attach\" className=\"mr0-5\" />\n                    {c('Info').ngettext(\n                        msgid`${attachments.length} file attached`,\n                        `${attachments.length} files attached`,\n                        attachments.length\n                    )}\n                </div>\n                <div className=\"color-pm-blue\">{expanded ? c('Action').t`Hide` : c('Action').t`Show`}</div>\n            </button>\n            {expanded && (\n                <div className=\"composer-attachments-expand flex flex-row flex-wrap pt1 pb0-5 pl0-5 pr0-5\">\n                    {attachments.map((attachment) => (\n                        <div key={attachment.ID} className=\"composer-attachments-item\">\n                            <div className=\"flex flex-spacebetween bordered-container p0-25 flex-nowrap flex-items-center pm_button bg-white-dm p0\">\n                                <Icon name=\"attach\" />\n                                <span className=\"flex-item-fluid ellipsis pl0-5 pr0-5\">{attachment.Name}</span>\n                                <button\n                                    className=\"inline-flex pl0-5 pr0-5 no-pointer-events-children h100\"\n                                    onClick={onRemove(attachment)}\n                                >\n                                    <Icon name=\"off\" size={12} />\n                                </button>\n                            </div>\n                        </div>\n                    ))}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default AttachmentsList;\n","import React, { MutableRefObject, useRef, useEffect, RefObject } from 'react';\nimport ReactQuill from 'react-quill';\nimport Quill from 'quill';\nimport { noop } from 'proton-shared/lib/helpers/function';\nimport { MessageExtended } from '../../models/message';\nimport { getAttachments } from '../../helpers/message/messages';\nimport AttachmentsList from './attachments/AttachmensList';\nimport { Attachment } from '../../models/attachment';\n\nimport 'react-quill/dist/quill.snow.css';\n\nconst Block = Quill.import('blots/block');\nBlock.tagName = 'div';\nQuill.register(Block);\n\ninterface Props {\n    message: MessageExtended;\n    onChange: (message: MessageExtended) => void;\n    onFocus: () => void;\n    onRemoveAttachment: (attachment: Attachment) => () => void;\n    contentFocusRef: MutableRefObject<() => void>;\n}\n\nconst ComposerContent = ({ message, onChange, onFocus, onRemoveAttachment, contentFocusRef }: Props) => {\n    const inputRef: RefObject<ReactQuill> = useRef(null);\n\n    useEffect(() => {\n        contentFocusRef.current = inputRef.current?.focus || noop;\n    }, []);\n\n    const handleChange = (content: string, delta: any, source: string) => {\n        if (source === 'user') {\n            onChange({ content });\n        }\n    };\n\n    const attachments = getAttachments(message.data);\n\n    return (\n        <section className=\"composer-content flex-item-fluid w100 mb0-5 flex flex-column flex-nowrap\">\n            <ReactQuill\n                className=\"composer-quill w100 flex-item-fluid\"\n                value={message.content || ''}\n                readOnly={!message.content}\n                onChange={handleChange}\n                onFocus={onFocus}\n                ref={inputRef}\n            />\n            {attachments.length > 0 && <AttachmentsList message={message.data} onRemove={onRemoveAttachment} />}\n        </section>\n    );\n};\n\nexport default ComposerContent;\n","import React, { ChangeEvent } from 'react';\nimport { Button } from 'react-components';\n\ninterface Props {\n    onAddAttachments: (files: File[]) => void;\n}\n\nconst AttachmentsButton = ({ onAddAttachments }: Props) => {\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n        const input = event.target;\n        if (input.files) {\n            onAddAttachments([...input.files]);\n            input.value = '';\n        }\n    };\n\n    return (\n        <div className=\"composer-attachments-button-wrapper\">\n            <input type=\"file\" multiple onChange={handleChange} />\n            <Button icon=\"attach\" />\n        </div>\n    );\n};\n\nexport default AttachmentsButton;\n","import React from 'react';\nimport { c } from 'ttag';\nimport { Button, useModals, ConfirmModal, Alert } from 'react-components';\nimport { noop } from 'proton-shared/lib/helpers/function';\n\nimport { formatSimpleDate } from '../../helpers/date';\nimport { MessageExtended } from '../../models/message';\nimport { getDate } from '../../helpers/elements';\nimport AttachmentsButton from './attachments/AttachmentsButton';\nimport { useSlowChanges } from '../../hooks/useSlowChanges';\n\ninterface Props {\n    message: MessageExtended;\n    lock: boolean;\n    activity: string;\n    onAddAttachments: (files: File[]) => void;\n    onSave: () => Promise<void>;\n    onSend: () => Promise<void>;\n    onDelete: () => Promise<void>;\n}\n\nconst ComposerActions = ({\n    message,\n    lock,\n    activity: activityInput,\n    onSave,\n    onSend,\n    onDelete,\n    onAddAttachments\n}: Props) => {\n    const { createModal } = useModals();\n    const activity = useSlowChanges(activityInput);\n\n    const handleDelete = () => {\n        return createModal(\n            <ConfirmModal onConfirm={onDelete} onClose={noop} title={c('Title').t`Delete`}>\n                <Alert>{c('Info').t`Permanently delete this draft?`}</Alert>\n            </ConfirmModal>\n        );\n    };\n\n    let dateMessage = '';\n\n    if (lock) {\n        dateMessage = c('Action').t`Saving`;\n    } else {\n        const date = getDate(message.data);\n        if (date.getTime() !== 0) {\n            const dateString = formatSimpleDate(date);\n            dateMessage = c('Info').t`Saved at ${dateString}`;\n        }\n    }\n\n    return (\n        <footer className=\"composer-actions flex flex-row flex-spacebetween w100\">\n            <div className=\"flex\">\n                <AttachmentsButton onAddAttachments={onAddAttachments} />\n                <Button icon=\"expiration\" className=\"ml0-5\" />\n                <Button icon=\"lock\" className=\"ml0-5\" />\n            </div>\n            <div className=\"flex-self-vcenter\">\n                <span>{dateMessage}</span>\n                <Button className=\"ml1\" icon=\"trash\" disabled={lock} onClick={handleDelete} />{' '}\n                <Button icon=\"save\" disabled={lock} onClick={onSave} />{' '}\n                <Button className=\"pm-button-blue composer-send-button\" loading={lock} onClick={onSend}>\n                    {lock ? activity : c('Action').t`Send`}\n                </Button>\n            </div>\n        </footer>\n    );\n};\n\nexport default ComposerActions;\n","import { c } from 'ttag';\nimport { encryptMessage, splitMessage, PmcryptoKey } from 'pmcrypto';\n\nimport { MessageExtended } from '../../models/message';\nimport { Api, Binary } from '../../models/utils';\nimport { getAttachments } from '../message/messages';\nimport { readFileAsBuffer } from '../file';\nimport { uploadAttachment } from '../../api/attachments';\nimport { isEmbeddable } from './attachments';\nimport { Attachment } from '../../models/attachment';\n\n// Reference: Angular/src/app/attachments/factories/attachmentModel.js\n\ntype UploadQueryResult = Promise<{ Attachment: Attachment }>;\n\nexport enum ATTACHMENT_ACTION {\n    ATTACHMENT = 'attachment',\n    INLINE = 'inline'\n}\n\nconst encrypt = async (\n    data: Binary,\n    { name, type, size }: File = {} as File,\n    inline: boolean,\n    publicKeys: PmcryptoKey[],\n    privateKeys: PmcryptoKey[]\n) => {\n    const { message, signature } = await encryptMessage({\n        filename: name,\n        armor: false,\n        detached: true,\n        data,\n        publicKeys,\n        privateKeys\n    });\n\n    const { asymmetric, encrypted } = await splitMessage(message);\n\n    return {\n        Filename: name,\n        MIMEType: type,\n        FileSize: size,\n        Inline: inline,\n        signature: signature ? signature.packets.write() : undefined,\n        Preview: data,\n        keys: asymmetric[0],\n        data: encrypted[0]\n    };\n};\n\n/**\n * Read the file locally, and encrypt it. return the encrypted file.\n */\nconst encryptFile = async (file: File, inline: boolean, pubKeys: PmcryptoKey[], privKey: PmcryptoKey[]) => {\n    if (!file) {\n        throw new TypeError(c('Error').t`You did not provide a file.`);\n    }\n    try {\n        const result = await readFileAsBuffer(file);\n        return encrypt(new Uint8Array(result), file, inline, pubKeys, privKey);\n    } catch (e) {\n        throw new Error(c('Error').t`Failed to encrypt attachment. Please try again.`);\n    }\n};\n\n/**\n * Add a new attachment, upload it to the server\n */\nconst uploadFile = async (file: File, message: MessageExtended, inline: boolean, api: Api, total = 1, cid = '') => {\n    const titleImage = c('Title').t`Image`;\n\n    const tempPacket = {\n        filename: file.name || `${titleImage} ${getAttachments(message.data).length + 1}`,\n        uploading: true,\n        Size: file.size,\n        ContentID: cid\n    };\n\n    // TODO\n    // force update the embedded counter\n    // if (file.inline) {\n    //     message.NumEmbedded++;\n    //     // CID doesn't exist when the user add an attachment\n    //     tempPacket.ContentID = cid || embedded.generateCid(file.upload.uuid, message.From.Email);\n    //     tempPacket.Inline = 1;\n    // }\n\n    // const privateKeys = keysModel.getPrivateKeys(message.AddressID);\n    // message.attachmentsToggle = true;\n\n    const publicKeys = message.publicKeys && message.publicKeys.length > 0 ? [message.publicKeys[0]] : [];\n\n    const packets = await encryptFile(file, inline, publicKeys, message.privateKeys || []);\n\n    const { Attachment } = await (api(\n        uploadAttachment({\n            Filename: packets.Filename || tempPacket.filename,\n            MessageID: message.data?.ID || '',\n            ContentID: tempPacket.ContentID,\n            MIMEType: packets.MIMEType,\n            KeyPackets: new Blob([packets.keys] as any),\n            DataPacket: new Blob([packets.data] as any),\n            Signature: packets.signature ? new Blob([packets.signature] as any) : undefined\n        })\n    ) as UploadQueryResult);\n\n    console.log('result', total, Attachment);\n\n    // TODO\n    // if (isAborted) {\n    //     return;\n    // }\n\n    // Extract content-id even if there are no headers\n    // const contentId = `${(Attachment.Headers || {})['content-id'] || ''}`;\n    // const newCid = contentId.replace(/[<>]+/g, '');\n\n    // return { attachment, sessionKey, packets, cid: newCid, REQUEST_ID };\n    return Attachment;\n};\n\n/**\n * Upload a list of attachments [...File]\n */\nexport const upload = async (\n    files: File[] = [],\n    message: MessageExtended = {},\n    action = ATTACHMENT_ACTION.ATTACHMENT,\n    api: Api,\n    // triggerEvent = true,\n    cid = ''\n) => {\n    const uploads = await Promise.all(\n        files.map((file) => {\n            const inline = isEmbeddable(file.type) && action === ATTACHMENT_ACTION.INLINE;\n            return uploadFile(file, message, inline, api, files.length, cid);\n        })\n    );\n\n    // message.uploading = promises.length;\n    // message.encryptingAttachment = true;\n    // dispatchMessageAction(message);\n\n    // const cleanUploads = uploads.filter(Boolean) as {\n    //     attachment: Attachment;\n    //     sessionKey: any;\n    //     packets: any;\n    //     cid: string;\n    //     REQUEST_ID: string;\n    // }[]; // will be undefined for aborted request\n\n    // message.uploading = 0;\n    // message.encryptingAttachment = false;\n    // dispatchMessageAction(message);\n\n    // TODO: Embedded\n    // Create embedded and replace theses files from the upload list\n    // const embeddedMap = addEmbedded(upload, message);\n    // return _.map(upload, (config) => {\n    //     return embeddedMap[config.attachment.ID] || config;\n    // });\n\n    // .then((upload) => {\n    //     message.addAttachments(upload.map(({ attachment }) => attachment));\n    //     updateMapAttachments(upload);\n\n    //     if (triggerEvent && upload.length) {\n    //         dispatch('upload.success', { upload, message, messageID: message.ID });\n    //     }\n    //     return upload;\n    // }).catch((err) => {\n    //     dispatchMessageAction(message);\n    //     throw err;\n    // });\n\n    // TODO\n    // const promise = composerRequestModel.add(message, callback);\n    // networkActivityTracker.track(promise);\n\n    return uploads;\n};\n","import { useState, useEffect } from 'react';\n\n/**\n * Slow down changes on a value, mostly to let user see steps\n * Doesn't drop steps but stack them\n * Falsy value are not preserved\n */\nexport const useSlowChanges = <T>(currentValue: T, time = 500): T => {\n    const [value, setValue] = useState<T>(currentValue);\n    const [stack, setStack] = useState<T[]>([]);\n    const [timeout, setTimeoutState] = useState<NodeJS.Timeout>();\n\n    const runTimeout = () => setTimeoutState(setTimeout(() => setTimeoutState(undefined), time));\n\n    useEffect(() => {\n        if (timeout === undefined) {\n            if (currentValue) {\n                runTimeout();\n            }\n            setValue(currentValue);\n        } else {\n            setStack([...stack, currentValue]);\n        }\n    }, [currentValue]);\n\n    useEffect(() => {\n        if (timeout === undefined && stack.length > 0) {\n            const [first, ...rest] = stack;\n            setValue(first);\n            setStack(rest);\n            runTimeout();\n        }\n    }, [timeout, stack]);\n\n    return value;\n};\n","import { arrayToBinaryString } from 'pmcrypto';\n\n/**\n * Convert file to encoded base 64 string\n * @param  {File} file\n * @param {Function} isValid File validator ex: valid file type\n * @return {Promise}\n */\n// export const toBase64 = async (file, isValid = () => true) => {\n//     if (file && !isValid(file)) {\n//         throw new Error('Invalid file format');\n//     }\n\n//     return new Promise((resolve, reject) => {\n//         const reader = new FileReader();\n\n//         reader.onload = ({ target }) => {\n//             resolve(target.result);\n//         };\n//         reader.onerror = reject;\n//         reader.onabort = reject;\n\n//         reader.readAsDataURL(file);\n//     });\n// };\n\n/**\n * Read the content of a blob and returns its value as a buffer\n */\nexport const readFileAsBuffer = (file: File) => {\n    return new Promise<ArrayBuffer>((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => resolve(reader.result as ArrayBuffer);\n        reader.onerror = reject;\n        reader.onabort = reject;\n        reader.readAsArrayBuffer(file);\n    });\n};\n\n/**\n * Read the content of a blob and returns its value as a string.\n * Not using readAsBinaryString because it's deprecated.\n */\nexport const readFileAsString = async (file: File) => {\n    const arrayBuffer = await readFileAsBuffer(file);\n    // eslint-disable-next-line new-cap\n    return arrayToBinaryString(new Uint8Array(arrayBuffer));\n};\n\n/**\n * Convert a blob url to the matching blob\n * @link https://stackoverflow.com/a/42508185\n * @param  {String} url blob://xxxx\n * @return {Promise}     Blob\n */\n// export const blobURLtoBlob = (url) => {\n//     return new Promise((resolve, reject) => {\n//         const xhr = new XMLHttpRequest();\n//         xhr.open('GET', url);\n//         xhr.responseType = 'blob';\n//         xhr.onerror = reject;\n//         xhr.onload = () => {\n//             if (xhr.status === 200) {\n//                 return resolve(xhr.response);\n//             }\n//             reject(xhr);\n//         };\n//         xhr.send();\n//     });\n// };\n\n/**\n * Read the base64 portion of a data url.\n * @param {String} url\n * @returns {Uint8Array}\n */\n// export const readDataUrl = (url = '') => {\n//     const error = 'The given url is not a data url.';\n\n//     if (url.substring(0, 5) !== 'data:') {\n//         throw new Error(error);\n//     }\n\n//     const [, base64] = url.split(',');\n//     if (!base64) {\n//         throw new Error(error);\n//     }\n\n//     return binaryStringToArray(decodeBase64(base64));\n// };\n","import React, { useState, useEffect, CSSProperties, useRef, useCallback } from 'react';\nimport { classnames, useToggle, useWindowSize, useNotifications, useApi } from 'react-components';\nimport { c } from 'ttag';\n\nimport { MessageExtended } from '../../models/message';\nimport ComposerTitleBar from './ComposerTitleBar';\nimport ComposerMeta from './ComposerMeta';\nimport ComposerContent from './ComposerContent';\nimport ComposerActions from './ComposerActions';\nimport { useMessage } from '../../hooks/useMessage';\nimport { Address } from '../../models/address';\nimport {\n    COMPOSER_GUTTER,\n    COMPOSER_VERTICAL_GUTTER,\n    APP_BAR_WIDTH,\n    HEADER_HEIGHT,\n    COMPOSER_HEIGHT,\n    COMPOSER_SWITCH_MODE\n} from '../../containers/ComposerContainer';\nimport { noop, debounce } from 'proton-shared/lib/helpers/function';\nimport { getRecipients } from '../../helpers/message/messages';\nimport { upload, ATTACHMENT_ACTION } from '../../helpers/attachment/attachmentUploader';\nimport { Attachment } from '../../models/attachment';\nimport { removeAttachment } from '../../api/attachments';\n\n/**\n * Create a new MessageExtended with props from both m1 and m2\n * Almost a standard deep merge but simplified with specific needs\n * m2 props will override those from m1\n */\nconst mergeMessages = (m1: MessageExtended, m2: MessageExtended): MessageExtended => ({\n    ...m1,\n    ...m2,\n    data: { ...m1.data, ...m2.data }\n});\n\nconst computeStyle = (\n    inputStyle: CSSProperties,\n    minimized: boolean,\n    maximized: boolean,\n    width: number,\n    height: number\n): CSSProperties => {\n    if (minimized) {\n        return {\n            ...inputStyle,\n            height: 'auto'\n        };\n    }\n    if (maximized) {\n        return {\n            ...inputStyle,\n            right: COMPOSER_GUTTER,\n            width: width - COMPOSER_GUTTER - APP_BAR_WIDTH,\n            height: height - COMPOSER_VERTICAL_GUTTER * 2\n        };\n    }\n    return inputStyle;\n};\n\ninterface Props {\n    style?: CSSProperties;\n    focus: boolean;\n    message?: MessageExtended;\n    mailSettings: any;\n    addresses: Address[];\n    onFocus: () => void;\n    onChange: (message: MessageExtended) => void;\n    onClose: () => void;\n}\n\nconst Composer = ({\n    style: inputStyle = {},\n    focus,\n    message: inputMessage = {},\n    mailSettings,\n    addresses,\n    onFocus,\n    onChange,\n    onClose\n}: Props) => {\n    const api = useApi();\n    const { state: minimized, toggle: toggleMinimized } = useToggle(false);\n    const { state: maximized, toggle: toggleMaximized } = useToggle(false);\n    const [opening, setOpening] = useState(true); // Needed to force focus only at first time\n    const [modelMessage, setModelMessage] = useState<MessageExtended>(inputMessage);\n    const [\n        syncedMessage,\n        { initialize, createDraft, saveDraft, send, deleteDraft },\n        { lock: syncLock, current: syncActivity }\n    ] = useMessage(inputMessage.data, mailSettings);\n    const [width, height] = useWindowSize();\n    const { createNotification } = useNotifications();\n\n    // Manage focus from the container yet keeping logic in each component\n    const addressesBlurRef = useRef<() => void>(noop);\n    const addressesFocusRef = useRef<() => void>(noop);\n    const contentFocusRef = useRef<() => void>(noop);\n\n    useEffect(() => {\n        if (!syncLock && !syncedMessage.data?.ID) {\n            createDraft(inputMessage);\n        }\n\n        if (!syncLock && syncedMessage.data?.ID && typeof syncedMessage.initialized === 'undefined') {\n            initialize();\n        }\n\n        if (modelMessage.content === undefined) {\n            setModelMessage({ ...modelMessage, content: syncedMessage.content });\n        }\n\n        onChange(syncedMessage);\n    }, [syncLock, syncedMessage]);\n\n    useEffect(() => {\n        if (!maximized && height - COMPOSER_VERTICAL_GUTTER - HEADER_HEIGHT < COMPOSER_HEIGHT - COMPOSER_SWITCH_MODE) {\n            toggleMaximized();\n        }\n        if (maximized && height - COMPOSER_VERTICAL_GUTTER - HEADER_HEIGHT > COMPOSER_HEIGHT + COMPOSER_SWITCH_MODE) {\n            toggleMaximized();\n        }\n    }, [height]);\n\n    // Manage focus at opening\n    useEffect(() => {\n        if (!opening) {\n            return;\n        }\n        setTimeout(() => {\n            if (getRecipients(syncedMessage.data).length === 0) {\n                addressesFocusRef.current();\n            } else {\n                contentFocusRef.current();\n            }\n        });\n        setOpening(false);\n    }, [syncedMessage]);\n\n    const autoSave = useCallback(\n        debounce(async (message: MessageExtended) => {\n            await saveDraft(message);\n        }, 2000),\n        [saveDraft]\n    );\n    const handleChange = (message: MessageExtended) => {\n        console.log('change', message);\n        const newModelMessage = mergeMessages(modelMessage, message);\n        setModelMessage(newModelMessage);\n        autoSave(newModelMessage);\n    };\n    const save = async (messageToSave = modelMessage) => {\n        await saveDraft(messageToSave);\n        createNotification({ text: c('Info').t`Message saved` });\n    };\n    const handleAddAttachments = async (files: File[]) => {\n        const attachments = await upload(files, modelMessage, ATTACHMENT_ACTION.ATTACHMENT, api);\n        if (attachments) {\n            const Attachments = [...(modelMessage.data?.Attachments || []), ...attachments];\n            const newModelMessage = mergeMessages(modelMessage, { data: { Attachments } });\n            setModelMessage(newModelMessage);\n            save(modelMessage);\n        }\n    };\n    const handleRemoveAttachment = (attachment: Attachment) => async () => {\n        await api(removeAttachment(attachment.ID || '', modelMessage.data?.ID || ''));\n        const Attachments = modelMessage.data?.Attachments?.filter((a: Attachment) => a.ID !== attachment.ID);\n        const newModelMessage = mergeMessages(modelMessage, { data: { Attachments } });\n        setModelMessage(newModelMessage);\n        save(modelMessage);\n    };\n    const handleSave = async () => {\n        await save();\n    };\n    const handleSend = async () => {\n        await send(modelMessage);\n        createNotification({ text: c('Success').t`Message sent` });\n        onClose();\n    };\n    const handleDelete = async () => {\n        onClose();\n        await deleteDraft();\n        createNotification({ text: c('Info').t`Message discarded` });\n    };\n    const handleClick = async () => {\n        if (minimized) {\n            toggleMinimized();\n        }\n        onFocus();\n    };\n    const handleClose = async () => {\n        onClose();\n        await save();\n    };\n\n    const style = computeStyle(inputStyle, minimized, maximized, width, height);\n\n    return (\n        <div\n            className={classnames([\n                'composer flex flex-column p0-5',\n                !focus && 'composer-blur',\n                minimized && 'composer-minimized pb0'\n            ])}\n            style={style}\n            onFocus={onFocus}\n            onClick={handleClick}\n        >\n            <ComposerTitleBar\n                message={modelMessage}\n                minimized={minimized}\n                maximized={maximized}\n                toggleMinimized={toggleMinimized}\n                toggleMaximized={toggleMaximized}\n                onClose={handleClose}\n            />\n            {!minimized && (\n                <>\n                    <ComposerMeta\n                        message={modelMessage}\n                        addresses={addresses}\n                        onChange={handleChange}\n                        addressesBlurRef={addressesBlurRef}\n                        addressesFocusRef={addressesFocusRef}\n                    />\n                    <ComposerContent\n                        message={modelMessage}\n                        onChange={handleChange}\n                        onFocus={addressesBlurRef.current}\n                        onRemoveAttachment={handleRemoveAttachment}\n                        contentFocusRef={contentFocusRef}\n                    />\n                    <ComposerActions\n                        message={modelMessage}\n                        lock={syncLock}\n                        activity={syncActivity}\n                        onAddAttachments={handleAddAttachments}\n                        onSave={handleSave}\n                        onSend={handleSend}\n                        onDelete={handleDelete}\n                    />\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default Composer;\n","/**\n * Clean template\n * @link {https://gist.github.com/dhoko/4b0c20e66c8a3f1aa431}\n */\nexport const dedentTpl = (callSite: TemplateStringsArray, ...args: string[]) => {\n    function format(str = '') {\n        let size = -1;\n        return str.replace(/\\n(\\s+)/g, (m, m1) => {\n            if (size < 0) {\n                size = m1.replace(/\\t/g, '    ').length;\n            }\n            return '\\n' + m1.slice(Math.min(m1.length, size));\n        });\n    }\n    // TODO: Could this append with TS?\n    // if (typeof callSite === 'string') {\n    //     return format(callSite);\n    // }\n    // if (typeof callSite === 'function') {\n    //     return (...args: string[]) => format(callSite(...args));\n    // }\n    const output = callSite\n        .slice(0, args.length + 1)\n        .map((text, i) => (i === 0 ? '' : args[i - 1]) + text)\n        .join('');\n    return format(output);\n};\n","import { PM_SIGNATURE } from 'proton-shared/lib/constants';\n\nimport { MESSAGE_ACTIONS } from '../../constants';\nimport { MailSettings } from '../../models/utils';\nimport { dedentTpl } from '../dedent';\nimport { replaceLineBreaks } from '../string';\nimport { message } from '../purify';\nimport { parseInDiv } from '../dom';\n\nexport const CLASSNAME_SIGNATURE_CONTAINER = 'protonmail_signature_block';\nexport const CLASSNAME_SIGNATURE_USER = 'protonmail_signature_block-user';\nexport const CLASSNAME_SIGNATURE_PROTON = 'protonmail_signature_block-proton';\nexport const CLASSNAME_SIGNATURE_EMPTY = 'protonmail_signature_block-empty';\n\n/**\n * Preformat the protonMail signature\n */\nconst getProtonSignature = (mailSettings: MailSettings) => (mailSettings.PMSignature === 0 ? '' : PM_SIGNATURE);\n\n/**\n * Check if the signature is empty for a user\n */\nconst isEmptyUserSignature = (signature: string) =>\n    !signature || signature === '<div><br /></div>' || signature === '<div><br></div>';\n\n/**\n * Generate a space tag, it can be hidden from the UX via a className\n */\nconst createSpace = (className = '') => {\n    const tagOpen = className ? `<div class=\"${className}\">` : '<div>';\n    return `${tagOpen}<br /></div>`;\n};\n\n/**\n * Generate spaces for the signature\n *     No signature: 1 space\n *     addressSignature: 2 spaces + addressSignature\n *     protonSignature: 2 spaces + protonSignature\n *     user + proton signature: 2 spaces + addressSignature + 1 space + protonSignature\n */\nconst getSpaces = (signature: string, protonSignature: string, isReply = false) => {\n    const isUserEmpty = isEmptyUserSignature(signature);\n    const isEmptySignature = isUserEmpty && !protonSignature;\n    return {\n        start: isEmptySignature ? createSpace() : createSpace() + createSpace(),\n        end: isReply ? createSpace() : '',\n        between: !isUserEmpty && protonSignature ? createSpace() : ''\n    };\n};\n\n/**\n * Generate a map of classNames used for the signature template\n */\nconst getClassNamesSignature = (signature: string, protonSignature: string) => {\n    const isUserEmpty = isEmptyUserSignature(signature);\n    const isProtonEmpty = !protonSignature;\n    return {\n        userClass: isUserEmpty ? CLASSNAME_SIGNATURE_EMPTY : '',\n        protonClass: isProtonEmpty ? CLASSNAME_SIGNATURE_EMPTY : '',\n        containerClass: isUserEmpty && isProtonEmpty ? CLASSNAME_SIGNATURE_EMPTY : ''\n    };\n};\n\n/**\n * Generate the template for a signature and clean it\n */\nconst templateBuilder = (signature = '', mailSettings: MailSettings, isReply = false, noSpace = false) => {\n    const protonSignature = getProtonSignature(mailSettings);\n    const { userClass, protonClass, containerClass } = getClassNamesSignature(signature, protonSignature);\n    const space = getSpaces(signature, protonSignature, isReply);\n\n    const template = dedentTpl`\n        <div class=\"${CLASSNAME_SIGNATURE_CONTAINER} ${containerClass}\">\n            <div class=\"${CLASSNAME_SIGNATURE_USER} ${userClass}\">\n                ${replaceLineBreaks(signature)}\n            </div>\n            ${space.between}\n            <div class=\"${CLASSNAME_SIGNATURE_PROTON} ${protonClass}\">\n                ${replaceLineBreaks(protonSignature)}\n            </div>\n        </div>\n    `;\n\n    if (!noSpace) {\n        return `${space.start}${message(template)}${space.end}`;\n    }\n\n    return message(template);\n};\n\n/**\n * Insert Signatures before the message\n *     - Always append a container signature with both user's and proton's\n *     - Theses signature can be empty but the dom remains\n */\nexport const insertSignature = (\n    content = '',\n    signature = '',\n    action: MESSAGE_ACTIONS,\n    mailSettings: MailSettings,\n    isAfter = false\n) => {\n    const position = isAfter ? 'beforeend' : 'afterbegin';\n    const template = templateBuilder(signature, mailSettings, action !== MESSAGE_ACTIONS.NEW);\n\n    // Parse the current message and append before it the signature\n    const element = parseInDiv(content);\n    element.insertAdjacentHTML(position, template);\n\n    return element.innerHTML;\n};\n","import { c } from 'ttag';\nimport { setBit } from 'proton-shared/lib/helpers/bitset';\n\nimport { Message, MessageExtended } from '../../models/message';\nimport { Address, Recipient } from '../../models/address';\nimport { MESSAGE_ACTIONS, MESSAGE_FLAGS } from '../../constants';\nimport { MailSettings } from '../../models/utils';\nimport { findSender } from '../addresses';\nimport { Attachment } from '../../models/attachment';\nimport { insertSignature } from './messageSignature';\nimport { formatFullDate } from '../date';\nimport { recipientToInput } from '../addresses';\nimport { isSent, isSentAndReceived } from './messages';\nimport { unique } from 'proton-shared/lib/helpers/array';\n\n// Reference: Angular/src/app/message/services/messageBuilder.js\n\nexport const RE_PREFIX = c('Message').t`Re:`;\nexport const FW_PREFIX = c('Message').t`Fw:`;\n\n/**\n * Format the subject to add the prefix only when the subject\n * doesn't start with it\n */\nexport const formatSubject = (subject = '', prefix = '') => {\n    const hasPrefix = new RegExp(`^${prefix}`, 'i');\n    return hasPrefix.test(subject) ? subject : `${prefix} ${subject}`;\n};\n\n/**\n * Format and build a new message\n * TODO: Define if referenceMessage could ever be defined\n */\nconst newCopy = (\n    {\n        data: { Subject = '', ToList = [], CCList = [], BCCList = [] } = {},\n        encryptedSubject = ''\n    }: MessageExtended = {},\n    useEncrypted = false\n): Message => {\n    return {\n        Subject: useEncrypted ? encryptedSubject : Subject,\n        ToList,\n        CCList,\n        BCCList\n    };\n};\n\n/**\n * Format and build a reply\n */\nconst reply = (referenceMessage: MessageExtended = {}, useEncrypted = false): Message => {\n    const Subject = formatSubject(\n        useEncrypted ? referenceMessage.encryptedSubject : referenceMessage.data?.Subject,\n        RE_PREFIX\n    );\n    const ToList =\n        isSent(referenceMessage.data) || isSentAndReceived(referenceMessage.data)\n            ? referenceMessage.data?.ToList\n            : referenceMessage.data?.ReplyTos;\n\n    return {\n        Subject,\n        ToList\n    };\n};\n\n/**\n * Format and build a replyAll\n */\nconst replyAll = (referenceMessage: MessageExtended = {}, useEncrypted = false, addresses: Address[]): Message => {\n    const { data = {}, encryptedSubject = '' } = referenceMessage;\n\n    const Subject = formatSubject(useEncrypted ? encryptedSubject : data.Subject, RE_PREFIX);\n\n    if (isSent(referenceMessage.data) || isSentAndReceived(referenceMessage.data)) {\n        return { Subject, ToList: data.ToList, CCList: data.CCList, BCCList: data.BCCList };\n    }\n\n    const ToList = data.ReplyTos;\n\n    // Remove user address in CCList and ToList\n    const userAddresses = addresses.map(({ Email = '' }) => Email.toLowerCase());\n    const CCListWithoutUserAddresses: Recipient[] = unique([...(data.ToList || []), ...(data.CCList || [])]);\n    const CCList = CCListWithoutUserAddresses.filter(\n        ({ Address = '' }) => !userAddresses.includes(Address.toLowerCase())\n    );\n\n    return { Subject, ToList, CCList };\n};\n\n/**\n * Format and build a forward\n */\nconst forward = ({ data = {}, encryptedSubject = '' }: MessageExtended = {}, useEncrypted = false): Message => {\n    const Subject = formatSubject(useEncrypted ? encryptedSubject : data.Subject, FW_PREFIX);\n\n    return { Subject, ToList: [] };\n};\n\nexport const handleActions = (\n    action: MESSAGE_ACTIONS,\n    referenceMessage: MessageExtended = {},\n    addresses: Address[] = []\n): Message => {\n    // TODO: I would prefere manage a confirm modal from elsewhere\n    // const useEncrypted = !!referenceMessage.encryptedSubject && (await promptEncryptedSubject(currentMsg));\n    const useEncrypted = !!referenceMessage.encryptedSubject;\n\n    switch (action) {\n        case MESSAGE_ACTIONS.NEW:\n            return newCopy(referenceMessage, useEncrypted);\n        case MESSAGE_ACTIONS.REPLY:\n            return reply(referenceMessage, useEncrypted);\n        case MESSAGE_ACTIONS.REPLY_ALL:\n            return replyAll(referenceMessage, useEncrypted, addresses);\n        case MESSAGE_ACTIONS.FORWARD:\n            return forward(referenceMessage, useEncrypted);\n        // No default needed as all enum values are addressed\n    }\n};\n\n/**\n * Generate blockquote of the referenced message to the content of the new mail\n */\nconst generateBlockquote = (referenceMessage: MessageExtended) => {\n    const date = formatFullDate(referenceMessage.data?.Time);\n    const sender = recipientToInput(referenceMessage.data?.Sender);\n    const previously = c('Message').t`On ${date}, ${sender} wrote:`;\n    // TODO\n    // const newContent =\n    //     referenceMessage.data?.MIMEType === MIME_TYPES.PLAINTEXT ? textToHtmlMail.parse(content) : content;\n    // TODO: To check... Should use transformations from useMessage\n    // newContent = prepareContent(content, referenceMessage, ['*'], action);\n    const newContent = referenceMessage.content;\n\n    return `‐‐‐‐‐‐‐ Original Message ‐‐‐‐‐‐‐<br>\n        ${previously}<br>\n        <blockquote class=\"protonmail_quote\" type=\"cite\">\n            ${newContent}\n        </blockquote><br>`;\n};\n\nexport const createNewDraft = (\n    action: MESSAGE_ACTIONS,\n    referenceMessage: MessageExtended = {},\n    mailSettings: MailSettings,\n    addresses: Address[]\n): MessageExtended => {\n    const MIMEType = referenceMessage.data?.MIMEType || mailSettings.DraftMIMEType;\n    const RightToLeft = mailSettings.RightToLeft;\n\n    let Flags = 0;\n    if (mailSettings.AttachPublicKey) {\n        Flags = setBit(Flags, MESSAGE_FLAGS.FLAG_PUBLIC_KEY);\n    }\n    if (mailSettings.Sign) {\n        Flags = setBit(Flags, MESSAGE_FLAGS.FLAG_SIGN);\n    }\n\n    const { Subject, ToList = [], CCList = [], BCCList = [] } = handleActions(action, referenceMessage, addresses);\n\n    const originalTo = referenceMessage.originalTo;\n\n    const senderAddress = findSender(addresses, referenceMessage.data) || {};\n\n    const AddressID = senderAddress.ID; // Set the AddressID from previous message to convert attachments on reply / replyAll / forward\n    const Sender = {\n        Name: senderAddress.DisplayName,\n        Address: senderAddress.Email\n    };\n\n    // TODO: Understand the purpose here\n    // newMsg.Body = currentMsg.Body; // We use the existing Body to speed up the draft request logic\n\n    // TODO: Handle attachments\n    // /* add inline images as attachments */\n    // const attachments = pickAttachements(currentMsg, action);\n    // newMsg.NumEmbedded = 0;\n\n    // newMsg.Attachments = pgpMimeAttachments.clean(attachments);\n    // newMsg.pgpMimeAttachments = pgpMimeAttachments.filter(attachments);\n\n    const Attachments: Attachment[] = [];\n\n    let content = action === MESSAGE_ACTIONS.NEW ? '' : generateBlockquote(referenceMessage);\n\n    const ParentID = action === MESSAGE_ACTIONS.NEW ? undefined : referenceMessage.data?.ID;\n\n    content = insertSignature(content, senderAddress.Signature, action, mailSettings);\n\n    return {\n        data: {\n            ToList,\n            CCList,\n            BCCList,\n            Subject,\n            PasswordHint: '',\n            ExpirationTime: 0,\n            ExpiresIn: 0,\n            Attachments,\n            MIMEType,\n            RightToLeft,\n            Flags,\n            Sender,\n            AddressID,\n            ParentID,\n            Unread: 0\n        },\n        content,\n        action,\n        originalTo,\n        initialized: true\n    };\n};\n","import React, { ReactNode, useState, CSSProperties } from 'react';\nimport { c } from 'ttag';\nimport { useMailSettings, useAddresses, useWindowSize, useNotifications } from 'react-components';\nimport { range } from 'proton-shared/lib/helpers/array';\n\nimport { MessageExtended } from '../models/message';\nimport Composer from '../components/composer/Composer';\nimport { MESSAGE_ACTIONS } from '../constants';\nimport { useDraft } from '../hooks/useDraft';\n\nimport '../components/composer/composer.scss';\n\nexport const COMPOSER_WIDTH = 600;\nexport const COMPOSER_HEIGHT = 520;\nexport const COMPOSER_GUTTER = 20;\nexport const COMPOSER_VERTICAL_GUTTER = 10;\nexport const COMPOSER_ZINDEX = 300;\nexport const COMPOSER_SWITCH_MODE = 20;\nexport const HEADER_HEIGHT = 80;\nexport const APP_BAR_WIDTH = 45;\n\nconst computeRightPositions = (count: number, width: number): number[] => {\n    const neededWidth = COMPOSER_WIDTH * count + COMPOSER_GUTTER * (count + 1);\n\n    if (neededWidth < width) {\n        return range(0, count).map((i) => COMPOSER_WIDTH * i + COMPOSER_GUTTER * (i + 1));\n    }\n\n    const widthToDivide = width - COMPOSER_GUTTER * 2 - COMPOSER_WIDTH;\n    const share = widthToDivide / (count - 1);\n    return range(0, count).map((i) => COMPOSER_GUTTER + share * i);\n};\n\nconst computeStyle = (index: number, hasFocus: boolean, rightPositions: number[], height: number): CSSProperties => {\n    const maxHeight = height - COMPOSER_VERTICAL_GUTTER - HEADER_HEIGHT;\n    return {\n        right: rightPositions[index],\n        zIndex: hasFocus ? COMPOSER_ZINDEX + 1 : COMPOSER_ZINDEX,\n        height: maxHeight > COMPOSER_HEIGHT ? COMPOSER_HEIGHT : maxHeight\n    };\n};\n\nexport interface ComposeExisting {\n    existingDraft: MessageExtended;\n}\n\nexport interface ComposeNew {\n    action: MESSAGE_ACTIONS;\n    referenceMessage?: MessageExtended;\n}\n\nexport type ComposeArgs = ComposeExisting | ComposeNew;\n\nexport const getComposeExisting = (composeArgs: ComposeArgs) =>\n    (composeArgs as ComposeExisting).existingDraft ? (composeArgs as ComposeExisting) : undefined;\n\nexport const getComposeNew = (composeArgs: ComposeArgs) =>\n    typeof (composeArgs as ComposeNew).action === 'number' ? (composeArgs as ComposeNew) : undefined;\n\nexport const getComposeArgs = (composeArgs: ComposeArgs) => ({\n    composeExisting: getComposeExisting(composeArgs),\n    composeNew: getComposeNew(composeArgs)\n});\n\nexport interface OnCompose {\n    (args: ComposeArgs): void;\n}\n\ninterface Props {\n    children: (props: { onCompose: OnCompose }) => ReactNode;\n}\n\nconst ComposerContainer = ({ children }: Props) => {\n    const [mailSettings, loadingSettings] = useMailSettings();\n    const [addresses, loadingAddresses] = useAddresses();\n\n    // Handling simple Message would have been simpler\n    // But in order to create new drafts from here, MessageExtended was mandatory\n    const [messages, setMessages] = useState<MessageExtended[]>([]);\n    const [focusedMessage, setFocusedMessage] = useState<MessageExtended | undefined>();\n    const [width, height] = useWindowSize();\n    const { createNotification } = useNotifications();\n    const createDraft = useDraft();\n\n    if (loadingSettings || loadingAddresses) {\n        return null;\n    }\n\n    const handleCompose = (composeArgs: ComposeArgs) => {\n        if (messages.length >= 3) {\n            createNotification({\n                type: 'error',\n                text: c('Error').t`Maximum composer reached`\n            });\n            return;\n        }\n\n        const { composeExisting, composeNew } = getComposeArgs(composeArgs);\n\n        console.log('compose', composeExisting, composeNew);\n\n        if (composeExisting) {\n            const { existingDraft } = composeExisting;\n\n            const existingMessage = messages.find((m) => m.data?.ID === existingDraft.data?.ID);\n            if (existingMessage) {\n                setFocusedMessage(existingMessage);\n                return;\n            }\n\n            setMessages([...messages, existingDraft]);\n            setFocusedMessage(existingDraft);\n            return;\n        }\n\n        if (composeNew) {\n            const { action, referenceMessage } = composeNew;\n            const newMessage = createDraft(action, referenceMessage);\n            setMessages([...messages, newMessage]);\n            setFocusedMessage(newMessage);\n        }\n    };\n    const handleChange = (oldMessage: MessageExtended) => (newMessage: MessageExtended) => {\n        const newMessages = [...messages];\n        newMessages[newMessages.indexOf(oldMessage)] = newMessage;\n        setMessages(newMessages);\n        if (oldMessage === focusedMessage) {\n            setFocusedMessage(newMessage);\n        }\n    };\n    const handleClose = (message: MessageExtended) => () => {\n        const newMessages = messages.filter((m) => m !== message);\n        setMessages(newMessages);\n        if (newMessages.length > 0) {\n            setFocusedMessage(newMessages[0]);\n        }\n    };\n    const handleFocus = (message: MessageExtended) => () => {\n        setFocusedMessage(message);\n    };\n\n    const rightPositions = computeRightPositions(messages.length, width);\n\n    return (\n        <>\n            {children({ onCompose: handleCompose })}\n            <div className=\"composer-container\">\n                {messages.map((message, i) => (\n                    <Composer\n                        key={message.data?.ID || i}\n                        style={computeStyle(i, message === focusedMessage, rightPositions, height)}\n                        message={message}\n                        focus={message === focusedMessage}\n                        mailSettings={mailSettings}\n                        addresses={addresses}\n                        onFocus={handleFocus(message)}\n                        onChange={handleChange(message)}\n                        onClose={handleClose(message)}\n                    />\n                ))}\n            </div>\n        </>\n    );\n};\n\nexport default ComposerContainer;\n","import { useCache, useMailSettings, useAddresses } from 'react-components';\n\nimport { createNewDraft } from '../helpers/message/messageDraft';\nimport { MESSAGE_ACTIONS } from '../constants';\nimport { useEffect, useCallback } from 'react';\nimport { MessageExtended } from '../models/message';\n\nconst CACHE_KEY = 'Draft';\n\n/**\n * Hooks to create new draft messages.\n * It will prepare an empty draft to be quickly reused and create other drafts with helpers\n */\nexport const useDraft = () => {\n    const cache = useCache();\n    const [mailSettings, loadingSettings] = useMailSettings();\n    const [addresses, loadingAddresses] = useAddresses();\n\n    useEffect(() => {\n        if (!loadingSettings && !loadingAddresses) {\n            const message = createNewDraft(MESSAGE_ACTIONS.NEW, undefined, mailSettings, addresses);\n            cache.set(CACHE_KEY, message);\n        }\n    }, [cache, mailSettings, addresses]);\n\n    const createDraft = useCallback(\n        (action: MESSAGE_ACTIONS, referenceMessage: MessageExtended = {}) => {\n            if (action === MESSAGE_ACTIONS.NEW && cache.has(CACHE_KEY)) {\n                return cache.get(CACHE_KEY) as MessageExtended;\n            } else {\n                return createNewDraft(action, referenceMessage, mailSettings, addresses);\n            }\n        },\n        [cache, mailSettings, addresses]\n    );\n\n    return createDraft;\n};\n","import React from 'react';\nimport { RouteChildrenProps } from 'react-router';\nimport { Route } from 'react-router-dom';\nimport { StandardPrivateApp } from 'react-components';\n\nimport {\n    UserModel,\n    MailSettingsModel,\n    UserSettingsModel,\n    SubscriptionModel,\n    OrganizationModel,\n    LabelsModel,\n    AddressesModel,\n    ConversationCountsModel,\n    MessageCountsModel\n} from 'proton-shared/lib/models';\n\nimport locales from './locales';\nimport PageContainer from './containers/PageContainer';\nimport MessageProvider from './containers/MessageProvider';\nimport ComposerContainer from './containers/ComposerContainer';\n\nexport type RouteProps = RouteChildrenProps<{ labelID: string; elementID?: string }>;\n\ninterface Props {\n    onLogout: () => void;\n}\n\nconst PrivateApp = ({ onLogout }: Props) => {\n    return (\n        <StandardPrivateApp\n            onLogout={onLogout}\n            locales={locales}\n            preloadModels={[UserModel, UserSettingsModel]}\n            eventModels={[\n                UserModel,\n                AddressesModel,\n                ConversationCountsModel,\n                MessageCountsModel,\n                MailSettingsModel,\n                UserSettingsModel,\n                LabelsModel,\n                SubscriptionModel,\n                OrganizationModel\n            ]}\n        >\n            <MessageProvider>\n                <ComposerContainer>\n                    {({ onCompose }) => (\n                        <Route\n                            path=\"/:labelID/:elementID?\"\n                            render={(routeProps: RouteProps) => <PageContainer {...routeProps} onCompose={onCompose} />}\n                        />\n                    )}\n                </ComposerContainer>\n            </MessageProvider>\n        </StandardPrivateApp>\n    );\n};\n\nexport default PrivateApp;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icons } from 'react-components';\n\nconst PublicLayout = ({ children }) => {\n    return (\n        <>\n            <main className=\"main-full flex flex-column flex-nowrap reset4print\">{children}</main>\n            <Icons />\n        </>\n    );\n};\n\nPublicLayout.propTypes = {\n    children: PropTypes.node.isRequired\n};\n\nexport default PublicLayout;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { c } from 'ttag';\nimport { LoginForm, Href, SimpleDropdown, DropdownMenu, SignInLayout } from 'react-components';\n\nconst LoginContainer = ({ stopRedirect, history, onLogin }) => {\n    const handleLogin = (...args) => {\n        stopRedirect();\n        history.push('/inbox');\n        onLogin(...args);\n    };\n    return (\n        <SignInLayout title={c('Title').t`Log in`}>\n            <h2>{c('Title').t`User log in`}</h2>\n            <LoginForm\n                onLogin={handleLogin}\n                needHelp={\n                    <SimpleDropdown content={c('Dropdown button').t`Need help?`} className=\"pm-button--link\">\n                        <DropdownMenu>\n                            <div className=\"inbl w100 pt0-5 pb0-5 ellipsis\">\n                                <Link to=\"/reset-password\">{c('Link').t`Reset password`}</Link>\n                            </div>\n                            <div className=\"inbl w100 pt0-5 pb0-5 ellipsis\">\n                                <Link to=\"/forgot-username\">{c('Link').t`Forgot username?`}</Link>\n                            </div>\n                            <div className=\"inbl w100 pt0-5 pb0-5 ellipsis\">\n                                <Href url=\"https://protonmail.com/support/knowledge-base/common-login-problems/\">{c(\n                                    'Link'\n                                ).t`Common login problems`}</Href>\n                            </div>\n                            <div className=\"inbl w100 pt0-5 pb0-5 ellipsis\">\n                                <Href url=\"https://protonmail.com/support/\">{c('Link').t`Contact support`}</Href>\n                            </div>\n                        </DropdownMenu>\n                    </SimpleDropdown>\n                }\n            />\n        </SignInLayout>\n    );\n};\n\nLoginContainer.propTypes = {\n    history: PropTypes.object.isRequired,\n    location: PropTypes.object.isRequired,\n    onLogin: PropTypes.func.isRequired,\n    stopRedirect: PropTypes.func.isRequired\n};\n\nexport default LoginContainer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// eslint-disable-next-line\nconst SignupContainer = ({ match, history, onLogin, stopRedirect }) => {\n    return <>SignupContainer</>;\n};\n\nSignupContainer.propTypes = {\n    stopRedirect: PropTypes.func.isRequired,\n    onLogin: PropTypes.func.isRequired,\n    match: PropTypes.shape({\n        params: PropTypes.shape({\n            step: PropTypes.string\n        })\n    }).isRequired,\n    history: PropTypes.shape({\n        push: PropTypes.func.isRequired,\n        location: PropTypes.shape({\n            search: PropTypes.string.isRequired,\n            state: PropTypes.oneOfType([\n                PropTypes.shape({\n                    selector: PropTypes.string.isRequired,\n                    token: PropTypes.string.isRequired\n                }),\n                PropTypes.shape({\n                    Coupon: PropTypes.shape({ Code: PropTypes.string })\n                })\n            ])\n        }).isRequired\n    }).isRequired\n};\n\nexport default SignupContainer;\n","import React, { useState, useRef, useLayoutEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Route, Switch } from 'react-router-dom';\nimport { Loader, ModalsChildren, ResetPasswordContainer, ForgotUsernameContainer } from 'react-components';\nimport { loadOpenPGP } from 'proton-shared/lib/openpgp';\n\nimport PublicLayout from './components/layout/PublicLayout';\nimport LoginContainer from './containers/LoginContainer';\nimport SignupContainer from './containers/SignupContainer';\nimport { Redirect } from 'react-router';\n\nconst PublicApp = ({ onLogin }) => {\n    const hasStopRedirect = useRef(false);\n    const stopRedirect = () => (hasStopRedirect.current = true);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(false);\n\n    useLayoutEffect(() => {\n        (async () => {\n            await Promise.all([loadOpenPGP()]);\n        })()\n            .then(() => setLoading(false))\n            .catch(() => setError(true));\n    }, []);\n\n    if (error) {\n        return 'OpenPGP failed to load. Handle better.';\n    }\n\n    if (loading) {\n        return <Loader />;\n    }\n\n    return (\n        <>\n            <ModalsChildren />\n            <PublicLayout>\n                <Switch>\n                    <Route path=\"/reset-password\" render={() => <ResetPasswordContainer onLogin={onLogin} />} />\n                    <Route path=\"/forgot-username\" component={ForgotUsernameContainer} />\n                    <Route\n                        path=\"/login\"\n                        render={({ history, location }) => (\n                            <LoginContainer\n                                stopRedirect={stopRedirect}\n                                history={history}\n                                location={location}\n                                onLogin={onLogin}\n                            />\n                        )}\n                    />\n                    <Route\n                        path=\"/signup/:step?\"\n                        render={({ history, match }) => (\n                            <SignupContainer\n                                stopRedirect={stopRedirect}\n                                history={history}\n                                match={match}\n                                onLogin={onLogin}\n                            />\n                        )}\n                    />\n                    <Route\n                        render={({ location }) => {\n                            /**\n                             * Needed due to the race condition between onLogin and history.push\n                             * A state on the location is not possible because the location is not changed when logging out.\n                             */\n                            if (hasStopRedirect.current) {\n                                return null;\n                            }\n                            return (\n                                <Redirect\n                                    to={{\n                                        pathname: '/login',\n                                        state: { from: location }\n                                    }}\n                                />\n                            );\n                        }}\n                    />\n                </Switch>\n            </PublicLayout>\n        </>\n    );\n};\n\nPublicApp.propTypes = {\n    onLogin: PropTypes.func.isRequired\n};\n\nexport default PublicApp;\n","import { hot } from 'react-hot-loader/root';\nimport React from 'react';\nimport { ProtonApp, useAuthentication } from 'react-components';\n\nimport * as config from './config';\nimport PrivateApp from './PrivateApp';\nimport PublicApp from './PublicApp';\n\nimport './app.scss';\n\nconst Setup = () => {\n    const { UID, login, logout } = useAuthentication();\n    if (UID) {\n        return <PrivateApp onLogout={logout} />;\n    }\n    return <PublicApp onLogin={login} />;\n};\n\nconst App = () => {\n    return (\n        <ProtonApp config={config}>\n            <Setup />\n        </ProtonApp>\n    );\n};\n\nexport default hot(App);\n","import ReactDOM from 'react-dom';\nimport React from 'react';\nimport 'core-js/stable';\nimport 'regenerator-runtime/runtime';\nimport 'yetch/polyfill';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.querySelector('.app-root'));\n","var map = {\n\t\"./3-d-secure.svg\": \"0gKn\",\n\t\"./american-express-safekey.svg\": \"Jui7\",\n\t\"./cc-american-express.svg\": \"/qD2\",\n\t\"./cc-dankort.svg\": \"0T0d\",\n\t\"./cc-diners-club.svg\": \"vuvo\",\n\t\"./cc-discover.svg\": \"AZZk\",\n\t\"./cc-forbrugs.svg\": \"k2eZ\",\n\t\"./cc-jcb.svg\": \"7Amw\",\n\t\"./cc-maestro.svg\": \"lXKh\",\n\t\"./cc-mastercard.svg\": \"ZUPP\",\n\t\"./cc-paypal.svg\": \"egYP\",\n\t\"./cc-unionpay.svg\": \"ma7A\",\n\t\"./cc-visa.svg\": \"vO2o\",\n\t\"./cc-visaelectron.svg\": \"RMFI\",\n\t\"./discover-protectbuy.svg\": \"qsy5\",\n\t\"./mastercard-securecode.svg\": \"6Bn0\",\n\t\"./verified-by-visa.svg\": \"Q7qE\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"5FMj\";","var map = {\n\t\"./af/index.js\": [\n\t\t\"IqAn\",\n\t\t11\n\t],\n\t\"./ar-DZ/index.js\": [\n\t\t\"JVC1\",\n\t\t12\n\t],\n\t\"./ar-MA/index.js\": [\n\t\t\"+7lX\",\n\t\t13\n\t],\n\t\"./ar-SA/index.js\": [\n\t\t\"xMju\",\n\t\t14\n\t],\n\t\"./az/index.js\": [\n\t\t\"jEeQ\",\n\t\t15\n\t],\n\t\"./be/index.js\": [\n\t\t\"YEhR\",\n\t\t3\n\t],\n\t\"./bg/index.js\": [\n\t\t\"isx8\",\n\t\t4\n\t],\n\t\"./bn/index.js\": [\n\t\t\"+b7I\",\n\t\t16\n\t],\n\t\"./ca/index.js\": [\n\t\t\"Vwa+\",\n\t\t17\n\t],\n\t\"./cs/index.js\": [\n\t\t\"dvhP\",\n\t\t18\n\t],\n\t\"./cy/index.js\": [\n\t\t\"HQUR\",\n\t\t19\n\t],\n\t\"./da/index.js\": [\n\t\t\"7ur/\",\n\t\t20\n\t],\n\t\"./de/index.js\": [\n\t\t\"bgw5\",\n\t\t21\n\t],\n\t\"./el/index.js\": [\n\t\t\"dH0v\",\n\t\t22\n\t],\n\t\"./en-AU/index.js\": [\n\t\t\"VHew\",\n\t\t23\n\t],\n\t\"./en-CA/index.js\": [\n\t\t\"wXhn\",\n\t\t24\n\t],\n\t\"./en-GB/index.js\": [\n\t\t\"nwJ3\",\n\t\t25\n\t],\n\t\"./en-US/index.js\": [\n\t\t\"IogR\",\n\t\t26\n\t],\n\t\"./eo/index.js\": [\n\t\t\"UB7v\",\n\t\t27\n\t],\n\t\"./es/index.js\": [\n\t\t\"/S0t\",\n\t\t28\n\t],\n\t\"./et/index.js\": [\n\t\t\"Br0m\",\n\t\t29\n\t],\n\t\"./fa-IR/index.js\": [\n\t\t\"gEFy\",\n\t\t30\n\t],\n\t\"./fi/index.js\": [\n\t\t\"ndVD\",\n\t\t31\n\t],\n\t\"./fr-CA/index.js\": [\n\t\t\"KTij\",\n\t\t32\n\t],\n\t\"./fr/index.js\": [\n\t\t\"LKA2\",\n\t\t33\n\t],\n\t\"./gl/index.js\": [\n\t\t\"4bge\",\n\t\t34\n\t],\n\t\"./gu/index.js\": [\n\t\t\"3t4y\",\n\t\t35\n\t],\n\t\"./he/index.js\": [\n\t\t\"75M+\",\n\t\t36\n\t],\n\t\"./hi/index.js\": [\n\t\t\"CUe2\",\n\t\t37\n\t],\n\t\"./hr/index.js\": [\n\t\t\"L9Jq\",\n\t\t38\n\t],\n\t\"./hu/index.js\": [\n\t\t\"Nm+E\",\n\t\t39\n\t],\n\t\"./hy/index.js\": [\n\t\t\"netp\",\n\t\t40\n\t],\n\t\"./id/index.js\": [\n\t\t\"A6C3\",\n\t\t41\n\t],\n\t\"./is/index.js\": [\n\t\t\"N4bE\",\n\t\t42\n\t],\n\t\"./it/index.js\": [\n\t\t\"hmb4\",\n\t\t43\n\t],\n\t\"./ja/index.js\": [\n\t\t\"uAXs\",\n\t\t44\n\t],\n\t\"./ka/index.js\": [\n\t\t\"pwL5\",\n\t\t45\n\t],\n\t\"./kk/index.js\": [\n\t\t\"zGPi\",\n\t\t5\n\t],\n\t\"./ko/index.js\": [\n\t\t\"iW8+\",\n\t\t46\n\t],\n\t\"./lt/index.js\": [\n\t\t\"xj+b\",\n\t\t47\n\t],\n\t\"./lv/index.js\": [\n\t\t\"x5pY\",\n\t\t6\n\t],\n\t\"./ms/index.js\": [\n\t\t\"gUWk\",\n\t\t48\n\t],\n\t\"./nb/index.js\": [\n\t\t\"73vv\",\n\t\t49\n\t],\n\t\"./nl/index.js\": [\n\t\t\"hCQt\",\n\t\t50\n\t],\n\t\"./nn/index.js\": [\n\t\t\"vORL\",\n\t\t51\n\t],\n\t\"./pl/index.js\": [\n\t\t\"B6yL\",\n\t\t7\n\t],\n\t\"./pt-BR/index.js\": [\n\t\t\"2dYp\",\n\t\t52\n\t],\n\t\"./pt/index.js\": [\n\t\t\"gdks\",\n\t\t53\n\t],\n\t\"./ro/index.js\": [\n\t\t\"r2yp\",\n\t\t54\n\t],\n\t\"./ru/index.js\": [\n\t\t\"nz/o\",\n\t\t8\n\t],\n\t\"./sk/index.js\": [\n\t\t\"Wqan\",\n\t\t9\n\t],\n\t\"./sl/index.js\": [\n\t\t\"KYSo\",\n\t\t55\n\t],\n\t\"./sr/index.js\": [\n\t\t\"7mU3\",\n\t\t56\n\t],\n\t\"./sv/index.js\": [\n\t\t\"hxgj\",\n\t\t57\n\t],\n\t\"./ta/index.js\": [\n\t\t\"1ssA\",\n\t\t58\n\t],\n\t\"./te/index.js\": [\n\t\t\"SGoj\",\n\t\t59\n\t],\n\t\"./th/index.js\": [\n\t\t\"Pk+z\",\n\t\t60\n\t],\n\t\"./tr/index.js\": [\n\t\t\"3ZWG\",\n\t\t61\n\t],\n\t\"./ug/index.js\": [\n\t\t\"yT3n\",\n\t\t62\n\t],\n\t\"./uk/index.js\": [\n\t\t\"LCGg\",\n\t\t10\n\t],\n\t\"./vi/index.js\": [\n\t\t\"dGQT\",\n\t\t63\n\t],\n\t\"./zh-CN/index.js\": [\n\t\t\"UJqf\",\n\t\t64\n\t],\n\t\"./zh-TW/index.js\": [\n\t\t\"zn9v\",\n\t\t65\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"YO3j\";\nmodule.exports = webpackAsyncContext;","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"dTS7\";"],"sourceRoot":""}