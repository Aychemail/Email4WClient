{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/app/config.ts","webpack:///./src/app/locales.js","webpack:///./src/app/components/header/AdvancedSearchDropdown.js","webpack:///./src/app/components/header/PrivateHeader.js","webpack:///./src/app/components/sidebar/LocationAside.js","webpack:///./src/app/components/sidebar/RefreshButton.js","webpack:///./src/app/constants.ts","webpack:///./src/app/helpers/element.js","webpack:///./src/app/components/sidebar/PrivateSidebar.js","webpack:///./src/app/components/layout/PrivateLayout.js","webpack:///./src/app/components/toolbar/ToolbarButton.js","webpack:///./src/app/components/toolbar/ToolbarSeparator.js","webpack:///./src/app/components/toolbar/ReadUnreadButtons.js","webpack:///./src/app/components/toolbar/ToolbarDropdown.js","webpack:///./src/app/components/toolbar/LayoutDropdown.js","webpack:///./src/app/components/toolbar/MoveButtons.js","webpack:///./src/app/components/toolbar/DeleteButton.js","webpack:///./src/app/components/toolbar/SortDropdown.js","webpack:///./src/app/components/toolbar/FilterDropdown.js","webpack:///./src/app/components/toolbar/SelectAll.js","webpack:///./src/app/components/dropdown/MoveDropdown.js","webpack:///./src/app/components/dropdown/LabelDropdown.js","webpack:///./src/app/components/toolbar/BackButton.js","webpack:///./src/app/components/toolbar/Toolbar.js","webpack:///./src/app/helpers/message.ts","webpack:///./src/app/components/list/ItemCheckbox.js","webpack:///./src/app/components/list/ItemStar.js","webpack:///./src/app/components/list/ItemLabels.js","webpack:///./src/app/components/list/ItemAttachmentIcon.js","webpack:///./src/app/components/list/ItemLocation.js","webpack:///./src/app/components/list/ItemDate.js","webpack:///./src/app/helpers/date.js","webpack:///./src/app/components/conversation/NumMessages.js","webpack:///./src/app/components/list/ItemColumnLayout.js","webpack:///./src/app/components/list/ItemRowLayout.js","webpack:///./src/app/components/list/Item.js","webpack:///./src/app/helpers/conversation.js","webpack:///./src/app/components/list/List.js","webpack:///./src/app/helpers/string.js","webpack:///./src/app/helpers/purify.js","webpack:///./src/app/helpers/dom.js","webpack:///./src/app/helpers/transforms/transformEscape.js","webpack:///./src/app/helpers/transforms/transformLinks.js","webpack:///./src/app/helpers/image.js","webpack:///./src/app/helpers/embedded/embeddedUtils.js","webpack:///./src/app/helpers/embedded/embeddedStore.js","webpack:///./src/app/helpers/embedded/embeddedFinder.js","webpack:///./src/app/helpers/embedded/embeddedParser.js","webpack:///./src/app/helpers/embedded/embedded.js","webpack:///./src/app/helpers/transforms/transformEmbedded.js","webpack:///./src/app/helpers/transforms/transformWelcome.js","webpack:///./src/app/helpers/transforms/transformBlockquotes.js","webpack:///./src/app/helpers/transforms/transformRemote.js","webpack:///./src/app/helpers/transforms/transformStylesheet.js","webpack:///./src/app/helpers/transforms/transformBase.js","webpack:///./src/app/hooks/useMarkAsRead.js","webpack:///./src/app/api/attachments.js","webpack:///./src/app/helpers/attachments.ts","webpack:///./src/app/helpers/signatures.js","webpack:///./src/app/hooks/useSignatures.js","webpack:///./src/app/hooks/useAttachments.ts","webpack:///./src/app/hooks/useComputeMessage.ts","webpack:///./src/app/hooks/useLoadMessage.js","webpack:///./src/app/hooks/useDecryptMessage.ts","webpack:///./src/app/components/message/MessageBody.tsx","webpack:///./src/app/helpers/displaySignature.js","webpack:///./src/app/helpers/encryptionType.js","webpack:///./src/app/components/message/MessageLock.js","webpack:///./src/app/components/message/header/HeaderCollapsed.js","webpack:///./src/app/components/message/extras/ExtraImages.js","webpack:///./src/app/components/message/extras/ExtraUnsubscribe.js","webpack:///./src/app/components/message/header/HeaderExtra.js","webpack:///./src/app/components/message/header/HeaderRecipientsSimple.js","webpack:///./src/app/components/message/header/HeaderRecipientsDetails.js","webpack:///./src/app/components/message/header/HeaderExpanded.js","webpack:///./src/app/components/message/MessageAttachment.js","webpack:///./src/app/components/message/MessageFooter.js","webpack:///./src/app/components/message/MessageView.tsx","webpack:///./src/app/components/conversation/ConversationView.js","webpack:///./src/app/components/view/PlaceholderView.js","webpack:///./src/app/containers/elements.js","webpack:///./src/app/containers/MailboxContainer.js","webpack:///./src/app/PrivateAppRoutes.js","webpack:///./src/app/PrivateApp.js","webpack:///./src/app/components/layout/PublicLayout.js","webpack:///./src/app/containers/LoginContainer.js","webpack:///./src/app/containers/SignupContainer.js","webpack:///./src/app/PublicApp.js","webpack:///./src/app/App.js","webpack:///./src/app/index.js","webpack:///./node_modules/design-system/assets/img/shared/bank-icons sync .svg$","webpack:///./node_modules/date-fns/locale lazy ^\\.\\/[a-z]{2}(-([A-Z]{2}))","webpack:///./src/i18n lazy .json$"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","sriHashes","exports","module","l","e","promises","installedChunkData","promise","Promise","resolve","reject","onScriptComplete","script","document","createElement","charset","timeout","nc","setAttribute","src","p","jsonpScriptSrc","indexOf","window","location","origin","crossOrigin","error","Error","event","onerror","onload","clearTimeout","chunk","errorType","type","realSrc","target","message","name","request","undefined","setTimeout","integrity","head","appendChild","all","m","c","d","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","oe","err","console","jsonpArray","oldJsonpFunction","slice","CLIENT_ID","CLIENT_TYPE","CLIENT_SECRET","APP_VERSION","APP_NAME","API_URL","SECURE_URL","API_VERSION","DATE_VERSION","CHANGELOG_PATH","VERSION_PATH","SENTRY_RELEASE","SENTRY_DSN","locales","require","keys","reduce","acc","ALL","INBOX","MAILBOX_LABEL_IDS","TRASH","SPAM","ARCHIVE","AdvancedSearchDropdown","history","formRef","useRef","useState","model","updateModel","useLabels","labels","locationOptions","text","concat","filter","Exclusive","LABEL_EXCLUSIVE","FOLDER","map","ID","Name","LABEL","SimpleDropdown","originalPlacement","hasCaret","content","Icon","className","ref","onSubmit","current","reset","Label","htmlFor","Select","id","options","onChange","PrimaryButton","PrivateHeader","expanded","onToggleExpand","onSearch","useUser","hasPaidMail","MainLogo","url","Hamburger","onToggle","Searchbox","placeholder","advanced","TopNavbar","UpgradeButton","external","TopNavbarLink","to","icon","aria-current","SupportDropdown","LocationAside","action","unread","RefreshButton","useEventManager","useLoading","loading","withLoading","disabled","onClick","a","async","preventDefault","handleRefresh","fill","ELEMENT_TYPES","LABEL_IDS_TO_HUMAN","ALL_DRAFTS","ALL_SENT","ALL_MAIL","SENT","DRAFTS","STARRED","HUMAN_TO_LABEL_IDS","entries","VERIFICATION_STATUS","MESSAGE_FLAGS","getCurrentType","labelID","mailSettings","includes","ViewMode","VIEW_MODE","GROUP","isConversation","PrivateSidebar","currentLabelID","useConversationCounts","conversationCounts","loadingConversationCounts","useMessageCounts","messageCounts","loadingMessageCounts","useMailSettings","loadingMailSettings","loadingLabels","ShowMoved","unreadMap","useMemo","counters","Array","isArray","toMap","Loader","getAside","Unread","list","aside","link","SHOW_MOVED","redirectTo","Color","color","data-expanded","NavMenu","PrivateLayout","children","mainAreaRef","setExpand","useEffect","pathname","AppsSidebar","items","StorageSpaceStatus","Href","keyword","log","normalize","Route","path","render","Provider","ToolbarButton","rest","classnames","ToolbarSeparator","ReadUnreadButtons","selectedIDs","api","useApi","MessageButtons","MESSAGE_BUTTONS","READ_UNREAD","markAs","status","isUnread","markConversationsAsUnread","markConversationsAsRead","markMessageAsUnread","markMessageAsRead","buttons","title","UNREAD_READ","reverse","ToolbarDropdown","autoClose","caretClassName","LayoutDropdown","ViewLayout","VIEW_LAYOUT","COLUMN","currentLayoutIcon","updateLayout","viewLayout","updateViewLayout","DropdownMenu","DropdownMenuButton","ROW","MoveButtons","createNotification","useNotifications","handleMove","LabelID","labelConversations","labelMessages","IDs","displayTrash","displayInbox","displayArchive","displaySpam","DeleteButton","createModal","useModals","displayDelete","displayEmpty","Confirm","ngettext","msgid","confirm","ErrorButton","onConfirm","onClose","Alert","deleteConversations","deleteMessages","emptyLabel","TIME","SIZE","ICONS","SortDropdown","sort","desc","onSort","Sort","Desc","FilterDropdown","onFilter","SelectAll","checked","onCheck","Checkbox","MoveDropdown","search","updateSearch","normSearch","folders","folder","Boolean","Tooltip","SearchInput","autoFocus","index","LabelDropdown","lastChecked","setLastChecked","alsoArchive","updateAlsoArchive","selectedLabelIDs","updateSelectedLabelIDs","handleCheck","shiftKey","nativeEvent","getAttribute","labelIDs","start","findIndex","end","Math","min","max","update","data-label-id","labelAction","unlabelAction","unlabelMessages","unlabelConversations","BackButton","Toolbar","elementID","checkAll","onCheckAll","onPrevious","onNext","onBack","isColumnMode","ItemCheckbox","FLAG_RECEIVED","FLAG_SENT","FLAG_RECEIPT_REQUEST","FLAG_IMPORTED","FLAG_REPLIED","FLAG_REPLIEDALL","FLAG_FORWARDED","FLAG_INTERNAL","FLAG_AUTO","FLAG_E2E","FLAG_SIGN","FLAG_PUBLIC_KEY","PLAINTEXT","MIME_TYPES","MIME","hasFlag","flag","Flags","hasBit","isImported","isInternal","isAuto","isReceived","isSent","isDraft","isE2E","isSentEncrypted","isInternalEncrypted","isPGPEncrypted","isExternal","inSigningPeriod","Time","isMIME","MIMEType","getSender","Sender","Address","getParsedHeaders","parameter","ParsedHeaders","getAttachments","Attachments","hasAttachments","ItemStar","element","isStarred","Labels","LabelIDs","iconName","ItemLabels","onUnlabel","labelsMap","orderBy","style","backgroundColor","borderColor","Link","ItemAttachmentIcon","ContextNumAttachments","ItemLocation","FORMATERS","simple","date","format","isToday","locale","dateLocale","full","distance","dateFnsFormatDistanceToNow","addSuffix","ItemDate","formater","ContextTime","Date","getDate","NumMessages","conversation","ItemColumnLayout","senders","Subject","ItemRowLayout","Size","size","humanSize","SENT_ALL","DRAFTS_ALL","Item","displayRecipients","Senders","getSenders","recipients","Recipients","ToList","CCList","BCCList","getMessageRecipients","ItemLayout","classList","contains","closest","stopPropagation","data-element-id","getInitial","join","List","elements","checkedIDs","elementIDs","OPEN_TAG_AUTOCOMPLETE","CLOSE_TAG_AUTOCOMPLETE","OPEN_TAG_AUTOCOMPLETE_RAW","CLOSE_TAG_AUTOCOMPLETE_RAW","ucFirst","input","charAt","toUpperCase","uniqID","random","toString","now","REGEXP_URL_ATTR","RegExp","attr","LIST_PROTON_ATTR","MAP_PROTON_ATTR","CONFIG","default","ALLOWED_URI_REGEXP","ADD_TAGS","ADD_ATTR","FORBID_TAGS","FORBID_ATTR","raw","WHOLE_DOCUMENT","RETURN_DOM","html","protonizer","ALLOW_UNKNOWN_PROTOCOLS","RETURN_DOM_FRAGMENT","escapeURLinStyle","handleEscape","unescapedEncoding","radix","ignored","val","String","fromCodePoint","Number","parseInt","string","replace","unescape","_","char","escapeFlag","escapedStyle","escape","beforeSanitizeElements","node","nodeType","from","attributes","forEach","item","removeAttribute","escaped","purifyHTMLHooks","active","DOMPurify","addHook","removeHook","getConfig","clean","config","clearConfig","sanitize","attachHooks","process","matches","selector","msMatchesSelector","FORBIDDEN_SVG","HTML_STRING","VERIFY_ELEMENT_END","REGEXP_SVG_BREAK","removeBase64","cache","activeCache","match","hash","put","escapeSVG","transformEscape","activeHooks","purifyHTML","PROTOCOLS","ALL_PROTOCOLS","MAP","getNormalizedHref","trim","toLowerCase","sanitizeRelativeHttpLinks","some","proto","startsWith","linkUsesProtocols","nodeName","disableAnchors","href","isEmptyAnchor","pointerEvents","transformLinks","querySelectorAll","hasHTTP","isRelative","httpInNewTab","noReferrerInfo","isInlineEmbedded","isEmbedded","REGEXP_CID_START","convertMimeHeaders","headers","split","formatted","mimemessage","factory","trimQuotes","substr","readCID","Headers","findEmbedded","cid","Blobs","MAP_BLOBS","CIDList","PREFIX_DRAFT","urlCreator","URL","webkitURL","getHashKey","msg","ConversationID","store","noop","blob","Blob","imageUrl","createObjectURL","isContentLocation","getBlob","getMessageCIDs","NumEmbedded","embeddedUtils","embedded","find","embeddedAttachments","attachments","attachment","embeddedStore","listInlineAttachments","MAP_CID","contentId","contentName","contentDisposition","params","filename","ENCRYPTED_STATUS","invalidSignature","askAgain","actionDirection","nodes","add","mutateHTML","direction","triggerSigVerification","attachmentLoader","then","wait","decrypt","embeddedFinder","show","showEmbeddedImages","ShowImages","SHOW_IMAGES","EMBEDDED","sigList","has","KeyPackets","Encrypted","storeAttachement","buffer","innerHTML","escapeSrc","unescapeSrc","parser","isOutside","numEmbedded","embeddedParser","getUrl","getAttachment","wrapImage","img","container","wrapper","firstChild","outerHTML","parentNode","insertBefore","remove","wrap","transformEmbedded","images","isReplyForward","test","showEmbedded","image","parentElement","removeChild","transformWelcome","str","quotes","transformBlockquotes","blockquotes","parent","textContent","found","blockquote","child","before","after","button","transformStylesheet","firstElement","firstElementChild","position","WHITELIST","ATTRIBUTES","REGEXP_FIXER","prepareInjection","hasAttribute","mapAttributes","transformRemote","showRemoteImages","inputShowImages","regex","showImages","REMOTE","hasImages","$1","substring","ELEMENTS","attribute","transformBase","base","querySelector","BASE_URL","baseUrl","getBaseURL","bindAttribute","el","keyproton","ptValue","attachmentID","method","output","getCacheKey","sessionKey","at","Uint8Array","decryptMessage","getMessage","sessionKeys","signatures","fromCache","getRequest","getSessionKey","keyPackets","binaryStringToArray","decodeBase64","privateKeys","decryptSessionKey","getDecryptedAttachmentAPI","decrypted","set","concatArrays","getDecryptedAttachment","cadata","getAndVerify","reverify","verify","Preview","formatDownload","isError","generateDownload","downloadFile","download","att","formatDownloadAll","currentName","ext","pop","newName","getZipAttachmentName","downloadAll","zip","JSZip","file","generateAsync","NOT_SIGNED","SIGNED_AND_INVALID","SIGNED_NO_PUB_KEY","SIGNED_AND_VALID","verifyAllSignatures","decryptedAttachment","publicKeys","attMessage","createMessage","asyncSigVerifiers","signature","verifyMessage","verified","embeddedSigs","Signature","getSignature","statusPerSig","pmcryptoVerified","useSignatures","useCache","Map","useSignaturesCache","useCallback","verifySignature","useAttachments","useAttachmentsCache","downloadAttachment","downloadAllAttachment","useComputeMessage","getPublicKeys","getAddressKeys","load","Body","Message","markAsRead","useMarkAsRead","useGetPublicKeys","useGetAddressKeys","AddressID","addressKeys","splitKeys","decryptMessageLegacy","messageDate","signedInvalid","signedPubkey","transformAttachements","transforms","run","compute","runSerial","computes","messagePromise","initialize","loadRemoteImages","loadEmbeddedImages","MessageBody","plain","isPlainText","dangerouslySetInnerHTML","__html","I18N","pm","pgp","clear","sentEncrypted","auto","sentClear","draft","getFromType","isExternalEncrypted","MessageLock","displaySignature","displaySignatureStatus","pgpEncrypted","tooltip","encType","getEncryptionType","internal","HeaderCollapsed","onExpand","inOutClass","ExtraImages","onLoadImages","ExtraUnsubscribe","getListUnsubscribe","HeaderExtra","onLoadRemoteImages","onLoadEmbeddedImages","HeaderRecipientsSimple","RecipientsList","HeaderRecipientsDetails","HeaderExpanded","messageLoaded","onCollapse","useToggle","showDetails","state","toggleDetails","toggle","Group","ButtonGroup","OUTER_MAP_CLASSNAME","mp3","javascript","vcard","xls","mov","pdf","power","word","INNER_MAP_CLASSNAME","MessageAttachment","showLoader","setShowLoader","showInstant","setShowInstant","humanAttachmentSize","outerIcon","single","getInnerFileIconType","disposition","isEmbeddedLocal","classNames","showInner","aria-busy","MessageFooter","humanAttachmentsSize","attachmentsSize","numAttachments","numPureAttachments","MessageView","inputMessage","initialExpand","conversationIndex","setExpanded","loaded","setLoaded","setMessage","elementRef","scrollIntoView","behavior","block","handleExpand","ConversationView","conversationID","messageID","updateConversation","messages","updateMessages","setInitialExpand","getConversation","Conversation","Messages","requestConversation","PlaceholderView","onUncheckAll","welcomeRef","total","user","conversationManySvg","conversationSingleSvg","alt","Button","reportBugButton","LinkButton","AuthenticatedBugModal","userName","capitalize","hadPaidMail","jt","welcomeMessageSvg","Order","NumUnread","NumAttachments","ExpirationTime","ContextSize","ContextNumMessages","ContextNumUnread","MailboxContainer","checkedElements","setCheckedElements","setCheckAll","updateSort","updateDesc","contactID","handleCheckAll","PrivateAppRoutes","Switch","ErrorBoundary","PrivateApp","onLogout","StandardPrivateApp","preloadModels","UserModel","UserSettingsModel","eventModels","AddressesModel","ConversationCountsModel","MessageCountsModel","MailSettingsModel","LabelsModel","SubscriptionModel","OrganizationModel","PublicLayout","Icons","LoginContainer","stopRedirect","onLogin","SignInLayout","LoginForm","needHelp","SignupContainer","propTypes","PropTypes","func","isRequired","shape","step","oneOfType","token","Coupon","Code","PublicApp","hasStopRedirect","setLoading","setError","useLayoutEffect","loadOpenPGP","catch","ResetPasswordContainer","component","ForgotUsernameContainer","Setup","useAuthentication","UID","login","logout","hot","ProtonApp","ReactDOM","webpackContext","req","webpackContextResolve","code","webpackAsyncContext","ids","webpackEmptyAsyncContext"],"mappings":"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","file":"index.0f12c57e.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// script path function\n \tfunction jsonpScriptSrc(chunkId) {\n \t\treturn __webpack_require__.p + \"\" + ({}[chunkId]||chunkId) + \".\" + {\"3\":\"8cc6bd05\",\"4\":\"289eac7a\",\"5\":\"34349e75\",\"6\":\"87e23fae\",\"7\":\"ce6bb801\",\"8\":\"4fb07aef\",\"9\":\"947f57b2\",\"10\":\"c500f9e0\",\"11\":\"6e754a52\",\"12\":\"2de2dcec\",\"13\":\"26218c77\",\"14\":\"4232a5ec\",\"15\":\"609df72e\",\"16\":\"012fa836\",\"17\":\"bdebd471\",\"18\":\"08ebfe2c\",\"19\":\"16f6169c\",\"20\":\"d736650b\",\"21\":\"10671e7d\",\"22\":\"a56c611e\",\"23\":\"66ca65c5\",\"24\":\"30469ae3\",\"25\":\"ac5f5d69\",\"26\":\"b6da30c6\",\"27\":\"1e187bdf\",\"28\":\"1dbedd03\",\"29\":\"57a08404\",\"30\":\"051b1870\",\"31\":\"94cd7924\",\"32\":\"c82c4169\",\"33\":\"fec249b2\",\"34\":\"091970ef\",\"35\":\"990b39c7\",\"36\":\"6bd0e35d\",\"37\":\"99015436\",\"38\":\"41c9f701\",\"39\":\"459f1e59\",\"40\":\"628e857b\",\"41\":\"184cdca1\",\"42\":\"e893aea6\",\"43\":\"a458ed20\",\"44\":\"37493299\",\"45\":\"4deed603\",\"46\":\"4c1a2f55\",\"47\":\"26991b7c\",\"48\":\"e415b576\",\"49\":\"59a11d7d\",\"50\":\"56cee7c7\",\"51\":\"eb96219e\",\"52\":\"896d8463\",\"53\":\"6e331f91\",\"54\":\"752e1167\",\"55\":\"ac9be0c7\",\"56\":\"92580cea\",\"57\":\"ba7fd9cf\",\"58\":\"fe25594a\",\"59\":\"fbd3d022\",\"60\":\"f764d01c\",\"61\":\"9d38de72\",\"62\":\"ac5ad630\",\"63\":\"81184869\",\"64\":\"d08b3883\"}[chunkId] + \".chunk.js\"\n \t}\n \tvar sriHashes = {\"3\":\"sha384-9934ABN6uqPEPFosQLqxuVhvYUV4okLUNbM0wPFOjE32xxR0586aPIAfPwsnK0aM\",\"4\":\"sha384-c8lzpMfT7HLNH/GninvVmldA6MAz78U7S67XgZ0sL1zC/XsvbAc1sk/8WCbo5DRm\",\"5\":\"sha384-lv7AR2bqV8OenkumNTiZZdadAbQfO2XuJbYqEt9AzFdGlC10pFrN3Cs+aZUgjPcD\",\"6\":\"sha384-zGs+rCNJ2ybc4gZG6rllZSyRoPEPzHKQsQdmg5Ct1obpLbhfrgY0Eh8xKnaVYAWQ\",\"7\":\"sha384-pYGHH3VUsYMwA4BAKILHXmvGjpaxZlX7K4Of8Vf0TpR1zS6KDsgHFNzDpzirDyBf\",\"8\":\"sha384-ACeUJuCEJ59IYImLrUenrF6deSrpeWezxLcOsBAQyORKzdpa17wYYLC3/lu9FXfx\",\"9\":\"sha384-i0T45goKd5FtPV6EQM7mrJpda8H8zPWOz5tjU9ymETt7xBC6jUjwNqHloDdlm24u\",\"10\":\"sha384-8jUnc1d4TZkeepUWsacU28Ba3xjVZQC+DhOPOUgsOujkW4AH00aKevnp3eALoF96\",\"11\":\"sha384-DArCUJcqJmVbAYO1HmaQBxRDAd1LhtMG3EtURSQnKJtwDiZ1YwnP2rwfkK69PMf4\",\"12\":\"sha384-XS0QUhEY75QdhPe6i1rnrb4KAI4vmxXrsCsUmdIWSbx+ZzXXqOOWQouR+Hua6ukg\",\"13\":\"sha384-m+5HhZASMNDlwdTS4rbCfY+uMTLoDEBuHkgo2eRz1U72aRnXBRtcFNIpYN8UcOw0\",\"14\":\"sha384-lRW/huJoiN9BopHCZ2RcPCpNHFtWg3585yWFpWhv+DHGLlUB9fgLWMA1V/Roj1+b\",\"15\":\"sha384-irOAQuzwBISkvtz8hzaB0WP9TNhpfAYByjaJsV8JxgV+2F+3umYIZtxCJDfclqux\",\"16\":\"sha384-BRfHejCiWsn28LbRHzgaPHBmWBeqhz+loh+/rXH2QTedcz0OMFYxD7pvQch4Maq8\",\"17\":\"sha384-UP9yAZvoLx3uOKiaRwDd8CnL+TG6XnvmCQ/dqZUmuxDfNZimQYs6mhtwaDm1mC/E\",\"18\":\"sha384-ES8l1C4+eGYE3gz5iokugFlvGNUc3Jkl+RqsyPcNNYjnbugjT4OPnWttCcelmjC/\",\"19\":\"sha384-zuIZQSzznBcH/aeP6dj/cfl9tnmBnFZ5OvQWlFuj6zTniPXSJ825U++zKvplDaFc\",\"20\":\"sha384-jKcgQSWZyXXAHZ7g5WNU6glCJtd1tVX4BAcyO+Qo4PJMWFI7EIYYfbb1ieSu4Eob\",\"21\":\"sha384-8kzw/z8VFEI4cFXKzDPIhxdSEz3rcKu7VL7Hb8dm/1jP9WDy3G/6Pq1sk0DwdlUQ\",\"22\":\"sha384-vQaEGDUlI+f05Zln/tyPRJX7Q+EH6KpzX5B+1Ksqeq6smzvDMRw/VcuU7WO/9UWo\",\"23\":\"sha384-AoehfZkceTHXRM5ePhp5CSnOVH2PoqIeL8gzUpv5R1Vw2lZJrXIDuzUsxp4KZgq3\",\"24\":\"sha384-hMnh3w0w1iPOFlEhpEHjBAlGJVlowHPzeZ0M2IgBRwTD2htzyWAa5MRvVPkTzdJA\",\"25\":\"sha384-W/vYvDOgjWSw6gxJmVjoKKQmMwfR9dWhEORiTWcPGpDRuwQORazeQfeyxzfjoXdW\",\"26\":\"sha384-l0G9EBxQrDdTWOPdCuYSNETCg5O6AtKYekF47wIyiTjGwE04QYa8SLMSFxd8o71d\",\"27\":\"sha384-6OO7XYx9E3QXkIhdIlHQVH8Ue44DVJp6nrwTvFmrbXg9Nli+uRZgKGomg8WeiR5q\",\"28\":\"sha384-kf5ojG+WPoIphDkrlnR3D8popMDAnND5JLIltB7TQ3ye6zb8uOGYlF9AbKB08a9+\",\"29\":\"sha384-tnX0KN/cE5IZdJclcW7QcVbgrkg9mJrThT3/qxojXwCgrikX9kQaSLV7HtGWEp0J\",\"30\":\"sha384-WkkBR/2HPdRYZvC42rOkNplMBjlRLXlN6PHAN44T7C/py4oriEnv33Ze51S6Rd82\",\"31\":\"sha384-UNRa2ZGZ41ii/29/KnlYViDgvnb2hA6l3XuLrgDQLwLazM8VuaURvhQ02mJeICwL\",\"32\":\"sha384-AsuQU0y81OeHG6H/atJuFNibNJ5XjvuskJjC8MqHRThMTaVPAmIOVriCK+2vvchr\",\"33\":\"sha384-LgLJ3EvoZtIH0CDV7fGICHlQSeplOQ91vtIYNNJDdA0ENr/Q8yHfcxRMibTRv2lT\",\"34\":\"sha384-hb/lMcKNyJvXHCaXxXXmGClN2mW6KRgbY+U2PjU1kOm93RG9Om+r8pX3Kpdnnqh4\",\"35\":\"sha384-z+Zv2ZTMH6JCh48NoXvxPueez9w8XAHZlpPDMY1Y7I/pt1eJSgxgxDwf0PK0JIOR\",\"36\":\"sha384-XSYUc6dvyA7SajIlM8GwH5oqi7VeUAjVBcc+vQzlmJa7ttnN2oEJLsCphFHkS5C0\",\"37\":\"sha384-5h0AJiBbQmnmdLoIV6T3+wDDvPlyPQt8iwni+MkRZDnYXO26pMsmc4d/l9zZV3N3\",\"38\":\"sha384-W8sU1K3akH3iR1b2CgC0NjRHd2navx73bLUlbH/kxAxjm80AEJ9+GkNHEwiGvtS8\",\"39\":\"sha384-VzYMHzEL3iG47djGZ8oFdSxk2k88lejaAAXa9j9sP8JFkQ9KO6juZrjnv0Qt+Qhv\",\"40\":\"sha384-T4PpKTsD9/LYiH7irzAx7ZNGJbC/5RGjEpsq+i/Sov/Ok3YDK/L6soiemAuLjJIN\",\"41\":\"sha384-PPuiSgLVtm9dKVr7s5Yf2+MmSsnBNsQizBIyR1tTgVclLmyp8M/+LaANz/QaZl4w\",\"42\":\"sha384-fjyvCz3D+xT+Y1DiQ1DXBeYM/yVCjVhkIMJIK7Hmj2KRnh/JgCmUS9Y3BchRLHKE\",\"43\":\"sha384-9cRxEJRfWCr3NJOWD5RWORkImWu7NhRUbdWmKRL4O30QZt5YHGWqGAHdu3nm6iJN\",\"44\":\"sha384-ojzmhdPobWffn3uS7YlXq8nUjrFSKnIEo5igI9VmsV0hf5sML1vuqo3WNQ8cVTd0\",\"45\":\"sha384-zx8A2SLhiOzCrp0YsZI3L67f601RtYZkG+T8Ypn7cEIxMb/5kfyjlu0AncxNsqRl\",\"46\":\"sha384-orcgeC+mhWxY99KH2JApmjOshTEcJ8ndZzOdUKfttrMZQPDlTULjWPOarYsXRrbC\",\"47\":\"sha384-nJ0DaYc5GWnwssOIfk5YahTBrNISX+r0xmSvJ0bF4pAIQejpnw1KPc2LOAKkK5x3\",\"48\":\"sha384-jzEKNGMf5XBJm1srqq8UZsYGD+XNEsV5YBMeGRWR0udJC4N3pC8R8pttnubZVHtk\",\"49\":\"sha384-WahoBLbM74PGDr/7/fXrnbvs2TwiYihLfkiAnqvHOqFsnZNmEasRBasd43J3F4X7\",\"50\":\"sha384-C4bS4nSOgnJlFMdjHgoFhiVjA+XiFeet6Tqtfgg7zRxg/kBVdibpD/2as6vLDNrA\",\"51\":\"sha384-wRNAFACmiKh7qvcPXQkjdrU2MwDDvwci1sZepkaQDh9RAPWI7RNjPoHAZGV5FYlW\",\"52\":\"sha384-a0b3xhuXCCBxCKwbP5wjNQc9ZCzDHmH+TTVVkdrpNKO4OwbDLA5UyJTJ90l9nGv8\",\"53\":\"sha384-XP0rQY7SqZIC5f/uxurYuYi0a8MNVdxarSV8Vb6nscMsXpLRjrUREf2siCZ6KvBM\",\"54\":\"sha384-VQiGyLj12mnQv4Gbq262pqG3ClZUAWoI4cOiClzNf9fqBd66eAI+Jp+I149+8Qe5\",\"55\":\"sha384-rV6u8eshKm1ESH0MK6LYeqyY5+8C2Nt/qVn8ooBr+GcZSUnFi2c9aXdddVrU/wIp\",\"56\":\"sha384-zaGeszS8oQHGzgMlYL0/wQkNyuEvpbswRtityiuS4y0GzxCjy+d+NIL3CNRSg4cn\",\"57\":\"sha384-hS/5RVkIw66sQdEqjl66X/YjLX3eBqWBSce7sbXdSbLGiEpb8nGbrj9SNx8hRqwy\",\"58\":\"sha384-s763XtDuYj/NBS8L6/uXd3TCBhjsztgBv2SZPbX/QtpaDiv0LgKLxIx2astqjLY5\",\"59\":\"sha384-TzW2aFz9aLA54S/yPUzTlCBuh1+hJ2iPVNdgtZIAP1LzEfKwF8ZvBhzWTpmz8CPr\",\"60\":\"sha384-skCRYdZpBI4T0RUlwriRgXKe5LNXomfke5BxGWyCbQJw5i3xUe3AFrEM/7F63s/0\",\"61\":\"sha384-Q4E0teznn7Aj66mYA9mT7JRn+zOhBcDvsEjxSOoAoV52jtiBsKJh7Tlh0MejtUB/\",\"62\":\"sha384-GZV2VNVAzNi975g0cLQQ/DKnCiLUkNI7Ooc00P42VLsnwOdxRt0e8DaO754mBJ6K\",\"63\":\"sha384-eU8Nu5+9hDL+VCxDT9Kl2XnXb08gLe5740xMLlDmOcE06oBYmO3l9Lwv0EelIyDy\",\"64\":\"sha384-XoiKA1IU2zJPo8CPBM/oQVuTJcij0q5Xr5oQMtlJLP4ArWl/A05zMuLZ03LCVVsy\"};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n\n\n \t\t// JSONP chunk loading for javascript\n\n \t\tvar installedChunkData = installedChunks[chunkId];\n \t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n \t\t\t// a Promise means \"currently loading\".\n \t\t\tif(installedChunkData) {\n \t\t\t\tpromises.push(installedChunkData[2]);\n \t\t\t} else {\n \t\t\t\t// setup Promise in chunk cache\n \t\t\t\tvar promise = new Promise(function(resolve, reject) {\n \t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n \t\t\t\t});\n \t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n \t\t\t\t// start chunk loading\n \t\t\t\tvar script = document.createElement('script');\n \t\t\t\tvar onScriptComplete;\n\n \t\t\t\tscript.charset = 'utf-8';\n \t\t\t\tscript.timeout = 120;\n \t\t\t\tif (__webpack_require__.nc) {\n \t\t\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n \t\t\t\t}\n \t\t\t\tscript.src = jsonpScriptSrc(chunkId);\n \t\t\t\tif (script.src.indexOf(window.location.origin + '/') !== 0) {\n \t\t\t\t\tscript.crossOrigin = \"anonymous\";\n \t\t\t\t}\n \t\t\t\t// create error before stack unwound to get useful stacktrace later\n \t\t\t\tvar error = new Error();\n \t\t\t\tonScriptComplete = function (event) {\n \t\t\t\t\t// avoid mem leaks in IE.\n \t\t\t\t\tscript.onerror = script.onload = null;\n \t\t\t\t\tclearTimeout(timeout);\n \t\t\t\t\tvar chunk = installedChunks[chunkId];\n \t\t\t\t\tif(chunk !== 0) {\n \t\t\t\t\t\tif(chunk) {\n \t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n \t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n \t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n \t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n \t\t\t\t\t\t\terror.type = errorType;\n \t\t\t\t\t\t\terror.request = realSrc;\n \t\t\t\t\t\t\tchunk[1](error);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tinstalledChunks[chunkId] = undefined;\n \t\t\t\t\t}\n \t\t\t\t};\n \t\t\t\tvar timeout = setTimeout(function(){\n \t\t\t\t\tonScriptComplete({ type: 'timeout', target: script });\n \t\t\t\t}, 120000);\n \t\t\t\tscript.onerror = script.onload = onScriptComplete;\n \t\t\t\tscript.integrity = sriHashes[chunkId];\n \t\t\t\tscript.crossOrigin = \"anonymous\";\n \t\t\t\tdocument.head.appendChild(script);\n \t\t\t}\n \t\t}\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// on error function for async loading\n \t__webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,2]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","export const CLIENT_ID = 'WebMail';\nexport const CLIENT_TYPE = 1;\nexport const CLIENT_SECRET = '';\nexport const APP_VERSION = '1.0.0';\nexport const APP_NAME = 'proton-mail';\nexport const API_URL = 'https://protonmail.blue/api';\nexport const SECURE_URL = 'https://secure.protonmail.blue';\nexport const API_VERSION = '3';\nexport const DATE_VERSION = 'Wed, 27 Nov 2019 17:26:38 GMT';\nexport const CHANGELOG_PATH = 'assets/changelog.tpl.html';\nexport const VERSION_PATH = 'assets/version.json';\nexport const SENTRY_RELEASE = '';\nexport const SENTRY_DSN = '';","const locales = require.context('../i18n', true, /.json$/, 'lazy');\n\nexport default locales.keys().reduce((acc, key) => {\n    acc[key.slice(2, key.length - 5)] = () => locales(key);\n    return acc;\n}, {});\n","import React, { useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon, SimpleDropdown, PrimaryButton, Label, Select, useLabels } from 'react-components';\nimport { MAILBOX_LABEL_IDS, LABEL_EXCLUSIVE } from 'proton-shared/lib/constants';\nimport { c } from 'ttag';\n\nconst ALL = 'all';\nconst { INBOX, TRASH, SPAM, ARCHIVE } = MAILBOX_LABEL_IDS;\n\nconst AdvancedSearchDropdown = ({ location, history }) => {\n    const formRef = useRef();\n    const [model, updateModel] = useState({});\n    const [labels = []] = useLabels();\n    const locationOptions = [\n        { value: ALL, text: c('Option').t`All` },\n        { value: INBOX, text: c('Mailbox').t`Inbox` },\n        { value: ARCHIVE, text: c('Mailbox').t`Archive` },\n        { value: SPAM, text: c('Mailbox').t`Spam` },\n        { value: TRASH, text: c('Mailbox').t`Trash` }\n    ]\n        .concat(\n            labels\n                .filter(({ Exclusive }) => Exclusive === LABEL_EXCLUSIVE.FOLDER)\n                .map(({ ID: value, Name: text }) => ({ value, text }))\n        )\n        .concat(\n            labels\n                .filter(({ Exclusive }) => Exclusive === LABEL_EXCLUSIVE.LABEL)\n                .map(({ ID: value, Name: text }) => ({ value, text }))\n        );\n    const handleSubmit = () => {\n        const state = {}; // TODO\n        history.push({ ...location }, state);\n        formRef.current.reset();\n    };\n    return (\n        <SimpleDropdown\n            originalPlacement=\"bottom-right\"\n            hasCaret={false}\n            content={<Icon name=\"caret\" className=\"fill-white searchbox-advanced-search-icon\" />}\n            className=\"searchbox-advanced-search-button\"\n        >\n            <form ref={formRef} name=\"advanced-search\" className=\"p1\" onSubmit={handleSubmit}>\n                <div className=\"mb1\">\n                    <Label htmlFor=\"location\">{c('Label').t`Location`}</Label>\n                    <Select\n                        id=\"location\"\n                        options={locationOptions}\n                        onChange={({ target }) => updateModel({ ...model, location: target.value })}\n                    />\n                </div>\n                <div className=\"mb1 flex flex-nowrap\">\n                    <div className=\"mr1\">\n                        <Label>{c('Label').t`Sender`}</Label>\n                    </div>\n                    <div>\n                        <Label>{c('Label').t`Recipient`}</Label>\n                    </div>\n                </div>\n                <div className=\"mb1 flex flex-nowrap\">\n                    <div className=\"mr1\">\n                        <Label>{c('Label').t`Start date`}</Label>\n                    </div>\n                    <div>\n                        <Label>{c('Label').t`End date`}</Label>\n                    </div>\n                </div>\n                <div className=\"mb1 flex flex-nowrap\">\n                    <div className=\"mr1\">\n                        <Label>{c('Label').t`Address`}</Label>\n                    </div>\n                    <div>\n                        <Label>{c('Label').t`Attachments`}</Label>\n                    </div>\n                </div>\n                <div>\n                    <PrimaryButton className=\"w100\" type=\"submit\">{c('Action').t`Search`}</PrimaryButton>\n                </div>\n            </form>\n        </SimpleDropdown>\n    );\n};\n\nAdvancedSearchDropdown.propTypes = {\n    history: PropTypes.object.isRequired,\n    location: PropTypes.object.isRequired\n};\n\nexport default AdvancedSearchDropdown;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    MainLogo,\n    SupportDropdown,\n    Hamburger,\n    TopNavbar,\n    TopNavbarLink,\n    UpgradeButton,\n    Searchbox,\n    useUser\n} from 'react-components';\nimport { c } from 'ttag';\n\nimport AdvancedSearchDropdown from './AdvancedSearchDropdown';\n\nconst PrivateHeader = ({ location, history, expanded, onToggleExpand, onSearch }) => {\n    const [{ hasPaidMail }] = useUser();\n    return (\n        <header className=\"header flex flex-nowrap reset4print\">\n            <MainLogo url=\"/inbox\" className=\"nomobile\" />\n            <Hamburger expanded={expanded} onToggle={onToggleExpand} />\n            <Searchbox\n                placeholder={c('Placeholder').t`Search messages`}\n                onSearch={onSearch}\n                advanced={<AdvancedSearchDropdown location={location} history={history} />}\n            />\n            <TopNavbar>\n                {hasPaidMail ? null : <UpgradeButton external={true} />}\n                <TopNavbarLink to=\"/inbox\" icon=\"mailbox\" text={c('Title').t`Mailbox`} aria-current={true} />\n                <TopNavbarLink external={true} to=\"/settings\" icon=\"settings-master\" text={c('Title').t`Settings`} />\n                <SupportDropdown />\n            </TopNavbar>\n        </header>\n    );\n};\n\nPrivateHeader.propTypes = {\n    location: PropTypes.object.isRequired,\n    history: PropTypes.object.isRequired,\n    onSearch: PropTypes.func.isRequired,\n    expanded: PropTypes.bool,\n    onToggleExpand: PropTypes.func.isRequired\n};\n\nexport default PrivateHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst LocationAside = ({ action, unread = 0 }) => {\n    return (\n        <>\n            {action}\n            {unread ? <span className=\"navigation__counterItem flex-item-noshrink rounded\">{unread}</span> : null}\n        </>\n    );\n};\n\nLocationAside.propTypes = {\n    action: PropTypes.node,\n    unread: PropTypes.number.isRequired\n};\n\nexport default LocationAside;\n","import React from 'react';\nimport { Icon, useEventManager, useLoading } from 'react-components';\n\nconst RefreshButton = () => {\n    const { call } = useEventManager();\n    const [loading, withLoading] = useLoading();\n\n    const handleRefresh = async (event) => {\n        event.preventDefault();\n        await call();\n    };\n\n    return (\n        <button\n            className=\"mr0-5\"\n            disabled={loading}\n            type=\"button\"\n            onClick={(event) => withLoading(handleRefresh(event))}\n        >\n            <Icon fill=\"light\" name=\"reload\" />\n        </button>\n    );\n};\n\nexport default RefreshButton;\n","import { MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\n\nexport const ELEMENT_TYPES = {\n    MESSAGE: 'message',\n    CONVERSATION: 'conversation'\n};\n\nexport const LABEL_IDS_TO_HUMAN = {\n    [MAILBOX_LABEL_IDS.INBOX]: 'inbox',\n    [MAILBOX_LABEL_IDS.ALL_DRAFTS]: 'all-drafts',\n    [MAILBOX_LABEL_IDS.ALL_SENT]: 'all-sent',\n    [MAILBOX_LABEL_IDS.TRASH]: 'trash',\n    [MAILBOX_LABEL_IDS.SPAM]: 'spam',\n    [MAILBOX_LABEL_IDS.ALL_MAIL]: 'all-mail',\n    [MAILBOX_LABEL_IDS.ARCHIVE]: 'archive',\n    [MAILBOX_LABEL_IDS.SENT]: 'sent',\n    [MAILBOX_LABEL_IDS.DRAFTS]: 'drafts',\n    [MAILBOX_LABEL_IDS.STARRED]: 'starred'\n};\n\nexport const HUMAN_TO_LABEL_IDS = Object.entries(LABEL_IDS_TO_HUMAN).reduce((acc, [key, value]) => {\n    acc[value] = key;\n    return acc;\n}, Object.create(null));\n\nexport const SIGNATURE_START = 1546300800; // January 1, 2019\n\nexport const VERIFICATION_STATUS = {\n    NOT_VERIFIED: -1,\n    NOT_SIGNED: 0,\n    SIGNED_AND_VALID: 1,\n    SIGNED_AND_INVALID: 2,\n    SIGNED_NO_PUB_KEY: 3\n};\n\nexport const MESSAGE_FLAGS = {\n    FLAG_RECEIVED: 1, // whether a message is received\n    FLAG_SENT: 2, // whether a message is sent\n    FLAG_INTERNAL: 4, // whether the message is between ProtonMail recipients\n    FLAG_E2E: 8, // whether the message is end-to-end encrypted\n    FLAG_AUTO: 16, // whether the message is an autoresponse\n    FLAG_REPLIED: 32, // whether the message is replied to\n    FLAG_REPLIEDALL: 64, // whether the message is replied all to\n    FLAG_FORWARDED: 128, // whether the message is forwarded\n    FLAG_AUTOREPLIED: 256, // whether the message has been responded to with an autoresponse\n    FLAG_IMPORTED: 512, // whether the message is an import\n    FLAG_OPENED: 1024, // whether the message has ever been opened by the user\n    FLAG_RECEIPT_SENT: 2048, // whether a read receipt has been sent in response to the message\n    // For drafts only\n    FLAG_RECEIPT_REQUEST: 65536, // whether to request a read receipt for the message\n    FLAG_PUBLIC_KEY: 131072, // whether to attach the public key\n    FLAG_SIGN: 262144 // whether to sign the message\n};\n","import { formatRelative, format } from 'date-fns';\nimport { MAILBOX_LABEL_IDS, VIEW_MODE } from 'proton-shared/lib/constants';\n\nimport { ELEMENT_TYPES } from '../constants';\n\nconst { SENT, ALL_SENT, DRAFTS, ALL_DRAFTS, ALL_MAIL } = MAILBOX_LABEL_IDS;\n\nexport const getCurrentType = ({ labelID = '', mailSettings = {} }) => {\n    if ([SENT, ALL_SENT, DRAFTS, ALL_DRAFTS, ALL_MAIL].includes(labelID)) {\n        return ELEMENT_TYPES.MESSAGE;\n    }\n\n    const { ViewMode = VIEW_MODE.GROUP } = mailSettings;\n    return ViewMode === VIEW_MODE.GROUP ? ELEMENT_TYPES.CONVERSATION : ELEMENT_TYPES.MESSAGE;\n};\n\nexport const isConversation = (data) => ELEMENT_TYPES.CONVERSATION === getCurrentType(data);\nexport const isMessage = (data) => ELEMENT_TYPES.MESSAGE === getCurrentType(data);\n\nexport const getDate = ({ Time = 0, ContextTime = 0 } = {}) => new Date((ContextTime || Time) * 1000);\n\n/**\n * Get readable time to display from message / conversation\n * @param {Integer} element.Time\n * @return {String} Jan 17, 2016\n */\nexport const getReadableTime = ({ Time = 0, ContextTime = 0 } = {}) => {\n    const date = new Date((ContextTime || Time) * 1000);\n    const now = new Date();\n    return formatRelative(date, now);\n};\n\nexport const getReadableFullTime = ({ Time = 0, ContextTime = 0 } = {}) => {\n    const date = new Date((ContextTime || Time) * 1000);\n    return format(date, 'Ppp');\n};\n","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    NavMenu,\n    MainLogo,\n    Loader,\n    useMailSettings,\n    useLabels,\n    useConversationCounts,\n    useMessageCounts,\n    PrimaryButton\n} from 'react-components';\nimport { SHOW_MOVED, LABEL_EXCLUSIVE, MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\nimport { redirectTo } from 'proton-shared/lib/helpers/browser';\nimport { toMap } from 'proton-shared/lib/helpers/object';\nimport { c } from 'ttag';\n\nimport LocationAside from './LocationAside';\nimport RefreshButton from './RefreshButton';\nimport { LABEL_IDS_TO_HUMAN, ELEMENT_TYPES } from '../../constants';\nimport { getCurrentType } from '../../helpers/element';\n\nconst PrivateSidebar = ({ expanded = false, labelID: currentLabelID }) => {\n    const [conversationCounts, loadingConversationCounts] = useConversationCounts();\n    const [messageCounts, loadingMessageCounts] = useMessageCounts();\n    const [mailSettings, loadingMailSettings] = useMailSettings();\n    const [labels, loadingLabels] = useLabels();\n    const { ShowMoved } = mailSettings || {};\n    const type = getCurrentType({ mailSettings, labelID: currentLabelID });\n\n    const unreadMap = useMemo(() => {\n        const counters = type === ELEMENT_TYPES.CONVERSATION ? conversationCounts : messageCounts;\n\n        if (!Array.isArray(counters)) {\n            return {};\n        }\n\n        return toMap(counters, 'LabelID');\n    }, [conversationCounts, messageCounts]);\n\n    if (loadingMailSettings || loadingLabels || loadingConversationCounts || loadingMessageCounts) {\n        return <Loader />;\n    }\n\n    const getAside = (labelID) => {\n        return (\n            <LocationAside\n                unread={unreadMap[labelID].Unread}\n                action={labelID === currentLabelID ? <RefreshButton /> : null}\n            />\n        );\n    };\n\n    const list = [\n        {\n            icon: 'inbox',\n            text: c('Link').t`Inbox`,\n            aside: getAside(MAILBOX_LABEL_IDS.INBOX),\n            link: `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.INBOX]}`\n        },\n        {\n            icon: 'drafts',\n            text: c('Link').t`Drafts`,\n            aside: getAside(ShowMoved & SHOW_MOVED.DRAFTS ? MAILBOX_LABEL_IDS.ALL_DRAFTS : MAILBOX_LABEL_IDS.DRAFTS),\n            link:\n                ShowMoved & SHOW_MOVED.DRAFTS\n                    ? `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.ALL_DRAFTS]}`\n                    : `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.DRAFTS]}`\n        },\n        {\n            icon: 'sent',\n            text: c('Link').t`Sent`,\n            aside: getAside(ShowMoved & SHOW_MOVED.SENT ? MAILBOX_LABEL_IDS.ALL_SENT : MAILBOX_LABEL_IDS.SENT),\n            link:\n                ShowMoved & SHOW_MOVED.SENT\n                    ? `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.ALL_SENT]}`\n                    : `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.SENT]}`\n        },\n        {\n            icon: 'star',\n            text: c('Link').t`Starred`,\n            aside: getAside(MAILBOX_LABEL_IDS.STARRED),\n            link: `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.STARRED]}`\n        },\n        {\n            icon: 'archive',\n            text: c('Link').t`Archive`,\n            aside: getAside(MAILBOX_LABEL_IDS.ARCHIVE),\n            link: `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.ARCHIVE]}`\n        },\n        {\n            icon: 'spam',\n            text: c('Link').t`Spam`,\n            aside: getAside(MAILBOX_LABEL_IDS.SPAM),\n            link: `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.SPAM]}`\n        },\n        {\n            icon: 'trash',\n            text: c('Link').t`Trash`,\n            aside: getAside(MAILBOX_LABEL_IDS.TRASH),\n            link: `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.TRASH]}`\n        },\n        {\n            icon: 'all-emails',\n            text: c('Link').t`All mail`,\n            aside: getAside(MAILBOX_LABEL_IDS.ALL_MAIL),\n            link: `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.ALL_MAIL]}`\n        },\n        {\n            icon: 'folder-label',\n            text: c('Link').t`Folders/labels`,\n            className: 'alignleft',\n            type: 'button',\n            onClick() {\n                redirectTo('/settings/labels');\n            }\n        },\n        ...labels.map(({ ID, Name, Exclusive, Color }) => ({\n            icon: Exclusive === LABEL_EXCLUSIVE.LABEL ? 'label' : 'folder',\n            text: Name,\n            aside: getAside(ID),\n            link: `/${ID}`,\n            color: Color\n        }))\n    ];\n\n    return (\n        <div className=\"sidebar flex flex-column noprint\" data-expanded={expanded}>\n            <div className=\"nodesktop notablet\">\n                <MainLogo url=\"/inbox\" />\n            </div>\n            <div className=\"pl1 pr1\">\n                <PrimaryButton className=\"w100 bold\">{c('Action').t`Compose`}</PrimaryButton>\n            </div>\n            <nav className=\"navigation mw100 flex-item-fluid scroll-if-needed mb1\">\n                <NavMenu list={list} />\n            </nav>\n        </div>\n    );\n};\n\nPrivateSidebar.propTypes = {\n    labelID: PropTypes.string.isRequired,\n    expanded: PropTypes.bool\n};\n\nexport default PrivateSidebar;\n","import React, { useRef, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { c } from 'ttag';\nimport { Route } from 'react-router-dom';\nimport { AppsSidebar, StorageSpaceStatus, MainAreaContext, Href } from 'react-components';\nimport { normalize } from 'proton-shared/lib/helpers/string';\n\nimport PrivateHeader from '../header/PrivateHeader';\nimport PrivateSidebar from '../sidebar/PrivateSidebar';\n\nconst PrivateLayout = ({ children, location, history, labelID }) => {\n    const mainAreaRef = useRef();\n    const [expanded, setExpand] = useState(false);\n\n    const handleSearch = (keyword) => {\n        console.log(normalize(keyword));\n    };\n\n    useEffect(() => {\n        setExpand(false);\n    }, [location.pathname]);\n\n    return (\n        <div className=\"flex flex-nowrap no-scroll\">\n            <AppsSidebar\n                items={[\n                    <StorageSpaceStatus key=\"storage\">\n                        <Href\n                            url=\"/settings/subscription\"\n                            target=\"_self\"\n                            className=\"pm-button pm-button--primary pm-button--small\"\n                        >\n                            {c('Action').t`Upgrade`}\n                        </Href>\n                    </StorageSpaceStatus>\n                ]}\n            />\n            <div className=\"content flex-item-fluid reset4print\">\n                <PrivateHeader\n                    location={location}\n                    history={history}\n                    expanded={expanded}\n                    onToggleExpand={() => setExpand(!expanded)}\n                    onSearch={handleSearch}\n                />\n                <div className=\"flex flex-nowrap\">\n                    <Route path=\"/:path\" render={() => <PrivateSidebar labelID={labelID} expanded={expanded} />} />\n                    <div className=\"main flex-item-fluid scroll-smooth-touch\" ref={mainAreaRef}>\n                        <div className=\"flex-item-fluid\">\n                            <MainAreaContext.Provider value={mainAreaRef}>{children}</MainAreaContext.Provider>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nPrivateLayout.propTypes = {\n    children: PropTypes.node.isRequired,\n    location: PropTypes.object.isRequired,\n    history: PropTypes.object.isRequired,\n    labelID: PropTypes.string.isRequired\n};\n\nexport default PrivateLayout;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { classnames } from 'react-components';\n\nconst ToolbarButton = ({ children, loading, disabled, className, ...rest }) => {\n    return (\n        <button\n            type=\"button\"\n            disabled={disabled || loading}\n            className={classnames(['toolbar-button', className])}\n            {...rest}\n        >\n            {children}\n        </button>\n    );\n};\n\nToolbarButton.propTypes = {\n    disabled: PropTypes.bool,\n    loading: PropTypes.bool,\n    children: PropTypes.node.isRequired,\n    className: PropTypes.string,\n    title: PropTypes.string\n};\n\nexport default ToolbarButton;\n","import React from 'react';\n\nconst ToolbarSeparator = () => <span className=\"toolbar-separator\" />;\n\nexport default ToolbarSeparator;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { MESSAGE_BUTTONS } from 'proton-shared/lib/constants';\nimport { Icon, useApi, useEventManager, useLoading } from 'react-components';\nimport { markMessageAsRead, markMessageAsUnread } from 'proton-shared/lib/api/messages';\nimport { markConversationsAsRead, markConversationsAsUnread } from 'proton-shared/lib/api/conversations';\nimport { c } from 'ttag';\n\nimport ToolbarButton from './ToolbarButton';\nimport { getCurrentType } from '../../helpers/element';\nimport { ELEMENT_TYPES } from '../../constants';\n\nconst UNREAD = 0;\nconst READ = 1;\n\nconst ReadUnreadButtons = ({ mailSettings, labelID, selectedIDs = [] }) => {\n    const api = useApi();\n    const { call } = useEventManager();\n    const { MessageButtons = MESSAGE_BUTTONS.READ_UNREAD } = mailSettings;\n    const type = getCurrentType({ mailSettings, labelID });\n    const [loading, withLoading] = useLoading();\n\n    const markAs = async (status = UNREAD) => {\n        const isUnread = status === UNREAD;\n        const action =\n            type === ELEMENT_TYPES.CONVERSATION\n                ? isUnread\n                    ? markConversationsAsUnread\n                    : markConversationsAsRead\n                : isUnread\n                ? markMessageAsUnread\n                : markMessageAsRead;\n        await api(action(selectedIDs));\n        await call();\n    };\n\n    const buttons = [\n        <ToolbarButton\n            key=\"read\"\n            title={c('Action').t`Mark as read`}\n            loading={loading}\n            disabled={!selectedIDs.length}\n            onClick={() => withLoading(markAs(READ))}\n        >\n            <Icon className=\"toolbar-icon mauto\" name=\"read\" />\n        </ToolbarButton>,\n        <ToolbarButton\n            key=\"unread\"\n            title={c('Action').t`Mark as unread`}\n            loading={loading}\n            disabled={!selectedIDs.length}\n            onClick={() => withLoading(markAs(UNREAD))}\n        >\n            <Icon className=\"toolbar-icon mauto\" name=\"unread\" />\n        </ToolbarButton>\n    ];\n\n    if (MessageButtons === MESSAGE_BUTTONS.UNREAD_READ) {\n        buttons.reverse();\n    }\n\n    return buttons;\n};\n\nReadUnreadButtons.propTypes = {\n    mailSettings: PropTypes.object.isRequired,\n    selectedIDs: PropTypes.array.isRequired,\n    labelID: PropTypes.string.isRequired\n};\n\nexport default ReadUnreadButtons;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { classnames, SimpleDropdown } from 'react-components';\n\nconst ToolbarDropdown = ({ title, content, className, children, autoClose = true }) => {\n    return (\n        <SimpleDropdown\n            autoClose={autoClose}\n            title={title}\n            content={content}\n            caretClassName=\"toolbar-icon\"\n            className={classnames(['flex-item-noshrink toolbar-button toolbar-button--dropdown', className])}\n        >\n            {children}\n        </SimpleDropdown>\n    );\n};\n\nToolbarDropdown.propTypes = {\n    autoClose: PropTypes.bool,\n    title: PropTypes.string,\n    className: PropTypes.string,\n    content: PropTypes.node,\n    children: PropTypes.node.isRequired\n};\n\nexport default ToolbarDropdown;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon, DropdownMenu, DropdownMenuButton, useApi, useEventManager, useLoading } from 'react-components';\nimport { VIEW_LAYOUT } from 'proton-shared/lib/constants';\nimport { updateViewLayout } from 'proton-shared/lib/api/mailSettings';\nimport { c } from 'ttag';\n\nimport ToolbarDropdown from './ToolbarDropdown';\n\nconst LayoutDropdown = ({ mailSettings = {} }) => {\n    const { ViewLayout = VIEW_LAYOUT.COLUMN } = mailSettings;\n\n    const api = useApi();\n    const { call } = useEventManager();\n    const [loading, withLoading] = useLoading();\n    const currentLayoutIcon = ViewLayout === VIEW_LAYOUT.COLUMN ? 'layout-columns' : 'layout-rows';\n\n    const updateLayout = async (viewLayout) => {\n        await api(updateViewLayout(viewLayout));\n        await call();\n    };\n\n    return (\n        <ToolbarDropdown\n            title={c('Action').t`Change layout`}\n            content={<Icon className=\"toolbar-icon\" name={currentLayoutIcon} />}\n        >\n            <DropdownMenu>\n                <DropdownMenuButton\n                    disabled={ViewLayout === VIEW_LAYOUT.COLUMN}\n                    loading={loading}\n                    className=\"alignleft\"\n                    onClick={() => withLoading(updateLayout(VIEW_LAYOUT.COLUMN))}\n                >\n                    <Icon name=\"layout-columns\" className=\"mr0-5\" />\n                    {c('Action').t`Column layout`}\n                </DropdownMenuButton>\n                <DropdownMenuButton\n                    disabled={ViewLayout === VIEW_LAYOUT.ROW}\n                    loading={loading}\n                    className=\"alignleft\"\n                    onClick={() => withLoading(updateLayout(VIEW_LAYOUT.ROW))}\n                >\n                    <Icon name=\"layout-rows\" className=\"mr0-5\" />\n                    {c('Action').t`Row layout`}\n                </DropdownMenuButton>\n            </DropdownMenu>\n        </ToolbarDropdown>\n    );\n};\n\nLayoutDropdown.propTypes = {\n    mailSettings: PropTypes.object.isRequired\n};\n\nexport default LayoutDropdown;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon, useLoading, useNotifications, useEventManager, useApi } from 'react-components';\nimport { MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\nimport { labelMessages } from 'proton-shared/lib/api/messages';\nimport { labelConversations } from 'proton-shared/lib/api/conversations';\nimport { c } from 'ttag';\n\nimport ToolbarButton from './ToolbarButton';\nimport { getCurrentType } from '../../helpers/element';\nimport { ELEMENT_TYPES } from '../../constants';\n\nconst { TRASH, SPAM, DRAFTS, ARCHIVE, SENT, INBOX, ALL_DRAFTS, ALL_SENT } = MAILBOX_LABEL_IDS;\n\nconst MoveButtons = ({ labelID = '', mailSettings = {}, selectedIDs = [] }) => {\n    const { createNotification } = useNotifications();\n    const { call } = useEventManager();\n    const api = useApi();\n    const [loading, withLoading] = useLoading();\n    const type = getCurrentType({ mailSettings, labelID });\n\n    const handleMove = async (LabelID) => {\n        const action = type === ELEMENT_TYPES.CONVERSATION ? labelConversations : labelMessages;\n        await api(action({ LabelID, IDs: selectedIDs }));\n        await call();\n        createNotification({ text: c('Success').t`Elements moved` });\n    };\n\n    const displayTrash = ![DRAFTS, ALL_DRAFTS, TRASH].includes(labelID);\n    const displayInbox = ![SENT, ALL_SENT, DRAFTS, ALL_DRAFTS].includes(labelID);\n    const displayArchive = ![DRAFTS, ALL_DRAFTS, ARCHIVE].includes(labelID);\n    const displaySpam = ![SENT, ALL_SENT, SPAM].includes(labelID);\n\n    return (\n        <>\n            {displayTrash ? (\n                <ToolbarButton\n                    loading={loading}\n                    title={c('Action').t`Move to trash`}\n                    onClick={() => withLoading(handleMove(TRASH))}\n                >\n                    <Icon className=\"toolbar-icon mauto\" name=\"trash\" />\n                </ToolbarButton>\n            ) : null}\n            {displayInbox ? (\n                <ToolbarButton\n                    loading={loading}\n                    title={c('Action').t`Move to inbox`}\n                    onClick={() => withLoading(handleMove(INBOX))}\n                >\n                    <Icon className=\"toolbar-icon mauto\" name=\"inbox\" />\n                </ToolbarButton>\n            ) : null}\n            {displayArchive ? (\n                <ToolbarButton\n                    loading={loading}\n                    title={c('Action').t`Move to archive`}\n                    onClick={() => withLoading(handleMove(ARCHIVE))}\n                >\n                    <Icon className=\"toolbar-icon mauto\" name=\"archive\" />\n                </ToolbarButton>\n            ) : null}\n            {displaySpam ? (\n                <ToolbarButton\n                    loading={loading}\n                    title={c('Action').t`Move to spam`}\n                    onClick={() => withLoading(handleMove(SPAM))}\n                >\n                    <Icon className=\"toolbar-icon mauto\" name=\"spam\" />\n                </ToolbarButton>\n            ) : null}\n        </>\n    );\n};\n\nMoveButtons.propTypes = {\n    labelID: PropTypes.string.isRequired,\n    mailSettings: PropTypes.object.isRequired,\n    selectedIDs: PropTypes.array.isRequired\n};\n\nexport default MoveButtons;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Icon,\n    useLoading,\n    useNotifications,\n    useEventManager,\n    useApi,\n    ConfirmModal,\n    ErrorButton,\n    useModals,\n    Alert\n} from 'react-components';\nimport { MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\nimport { deleteMessages, emptyLabel } from 'proton-shared/lib/api/messages';\nimport { deleteConversations } from 'proton-shared/lib/api/conversations';\nimport { c, msgid } from 'ttag';\n\nimport ToolbarButton from './ToolbarButton';\nimport { getCurrentType } from '../../helpers/element';\nimport { ELEMENT_TYPES } from '../../constants';\n\nconst { TRASH, SPAM, DRAFTS, ALL_DRAFTS, ALL_MAIL, INBOX, SENT, ALL_SENT, ARCHIVE } = MAILBOX_LABEL_IDS;\n\nconst DeleteButton = ({ labelID = '', mailSettings = {}, selectedIDs = [] }) => {\n    const { createNotification } = useNotifications();\n    const { createModal } = useModals();\n    const { call } = useEventManager();\n    const api = useApi();\n    const [loading, withLoading] = useLoading();\n    const displayDelete = [TRASH, SPAM, DRAFTS, ALL_DRAFTS, SENT, ALL_SENT].includes(labelID);\n    const displayEmpty = ![INBOX, SENT, ALL_SENT, ARCHIVE, ALL_MAIL].includes(labelID);\n    const type = getCurrentType({ mailSettings, labelID });\n\n    const handleDelete = async () => {\n        await new Promise((resolve, reject) => {\n            createModal(\n                <ConfirmModal\n                    title={c('Title').ngettext(msgid`Delete email`, `Delete emails`, selectedIDs.length)}\n                    confirm={<ErrorButton type=\"submit\">{c('Action').t`Delete`}</ErrorButton>}\n                    onConfirm={resolve}\n                    onClose={reject}\n                >\n                    <Alert type=\"warning\">\n                        {c('Info').ngettext(\n                            msgid`This action will permanently delete the selected email. Are you sure you want to delete this email?`,\n                            `This action will permanently delete the selected emails. Are you sure you want to delete these emails?`,\n                            selectedIDs.length\n                        )}\n                    </Alert>\n                </ConfirmModal>\n            );\n        });\n        const action = type === ELEMENT_TYPES.CONVERSATION ? deleteConversations : deleteMessages;\n        await api(action(selectedIDs));\n        await call();\n        createNotification({ text: c('Success').t`Elements deleted` });\n    };\n\n    const handleEmpty = async () => {\n        await new Promise((resolve, reject) => {\n            createModal(\n                <ConfirmModal\n                    title={c('Title').t`Empty folder`}\n                    confirm={<ErrorButton type=\"submit\">{c('Action').t`Empty`}</ErrorButton>}\n                    onConfirm={resolve}\n                    onClose={reject}\n                >\n                    <Alert type=\"warning\">{c('Info')\n                        .t`This action will permanently delete your emails. Are you sure you want to empty this folder?`}</Alert>\n                </ConfirmModal>\n            );\n        });\n        c;\n        await api(emptyLabel({ LabelID: labelID }));\n        await call();\n        createNotification({ text: c('Success').t`Folder cleared` });\n    };\n\n    return (\n        <>\n            {displayDelete ? (\n                <ToolbarButton\n                    loading={loading}\n                    title={c('Action').t`Delete`}\n                    onClick={() => withLoading(handleDelete())}\n                >\n                    <Icon className=\"toolbar-icon\" name=\"delete\" />\n                </ToolbarButton>\n            ) : null}\n            {displayEmpty ? (\n                <ToolbarButton\n                    loading={loading}\n                    title={c('Action').t`Empty folder`}\n                    onClick={() => withLoading(handleEmpty())}\n                >\n                    <Icon className=\"toolbar-icon\" name=\"empty-folder\" />\n                </ToolbarButton>\n            ) : null}\n        </>\n    );\n};\n\nDeleteButton.propTypes = {\n    labelID: PropTypes.string.isRequired,\n    mailSettings: PropTypes.object.isRequired,\n    selectedIDs: PropTypes.array.isRequired\n};\n\nexport default DeleteButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { DropdownMenu, DropdownMenuButton, Icon } from 'react-components';\nimport { c } from 'ttag';\n\nimport ToolbarDropdown from './ToolbarDropdown';\n\nconst ASC = 0;\nconst DESC = 1;\nconst TIME = 'Time';\nconst SIZE = 'Size';\n\nconst ICONS = {\n    [SIZE]: {\n        [ASC]: 'sort-small-large',\n        [DESC]: 'sort-large-small'\n    },\n    [TIME]: {\n        [ASC]: 'sort-old-new',\n        [DESC]: 'sort-new-old'\n    }\n};\n\nconst SortDropdown = ({ loading, sort = 'Time', desc = ASC, onSort }) => {\n    return (\n        <ToolbarDropdown content={<Icon className=\"toolbar-icon\" name={ICONS[sort][desc]} />}>\n            <DropdownMenu>\n                <DropdownMenuButton\n                    disabled={sort === SIZE && desc === ASC}\n                    className=\"alignleft\"\n                    loading={loading}\n                    onClick={() => onSort({ Sort: SIZE, Desc: ASC })}\n                >\n                    <Icon name={ICONS[SIZE][ASC]} className=\"mr0-5\" />\n                    {c('Action').t`Size: small to large`}\n                </DropdownMenuButton>\n                <DropdownMenuButton\n                    disabled={sort === SIZE && desc === DESC}\n                    className=\"alignleft\"\n                    loading={loading}\n                    onClick={() => onSort({ Sort: SIZE, Desc: DESC })}\n                >\n                    <Icon name={ICONS[SIZE][DESC]} className=\"mr0-5\" />\n                    {c('Action').t`Size: large to small`}\n                </DropdownMenuButton>\n                <DropdownMenuButton\n                    disabled={sort === TIME && desc === DESC}\n                    className=\"alignleft\"\n                    loading={loading}\n                    onClick={() => onSort({ Sort: TIME, Desc: DESC })}\n                >\n                    <Icon name={ICONS[TIME][DESC]} className=\"mr0-5\" />\n                    {c('Action').t`Date: new to old`}\n                </DropdownMenuButton>\n                <DropdownMenuButton\n                    disabled={sort === TIME && desc === ASC}\n                    className=\"alignleft\"\n                    loading={loading}\n                    onClick={() => onSort({ Sort: TIME, Desc: ASC })}\n                >\n                    <Icon name={ICONS[TIME][ASC]} className=\"mr0-5\" />\n                    {c('Action').t`Date: old to new`}\n                </DropdownMenuButton>\n            </DropdownMenu>\n        </ToolbarDropdown>\n    );\n};\n\nSortDropdown.propTypes = {\n    sort: PropTypes.string,\n    desc: PropTypes.number,\n    loading: PropTypes.bool,\n    onSort: PropTypes.func.isRequired\n};\n\nexport default SortDropdown;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { DropdownMenu, DropdownMenuButton, Icon } from 'react-components';\nimport { c } from 'ttag';\n\nimport ToolbarDropdown from './ToolbarDropdown';\n\nconst FilterDropdown = ({ loading, onFilter }) => {\n    return (\n        <ToolbarDropdown content={<Icon className=\"toolbar-icon\" name=\"bullet-points\" />}>\n            <DropdownMenu>\n                <DropdownMenuButton className=\"alignleft\" loading={loading} onClick={() => onFilter()}>\n                    <Icon name=\"bullet-points\" className=\"mr0-5\" />\n                    {c('Action').t`Show all`}\n                </DropdownMenuButton>\n                <DropdownMenuButton className=\"alignleft\" loading={loading} onClick={() => onFilter()}>\n                    <Icon name=\"unread\" className=\"mr0-5\" />\n                    {c('Action').t`Show unread`}\n                </DropdownMenuButton>\n                <DropdownMenuButton className=\"alignleft\" loading={loading} onClick={() => onFilter()}>\n                    <Icon name=\"read\" className=\"mr0-5\" />\n                    {c('Action').t`Show read`}\n                </DropdownMenuButton>\n            </DropdownMenu>\n        </ToolbarDropdown>\n    );\n};\n\nFilterDropdown.propTypes = {\n    loading: PropTypes.bool,\n    filter: PropTypes.string,\n    onFilter: PropTypes.func.isRequired\n};\n\nexport default FilterDropdown;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Checkbox, DropdownMenu, DropdownMenuButton, Icon } from 'react-components';\nimport { c } from 'ttag';\n\nimport ToolbarDropdown from './ToolbarDropdown';\n\nconst SelectAll = ({ loading, disabled, checked, onCheck }) => {\n    return (\n        <>\n            <Checkbox\n                className=\"flex pl1\"\n                checked={checked}\n                disabled={disabled}\n                loading={loading}\n                onChange={({ target }) => onCheck(target.checked)}\n            />\n            <ToolbarDropdown\n                originalPlacement=\"bottom\"\n                disabled={disabled}\n                loading={loading}\n                title={c('Title').t`Open actions dropdown`}\n                content=\"\"\n            >\n                <DropdownMenu>\n                    <DropdownMenuButton className=\"alignleft\" onClick={() => onCheck()}>\n                        <Icon name=\"show-all-emails\" className=\"mr0-5\" />\n                        {c('Action').t`Select all`}\n                    </DropdownMenuButton>\n                    <DropdownMenuButton className=\"alignleft\" onClick={() => onCheck()}>\n                        <Icon name=\"unread\" className=\"mr0-5\" />\n                        {c('Action').t`All unread`}\n                    </DropdownMenuButton>\n                    <DropdownMenuButton className=\"alignleft\" onClick={() => onCheck()}>\n                        <Icon name=\"read\" className=\"mr0-5\" />\n                        {c('Action').t`All read`}\n                    </DropdownMenuButton>\n                    <DropdownMenuButton className=\"alignleft\" onClick={() => onCheck()}>\n                        <Icon name=\"star\" className=\"mr0-5\" />\n                        {c('Action').t`All unstarred`}\n                    </DropdownMenuButton>\n                    <DropdownMenuButton className=\"alignleft\" onClick={() => onCheck()}>\n                        <Icon name=\"starfull\" className=\"mr0-5\" />\n                        {c('Action').t`All starred`}\n                    </DropdownMenuButton>\n                </DropdownMenu>\n            </ToolbarDropdown>\n        </>\n    );\n};\n\nSelectAll.propTypes = {\n    loading: PropTypes.bool,\n    disabled: PropTypes.bool,\n    checked: PropTypes.bool.isRequired,\n    onCheck: PropTypes.func.isRequired\n};\n\nexport default SelectAll;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    LabelModal,\n    SearchInput,\n    Icon,\n    useLabels,\n    useModals,\n    PrimaryButton,\n    classnames,\n    Tooltip,\n    useLoading,\n    useApi,\n    useNotifications\n} from 'react-components';\nimport { LABEL_EXCLUSIVE, MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\nimport { c } from 'ttag';\nimport { normalize } from 'proton-shared/lib/helpers/string';\nimport { labelMessages } from 'proton-shared/lib/api/messages';\nimport { labelConversations } from 'proton-shared/lib/api/conversations';\n\nimport './MoveDropdown.scss';\nimport { ELEMENT_TYPES } from '../../constants';\n\nconst { INBOX, TRASH, SPAM, ARCHIVE } = MAILBOX_LABEL_IDS;\n\nconst MoveDropdown = ({ selectedIDs = [], type }) => {\n    const { createNotification } = useNotifications();\n    const [loading, withLoading] = useLoading();\n    const api = useApi();\n    const { createModal } = useModals();\n    const [labels = []] = useLabels();\n    const [search, updateSearch] = useState('');\n    const normSearch = normalize(search);\n    const folders = labels\n        .filter(({ Exclusive }) => Exclusive === LABEL_EXCLUSIVE.FOLDER)\n        .map((folder) => ({ ...folder, icon: 'folder' }))\n        .concat(\n            [\n                { ID: INBOX, Name: c('Mailbox').t`Inbox`, icon: 'inbox' },\n                { ID: ARCHIVE, Name: c('Mailbox').t`Archive`, icon: 'archive' },\n                { ID: SPAM, Name: c('Mailbox').t`Spam`, icon: 'spam' },\n                { ID: TRASH, Name: c('Mailbox').t`Trash`, icon: 'trash' }\n            ].filter(Boolean)\n        )\n        .filter(({ Name = '' }) => {\n            if (!search) {\n                return true;\n            }\n            const normName = normalize(Name);\n            return normName.includes(normSearch);\n        });\n\n    const handleMove = async (LabelID) => {\n        const action = type === ELEMENT_TYPES.CONVERSATION ? labelConversations : labelMessages;\n        await api(action({ LabelID, IDs: selectedIDs }));\n        createNotification({ text: c('Success').t`Elements moved` });\n    };\n\n    return (\n        <div className=\"p1\">\n            <div className=\"flex flex-spacebetween flex-items-center mb1\">\n                <label htmlFor=\"filter-folders\" className=\"bold\">{c('Label').t`Move to`}</label>\n                <Tooltip title={c('Title').t`Create folder`}>\n                    <PrimaryButton\n                        className=\"pm-button--small pm-button--for-smallicon\"\n                        onClick={() => {\n                            createModal(<LabelModal type=\"folder\" />);\n                        }}\n                    >\n                        <Icon name=\"folder\" fill=\"light\" className=\"flex-item-noshrink mr0-25\" />+\n                    </PrimaryButton>\n                </Tooltip>\n            </div>\n            <div className=\"mb1\">\n                <SearchInput\n                    autoFocus={true}\n                    value={search}\n                    onChange={updateSearch}\n                    id=\"filter-folders\"\n                    placeholder={c('Placeholder').t`Filter folders`}\n                />\n            </div>\n            <div className=\"scroll-if-needed scroll-smooth-touch moveDropdown-list-container\">\n                <ul className=\"unstyled mt0 mb0\">\n                    {folders.map(({ ID = '', Name = '', Color = '', icon }, index) => {\n                        return (\n                            <li key={ID} className={classnames([index < folders.length - 1 && 'border-bottom'])}>\n                                <button\n                                    type=\"button\"\n                                    disabled={loading}\n                                    className=\"w100 flex flex-nowrap flex-items-center pt0-5 pb0-5\"\n                                    onClick={() => withLoading(handleMove(ID))}\n                                >\n                                    <Icon name={icon} color={Color} className=\"flex-item-noshrink mr0-5\" />\n                                    <span className=\"ellipsis\" title={Name}>\n                                        {Name}\n                                    </span>\n                                </button>\n                            </li>\n                        );\n                    })}\n                </ul>\n            </div>\n        </div>\n    );\n};\n\nMoveDropdown.propTypes = {\n    selectedIDs: PropTypes.arrayOf(PropTypes.string),\n    type: PropTypes.oneOf([ELEMENT_TYPES.CONVERSATION, ELEMENT_TYPES.MESSAGE]).isRequired\n};\n\nexport default MoveDropdown;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    SearchInput,\n    Icon,\n    useLabels,\n    useModals,\n    PrimaryButton,\n    LabelModal,\n    classnames,\n    Tooltip,\n    useLoading,\n    useApi,\n    useNotifications,\n    Checkbox\n} from 'react-components';\nimport { LABEL_EXCLUSIVE } from 'proton-shared/lib/constants';\nimport { labelMessages, unlabelMessages } from 'proton-shared/lib/api/messages';\nimport { labelConversations, unlabelConversations } from 'proton-shared/lib/api/conversations';\nimport { c } from 'ttag';\nimport { normalize } from 'proton-shared/lib/helpers/string';\n\nimport './LabelDropdown.scss';\nimport { ELEMENT_TYPES } from '../../constants';\n\nconst LabelDropdown = ({ selectedIDs = [], type }) => {\n    const { createNotification } = useNotifications();\n    const [loading, withLoading] = useLoading();\n    const api = useApi();\n    const { createModal } = useModals();\n    const [labels = []] = useLabels();\n    const [search, updateSearch] = useState('');\n    const [lastChecked, setLastChecked] = useState(''); // Store ID of the last label ID checked\n    const [alsoArchive, updateAlsoArchive] = useState(false);\n    const [selectedLabelIDs, updateSelectedLabelIDs] = useState({}); // TODO\n    const normSearch = normalize(search);\n    const list = labels\n        .filter(({ Exclusive }) => Exclusive === LABEL_EXCLUSIVE.LABEL)\n        .map((folder) => ({ ...folder, icon: 'label' }))\n        .filter(({ Name = '' }) => {\n            if (!search) {\n                return true;\n            }\n            const normName = normalize(Name);\n            return normName.includes(normSearch);\n        });\n\n    const handleApply = async () => {\n        const labelAction = type === ELEMENT_TYPES.MESSAGE ? labelMessages : labelConversations;\n        const unlabelAction = type === ELEMENT_TYPES.MESSAGE ? unlabelMessages : unlabelConversations;\n        // TODO to improve: we call label / unlabel too much\n        const promises = list.map(({ ID: LabelID }) => {\n            if (selectedLabelIDs[LabelID]) {\n                return api(labelAction({ LabelID, IDs: selectedIDs }));\n            } else {\n                return api(unlabelAction({ LabelID, IDs: selectedIDs }));\n            }\n        });\n        await Promise.all(promises);\n        createNotification({ text: c('Success').t`Labels applied` });\n    };\n\n    const handleCheck = ({ target, nativeEvent }) => {\n        const { shiftKey } = nativeEvent;\n        const labelID = target.getAttribute('data-label-id');\n        const labelIDs = [labelID];\n\n        if (lastChecked && shiftKey) {\n            const start = list.findIndex(({ ID }) => ID === labelID);\n            const end = list.findIndex(({ ID }) => ID === lastChecked);\n            labelIDs.push(...list.slice(Math.min(start, end), Math.max(start, end) + 1).map(({ ID }) => ID));\n        }\n\n        setLastChecked(labelID);\n        const update = labelIDs.reduce((acc, ID) => {\n            acc[ID] = target.checked;\n            return acc;\n        }, Object.create(null));\n        updateSelectedLabelIDs({ ...selectedLabelIDs, ...update });\n    };\n\n    return (\n        <div className=\"p1\">\n            <div className=\"flex flex-spacebetween flex-items-center mb1\">\n                <label htmlFor=\"filter-labels\" className=\"bold\">{c('Label').t`Label as`}</label>\n                <Tooltip title={c('Title').t`Create label`}>\n                    <PrimaryButton\n                        className=\"pm-button--small pm-button--for-smallicon\"\n                        onClick={() => {\n                            createModal(<LabelModal type=\"label\" />);\n                        }}\n                    >\n                        <Icon name=\"label\" fill=\"light\" className=\"flex-item-noshrink mr0-25\" />+\n                    </PrimaryButton>\n                </Tooltip>\n            </div>\n            <div className=\"mb1\">\n                <SearchInput\n                    autoFocus={true}\n                    value={search}\n                    onChange={updateSearch}\n                    id=\"filter-labels\"\n                    placeholder={c('Placeholder').t`Filter labels`}\n                />\n            </div>\n            <div className=\"scroll-if-needed scroll-smooth-touch mb1 labelDropdown-list-container\">\n                <ul className=\"unstyled mt0 mb0\">\n                    {list.map(({ ID = '', Name = '', Color = '', icon }, index) => {\n                        return (\n                            <li\n                                key={ID}\n                                className={classnames([\n                                    'w100 flex flex-nowrap flex-spacebetween flex-items-center pt0-5 pb0-5',\n                                    index < list.length - 1 && 'border-bottom'\n                                ])}\n                            >\n                                <div className=\"flex flex-nowrap flex-spacebetween flex-items-center\">\n                                    <Icon name={icon} color={Color} className=\"flex-item-noshrink mr0-5\" />\n                                    <label htmlFor={ID} title={Name} className=\"ellipsis\">\n                                        {Name}\n                                    </label>\n                                </div>\n                                <Checkbox\n                                    className=\"flex-item-noshrink\"\n                                    id={ID}\n                                    checked={selectedLabelIDs[ID] || false}\n                                    data-label-id={ID}\n                                    onChange={handleCheck}\n                                />\n                            </li>\n                        );\n                    })}\n                </ul>\n            </div>\n            <div className=\"mb1 flex flex-spacebetween\">\n                <label htmlFor=\"alsoArchive\">{c('Label').t`Also archive`}</label>\n                <Checkbox\n                    id=\"alsoArchive\"\n                    checked={alsoArchive}\n                    onChange={({ target }) => updateAlsoArchive(target.checked)}\n                />\n            </div>\n            <div>\n                <PrimaryButton className=\"w100\" loading={loading} onClick={() => withLoading(handleApply())}>{c(\n                    'Action'\n                ).t`Apply`}</PrimaryButton>\n            </div>\n        </div>\n    );\n};\n\nLabelDropdown.propTypes = {\n    selectedIDs: PropTypes.arrayOf(PropTypes.string),\n    type: PropTypes.oneOf([ELEMENT_TYPES.CONVERSATION, ELEMENT_TYPES.MESSAGE]).isRequired\n};\n\nexport default LabelDropdown;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon } from 'react-components';\n\nimport ToolbarButton from './ToolbarButton';\n\nconst BackButton = ({ onClick }) => {\n    return (\n        <ToolbarButton onClick={onClick}>\n            <Icon className=\"toolbar-icon mauto\" name=\"arrow-left\" />\n        </ToolbarButton>\n    );\n};\n\nBackButton.propTypes = {\n    onClick: PropTypes.func.isRequired\n};\n\nexport default BackButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon } from 'react-components';\nimport { c } from 'ttag';\nimport { VIEW_LAYOUT } from 'proton-shared/lib/constants';\n\nimport ToolbarButton from './ToolbarButton';\nimport ToolbarSeparator from './ToolbarSeparator';\nimport ReadUnreadButtons from './ReadUnreadButtons';\nimport ToolbarDropdown from './ToolbarDropdown';\nimport LayoutDropdown from './LayoutDropdown';\nimport MoveButtons from './MoveButtons';\nimport DeleteButton from './DeleteButton';\nimport SortDropdown from './SortDropdown';\nimport FilterDropdown from './FilterDropdown';\nimport SelectAll from './SelectAll';\nimport MoveDropdown from '../dropdown/MoveDropdown';\nimport LabelDropdown from '../dropdown/LabelDropdown';\nimport BackButton from './BackButton';\nimport { getCurrentType } from '../../helpers/element';\n\nconst Toolbar = ({\n    labelID = '',\n    elementID,\n    checkAll,\n    onCheckAll,\n    mailSettings = {},\n    selectedIDs = [],\n    loading = false,\n    onSort,\n    sort,\n    desc,\n    onFilter,\n    filter,\n    onPrevious,\n    onNext,\n    onBack\n}) => {\n    const type = getCurrentType({ mailSettings, labelID });\n\n    const { ViewLayout = VIEW_LAYOUT.COLUMN } = mailSettings;\n    const isColumnMode = ViewLayout === VIEW_LAYOUT.COLUMN;\n\n    return (\n        <nav className=\"toolbar flex noprint flex-spacebetween\">\n            <div className=\"flex\">\n                {isColumnMode || !elementID ? (\n                    <SelectAll checked={checkAll} onCheck={onCheckAll} loading={loading} />\n                ) : (\n                    <BackButton onClick={onBack} />\n                )}\n                <ToolbarSeparator />\n                <ReadUnreadButtons labelID={labelID} mailSettings={mailSettings} selectedIDs={selectedIDs} />\n                <ToolbarSeparator />\n                <MoveButtons labelID={labelID} mailSettings={mailSettings} selectedIDs={selectedIDs} />\n                <DeleteButton labelID={labelID} mailSettings={mailSettings} selectedIDs={selectedIDs} />\n                <ToolbarSeparator />\n                <ToolbarDropdown autoClose={false} content={<Icon className=\"toolbar-icon\" name=\"folder\" />}>\n                    <MoveDropdown selectedIDs={selectedIDs} type={type} />\n                </ToolbarDropdown>\n                <ToolbarDropdown autoClose={false} content={<Icon className=\"toolbar-icon\" name=\"label\" />}>\n                    <LabelDropdown selectedIDs={selectedIDs} type={type} />\n                </ToolbarDropdown>\n            </div>\n            <div className=\"flex\">\n                <FilterDropdown loading={loading} filter={filter} onFilter={onFilter} />\n                <SortDropdown loading={loading} sort={sort} desc={desc} onSort={onSort} />\n                <LayoutDropdown mailSettings={mailSettings} />\n                <ToolbarSeparator />\n                <ToolbarButton loading={loading} title={c('Action').t`Previous`} onClick={onPrevious}>\n                    <Icon className=\"toolbar-icon rotateZ-90 mauto\" name=\"caret\" />\n                </ToolbarButton>\n                <ToolbarButton loading={loading} title={c('Action').t`Next`} onClick={onNext}>\n                    <Icon className=\"toolbar-icon rotateZ-270 mauto\" name=\"caret\" />\n                </ToolbarButton>\n            </div>\n        </nav>\n    );\n};\n\nToolbar.propTypes = {\n    checkAll: PropTypes.bool.isRequired,\n    desc: PropTypes.number,\n    sort: PropTypes.string,\n    filter: PropTypes.string,\n    onCheckAll: PropTypes.func.isRequired,\n    labelID: PropTypes.string.isRequired,\n    elementID: PropTypes.string,\n    selectedIDs: PropTypes.array.isRequired,\n    mailSettings: PropTypes.object.isRequired,\n    onPrevious: PropTypes.func.isRequired,\n    onNext: PropTypes.func.isRequired,\n    onSort: PropTypes.func.isRequired,\n    onFilter: PropTypes.func.isRequired,\n    onBack: PropTypes.func.isRequired,\n    loading: PropTypes.bool\n};\n\nexport default Toolbar;\n","import { hasBit } from 'proton-shared/lib/helpers/bitset';\nimport { MIME_TYPES } from 'proton-shared/lib/constants';\n\nimport { MESSAGE_FLAGS, SIGNATURE_START } from '../constants';\nimport { Message } from '../models/message';\n\nconst {\n    FLAG_RECEIVED,\n    FLAG_SENT,\n    FLAG_RECEIPT_REQUEST,\n    FLAG_IMPORTED,\n    FLAG_REPLIED,\n    FLAG_REPLIEDALL,\n    FLAG_FORWARDED,\n    FLAG_INTERNAL,\n    FLAG_AUTO,\n    FLAG_E2E,\n    FLAG_SIGN,\n    FLAG_PUBLIC_KEY\n} = MESSAGE_FLAGS;\n\nconst { PLAINTEXT, MIME } = MIME_TYPES;\n\n/**\n * Check if a message has a mime type\n * @return {function({MIMEType}): boolean}\n */\nconst hasMimeType = (type: string) => ({ MIMEType }: Message = {}) => MIMEType === type;\n\n/**\n * Check if a message has a flag in the flags bitmap\n * @param {Number} flag\n * @returns {Function}\n */\nexport const hasFlag = (flag: number) => ({ Flags = 0 }: Message = {}) => hasBit(Flags, flag);\n\nexport const isRequestReadReceipt = hasFlag(FLAG_RECEIPT_REQUEST);\nexport const isImported = hasFlag(FLAG_IMPORTED);\nexport const isInternal = hasFlag(FLAG_INTERNAL);\nexport const isExternal = (message: Message) => !isInternal(message);\nexport const isAuto = hasFlag(FLAG_AUTO);\nexport const isReceived = hasFlag(FLAG_RECEIVED);\nexport const isSent = hasFlag(FLAG_SENT);\nexport const isReplied = hasFlag(FLAG_REPLIED);\nexport const isRepliedAll = hasFlag(FLAG_REPLIEDALL);\nexport const isForwarded = hasFlag(FLAG_FORWARDED);\nexport const isSentAndReceived = hasFlag(FLAG_SENT | FLAG_RECEIVED);\nexport const isDraft = (message: Message) => !isSent(message) && !isReceived(message);\nexport const isE2E = hasFlag(FLAG_E2E);\nexport const isSentEncrypted = hasFlag(FLAG_E2E | FLAG_SENT);\nexport const isInternalEncrypted = hasFlag(FLAG_E2E | FLAG_INTERNAL);\nexport const isSign = hasFlag(FLAG_SIGN);\nexport const isAttachPublicKey = hasFlag(FLAG_PUBLIC_KEY);\nexport const isExternalEncrypted = (message: Message) => isE2E(message) && !isInternal(message);\nexport const isPGPEncrypted = (message: Message) => isExternal(message) && isReceived(message) && isE2E(message);\nexport const inSigningPeriod = ({ Time = 0 }: Message) => Time >= SIGNATURE_START;\n\nexport const isMIME = hasMimeType(MIME);\nexport const isPGPInline = (message: Message) => isPGPEncrypted(message) && !isMIME(message);\n\n/**\n * Get sender from message\n * @param {Object} message.Sender\n * @return {String} Name || Address\n */\nexport const getSender = ({ Sender = {} }: Message = {}) => {\n    const { Name = '', Address = '' } = Sender;\n    return Name || Address;\n};\n\n/**\n * Get recipients list from message\n * @param {Array} message.TolList\n * @param {Array} message.BCCList\n * @param {Array} message.CCList\n * @return {Array} [Name || Address]\n */\nexport const getRecipients = ({ ToList = [], CCList = [], BCCList = [] } = {}) => {\n    return [...ToList, ...CCList, ...BCCList].map(({ Address, Name }) => Name || Address);\n};\n\n/**\n * Extract recipients addresses from a message\n * @param {Array} message.ToList\n * @param {Array} message.CCList\n * @param {Array} message.BCCList\n * @return {Array<Object>}\n */\n// export const getRecipients = ({ ToList = [], CCList = [], BCCList = [] } = {}) => {\n//     return ToList.concat(CCList, BCCList);\n// };\n\n/**\n * Extract and normalize recipients\n * @param {Object} message\n * @return {Array<String>}\n */\n// export const normalizeRecipients = (message = {}) => {\n//     return getRecipients(message).map(({ Address }) => normalizeEmail(Address));\n// };\n\n/**\n * Decrypt simple message body with password\n * @param {String} message.Body\n * @param {String} password\n * @return {String} body\n */\n// export async function decrypt({ Body = '' } = {}, password) {\n//     const message = await getMessage(Body);\n//     const { data: body } = await decryptMessage({\n//         message,\n//         passwords: [password]\n//     });\n//     return body;\n// }\n\n/**\n * Get the label ids to add for a message that has moved.\n *\n * Types definition\n *   - 1: a draft\n * if you move it to trash and back to inbox, it will go to draft instead\n *   - 2: is sent\n *  if you move it to trash and back, it will go back to sent\n *   - 3: is inbox and sent (a message sent to yourself)\n * if you move it from trash to inbox, it will acquire both the inbox and sent labels ( 0 and 2 ).\n *\n * @param {Message} message\n * @param {String} labelID label id to which it is moved\n * @returns {Array}\n */\n// export const getLabelIDsMoved = (message, labelID) => {\n//     const toInbox = labelID === MAILBOX_IDENTIFIERS.inbox;\n\n//     if (toInbox) {\n//         // This message is a draft, if you move it to trash and back to inbox, it will go to draft instead\n//         if (message.isDraft()) {\n//             return [MAILBOX_IDENTIFIERS.allDrafts, MAILBOX_IDENTIFIERS.drafts];\n//         }\n\n//         // If you move it from trash to inbox, it will acquire both the inbox and sent labels ( 0 and 2 ).\n//         if (message.isSentAndReceived()) {\n//             return [MAILBOX_IDENTIFIERS.inbox, MAILBOX_IDENTIFIERS.allSent, MAILBOX_IDENTIFIERS.sent];\n//         }\n\n//         // This message is sent, if you move it to trash and back, it will go back to sent\n//         if (message.isSent()) {\n//             return [MAILBOX_IDENTIFIERS.allSent, MAILBOX_IDENTIFIERS.sent];\n//         }\n//     }\n\n//     return [labelID];\n// };\n\n/**\n * Get date from message\n * @param {Integer} message.Time\n * @return {Date}\n */\nexport const getDate = ({ Time = 0 }: Message = {}) => new Date(Time * 1000);\n\n/**\n * Check if these all messages shared the same sender (by email address)\n * @param {Array<message>} messages\n * @return {Boolean}\n */\n// export const sameSender = (messages = []) => {\n//     if (!messages.length) {\n//         return false;\n//     }\n\n//     const [{ Sender: firstSender } = {}] = messages;\n//     const firstAddress = normalizeEmail(firstSender.Address);\n\n//     return (\n//         messages.length ===\n//         messages.filter(({ Sender = {} }) => {\n//             return normalizeEmail(Sender.Address) === firstAddress;\n//         }).length\n//     );\n// };\n\nexport const getParsedHeaders = (message: Message, parameter: string) => {\n    const { ParsedHeaders = {} } = message;\n\n    if (parameter) {\n        return ParsedHeaders[parameter];\n    }\n\n    return ParsedHeaders;\n};\n\nexport const getListUnsubscribe = (message: Message) => {\n    return getParsedHeaders(message, 'List-Unsubscribe') || '';\n};\n\nexport const getListUnsubscribePost = (message: Message) => {\n    return getParsedHeaders(message, 'List-Unsubscribe-Post') || '';\n};\n\nexport const getAttachments = (message: Message = {}) => message.Attachments || [];\nexport const hasAttachments = (message: Message = {}) => getAttachments(message).length > 0;\nexport const attachmentsSize = (message: Message = {}) =>\n    getAttachments(message).reduce((acc, { Size = 0 } = {}) => acc + +Size, 0);\n\nexport const isPlainText = (message: Message = {}) => message.MIMEType === PLAINTEXT;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon } from 'react-components';\n\nconst ItemCheckbox = ({ children, className, ...rest }) => {\n    return (\n        <label className={className}>\n            <input type=\"checkbox\" className=\"item-checkbox sr-only\" {...rest} />\n            <span className=\"item-icon flex-item-noshrink rounded50 bg-white inline-flex\">\n                <span className=\"mauto item-abbr\">{children}</span>\n                <span className=\"item-icon-fakecheck mauto\">\n                    <Icon name=\"on\" className=\"fill-white\" />\n                </span>\n            </span>\n        </label>\n    );\n};\n\nItemCheckbox.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string\n};\n\nexport default ItemCheckbox;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon, useLoading, useApi, useEventManager, classnames } from 'react-components';\nimport { MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\nimport { labelMessages, unlabelMessages } from 'proton-shared/lib/api/messages';\nimport { labelConversations, unlabelConversations } from 'proton-shared/lib/api/conversations';\n\nimport { ELEMENT_TYPES } from '../../constants';\n\nconst ItemStar = ({ element = {}, type = ELEMENT_TYPES.CONVERSATION }) => {\n    const api = useApi();\n    const isConversation = type === ELEMENT_TYPES.CONVERSATION;\n    const { call } = useEventManager();\n    const [loading, withLoading] = useLoading();\n    const labelIDs = isConversation ? element.Labels.map(({ ID }) => ID) : element.LabelIDs;\n    const isStarred = labelIDs.includes(MAILBOX_LABEL_IDS.STARRED);\n    const iconName = isStarred ? 'starfull' : 'star';\n\n    const handleClick = async () => {\n        const action = isConversation\n            ? isStarred\n                ? unlabelConversations\n                : labelConversations\n            : isStarred\n            ? unlabelMessages\n            : labelMessages;\n        await api(action({ LabelID: MAILBOX_LABEL_IDS.STARRED, IDs: [element.ID] }));\n        await call();\n    };\n\n    return (\n        <button\n            disabled={loading}\n            type=\"button\"\n            className={classnames(['starbutton item-star inline-flex', isStarred && 'starbutton--is-starred'])}\n            onClick={() => withLoading(handleClick())}\n        >\n            <Icon name={iconName} />\n        </button>\n    );\n};\n\nItemStar.propTypes = {\n    type: PropTypes.oneOf([ELEMENT_TYPES.CONVERSATION, ELEMENT_TYPES.MESSAGE]).isRequired,\n    element: PropTypes.object.isRequired\n};\n\nexport default ItemStar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { toMap } from 'proton-shared/lib/helpers/object';\nimport { orderBy } from 'proton-shared/lib/helpers/array';\nimport { Link } from 'react-router-dom';\nimport { Icon, classnames } from 'react-components';\n\nimport { ELEMENT_TYPES } from '../../constants';\n\nconst ItemLabels = ({\n    element,\n    onUnlabel,\n    type = ELEMENT_TYPES.CONVERSATION,\n    max = 99,\n    labels = [],\n    className = ''\n}) => {\n    const isConversation = type === ELEMENT_TYPES.CONVERSATION;\n    const labelIDs = isConversation ? element.Labels.map(({ ID }) => ID) : element.LabelIDs;\n    const labelsMap = toMap(labels);\n\n    return (\n        <div className={classnames(['inbl', className])}>\n            {orderBy(labelIDs.map((ID) => labelsMap[ID]).filter(Boolean), 'Order')\n                .slice(0, max)\n                .map(({ ID = '', Name = '', Color = '' }) => {\n                    const style = {\n                        backgroundColor: Color,\n                        borderColor: Color\n                    };\n                    const to = `/${ID}`;\n                    return (\n                        <span className=\"badgeLabel\" style={style} key={ID}>\n                            <Link to={to}>{Name}</Link>\n                            {onUnlabel ? (\n                                <button type=\"button\" onClick={() => onUnlabel(ID)}>\n                                    <Icon name=\"off\" />\n                                </button>\n                            ) : null}\n                        </span>\n                    );\n                })}\n        </div>\n    );\n};\n\nItemLabels.propTypes = {\n    element: PropTypes.object.isRequired,\n    labels: PropTypes.array,\n    max: PropTypes.number,\n    onUnlabel: PropTypes.func,\n    type: PropTypes.oneOf([ELEMENT_TYPES.CONVERSATION, ELEMENT_TYPES.MESSAGE]).isRequired,\n    className: PropTypes.string\n};\n\nexport default ItemLabels;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon } from 'react-components';\n\nimport { ELEMENT_TYPES } from '../../constants';\nimport { hasAttachments } from '../../helpers/message';\n\nconst ItemAttachmentIcon = ({ element = {}, type = ELEMENT_TYPES.CONVERSATION }) => {\n    const isConversation = type === ELEMENT_TYPES.CONVERSATION;\n    const hasAttachment = isConversation ? element.ContextNumAttachments : hasAttachments(element);\n\n    if (!hasAttachment) {\n        return null;\n    }\n\n    return <Icon name=\"attach\" />;\n};\n\nItemAttachmentIcon.propTypes = {\n    element: PropTypes.object,\n    type: PropTypes.oneOf([ELEMENT_TYPES.CONVERSATION, ELEMENT_TYPES.MESSAGE]).isRequired\n};\n\nexport default ItemAttachmentIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { Icon } from 'react-components';\nimport { MAILBOX_LABEL_IDS, SHOW_MOVED } from 'proton-shared/lib/constants';\nimport { c } from 'ttag';\n\nimport { LABEL_IDS_TO_HUMAN } from '../../constants';\n\nconst { INBOX, TRASH, SPAM, ARCHIVE, SENT, DRAFTS } = MAILBOX_LABEL_IDS;\n\nconst getFolders = ({ ShowMoved }) => ({\n    [INBOX]: {\n        icon: 'inbox',\n        name: c('Mailbox').t`Inbox`,\n        to: '/inbox'\n    },\n    [TRASH]: {\n        icon: 'trash',\n        name: c('Mailbox').t`Trash`,\n        to: '/trash'\n    },\n    [SPAM]: {\n        icon: 'spam',\n        name: c('Mailbox').t`Spam`,\n        to: '/spam'\n    },\n    [ARCHIVE]: {\n        icon: 'archive',\n        name: c('Mailbox').t`Archive`,\n        to: '/archive'\n    },\n    [SENT]: {\n        icon: 'sent',\n        name: c('Mailbox').t`Sent`,\n        to:\n            ShowMoved & SHOW_MOVED.SENT\n                ? `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.ALL_SENT]}`\n                : `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.SENT]}`\n    },\n    [DRAFTS]: {\n        icon: 'drafts',\n        name: c('Mailbox').t`Drafts`,\n        to:\n            ShowMoved & SHOW_MOVED.DRAFTS\n                ? `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.ALL_DRAFTS]}`\n                : `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.DRAFTS]}`\n    }\n});\n\nconst ItemLocation = ({ message, mailSettings }) => {\n    const { LabelIDs = [] } = message;\n    const folders = getFolders(mailSettings);\n\n    return (\n        <>\n            {LabelIDs.filter((labelID) => folders[labelID]).map((labelID) => {\n                const { icon, name, to } = folders[labelID];\n                return (\n                    <Link to={to} className=\"mr0-25 flex-item-noshrink\" key={labelID} title={name}>\n                        <Icon name={icon} />\n                    </Link>\n                );\n            })}\n        </>\n    );\n};\n\nItemLocation.propTypes = {\n    message: PropTypes.object.isRequired,\n    mailSettings: PropTypes.object.isRequired\n};\n\nexport default ItemLocation;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { classnames } from 'react-components';\n\nimport { getDate } from '../../helpers/element';\nimport { formatSimpleDate, formatFullDate, formatDistanceToNow } from '../../helpers/date';\n\nconst FORMATERS = {\n    simple: formatSimpleDate,\n    full: formatFullDate,\n    distance: formatDistanceToNow\n};\n\n// TODO: Update with a setInterval?\n\nconst ItemDate = ({ element, className, mode = 'simple' }) => {\n    const formater = FORMATERS[mode] || FORMATERS.distance;\n    return <span className={classnames(['item-date', className])}>{formater(getDate(element))}</span>;\n};\n\nItemDate.propTypes = {\n    element: PropTypes.object.isRequired,\n    className: PropTypes.string,\n    mode: PropTypes.string\n};\n\nexport default ItemDate;\n","import { format, formatDistanceToNow as dateFnsFormatDistanceToNow, isToday } from 'date-fns';\nimport { dateLocale } from 'proton-shared/lib/i18n';\n\nexport const formatSimpleDate = (date) => format(date, isToday(date) ? 'p' : 'P', { locale: dateLocale });\n\nexport const formatFullDate = (date) => format(date, 'PPPPp', { locale: dateLocale });\n\nexport const formatDistanceToNow = (date) => dateFnsFormatDistanceToNow(date, { locale: dateLocale, addSuffix: true });\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst NumMessages = ({ conversation, className }) => {\n    // ContextNumMessages shoud not be used\n    const { NumMessages = 0 } = conversation;\n\n    if (NumMessages <= 1) {\n        return null;\n    }\n\n    return <span className={className}>({NumMessages})</span>;\n};\n\nNumMessages.propTypes = {\n    className: PropTypes.string,\n    conversation: PropTypes.object.isRequired\n};\n\nexport default NumMessages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ItemStar from './ItemStar';\nimport { ELEMENT_TYPES } from '../../constants';\nimport ItemLabels from './ItemLabels';\nimport ItemAttachmentIcon from './ItemAttachmentIcon';\nimport ItemLocation from './ItemLocation';\nimport ItemDate from './ItemDate';\nimport NumMessages from '../conversation/NumMessages';\n\nconst ItemColumnLayout = ({ labels, element, mailSettings = {}, type, senders }) => {\n    const { Subject } = element;\n    const isConversation = type === ELEMENT_TYPES.CONVERSATION;\n\n    return (\n        <div className=\"flex-item-fluid flex flex-nowrap flex-column flex-spacebetween item-titlesender\">\n            <div className=\"flex\">\n                <div className=\"flex-item-fluid w0 pr1\">\n                    {isConversation ? (\n                        <NumMessages className=\"mr0-5\" mailSettings={mailSettings} conversation={element} />\n                    ) : (\n                        <ItemLocation message={element} mailSettings={mailSettings} />\n                    )}\n                    <span className=\"inbl mw100 ellipsis\">{Subject}</span>\n                </div>\n                <ItemDate element={element} type={type} />\n            </div>\n            <div className=\"flex\">\n                <div className=\"flex-item-fluid pr1\">\n                    <span className=\"inbl mw100 ellipsis\">{senders}</span>\n                </div>\n                <div className=\"item-icons\">\n                    <ItemLabels max={4} type={type} labels={labels} element={element} />\n                    <ItemAttachmentIcon element={element} type={type} />\n                    <ItemStar element={element} type={type} />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nItemColumnLayout.propTypes = {\n    labels: PropTypes.array,\n    element: PropTypes.object.isRequired,\n    mailSettings: PropTypes.object.isRequired,\n    type: PropTypes.string.isRequired,\n    senders: PropTypes.string.isRequired\n};\n\nexport default ItemColumnLayout;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ItemStar from './ItemStar';\nimport { ELEMENT_TYPES } from '../../constants';\nimport ItemLabels from './ItemLabels';\nimport ItemAttachmentIcon from './ItemAttachmentIcon';\nimport ItemLocation from './ItemLocation';\nimport ItemDate from './ItemDate';\nimport NumMessages from '../conversation/NumMessages';\nimport humanSize from 'proton-shared/lib/helpers/humanSize';\n\nconst ItemRowLayout = ({ labels, element, mailSettings = {}, type, senders }) => {\n    const { Subject, Size } = element;\n    const isConversation = type === ELEMENT_TYPES.CONVERSATION;\n    const size = humanSize(Size);\n\n    return (\n        <div className=\"flex-item-fluid flex flex-nowrap flex-row flex-spacebetween item-titlesender\">\n            <div className=\"w20 flex mauto pr1\">{senders}</div>\n            <div className=\"flex-item-fluid flex mauto\">\n                {isConversation ? (\n                    <NumMessages className=\"mr0-5\" mailSettings={mailSettings} conversation={element} />\n                ) : (\n                    <ItemLocation message={element} mailSettings={mailSettings} />\n                )}\n                <span className=\"inbl mw100 ellipsis\">{Subject}</span>\n                <ItemLabels max={4} type={type} labels={labels} element={element} />\n                <ItemAttachmentIcon element={element} type={type} />\n            </div>\n            <span className=\"mtauto mbauto mr1 ml1 ng-binding\">{size}</span>\n            <span className=\"mauto\">\n                <ItemDate element={element} type={type} />\n            </span>\n            <span className=\"mauto\">\n                <ItemStar element={element} type={type} />\n            </span>\n        </div>\n    );\n};\n\nItemRowLayout.propTypes = {\n    labels: PropTypes.array,\n    element: PropTypes.object.isRequired,\n    mailSettings: PropTypes.object.isRequired,\n    type: PropTypes.string.isRequired,\n    senders: PropTypes.string.isRequired\n};\n\nexport default ItemRowLayout;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { classnames } from 'react-components';\nimport { getInitial } from 'proton-shared/lib/helpers/string';\nimport { MAILBOX_LABEL_IDS, VIEW_LAYOUT } from 'proton-shared/lib/constants';\n\nimport ItemCheckbox from './ItemCheckbox';\nimport { getSenders, getRecipients } from '../../helpers/conversation';\nimport { getSender, getRecipients as getMessageRecipients } from '../../helpers/message';\nimport { getCurrentType } from '../../helpers/element';\nimport ItemColumnLayout from './ItemColumnLayout';\nimport ItemRowLayout from './ItemRowLayout';\nimport { isConversation } from '../../helpers/element';\n\nconst { SENT, SENT_ALL, DRAFTS, DRAFTS_ALL } = MAILBOX_LABEL_IDS;\n\nconst Item = ({ labelID, labels, element, elementID, mailSettings = {}, checked = false, onCheck, onClick }) => {\n    const { ID } = element;\n    const displayRecipients = [SENT, SENT_ALL, DRAFTS, DRAFTS_ALL].includes(labelID);\n    const type = getCurrentType({ mailSettings, labelID });\n    // const isConversation = type === ELEMENT_TYPES.CONVERSATION;\n    const senders = isConversation(element) ? getSenders(element) : [getSender(element)];\n    const recipients = isConversation(element) ? getRecipients(element) : getMessageRecipients(element);\n\n    const { ViewLayout = VIEW_LAYOUT.COLUMN } = mailSettings;\n    const isColumnMode = ViewLayout === VIEW_LAYOUT.COLUMN;\n    const ItemLayout = isColumnMode ? ItemColumnLayout : ItemRowLayout;\n\n    return (\n        <div\n            onClick={(event) => {\n                if (event.target.classList.contains('item-checkbox') || event.target.closest('.item-checkbox')) {\n                    event.stopPropagation();\n                    return;\n                }\n                onClick(ID);\n            }}\n            className={classnames([\n                'flex flex-nowrap item-container bg-global-white',\n                elementID === ID && 'item-is-selected'\n            ])}\n        >\n            <ItemCheckbox\n                className=\"mr1 item-checkbox\"\n                checked={checked}\n                onChange={onCheck}\n                data-element-id={element.ID}\n            >\n                {getInitial(displayRecipients ? recipients[0] : senders[0])}\n            </ItemCheckbox>\n            <ItemLayout\n                labels={labels}\n                element={element}\n                mailSettings={mailSettings}\n                type={type}\n                senders={(displayRecipients ? recipients : senders).join(', ')}\n            />\n        </div>\n    );\n};\n\nItem.propTypes = {\n    labels: PropTypes.array,\n    labelID: PropTypes.string.isRequired,\n    elementID: PropTypes.string,\n    mailSettings: PropTypes.object.isRequired,\n    element: PropTypes.object.isRequired,\n    checked: PropTypes.bool,\n    onCheck: PropTypes.func.isRequired,\n    onClick: PropTypes.func.isRequired\n};\n\nexport default Item;\n","export const getSenders = ({ Senders = [] } = {}) => {\n    return Senders.map(({ Address, Name }) => Name || Address);\n};\n\nexport const getRecipients = ({ Recipients = [] }) => {\n    return Recipients.map(({ Address, Name }) => Name || Address);\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useLabels } from 'react-components';\n\nimport Item from './Item';\n\nconst List = ({ labelID, elementID, mailSettings = {}, elements = [], checkedIDs = [], onCheck, onClick }) => {\n    const [labels] = useLabels();\n    const [lastChecked, setLastChecked] = useState(); // Store ID of the last contact ID checked\n\n    const handleCheck = ({ target, nativeEvent }) => {\n        const { shiftKey } = nativeEvent;\n        const elementID = target.getAttribute('data-element-id');\n        const elementIDs = [elementID];\n\n        if (lastChecked && shiftKey) {\n            const start = elements.findIndex(({ ID }) => ID === elementID);\n            const end = elements.findIndex(({ ID }) => ID === lastChecked);\n            elementIDs.push(...elements.slice(Math.min(start, end), Math.max(start, end) + 1).map(({ ID }) => ID));\n        }\n\n        setLastChecked(elementID);\n        onCheck(elementIDs, target.checked);\n    };\n\n    return (\n        <div className=\"items-column-list scroll-if-needed scroll-smooth-touch\">\n            {elements.map((element) => {\n                return (\n                    <Item\n                        labels={labels}\n                        labelID={labelID}\n                        key={element.ID}\n                        elementID={elementID}\n                        element={element}\n                        checked={checkedIDs.includes(element.ID)}\n                        onCheck={handleCheck}\n                        onClick={onClick}\n                        mailSettings={mailSettings}\n                    />\n                );\n            })}\n        </div>\n    );\n};\n\nList.propTypes = {\n    labelID: PropTypes.string.isRequired,\n    elementID: PropTypes.string,\n    mailSettings: PropTypes.object.isRequired,\n    elements: PropTypes.array,\n    checkedIDs: PropTypes.array,\n    onCheck: PropTypes.func,\n    onClick: PropTypes.func\n};\n\nexport default List;\n","// import getRandomValues from 'get-random-values';\n\n// import { EMAIL_FORMATING } from '../app/constants';\n\nexport const EMAIL_FORMATING = {\n    OPEN_TAG_AUTOCOMPLETE: '‹',\n    CLOSE_TAG_AUTOCOMPLETE: '›',\n    OPEN_TAG_AUTOCOMPLETE_RAW: '<',\n    CLOSE_TAG_AUTOCOMPLETE_RAW: '>'\n};\n\nconst {\n    OPEN_TAG_AUTOCOMPLETE,\n    CLOSE_TAG_AUTOCOMPLETE,\n    OPEN_TAG_AUTOCOMPLETE_RAW,\n    CLOSE_TAG_AUTOCOMPLETE_RAW\n} = EMAIL_FORMATING;\n\nexport const MAP_TAGS = {\n    [OPEN_TAG_AUTOCOMPLETE_RAW]: OPEN_TAG_AUTOCOMPLETE,\n    [CLOSE_TAG_AUTOCOMPLETE_RAW]: CLOSE_TAG_AUTOCOMPLETE,\n    [OPEN_TAG_AUTOCOMPLETE]: OPEN_TAG_AUTOCOMPLETE_RAW,\n    [CLOSE_TAG_AUTOCOMPLETE]: CLOSE_TAG_AUTOCOMPLETE_RAW\n};\n\nexport const escape = (string) => {\n    const UNESCAPE_HTML_REGEX = /[&<>\"']/g;\n    const HTML_ESCAPES = {\n        '&': '&amp;',\n        '<': '&lt;',\n        '>': '&gt;',\n        '\"': '&quot;',\n        \"'\": '&#39;'\n    };\n\n    return string.replace(UNESCAPE_HTML_REGEX, HTML_ESCAPES);\n};\n\nexport const unescape = (string) => {\n    const ESCAPED_HTML_REGEX = /&(?:amp|lt|gt|quot|#39);/g;\n    const HTML_UNESCAPES = {\n        '&amp;': '&',\n        '&lt;': '<',\n        '&gt;': '>',\n        '&quot;': '\"',\n        '&#39;': \"'\"\n    };\n\n    return string.replace(ESCAPED_HTML_REGEX, HTML_UNESCAPES);\n};\n\n/**\n * Replace custom unicode escape for chevrons by default\n * Replace <> (for a tag) via unicode or reverse it\n * @param  {String} input\n * @param {String} mode  undefined for toUnicode, reverse for unicode -> <|>\n * @return {String}\n */\nexport function unicodeTag(input = '', mode) {\n    if (mode === 'reverse') {\n        const matchTagUnicodeOpenClose = () => new RegExp(`${OPEN_TAG_AUTOCOMPLETE}|${CLOSE_TAG_AUTOCOMPLETE}`, 'ig');\n\n        return input.replace(matchTagUnicodeOpenClose(), (match) => MAP_TAGS[match] || '');\n    }\n\n    const matchTagOpenClose = () => new RegExp(`${OPEN_TAG_AUTOCOMPLETE_RAW}|${CLOSE_TAG_AUTOCOMPLETE_RAW}`, 'ig');\n    return input.replace(matchTagOpenClose(), (match) => MAP_TAGS[match] || '');\n}\n\n/**\n * Transform value to be normalized (lowercase)\n * @param {String} email\n * @return {String}\n */\nexport const normalizeEmail = (email = '') => email.toLowerCase();\n\n/**\n * Remove plus alias part present in the email value\n * @param {String} email containing +plus-alias\n */\nexport const removeEmailAlias = (email = '') => {\n    return normalizeEmail(email)\n        .replace(/(\\+[^@]*)@/, '@')\n        .replace(/[._-](?=[^@]*@)/g, '');\n};\n\n/**\n * Add plus alias part for an email\n * @param {String} email original\n * @param {String} plus part to add between + and @\n * @return {String}\n */\nexport const addPlusAlias = (email = '', plus = '') => {\n    const atIndex = email.indexOf('@');\n    const plusIndex = email.indexOf('+');\n\n    if (atIndex === -1 || plusIndex > -1) {\n        return email;\n    }\n\n    const name = email.substring(0, atIndex);\n    const domain = email.substring(atIndex, email.length);\n\n    return `${name}+${plus}${domain}`;\n};\n\n/**\n * Converts the integer to a 32-bit base encoded string in 2s complement format, so that it doesn't contain a sign \"-\"\n * @param val int The integer to be encoded\n * @param bits int The amount of bits per character\n */\nexport const toUnsignedString = (val, bits) => {\n    const base = 1 << bits;\n    const wordCount = Math.ceil(32 / bits);\n    const bottomBits = (wordCount - 1) * bits;\n\n    const bottom = val & ((1 << bottomBits) - 1);\n    const top = val >>> bottomBits;\n    if (top === 0) {\n        return bottom.toString(base);\n    }\n    const topString = top.toString(base);\n    const bottomString = bottom.toString(base);\n    const padLength = wordCount - topString.length - bottomString.length;\n    const middleString = '0'.repeat(padLength);\n    return topString + middleString + bottomString;\n};\n\n/**\n * Unescape a string in hex or octal encoding.\n * See https://www.w3.org/International/questions/qa-escapes#css_other for all possible cases.\n * @param {String} str\n * @returns {String} escaped string\n */\nexport const unescapeCSSEncoding = (str) => {\n    // Regexp declared inside the function to reset its state (because of the global flag).\n    // cf https://stackoverflow.com/questions/1520800/why-does-a-regexp-with-global-flag-give-wrong-results\n    const UNESCAPE_CSS_ESCAPES_REGEX = /\\\\([0-9A-Fa-f]{1,6}) ?/g;\n    const UNESCAPE_HTML_DEC_REGEX = /&#(\\d+)(;|(?=[^\\d;]))/g;\n    const UNESCAPE_HTML_HEX_REGEX = /&#x([0-9A-Fa-f]+)(;|(?=[^\\d;]))/g;\n    const OTHER_ESC = /\\\\(.)/g;\n\n    const handleEscape = (radix) => (ignored, val) => String.fromCodePoint(Number.parseInt(val, radix));\n    /*\n     * basic unescaped named sequences: &amp; etcetera, lodash does not support a lot, but that is not a problem for our case.\n     * Actually handling all escaped sequences would mean keeping track of a very large and ever growing amount of named sequences\n     */\n    const namedUnescaped = unescape(str);\n    // lodash doesn't unescape &#160; or &#xA0; sequences, we have to do this manually:\n    const decUnescaped = namedUnescaped.replace(UNESCAPE_HTML_DEC_REGEX, handleEscape(10));\n    const hexUnescaped = decUnescaped.replace(UNESCAPE_HTML_HEX_REGEX, handleEscape(16));\n    // unescape css backslash sequences\n    const strUnescapedHex = hexUnescaped.replace(UNESCAPE_CSS_ESCAPES_REGEX, handleEscape(16));\n\n    return strUnescapedHex.replace(OTHER_ESC, (_, char) => char);\n};\n\nexport const ucFirst = (input = '') => {\n    return input.charAt(0).toUpperCase() + input.slice(1);\n};\n\n/**\n * Extract value between chevrons\n * @param {String} str ex: Andy <andy@pm.me>\n * @return {String} ex: andy@pm.me\n */\nexport const extractChevrons = (str = '') => {\n    const CHEVRONS_REGEX = /<([^>]+)>/g;\n    const [, match = ''] = CHEVRONS_REGEX.exec(str) || [];\n    return match;\n};\n\n/**\n * @{link https://css-tricks.com/snippets/javascript/htmlentities-for-javascript/}\n */\nexport const htmlEntities = (str = '') => {\n    return String(str)\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;');\n};\n\nexport const uniqID = () => {\n    return `pt${Math.random()\n        .toString(32)\n        .slice(2, 12)}-${Date.now()}`;\n};\n\n/**\n * Generates a contact UID of the form 'proton-web-uuid'\n * @return {String}\n */\nexport function generateUID() {\n    const s4 = () => {\n        return Math.floor((1 + Math.random()) * 0x10000)\n            .toString(16)\n            .substring(1);\n    };\n\n    return `proton-web-${s4()}${s4()}-${s4()}-${s4()}-${s4()}-${s4()}${s4()}${s4()}`;\n}\n\n/**\n * Generate a random string.\n * @param {Number} length\n * @return {string}\n */\n// export const getRandomString = (length) => {\n//     const charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n//     let i;\n//     let result = '';\n\n//     const values = getRandomValues(new Uint32Array(length));\n\n//     for (i = 0; i < length; i++) {\n//         result += charset[values[i] % charset.length];\n//     }\n\n//     return result;\n// };\n","import DOMPurify from 'dompurify';\n\nimport { unicodeTag, unescapeCSSEncoding, escape } from './string';\n\n/*\nThis is valid\n    - background:&#117;r&#108;(\n    - background:url&lpar;\n    - etc.\n*/\nconst CSS_URL = '((url)(\\\\(|&(#40|#x00028|lpar);))';\nconst REGEXP_URL_ATTR = new RegExp(CSS_URL, 'gi');\nconst { LIST_PROTON_ATTR, MAP_PROTON_ATTR } = [\n    'data-src',\n    'src',\n    'srcset',\n    'background',\n    'poster',\n    'xlink:href'\n].reduce(\n    (acc, attr) => {\n        acc.LIST_PROTON_ATTR.push(`proton-${attr}`);\n        acc.MAP_PROTON_ATTR[attr] = true;\n        return acc;\n    },\n    {\n        LIST_PROTON_ATTR: [],\n        MAP_PROTON_ATTR: Object.create(null)\n    }\n);\n\nconst CONFIG = {\n    default: {\n        ALLOWED_URI_REGEXP: /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|blob|xmpp|data):|[^a-z]|[a-z+.\\-]+(?:[^a-z+.\\-:]|$))/i, // eslint-disable-line no-useless-escape\n        ADD_TAGS: ['proton-src', 'base', 'proton-svg'],\n        ADD_ATTR: ['target', 'proton-src'],\n        FORBID_TAGS: ['style', 'input', 'form'],\n        FORBID_ATTR: ['srcset']\n    },\n    // When we display a message we need to be global and return more informations\n    raw: { WHOLE_DOCUMENT: true, RETURN_DOM: true },\n    html: { WHOLE_DOCUMENT: false, RETURN_DOM: true },\n    protonizer: {\n        FORBID_ATTR: {},\n        ADD_ATTR: ['target'].concat(LIST_PROTON_ATTR),\n        WHOLE_DOCUMENT: true,\n        RETURN_DOM: true\n    },\n    content: {\n        ALLOW_UNKNOWN_PROTOCOLS: true,\n        WHOLE_DOCUMENT: false,\n        RETURN_DOM: true,\n        RETURN_DOM_FRAGMENT: true\n    }\n};\n\n/**\n * Escape some WTF from the CSSParser, cf spec files\n * @param  {String} style\n * @return {String}\n */\nconst escapeURLinStyle = (style) => {\n    // handle the case where the value is html encoded, e.g.:\n    // background:&#117;rl(&quot;https://i.imgur.com/WScAnHr.jpg&quot;)\n\n    const unescapedEncoding = unescapeCSSEncoding(style);\n    const escapeFlag = unescapedEncoding !== style;\n\n    const escapedStyle = unescapedEncoding.replace(/\\\\r/g, 'r').replace(REGEXP_URL_ATTR, 'proton-url(');\n\n    if (escapedStyle === unescapedEncoding) {\n        // nothing escaped: just return input\n        return style;\n    }\n\n    return escapeFlag ? escape(escapedStyle) : escapedStyle;\n};\n\nfunction beforeSanitizeElements(node) {\n    // We only work on elements\n    if (node.nodeType !== 1) {\n        return node;\n    }\n\n    Array.from(node.attributes).forEach((type) => {\n        const item = type.name;\n        if (MAP_PROTON_ATTR[item]) {\n            node.setAttribute('proton-' + item, node.getAttribute(item));\n            node.removeAttribute(item);\n        }\n\n        if (item === 'style') {\n            const escaped = escapeURLinStyle(node.getAttribute('style'));\n            node.setAttribute('style', escaped);\n        }\n    });\n\n    return node;\n}\n\nexport const purifyHTMLHooks = (active) => {\n    if (active) {\n        return DOMPurify.addHook('beforeSanitizeElements', beforeSanitizeElements);\n    }\n\n    DOMPurify.removeHook('beforeSanitizeElements');\n};\n\nconst getConfig = (type) => ({ ...CONFIG.default, ...(CONFIG[type] || {}) });\nconst clean = (mode) => {\n    const config = getConfig(mode);\n    return (input) => {\n        DOMPurify.clearConfig();\n        const value = DOMPurify.sanitize(input, config);\n        purifyHTMLHooks(false); // Always remove the hooks\n        if (mode === 'str') {\n            // When trusted types is available, DOMPurify returns a trustedHTML object and not a string, force cast it.\n            return value + '';\n        }\n        return value;\n    };\n};\n\n/**\n * Custom config only for messages\n * @param  {String} input\n * @return {String}\n */\nexport const message = clean('str');\n\n/**\n * Sanitize input with a config similar than Squire + ours\n * @param  {String} input\n * @return {Document}\n */\nexport const html = clean('raw');\n\n/**\n * Sanitize input with a config similar than Squire + ours\n * @param  {String} input\n * @return {Document}\n */\nexport const protonizer = (input, attachHooks) => {\n    const process = clean('protonizer');\n    purifyHTMLHooks(attachHooks);\n    return process(input);\n};\n\n/**\n * Sanitize input and returns the whole document\n * @param  {String} input\n * @return {Document}\n */\nexport const content = clean('content');\n\n/**\n * Default config we don't want any custom behaviour\n * @return {String}\n */\nexport const input = (str) => DOMPurify.sanitize(str) + '';\n\nexport const toTagUnicode = unicodeTag;\n","// const JUICE_OPTIONS = {\n//     applyAttributesTableElements: false\n// };\n\n// const DECLASSIFY_OPTIONS = {\n//     ignore: BLOCKQUOTE_SELECTORS.filter((selector) => selector.startsWith('.'))\n//         .map((selector) => selector.replace('.', ''))\n//         .concat(/proton-.*/)\n//         .concat(/protonmail.*/)\n// };\n\n/**\n * Iterates through all parent nodes (including current), comparing against cb.\n * @param {DOMNode} node\n * @param {Function} cb\n * @returns {*}\n */\n// eslint-disable-next-line import/prefer-default-export\n// export const findParent = (node, cb) => {\n//     let traverse = node;\n//     if (traverse && cb(traverse)) {\n//         return traverse;\n//     }\n//     while (traverse.parentNode) {\n//         traverse = traverse.parentNode;\n//         if (cb(traverse)) {\n//             return traverse;\n//         }\n//     }\n// };\n\n/**\n * Inline css into an element and remove all obsolete class names.\n * @param {String} html\n * @returns {String}\n */\n// export const inlineCss = (html = '') => {\n//     try {\n//         return declassify.process(juice(html, JUICE_OPTIONS), DECLASSIFY_OPTIONS);\n//     } catch (err) {\n//         console.error(err);\n//         return html;\n//     }\n// };\n\n/**\n * Set an element to be hidden.\n * @param {DOMNode} el\n * @param {Boolean} value Hidden or shown\n */\n// export const setHidden = (el, value = false) => {\n//     el.style.display = value ? 'none' : '';\n// };\n\n/**\n * Force redraw of an element.\n * Copied from https://stackoverflow.com/a/3485654\n * @param {HTMLElement} el\n */\n// export const forceRedraw = (el) => {\n//     el.style.display = 'none';\n//     // eslint-disable-next-line no-unused-expressions\n//     el.offsetHeight;\n//     el.style.display = '';\n// };\n\nexport const escapeSrc = (value = '') => value.replace(/ src=/g, ' data-src=');\nexport const unescapeSrc = (value = '') => value.replace(/ data-src=/g, ' src=');\n\n/**\n * Toggle class on element depending on conditon\n * @param {DOMNode} element\n * @param {String} className\n * @param {Boolean} value\n */\n// export const toggle = (element, className, value) => {\n//     element.classList.contains(className) === value || element.classList.toggle(className);\n// };\n\n/**\n * Returns whether the element is a node.\n * See {@link https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType}\n * @param {DOMNode} node\n * @returns {boolean}\n */\n// export const isElement = (node) => node && node.nodeType === 1;\n\n/**\n * Get children configuration for a node/fragment\n * As IE is not able to deal with the dom API we need to \"emulate it\"\n * @param  {Element} node Can be a fragment\n * @return {Object}      {children: <Array>, first:<Element>, last:<Element>}\n */\n// export const getChildrenElements = (node) => {\n//     if (!isIE11() || node.firstElementChild) {\n//         return {\n//             first: node.firstElementChild,\n//             last: node.lastElementChild,\n//             children: node.children\n//         };\n//     }\n//     const children = _.filter(node.childNodes, isElement);\n\n//     return {\n//         first: children[0],\n//         last: _.last(children),\n//         children\n//     };\n// };\n\n/**\n * Test if the string contains HTML data\n * It doesn't have loading resources side effects\n * @param {String} str\n * @return {Object}\n */\n// export const isHTML = (str = '') => {\n//     const doc = new DOMParser().parseFromString(str, 'text/html');\n//     const firstChild = doc.body.childNodes[0];\n//     return {\n//         isHtml: Array.from(doc.body.childNodes).some(isElement),\n//         isWrapped: !!isElement(firstChild)\n//     };\n// };\n\nexport const matches = (node, selector) => (node.matches || node.msMatchesSelector).call(node, selector);\n\nexport const wrap = (element, html) => {\n    const container = document.createElement('div');\n    container.innerHTML = html;\n\n    const wrapper = container.firstChild;\n\n    wrapper.innerHTML = element.outerHTML;\n\n    element.parentNode.insertBefore(wrapper, element);\n    element.remove();\n};\n\nexport const parseInDiv = (content) => {\n    const div = document.createElement('div');\n    div.innerHTML = content;\n    return div;\n};\n","import { uniqID } from '../string';\nimport { protonizer as purifyHTML } from '../purify';\nimport { parseInDiv } from '../dom';\n\n/*\n * match attributes or elements with svg, xlink, srcset, src, background, poster.\n * the regex checks that the element/attribute is actually in an element by looking forward and seeing if it\n * ends properly with a >\n *\n * Another assumption in these regex are: all attributes use the \" quotes instead of the ' quote. This is satisfied\n * by the previous standardization steps\n */\nconst SVG_LIST = ['svg'];\nconst FORBIDDEN_SVG = `(${SVG_LIST.join('|')})`;\nconst NO_SPECIALS = '([^\"><\\\\\\\\]|\\\\\\\\[^><])';\nconst NO_QUOTS = '(\\\\\\\\.|[^\"\\\\\\\\])';\nconst HTML_STRING = `(\"${NO_QUOTS}*\")`;\nconst VERIFY_ELEMENT_END = `(?=(${NO_SPECIALS}|${HTML_STRING})*>)`;\nconst VERIFY_UNIQUE = '([^-])';\n\n// Ensure that the forbidden attributes are not already escaped with proton- by checking that there is no '-' character in front of them.\nconst REGEXP_SVG_BREAK = new RegExp(VERIFY_UNIQUE + FORBIDDEN_SVG + VERIFY_ELEMENT_END, 'gi');\n\n/**\n * Parsing base64 is expensive and can create a crash.\n * Here we can reduce input string from many Mb to less than 100kb, which is way easier to escape.\n * So instead of escaping everything with it too, we remove them from the HTML\n * and we replace it with an attribute with an uniq hash so we can load them\n * later for the user via injectMessageMedia component.\n * Store it inside inside a cache, an Angular Factory as we will need it for:\n *     - lazy load the image post render message\n *     - open the composer we need to lazy load it here too\n *\n * Source: regexp https://www.regextester.com/95505\n * @param  {String} input       Raw unescaped HTML\n * @param  {Object} cache       cacheBase64 factory\n * @param  {Boolean} activeCache\n * @return {String}\n */\nfunction removeBase64(input, cache, activeCache) {\n    /* eslint no-useless-escape: \"off\" */\n    return input.replace(/src=\"data:image\\/([a-zA-Z]*);base64,([^\\\"]*)\\\"/g, (match) => {\n        const hash = uniqID();\n        activeCache && cache.put(hash, match);\n        return `data-proton-replace-base=\"${hash}\"`;\n    });\n}\n\n/**\n * Parse the dom and find all matching base64 custom tags we added\n * then replace them by the valid SRC for the base64.\n * @param  {Element} node\n * @param  {Object} cache cacheBase64 service\n * @return {String}       HTML\n */\nexport function attachBase64Parser(node, cache) {\n    const nodes = [...node.querySelectorAll('[data-proton-replace-base]')];\n    nodes.forEach((node) => {\n        const hash = node.getAttribute('data-proton-replace-base');\n\n        // Clean the string and remove \\n else it won't load inside the browser\n        const src = (cache.get(hash) || '')\n            .replace(/^src=\"/, '')\n            .replace(/\"$/, '')\n            .replace(/\\n/, '');\n        src && node.setAttribute('src', src);\n        node.removeAttribute('data-proton-replace-base');\n    });\n    return node.innerHTML;\n}\n\n/**\n * Attach escaped base64 to the dom if the input is a txt\n * @param  {String} input HTML\n * @param  {Object} cache cacheBase64 service\n * @return {String}       HTML\n */\nexport function attachBase64(input, cache) {\n    // const [$parser] = $.parseHTML(`<div>${input}</div>`);\n    const div = parseInDiv(input);\n    return attachBase64Parser(div, cache);\n}\n\nfunction escapeSVG(input = '') {\n    return input.replace(REGEXP_SVG_BREAK, '$1proton-$2');\n}\n\n/**\n * Escape content for a message\n * Content can be a Document when we open a message, it's useful\n * in order to bind the base if it exists\n * @param  {String|Document} content                       Content to escape\n * @param  {String} options.action           Type of action\n * @return {Node}                            Parser\n */\nexport const transformEscape = async ({ raw }, { action, cache, activeCache = true } = {}) => {\n    const value = removeBase64(raw, cache, activeCache);\n    const activeHooks = action !== 'user.inject';\n    return { document: purifyHTML(escapeSVG(value), activeHooks) };\n};\n","import { matches } from '../dom';\n\nconst PROTOCOLS = ['ftp://', 'http://', 'https://', 'xmpp:', 'tel:', 'callto:'];\nconst ALL_PROTOCOLS = PROTOCOLS.concat(['mailto:']);\nconst MAP = PROTOCOLS.reduce((acc, key) => ((acc[key] = true), acc), {});\nconst EXCLUDE_ANCHORS = ':not([href=\"\"]):not([href^=\"#\"])';\n\nconst getNormalizedHref = (link) => {\n    return link\n        .getAttribute('href')\n        .trim()\n        .toLowerCase();\n};\n\nconst linkUsesProtocols = (link) => ALL_PROTOCOLS.some((proto) => getNormalizedHref(link).startsWith(proto));\n\nconst isEmptyAnchor = (link) => {\n    const href = getNormalizedHref(link);\n    return href === '' || MAP[href];\n};\n\nconst noReferrerInfo = (link) => {\n    link.setAttribute('rel', 'noreferrer nofollow noopener');\n};\n\n/**\n * make links open in a new tab\n * @param  {Array} links Collection of links\n * @return {Array}       links\n */\nconst httpInNewTab = (link) => {\n    if (matches(link, EXCLUDE_ANCHORS)) {\n        const href = link.getAttribute('href') || '';\n        const hasHTTP = href.indexOf('http') === 0;\n        const isRelative = href.indexOf('/') === 0;\n        // Prevent issue for Edge/IE A security problem cf https://jsfiddle.net/dpaoxoks/7/\n        if (hasHTTP || isRelative) {\n            link.setAttribute('target', '_blank');\n        }\n    }\n};\n\n/**\n * turn these relative links into absolute links\n * (example.com/a -> http://example.com)\n * @param  {Array} links Collection of links\n * @return {Array}       links\n */\nconst sanitizeRelativeHttpLinks = (link) => {\n    if (matches(link, EXCLUDE_ANCHORS) && !linkUsesProtocols(link) && link.nodeName === 'A') {\n        // link.href is the absolute value of the link: mail.protonmail.com is prepended, use getAttribute\n        const url = link.getAttribute('href');\n\n        link.setAttribute('href', `http://${url}`);\n    }\n};\n\n/*\n * Anchors will work on the whole protonmail page, so we need to disable them\n * opening them in a new tab will just open a empty page.\n */\nconst disableAnchors = (link) => {\n    isEmptyAnchor(link) && (link.style.pointerEvents = 'none');\n};\n\nexport const transformLinks = ({ document }) => {\n    const links = [...document.querySelectorAll('[href]')];\n\n    // console.log('transformLinks', links);\n\n    links.forEach((link) => {\n        httpInNewTab(link);\n        noReferrerInfo(link);\n        sanitizeRelativeHttpLinks(link);\n        disableAnchors(link);\n    });\n\n    return { document };\n};\n","// import { REGEX_IMAGE_EXTENSION } from 'proton-shared/lib/constants';\n\n/**\n * Convert base64 string to Image\n * @param  {String} base64str\n * @return {Object}\n */\n// export const toImage = (base64str) => {\n//     return new Promise((resolve) => {\n//         const image = new Image();\n\n//         image.onload = () => {\n//             resolve(image);\n//         };\n\n//         image.src = base64str;\n//     });\n// };\n\n/**\n * Resizes a picture to a maximum length/width (based on largest dimension)\n * @param {String} original Base64 representation of image to be resized.\n * @param {Number} maxSize Amount of pixels that largest dimention (whether width or length) should have.\n * @param {String} finalMimeType Mime type of the resulting resized image.\n * @param {Number} encoderOptions A Number between 0 and 1 indicating image quality if the requested type is image/jpeg or image/webp\n * @return {Promise} receives base64 string of resized image.\n */\n// export const resizeImage = (original, maxSize, finalMimeType = 'image/jpeg', encoderOptions = 1) => {\n//     return toImage(original).then((image) => {\n//         // Resize the image\n//         const canvas = document.createElement('canvas');\n//         let width = image.width;\n//         let height = image.height;\n\n//         if (width > height && width > maxSize) {\n//             height *= maxSize / width;\n//             width = maxSize;\n//         } else if (height > maxSize) {\n//             width *= maxSize / height;\n//             height = maxSize;\n//         }\n\n//         canvas.width = width;\n//         canvas.height = height;\n//         canvas.getContext('2d').drawImage(image, 0, 0, width, height);\n\n//         return canvas.toDataURL(finalMimeType, encoderOptions);\n//     });\n// };\n\n/**\n * Extract the mime and base64 str from a base64 image.\n * @param {String} str\n * @returns {Promise} {mime, base64}\n */\n// const extractBase64Image = (str = '') => {\n//     const [mimeInfo = '', base64 = ''] = (str || '').split(',');\n//     const [, mime = ''] = mimeInfo.match(/:(.*?);/) || [];\n//     return { mime, base64 };\n// };\n\n/**\n * Convert a base 64 str to an uint8 array.\n * @param base64str\n * @returns {Uint8Array}\n */\n// const toUint8Array = (base64str) => {\n//     const bstr = atob(base64str);\n//     let n = bstr.length;\n//     const u8arr = new Uint8Array(n);\n//     while (n--) {\n//         u8arr[n] = bstr.charCodeAt(n);\n//     }\n//     return u8arr;\n// };\n\n/**\n * Convert a data URL to a Blob Object\n * @param {String} base64str\n * @param {String} filename\n * @return {Object}\n */\n// export const toFile = (base64str, filename = 'file') => {\n//     const { base64, mime } = extractBase64Image(base64str);\n//     return new File([toUint8Array(base64)], filename, { type: mime });\n// };\n\n/**\n * Convert a data URL to a Blob Object\n * @param  {String} base64str\n * @return {Blob}\n */\n// export const toBlob = (base64str) => {\n//     const { base64, mime } = extractBase64Image(base64str);\n//     return new Blob([toUint8Array(base64)], { type: mime });\n// };\n\n/**\n * Down size image to reach the max size limit\n * @param  {String} base64str\n * @param  {} maxSize in bytes\n * @param  {String} mimeType\n * @param  {Number} encoderOptions\n * @return {Promise}\n */\n// export const downSize = (base64str, maxSize, mimeType = 'image/jpeg', encoderOptions = 1) => {\n//     const process = (source, max) => {\n//         return resizeImage(source, max, mimeType, encoderOptions).then((resized) => {\n//             const { size } = toBlob(resized);\n\n//             if (size <= maxSize) {\n//                 return resized;\n//             }\n\n//             return process(resized, Math.round(max * 0.9));\n//         });\n//     };\n\n//     return toImage(base64str).then(({ height, width }) => process(base64str, height > width ? height : width));\n// };\n\n/**\n * Returns true if the URL is an inline embedded image.\n * @param {String} src\n * @returns {boolean}\n */\nexport const isInlineEmbedded = (src = '') => src.startsWith('data:');\n\n/**\n * Returns true if the URL is an embedded image.\n * @param {String} src\n * @returns {boolean}\n */\nexport const isEmbedded = (src = '') => src.startsWith('cid:');\n\n/**\n * Prepare image source to be display\n * @param {String} value\n * @return {String}\n */\n// export const formatImage = (value = '') => {\n//     if (!value) {\n//         return value;\n//     }\n\n//     if (REGEX_IMAGE_EXTENSION.test(value)) {\n//         return value;\n//     }\n\n//     if (value.startsWith('data:')) {\n//         return value;\n//     }\n\n//     return `data:image/png;base64,${value}`;\n// };\n","import mimemessage from 'mimemessage';\n\n// import { toUnsignedString, ucFirst } from '../../../helpers/string';\nimport { ucFirst } from '../string';\n// import transformEscape from '../../message/helpers/transformEscape';\n\nconst REGEXP_CID_START = /^cid:/g;\n\n/**\n * Convert raw headers to better format handled by the mimemessage lib\n * @param  {Object} config   Current attachment headers\n * @return {Object}          { formated: <Object>, headers: Object }\n */\nexport const convertMimeHeaders = (config = {}) => {\n    const headers = Object.keys(config)\n        .filter((key) => key.startsWith('content'))\n        .reduce((acc, key) => {\n            const [, type] = key.split('-');\n            acc[`content${ucFirst(type)}`] = config[key];\n            return acc;\n        }, Object.create(null));\n\n    return {\n        formatted: mimemessage.factory(headers),\n        headers\n    };\n};\n\n/**\n * Flush the container HTML and return the container\n * @param {String} content\n * @return {Node} Empty DIV\n */\n// const getBodyParser = (content = '', activeCache = false) => {\n//     return transformEscape(content, {\n//         action: '',\n//         activeCache,\n//         isDocument: false,\n//         cache: cacheBase64\n//     });\n// };\n\n/**\n * Removes enclosing quotes (\"\", '', &lt;&gt;) from a string\n * @param {String} value - String to be converted\n * @return {String} value - Converted string\n */\nfunction trimQuotes(input) {\n    const value = `${input || ''}`.trim(); // input can be a number\n\n    if (['\"', \"'\", '<'].indexOf(value.charAt(0)) > -1 && ['\"', \"'\", '>'].indexOf(value.charAt(value.length - 1)) > -1) {\n        return value.substr(1, value.length - 2);\n    }\n\n    return value;\n}\n\nexport const readCID = (Headers = {}) => {\n    if (Headers['content-id']) {\n        return trimQuotes(Headers['content-id']);\n    }\n\n    // We can find an image without cid so base64 the location\n    if (Headers['content-location']) {\n        return trimQuotes(Headers['content-location']);\n    }\n\n    return '';\n};\n\n/**\n * Find embedded element in div\n * @param {String} cid\n * @param {HTMLElement} document\n * @return {Array}\n */\nexport const findEmbedded = (cid, document) => {\n    // If cid is an empty string, it can give a false positive\n    if (!cid) {\n        return [];\n    }\n    const selector = [\n        `img[src=\"${cid}\"]`,\n        `img[src=\"cid:${cid}\"]`,\n        `img[data-embedded-img=\"${cid}\"]`,\n        `img[data-embedded-img=\"cid:${cid}\"]`,\n        `img[data-src=\"cid:${cid}\"]`,\n        `img[proton-src=\"cid:${cid}\"]`\n    ];\n    return [...document.querySelectorAll(selector.join(', '))];\n};\n\n/**\n * Check if an attachment is embedded\n * @param {Object} attachment\n * @param {String} body\n * @return {Boolean}\n */\n// const isEmbedded = ({ Headers = {}, MIMEType = '' }, body = '') => {\n//     const testDiv = body ? getBodyParser(body) : document.createElement('DIV');\n//     const cid = readCID(Headers);\n//     const nodes = findEmbedded(cid, testDiv);\n\n//     return nodes.length && attachmentFileFormat.isEmbedded(MIMEType);\n// };\n\n/**\n * Extract embedded attachment from body\n * @param {Array} attachments\n * @param {Node} document\n * @return {Array}\n */\nexport const extractEmbedded = (attachments = [], document) => {\n    return attachments.filter(({ Headers = {} }) => {\n        const cid = readCID(Headers);\n        const nodes = findEmbedded(cid, document);\n\n        return nodes.length;\n    });\n};\n\nexport const getAttachementName = (Headers = {}) => {\n    if (Headers['content-disposition'] !== 'inline') {\n        const { formatted = {} } = convertMimeHeaders(Headers);\n        const { params: { filename } = {} } = formatted.contentDisposition() || {};\n        if (filename) {\n            return filename.replace(/\"/g, '');\n        }\n    }\n\n    return '';\n};\n\n/**\n * Generate CID from input and email\n * @param {String} input\n * @param {String} email\n * @return {String} cid\n */\n// const generateCid = (input, email) => {\n//     const hash = toUnsignedString(tools.hash(input), 4);\n//     const domain = email.split('@')[1];\n//     return `${hash}@${domain}`;\n// };\n\n/**\n * Get the url for an embedded image\n * @param  {Node} node Image\n * @return {String}\n */\nexport const srcToCID = (node) => {\n    const attribute = node.getAttribute('data-embedded-img') || '';\n    return attribute.replace(REGEXP_CID_START, '');\n};\n\nexport const getBlobFromURL = (url = '') => {\n    const xhr = new XMLHttpRequest();\n\n    return new Promise((resolve, reject) => {\n        xhr.open('GET', url, true);\n        xhr.responseType = 'blob';\n        xhr.onload = function onload() {\n            if (xhr.status === 200) {\n                return resolve(xhr.response);\n            }\n            reject(xhr.response);\n        };\n\n        xhr.send();\n    });\n};\n","import { noop } from 'proton-shared/lib/helpers/function';\nimport * as embeddedUtils from './embeddedUtils';\n\nconst Blobs = {};\nconst MAP_BLOBS = {};\nconst CIDList = {};\n// const { on, dispatcher } = dispatchers(['embeddedStore']);\n\nconst PREFIX_DRAFT = 'draft_';\nconst urlCreator = () => window.URL || window.webkitURL;\n\n/**\n * When we close the composer we need to deallocate Blobs used by this composer\n */\n// on('composer.update', (e, { type, data = {} }) => {\n//     if (type === 'close') {\n//         const { ID, ConversationID } = data.message;\n//         const key = `${PREFIX_DRAFT}${ConversationID || ID}`;\n\n//         // CLEAN ALL THE THINGS\n//         if (CIDList[ID]) {\n//             delete CIDList[ID];\n//         }\n\n//         // Clean these blobs !\n//         if (MAP_BLOBS[key]) {\n//             deallocateList(key);\n//         }\n//     }\n// });\n\nfunction getHashKey(msg) {\n    const isDraft = msg.isDraft ? msg.isDraft() : false;\n    const prefix = isDraft ? PREFIX_DRAFT : '';\n    return `${prefix}${msg.ConversationID || msg.ID}`.trim();\n}\n\n/**\n * The URL.revokeObjectURL() static method releases an existing object URL\n * which was previously created by calling URL.createObjectURL().\n * Call this method when you've finished using a object URL, in order to let\n * the browser know it doesn't need to keep the reference to the file\n * any longer.\n * @param {key}  key     Key of the message/conversation\n */\nfunction deallocateList(key) {\n    const list = MAP_BLOBS[key] || [];\n    list.forEach((cid) => {\n        if (Blobs[cid]) {\n            urlCreator().revokeObjectURL(Blobs[cid].url);\n            // Remove the Blob ref from our store\n            delete Blobs[cid];\n        }\n    });\n    delete MAP_BLOBS[key];\n}\n\n/**\n * blob URLs never get deallocated automatically--\n * we manage deallocation to avoid a massive memory leak\n * once we navigate away from a conversation\n * eg. this can be triggered from the conversations controller\n * @param  {Object} message [description]\n * @return {[type]}         [description]\n */\nexport function deallocate(message = {}) {\n    const key = getHashKey(message);\n    Object.keys(MAP_BLOBS)\n        .filter((k) => k !== key && k.indexOf(PREFIX_DRAFT) !== 0) // Do nothing for draft and itself\n        .forEach(deallocateList);\n}\n\n/**\n * Use the Blobs array to store CIDs url reference\n * once the attachment has been decrypted\n * so we can re-use the blob instead of decrypting\n * this should be rewritted a bit to work with\n * the service store\n */\nexport const store = (message = { isDraft: noop }, cid = '') => {\n    const Attachments = CIDList[message.ID] || {};\n    const { Headers = {} } = Attachments[cid] || {};\n\n    const key = getHashKey(message);\n\n    MAP_BLOBS[key] = MAP_BLOBS[key] || [];\n\n    return (data, MIME) => {\n        // If you switch to another conversation the MAP_BLOBS won't exist anymore\n        if (MAP_BLOBS[key]) {\n            // Turn the decrypted attachment data into a blob.\n            let blob = new Blob([data], { type: MIME });\n            // Generate the URL\n            let imageUrl = urlCreator().createObjectURL(blob);\n            // Store the generated URL\n            Blobs[cid] = {\n                url: imageUrl,\n                isContentLocation:\n                    typeof Headers['content-location'] !== 'undefined' && typeof Headers['content-id'] === 'undefined'\n            };\n            // this is supposed to remove the blob so it\n            // can be garbage collected. we dont save it (for now)\n            blob = null;\n            imageUrl = null;\n\n            MAP_BLOBS[key].push(cid);\n            // dispatcher.embeddedStore('store', { cid });\n        }\n    };\n};\n\nexport const getBlob = (cid) => Blobs[cid] || {};\nexport const hasBlob = (cid) => !!Blobs[cid];\n\nexport const getMessageCIDs = ({ ID }) => CIDList[ID] || {};\nexport const containsMessageCIDs = ({ ID }) => Object.keys(CIDList[ID] || {}).length > 0;\nexport const addMessageCID = (message, { Headers = {}, Name = '' }) => {\n    !CIDList[message.ID] && (CIDList[message.ID] = {});\n    !message.NumEmbedded && (message.NumEmbedded = 0);\n\n    const cid = embeddedUtils.readCID(Headers);\n    Headers.embedded = 1;\n    message.NumEmbedded++;\n    CIDList[message.ID][cid] = { Headers, Name };\n};\n\n/**\n * Check if the cid exist for a specific message\n * @param {Resource} message\n * @param {String} cid\n * @return {Boolean}\n */\nexport const existMessageCID = (message, cid) => {\n    return !!getMessageCIDs(message)[cid];\n};\n\nexport const getBlobValue = (cid) => {\n    const { url } = getBlob(cid);\n    return embeddedUtils.getBlobFromURL(url);\n};\n\nexport const cid = {\n    contains: containsMessageCIDs,\n    exist: existMessageCID,\n    add: addMessageCID,\n    get: getMessageCIDs\n};\n\n//     return {\n//         store,\n//         deallocate,\n//         getBlob,\n//         hasBlob,\n//         getBlobValue,\n//         cid: {\n//             contains: containsMessageCIDs,\n//             exist: existMessageCID,\n//             add: addMessageCID,\n//             get: getMessageCIDs\n//         }\n//     };\n","import * as embeddedUtils from './embeddedUtils';\nimport * as embeddedStore from './embeddedStore';\n\nexport const find = (message) => {\n    const list = message.data.Attachments || [];\n\n    if (!list.length) {\n        return 0;\n    }\n\n    const embeddedAttachments = embeddedUtils.extractEmbedded(list, message.document);\n\n    embeddedAttachments.forEach((attachment) => {\n        embeddedStore.cid.add(message, attachment);\n    });\n\n    return embeddedAttachments;\n};\n\n/**\n * Find all attachements inline\n * @param  {Message}\n * @return {Array}\n */\nexport const listInlineAttachments = (message) => {\n    // const list = message.getAttachments();\n    const list = message.data.Attachments || [];\n    const MAP_CID = embeddedStore.cid.get(message);\n\n    return Object.keys(MAP_CID).reduce((acc, cid) => {\n        // Extract current attachement content-id\n        const contentId = MAP_CID[cid].Headers['content-id'];\n        const contentName = embeddedUtils.getAttachementName(MAP_CID[cid].Headers);\n\n        // Find the matching attachement\n        const attachment = list.find(({ Headers = {}, Name = '' } = {}) => {\n            if (Headers['content-id']) {\n                return Headers['content-id'] === contentId;\n            }\n\n            if (Headers['content-location']) {\n                return Name === contentName;\n            }\n\n            return false;\n        });\n\n        attachment && acc.push({ cid, attachment });\n        return acc;\n    }, []);\n};\n","import { flow, filter, map } from 'lodash/fp';\nimport { SHOW_IMAGES } from 'proton-shared/lib/constants';\nimport { wait } from 'proton-shared/lib/helpers/promise';\nimport { noop } from 'proton-shared/lib/helpers/function';\n\nimport { parseInDiv } from '../dom';\nimport * as embeddedUtils from './embeddedUtils';\nimport * as embeddedStore from './embeddedStore';\nimport * as embeddedFinder from './embeddedFinder';\n\nconst ENCRYPTED_STATUS = {\n    PGP_MIME: 8 // Used for attachment\n};\n\nconst EMBEDDED_CLASSNAME = 'proton-embedded';\n\n// TODO: Remove these mocks\n// const AttachmentLoader = { get: noop, has: noop };\nconst invalidSignature = { confirm: noop, askAgain: noop };\n\n/**\n * It works on data-src attribute for this reason:\n * Don't set the src attribute since it's evaluated and cid:cid create an error (#3330)\n * NET::ERR_UNKNOWN_URL_SCHEME because src=\"cid:xxxx\" is not valid HTML\n * This function expects the content to be properly unescaped later.\n */\nconst actionDirection = {\n    blob(nodes, cid, url) {\n        [...nodes].forEach((node) => {\n            // Always remove the `data-` src attribute set by the cid function, otherwise it can get displayed if the user does not auto load embedded images.\n            node.removeAttribute('data-src');\n            if (node.getAttribute('proton-src')) {\n                return;\n            }\n            node.setAttribute('data-src', url);\n            node.setAttribute('data-embedded-img', cid);\n            node.classList.add(EMBEDDED_CLASSNAME);\n        });\n    },\n    cid(nodes, cid) {\n        [...nodes].forEach((node) => {\n            node.removeAttribute('data-embedded-img');\n            node.removeAttribute('src');\n            node.setAttribute('data-src', `cid:${cid}`);\n        });\n    }\n};\n\n/**\n * Parse the content to inject the generated blob src\n * This function expects the content to be unescaped later.\n * @param  {Resource} message             Message\n * @param  {String} direction             Parsing to execute, blob || cid\n * @return {String}                       Parsed HTML\n */\nexport const mutateHTML = (message, direction) => {\n    Object.keys(embeddedStore.cid.get(message)).forEach((cid) => {\n        const nodes = embeddedUtils.findEmbedded(cid, message.document);\n\n        if (nodes.length) {\n            const { url = '' } = embeddedStore.getBlob(cid);\n\n            (actionDirection[direction] || noop)(nodes, cid, url);\n        }\n    });\n};\n\nexport const removeEmbeddedHTML = (message, Headers = {}, content = '') => {\n    const cid = embeddedUtils.readCID(Headers);\n    const tempDOM = parseInDiv(content);\n    const nodes = tempDOM.find(\n        `img[src=\"cid:${cid}\"], img[data-embedded-img=\"cid:${cid}\"], img[data-embedded-img=\"${cid}\"]`\n    );\n    if (nodes.length) {\n        nodes.remove();\n    }\n    return tempDOM.html();\n};\n\n/**\n * launch and forget: we don't need to do anything with the result\n * wait a bit before disabling the invalidsignature modal\n * this allows the user to see the change icon popup.\n *\n * More elaborate explanation:\n * We're addressing a fairly rare UX thing here.\n * We want to avoid showing a popup saying the confirmmodal when the signature is invalid to often.\n * For instance, when embedding images you can see that the icon says the signature is invalid,\n * so we don't show this icon (as the user can know it before clicking).\n *\n * However, if you would click on the embedded attachment before it has downloaded the attachment, it will not show this icon.\n * So consider you clicking on this attachment when it didn't verify the attachment yet.\n * Then just after that the attachment loader downloaded the attachment and\n * verified it signature and sets invalidSignature.askAgain to false.\n * Then you don't know that this happened, but in this case you should get a popup.\n *\n * Note when thinking  this is just a race condition: also consider the case where you are clicking\n * on the icon and it shows the icon just before you click: it's not humanly possible to see that it\n * changed and is not valid. So even in that case we want to show the icon.\n * @param {Object} message\n * @param {Array} list (list of attachments)\n */\nconst triggerSigVerification = (message, list, attachmentLoader) => {\n    /*\n     * launch and forget: we don't need to do anything with the result\n     * wait a bit before disabling the invalidsignature modal\n     * this allows the user to see the change icon popup.\n     */\n    Promise.all(\n        list.map(({ attachment }) =>\n            attachmentLoader\n                .get(attachment, message)\n                .then(() => wait(1000))\n                .then(() => invalidSignature.askAgain(message, attachment, false))\n        )\n    );\n};\n\nexport const decrypt = (message, mailSettings, attachmentLoader) => {\n    const list = embeddedFinder.listInlineAttachments(message);\n    const show = message.showEmbeddedImages === true || mailSettings.ShowImages & SHOW_IMAGES.EMBEDDED;\n    const sigList = show ? list : list.filter(({ attachment }) => attachmentLoader.has(attachment));\n\n    // For a draft if we close it before the end of the attachment upload, there are no keyPackets\n    const promise = flow(\n        // pgp attachments do not have keypackets.\n        filter(({ attachment }) => attachment.KeyPackets || attachment.Encrypted === ENCRYPTED_STATUS.PGP_MIME),\n        filter(({ cid }) => !embeddedStore.hasBlob(cid) && show),\n        map(({ cid, attachment }) => {\n            const storeAttachement = embeddedStore.store(message, cid);\n            return attachmentLoader.get(attachment, message).then((buffer) => {\n                return storeAttachement(buffer, attachment.MIMEType);\n            });\n        })\n    )(list);\n\n    if (!promise.length) {\n        // all cid was already stored, we can resolve\n        triggerSigVerification(message, sigList, attachmentLoader);\n        return Promise.resolve({});\n    }\n\n    return Promise.all(promise).then(() => {\n        // We need to trigger on the original list not after filtering: after filter they are just stored\n        // somewhere else\n        triggerSigVerification(message, sigList, attachmentLoader);\n        return list.reduce((acc, { cid }) => {\n            acc[cid] = embeddedStore.getBlob(cid);\n            return acc;\n        }, Object.create(null));\n    });\n};\n","import { isInlineEmbedded } from '../image';\nimport { escapeSrc, unescapeSrc } from '../dom';\nimport * as embeddedFinder from './embeddedFinder';\nimport * as embeddedUtils from './embeddedUtils';\nimport * as embeddedStore from './embeddedStore';\nimport * as embeddedParser from './embeddedParser';\n\nconst REGEXP_CID_START = /^cid:/g;\n\nconst escape = ({ document }) => (document.innerHTML = escapeSrc(document.innerHTML));\nconst unescape = ({ document }) => (document.innerHTML = unescapeSrc(document.innerHTML));\n\n/**\n * Parse a message in order to\n *     - Find all of its attachments\n *     - Store blobs per attachment\n *     - Bind blobs or cid to the body\n * @param  {Message} message\n * @param  {MailSettingsModel} mailSettings\n * @param  {object} options\n * param  {String} direction blob | cid\n * param  {String} text      Alternative body to parse\n * @return {Promise}\n */\nexport const parser = async (\n    message,\n    mailSettings,\n    { direction = 'blob', isOutside = false, attachmentLoader } = {}\n) => {\n    const numEmbedded = embeddedFinder.find(message).length;\n\n    if (numEmbedded === 0) {\n        /**\n         * cf #5088 we need to escape the body again if we forgot to set the password First.\n         * Prevent unescaped HTML.\n         *\n         * Don't do it everytime because it's \"slow\" and we don't want to slow down the process.\n         */\n        if (isOutside) {\n            escape(message);\n            embeddedParser.mutateHTML(message, direction);\n            unescape(message);\n            return { document: message.document };\n        }\n\n        return {};\n    }\n\n    escape(message);\n    await embeddedParser.decrypt(message, mailSettings, attachmentLoader);\n    embeddedParser.mutateHTML(message, direction);\n    unescape(message);\n    return { document: message.document, numEmbedded };\n};\n\nexport const addEmbedded = (message, cid, data, MIME) => {\n    embeddedStore.store(message, cid)(data, MIME);\n    return embeddedStore.getBlob(cid);\n};\n\n/**\n * Get the url for an embedded image\n * @param  {Node} node Image\n * @return {String}\n */\nexport const getUrl = (node) => {\n    // If it's an inline embedded img, just return the src because that contains the img data.\n    const src = node.getAttribute('data-embedded-img') || '';\n    if (isInlineEmbedded(src)) {\n        return src;\n    }\n    const cid = embeddedUtils.srcToCID(node);\n    const { url = '' } = embeddedStore.getBlob(cid);\n    return url;\n};\n\n/**\n * Check if attachment exist inside the dom\n * @param  {Message} message\n * @param  {Document} html Message body parser\n * @return {Function}\n */\nexport const getAttachment = (message) => {\n    /**\n     * @param  {String} src - cid:url\n     */\n    return (src) => {\n        const cid = src.replace(REGEXP_CID_START, '');\n        const contains = embeddedFinder.find(message);\n        if (contains) {\n            return embeddedStore.cid.get(message)[cid] || {};\n        }\n    };\n};\n\n// return {\n//     parser,\n//     addEmbedded,\n//     getUrl,\n//     getAttachment,\n//     isEmbedded: embeddedUtils.isEmbedded,\n//     getCid: embeddedUtils.readCID,\n//     getBlob: embeddedStore.getBlobValue,\n//     deallocator: embeddedStore.deallocate,\n//     clean: embeddedStore.cleanMemory,\n//     removeEmbedded: embeddedParser.removeEmbeddedHTML,\n//     exist: embeddedStore.cid.exist,\n//     generateCid: embeddedUtils.generateCid\n// };\n","import { SHOW_IMAGES } from 'proton-shared/lib/constants';\nimport { wrap } from '../dom';\nimport { isInlineEmbedded, isEmbedded } from '../image';\nimport * as embedded from '../embedded/embedded';\n\nconst EMBEDDED_CLASSNAME = 'proton-embedded';\nconst wrapImage = (img) => wrap(img, '<div class=\"image loading\"></div>');\n\nexport const transformEmbedded = async (message, { action = null, mailSettings }) => {\n    const images = [...message.document.querySelectorAll('img[proton-src]')];\n    const { ShowImages = 0 } = mailSettings;\n    const isReplyForward = /^reply|forward/.test(action);\n    const show = message.showEmbeddedImages === true || ShowImages & SHOW_IMAGES.EMBEDDED;\n    // TODO: const isEoReply = $state.is('eo.reply');\n    const isEoReply = false;\n    const getAttachment = embedded.getAttachment(message);\n\n    // console.log('transformEmbedded', show);\n\n    let showEmbedded = message.showEmbeddedImages;\n\n    images.forEach((image) => {\n        const src = image.getAttribute('proton-src');\n        image.setAttribute('referrerPolicy', 'no-referrer');\n        const attachment = getAttachment(src);\n\n        if (!image.classList.contains(EMBEDDED_CLASSNAME)) {\n            image.classList.add(EMBEDDED_CLASSNAME);\n        }\n\n        // check if the attachment exist before processing\n        if (!(attachment && Object.keys(attachment).length > 0)) {\n            /**\n             * If the attachment does not exist and the proton-src attribute\n             * starts with cid:, it's an embedded image that does not exist in the list of attachments,\n             * or is not a valid image.\n             * So remove the element from the DOM because it will not display anything useful anyway.\n             */\n            if (isEmbedded(src)) {\n                image.parentElement.removeChild(image);\n            }\n            // If it's not an inline embedded image, it's either an embedded image or a remote image. So stop here.\n            // Otherwise, continue so that the inline image is detected as an embedded image.\n            if (!isInlineEmbedded(src)) {\n                return;\n            }\n        }\n\n        if (show) {\n            image.setAttribute('data-embedded-img', src);\n            /**\n             * Since the image is supposed to be displayed, remove the proton-src attribute.\n             * Then it will be parsed by the embeddedParser in the blob or cid direction.\n             */\n            image.removeAttribute('proton-src');\n\n            // Auto load image inside a reply draft\n            if (isReplyForward) {\n                // `getUrl` may return undefined here because the embedded attachments have not yet been decrypted and put in the blob store.\n                const url = embedded.getUrl(image);\n                // only set it if it is defined, otherwise the unescapeSrc will add two src=\"\"\n                url && image.setAttribute('src', url);\n                return;\n            }\n\n            // We don't need to add it outside\n            if (!isEoReply) {\n                !image.parentElement.classList.contains('loading') && wrapImage(image);\n                image.removeAttribute('src');\n            }\n            return;\n        }\n\n        showEmbedded = false;\n\n        // Inline embedded images does not have an attachment.\n        if (attachment) {\n            image.setAttribute('alt', attachment.Name);\n        }\n    });\n\n    return { document: message.document, showEmbeddedImages: showEmbedded };\n};\n","export const transformWelcome = ({ document }) => {\n    // For the welcome email, we need to change the path to the welcome image lock\n    const images = [...document.querySelectorAll('img[src=\"/img/app/welcome_lock.gif\"]')];\n\n    if (images.length > 0) {\n        images.forEach((image) => {\n            image.src = '/assets/img/emails/welcome_lock.gif';\n        });\n    }\n\n    return { document };\n};\n","import { c } from 'ttag';\n\nconst BLOCKQUOTE_SELECTORS = [\n    '.protonmail_quote',\n    '.gmail_quote',\n    '.yahoo_quoted',\n    '.gmail_extra',\n    '.moz-cite-prefix',\n    // '.WordSection1',\n    '#isForwardContent',\n    '#isReplyContent',\n    '#mailcontent:not(table)',\n    '#origbody',\n    '#reply139content',\n    '#oriMsgHtmlSeperator',\n    'blockquote[type=\"cite\"]'\n];\n\nconst quotes = BLOCKQUOTE_SELECTORS.map((selector) => `${selector}:not(:empty)`).join(',');\n\nexport const transformBlockquotes = ({ document }) => {\n    const blockquotes = [...document.querySelectorAll(quotes)];\n    const parent = document.textContent;\n    let found = false;\n\n    blockquotes.forEach((blockquote) => {\n        if (!found) {\n            const child = blockquote.textContent;\n            const [before = '', after = ''] = parent.split(child);\n\n            if (child.length < parent.length && before.length && !after.length) {\n                const button = document.createElement('button');\n                const title = c('Title').t`Show previous message`;\n\n                button.className = 'pm-button pm-button--small more proton-message-blockquote-toggle';\n                button.textContent = '...'; // perf issue we can't use <icon> as we don't want to compile.\n                button.setAttribute('title', title);\n\n                // For some messages, the content of the message before <button> is not inside <div>\n                blockquote.parentNode.insertBefore(document.createElement('BR'), blockquote);\n                blockquote.parentNode.insertBefore(button, blockquote);\n\n                found = true;\n            }\n        }\n    });\n\n    return { document };\n};\n","import { flow, filter, reduce } from 'lodash/fp';\n\nimport { SHOW_IMAGES } from 'proton-shared/lib/constants';\n\nconst WHITELIST = ['notify@protonmail.com'];\n\n// const { dispatcher } = dispatchers(['message.open']);\n\nconst ATTRIBUTES = ['url', 'xlink:href', 'srcset', 'src', 'svg', 'background', 'poster'].map(\n    (name) => `proton-${name}`\n);\n\nconst REGEXP_FIXER = (() => {\n    const str = ATTRIBUTES.map((key) => {\n        if (key === 'proton-src') {\n            return `${key}=(?!\"(cid|data):)`;\n        }\n        return key;\n    }).join('|');\n    return `(${str})`;\n})();\n\n/**\n * Find inside the current parser DOM every content escaped\n * and build a list of Object <attribute>:<value> but don't parse them if\n * it is an embedded content.\n * As we have many differents attributes we create a list\n * @param  {Node} html parser\n * @return {Array}\n */\nfunction prepareInjection(html) {\n    // Query selector\n    const selector = ATTRIBUTES.map((attr) => {\n        const [key] = attr.split(':');\n        return `[${key}]`;\n    })\n        .concat('[style]')\n        .join(', ');\n\n    /**\n     * Create a map of every proton-x attribute and its value\n     * @param  {Node} node Current element\n     * @return {Object}\n     */\n    const mapAttributes = (node) => {\n        return flow(\n            filter((attr) => ATTRIBUTES.indexOf(attr.name) !== -1),\n            reduce((acc, attr) => ((acc[`${attr.name}`] = attr.value), acc), {})\n        )(node.attributes);\n    };\n\n    const $list = [].slice.call(html.querySelectorAll(selector));\n\n    // Create a list containing a map of every attributes (proton-x) per node\n    const attributes = $list.reduce((acc, node) => {\n        if (node.hasAttribute('proton-src')) {\n            const src = node.getAttribute('proton-src');\n\n            // We don't want to unescape attachments or inline embedded as we are going to process them later\n            if (src.indexOf('cid:') !== -1) {\n                return acc;\n            }\n            if (src.indexOf('data:') !== -1) {\n                return acc;\n            }\n        }\n        acc.push(mapAttributes(node));\n        return acc;\n    }, []);\n\n    return attributes;\n}\n\nexport const transformRemote = (\n    { data: message = {}, document = null, showRemoteImages: inputShowImages = false },\n    { action = null, mailSettings }\n) => {\n    const regex = new RegExp(REGEXP_FIXER, 'g');\n    const showImages =\n        inputShowImages ||\n        !!(mailSettings.ShowImages & SHOW_IMAGES.REMOTE || WHITELIST.includes(message.Sender.Address));\n    const content = document.innerHTML;\n    const hasImages = regex.test(content);\n\n    if (showImages) {\n        // If load:manual we use a custom directive to inject the content\n        if (action === 'user.inject') {\n            // TODO: uncoment this block\n            // const list = prepareInjection(html);\n            prepareInjection(document);\n            // const hasSVG = /svg/.test(html.innerHTML);\n            // if (list.length || hasSVG) {\n            //     dispatcher['message.open']('remote.injected', { action, list, message, hasSVG });\n            // }\n        } else {\n            document.innerHTML = content.replace(regex, (match, $1) => $1.substring(7));\n        }\n    }\n    return { document, showRemoteImages: hasImages ? showImages : undefined };\n};\n","export const transformStylesheet = ({ document }) => {\n    const firstElement = document.firstElementChild;\n\n    /**\n     * Some emails from ex: tripit contains a position absolute on the container\n     * => hack to prevent margin on android/ios\n     * @{@link https://twitter.com/HTeuMeuLeu/status/852110032045035520}\n     * Gmail changes the dom too.\n     */\n    if (firstElement && /absolute/.test(firstElement.style.position)) {\n        firstElement.style.position = 'inherit';\n    }\n    return { document };\n};\n","const ELEMENTS = [\n    {\n        selector: 'a:not([href^=\"http\"])',\n        attribute: 'href'\n    },\n    {\n        selector: 'img:not([src^=\"http\"]):not([proton-src^=\"cid\"])',\n        attribute: 'proton-src'\n    }\n];\n\nconst getBaseURL = (base) => {\n    // Make sure base has trailing slash\n    const baseUrl = base.getAttribute('href');\n    if (baseUrl.substr(-1, 1) !== '/') {\n        return `${baseUrl}/`;\n    }\n    return baseUrl;\n};\n\n/**\n * Append base url to any href/src if we need to\n * @param  {Node} html HTML document from DOMPurify\n * @return {Node}      Dom based\n */\nexport const transformBase = ({ document }) => {\n    const base = document.querySelector('base');\n\n    if (!base || !base.getAttribute('href')) {\n        return { document };\n    }\n\n    // Make sure base has trailing slash\n    const BASE_URL = getBaseURL(base);\n\n    const bindAttribute = (node, key, value = '') => {\n        if (!value.startsWith('http')) {\n            node.setAttribute(key, BASE_URL + value);\n        }\n    };\n\n    ELEMENTS.forEach(({ selector, attribute }) => {\n        [...document.querySelectorAll(selector)].forEach((el) => {\n            const keyproton = `proton-${attribute}`;\n            const value = el.getAttribute(attribute) || '';\n            const ptValue = el.getAttribute(keyproton) || '';\n            // Ensure we don't add a useless / if we already have one\n            const url = value.charAt(0) === '/' ? value.slice(1) : value;\n\n            /*\n                Bind the value only when we need, if there is a proton-src we don't need\n                to add the src else it will generate a request to the domain\n             */\n            !ptValue && bindAttribute(el, attribute, url);\n            ptValue && bindAttribute(el, keyproton, ptValue);\n        });\n    });\n\n    return { document };\n};\n","import { useCallback } from 'react';\nimport { useApi, useEventManager } from 'react-components';\nimport { markMessageAsRead } from 'proton-shared/lib/api/messages';\n\nexport const useMarkAsRead = () => {\n    const api = useApi();\n    const { call } = useEventManager();\n\n    return useCallback(async ({ data: message }) => {\n        const markAsRead = async () => {\n            await api(markMessageAsRead([message.ID]));\n            await call();\n        };\n\n        if (message.Unread) {\n            markAsRead(); // No await to not slow down the UX\n            return { data: { ...message, Unread: false } };\n        }\n    });\n};\n","export const getAttachment = (attachmentID) => ({\n    method: 'get',\n    url: `attachments/${attachmentID}`,\n    output: 'arrayBuffer'\n});\n","import {\n    binaryStringToArray,\n    concatArrays,\n    decodeBase64,\n    decryptMessage,\n    decryptSessionKey,\n    getMessage\n} from 'pmcrypto';\nimport JSZip from 'jszip';\nimport downloadFile from 'proton-shared/lib/helpers/downloadFile';\nimport { getAttachment } from '../api/attachments';\nimport { Attachment, MessageExtended, Message } from '../models/message';\n\n// Reference: Angular/src/app/attachments/services/AttachmentLoader.js\n\n// TODO: Handle isOutside()\n\n// export const getCacheKey = ({ ID }) => `Attachment.${ID}`;\nexport const getCacheKey = ({ ID }: Attachment) => ID;\n\nexport const decrypt = async (attachment: any, sessionKey = {}) => {\n    // create new Uint8Array to store decrypted attachment\n    const at = new Uint8Array(attachment);\n\n    try {\n        // decrypt the att\n        const { data, signatures } = await decryptMessage({\n            message: await getMessage(at as any),\n            sessionKeys: [sessionKey],\n            format: 'binary'\n        });\n\n        return {\n            data,\n            signatures,\n            fromCache: false\n        };\n    } catch (err) {\n        console.error(err);\n        throw err;\n    }\n};\n\nexport const getRequest = ({ ID }: Attachment = {}, api: any) => {\n    // if (isOutside()) {\n    //     const decryptedToken = eoStore.getToken();\n    //     const token = $stateParams.tag;\n    //     return Eo.attachment(decryptedToken, token, ID);\n    // }\n\n    // return attachmentApi.get(ID);\n    return api(getAttachment(ID));\n};\n\nexport const getSessionKey = async (message: MessageExtended, attachment: Attachment) => {\n    // if (attachment.sessionKey) {\n    //     return attachment;\n    // }\n\n    const keyPackets = binaryStringToArray(decodeBase64(attachment.KeyPackets));\n    const options: any = { message: await getMessage(keyPackets) };\n\n    // if (isOutside()) {\n    //     options.passwords = [eoStore.getPassword()];\n    // } else {\n    // console.log('getSessionKey', message);\n    // options.privateKeys = keysModel.getPrivateKeys(message.AddressID);\n    options.privateKeys = message.privateKeys;\n    // }\n\n    const sessionKey = await decryptSessionKey(options);\n\n    return { ...attachment, sessionKey };\n};\n\nexport const getDecryptedAttachmentAPI = async (\n    message: MessageExtended,\n    attachment: Attachment,\n    { cache, api }: any\n) => {\n    const data = await getRequest(attachment, api);\n    // console.log('response', response);\n    // const data = null;\n    try {\n        const { sessionKey } = await getSessionKey(message, attachment);\n        const decrypted = await decrypt(data, sessionKey);\n        cache.set(getCacheKey(attachment), decrypted);\n        return decrypted;\n    } catch (error) {\n        const blob = concatArrays([binaryStringToArray(decodeBase64(attachment.KeyPackets)), new Uint8Array(data)]);\n        // Fallback download raw attachment\n        return Promise.reject({ data: blob, error });\n    }\n};\n\nexport const getDecryptedAttachment = async (message: MessageExtended, attachment: Attachment, { cache, api }: any) => {\n    const cadata = cache.get(getCacheKey(attachment));\n    if (cadata) {\n        return { ...cadata, fromCache: true };\n    }\n    return getDecryptedAttachmentAPI(message, attachment, { cache, api });\n};\n\nexport const getAndVerify = async (\n    attachment: Attachment = {},\n    message: MessageExtended = {},\n    reverify = false,\n    { cache, api, verify }: any\n) => {\n    if (attachment.Preview) {\n        return attachment.Preview;\n    }\n    const { data, signatures, fromCache } = await getDecryptedAttachment(message, attachment, { cache, api });\n    if (fromCache && !reverify) {\n        return data;\n    }\n\n    verify && (await verify(attachment, data, message, signatures));\n\n    return data;\n};\n\n/**\n * Format attachment for the download\n * @param  {Object} attachment\n * @param  {Object} message    Message\n * @param  {Node} el         Link clicked\n * @return {Promise}\n */\nconst formatDownload = async (attachment: Attachment, message: MessageExtended, { cache, api }: any) => {\n    console.log('formatDownload', attachment);\n    try {\n        const data = await getAndVerify(attachment, message, false, { cache, api });\n        return {\n            data,\n            Name: attachment.Name,\n            MIMEType: attachment.MIMEType,\n            ID: attachment.ID\n        };\n    } catch (e) {\n        // If the decryption fails we download the encrypted version\n        console.log('error', e);\n        if (e.data) {\n            return {\n                data: e.data,\n                Name: `${attachment.Name}.pgp`,\n                MIMEType: 'application/pgp',\n                isError: true,\n                ID: attachment.ID\n            };\n        }\n        throw e;\n    }\n};\n\n/**\n * Generate a download for an attachment\n * @param  {Object} attachment\n * @return {void}\n */\nconst generateDownload = async (message: MessageExtended, attachment: Attachment) => {\n    // TODO: uncomment\n    // try {\n    //     await checkAllSignatures(message, [attachment]);\n    // } catch (e) {\n    //     // swallow as the user is informed already by a confirmation and actually caused this error\n    //     return;\n    // }\n\n    downloadFile(new Blob([attachment.data], { type: attachment.MIMEType }), attachment.Name);\n};\n\n/**\n * Download an attachment\n * @param  {Object} attachment\n * @param  {Message} message\n * @param  {Node} el\n * @return {Promise}\n */\nexport const download = async (attachment: Attachment, message: MessageExtended, { cache, api }: any) => {\n    const att = await formatDownload(attachment, message, { cache, api });\n\n    // TODO: uncomment\n    // if (att.isError) {\n    //     if (!(await allowDownloadBrokenAtt())) {\n    //         return; // We don't want to download it\n    //     }\n    // }\n\n    return generateDownload(message, att);\n};\n\n/**\n * The attachment's Name is not uniq we need a uniq name in order\n * to make the zip. The lib doesn't allow duplicates\n * @param  {Message} message\n * @return {Array}         Array of promises\n */\nconst formatDownloadAll = async (message: MessageExtended, { cache, api }: any) => {\n    const { Attachments = [] } = message.data || {};\n    const { list }: { list: Attachment[] } = Attachments.reduce(\n        (acc: any, att) => {\n            const name = att.Name || '';\n            if (!acc.map[name]) {\n                acc.map[name] = { index: 0 };\n            } else {\n                acc.map[name].index++;\n                // We can have an extension\n                const currentName = name.split('.');\n                const ext = currentName.pop();\n                const newName = `${currentName.join('.')} (${acc.map[name].index}).${ext}`;\n                att.Name = newName;\n            }\n            acc.list.push(att);\n            return acc;\n        },\n        { list: [], map: {} }\n    );\n\n    return Promise.all(list.map((att) => formatDownload(att, message, { cache, api })));\n};\n\nconst getZipAttachmentName = (message: Message = {}) => `Attachments-${message.Subject}.zip`;\n\n/**\n * Download all attachments as a zipfile\n * @param  {Object} message Message\n * @param  {Node} el      link clicked\n * @return {Promise}         Always success\n */\nexport const downloadAll = async (message: MessageExtended = {}, { cache, api }: any) => {\n    const list = await formatDownloadAll(message, { cache, api });\n\n    // TODO: uncomment\n    // try {\n    //     await checkAllSignatures(message, list);\n    // } catch (e) {\n    //     // swallow as the user is informed already by a confirmation and actually caused this error\n    //     return;\n    // }\n\n    // TODO: uncomment\n    // // Detect if we have at least one error\n    // if (list.some(({ isError }) => isError)) {\n    //     if (!(await allowDownloadBrokenAtt())) {\n    //         return; // We don't want to download it\n    //     }\n    // }\n\n    const zip = new JSZip();\n    list.forEach(({ Name = '', data }) => zip.file(Name, data));\n    const content = await zip.generateAsync({ type: 'blob' });\n    downloadFile(content, getZipAttachmentName(message.data));\n};\n","// import _ from 'lodash';\n// import { flow, filter, find } from 'lodash/fp';\nimport { createMessage, getSignature, verifyMessage } from 'pmcrypto';\n\nimport { VERIFICATION_STATUS } from '../constants';\n\n/* @ngInject */\n// function SignatureVerifier(dispatchers, addressesModel, publicKeyStore) {\nconst { NOT_VERIFIED, NOT_SIGNED, SIGNED_AND_INVALID, SIGNED_NO_PUB_KEY, SIGNED_AND_VALID } = VERIFICATION_STATUS;\n// const { dispatcher } = dispatchers(['attachmentVerified']);\n\n/**\n * Needed to push the verified status from PGP/MIME to the CACHE.\n * @param {string} ID\n * @param {number} verified\n */\n// export const put = (ID, verified) => (CACHE[ID] = verified);\n\n/**\n * Converts a protonmail addressID to the actual email address\n * @param addressID\n * @returns {*}\n */\n// const addressIDtoEmail = (addressID) => {\n//     const { Email } = flow(\n//         filter({ Status: 1, Receive: 1 }),\n//         find({ ID: addressID })\n//     )(addressesModel.get());\n\n//     return Email;\n// };\n\n/**\n * Retrieves the available public keys to verify attachments from the given message with\n * @param message\n */\n// const getPublicKeys = (message) => {\n//     // The Sender object is empty for drafts\n//     const email = message.Sender.Address || addressIDtoEmail(message.AddressID);\n\n//     return publicKeyStore.get([email], true).then(({ [email]: list }) => list);\n// };\n\n/**\n * Retrieve the verification status from the cache.\n * @param {String} Attachment.ID\n * @returns {*}\n */\nexport const getVerificationStatus = ({ ID = '' }, cache) => {\n    // Instead of || because VERIFICATION_STATUS can be 0.\n    return cache.has(ID) ? cache.get(ID) : NOT_VERIFIED;\n};\n\n/**\n * Returns the signature status for each of the signatures when after verifying them with the decryptedAttachment\n * @param {Uint8Array} decryptedAttachment\n * @param {Array} signatures\n * @param {Array} publicKeys\n * @returns {Promise.<*[]>}\n */\nconst verifyAllSignatures = (decryptedAttachment, signatures, publicKeys) => {\n    const attMessage = createMessage(decryptedAttachment);\n\n    const asyncSigVerifiers = signatures.map((signature) => {\n        return verifyMessage({\n            message: attMessage,\n            publicKeys,\n            signature\n        }).then(({ verified }) => verified);\n    });\n\n    return Promise.all(asyncSigVerifiers);\n};\n\n/**\n * Verify the signature of an attachment given the decrypted attachment and the message it is attached to.\n * Always tries to reverify the signatures, you can check if the attachment was already verified using\n * getVerificationStatus\n * @param {Object} attachment\n * @param {UInt8Array} decryptedAttachment\n * @param {Message} message\n * @param {embeddedSigs} A list of signature packets found by decrypting the attachment (PGP/Inline case)\n * @returns {Promise.<*>}\n */\nexport const verify = async (attachment, decryptedAttachment, { publicKeys }, embeddedSigs = [], cache) => {\n    const { ID, Signature } = attachment;\n    const signatures = Signature ? [await getSignature(Signature)] : embeddedSigs;\n\n    // shortcut to prevent unnecessary public key fetching\n    if (!signatures.length) {\n        cache.set(ID, NOT_SIGNED);\n        return cache.get(ID);\n    }\n\n    // const keyObjects = await getPublicKeys(message);\n    // const publicKeys = keyObjects.reduce((acc, { key, compromised }) => {\n    //     !compromised && acc.push(key);\n    //     return acc;\n    // }, []);\n    const statusPerSig = await verifyAllSignatures(decryptedAttachment, signatures, publicKeys);\n    const pmcryptoVerified = statusPerSig.reduce(\n        (acc, status) => (acc === SIGNED_AND_VALID ? SIGNED_AND_VALID : status),\n        NOT_SIGNED\n    );\n    const verified =\n        (!publicKeys || !publicKeys.length) && pmcryptoVerified === SIGNED_AND_INVALID\n            ? SIGNED_NO_PUB_KEY\n            : pmcryptoVerified;\n    cache.set(ID, verified);\n    // dispatcher.attachmentVerified('verified', { message, attachment, status: verified });\n    return verified;\n};\n","import { useCallback } from 'react';\nimport { useCache } from 'react-components';\nimport { verify as verifySignature } from '../helpers/signatures';\n\nconst CACHE_KEY = 'Signatures';\n\n// TODO: Use a listenable cache to be able to get reactive data from views\n\nexport const useSignaturesCache = () => {\n    const cache = useCache();\n\n    if (!cache.has(CACHE_KEY)) {\n        cache.set(CACHE_KEY, new Map());\n    }\n    return cache.get(CACHE_KEY);\n};\n\nexport const useSignatures = () => {\n    const cache = useSignaturesCache();\n\n    const verify = useCallback((attachment, decryptedAttachment, { publicKeys }, embeddedSigs = []) =>\n        verifySignature(attachment, decryptedAttachment, { publicKeys }, embeddedSigs, cache)\n    );\n\n    return { verify };\n};\n","import { useCallback } from 'react';\nimport { useCache, useApi } from 'react-components';\nimport {\n    getAndVerify,\n    getCacheKey,\n    download as downloadAttachment,\n    downloadAll as downloadAllAttachment\n} from '../helpers/attachments';\nimport { parser } from '../helpers/embedded/embedded';\nimport { useSignatures } from './useSignatures';\nimport { MessageExtended, Attachment } from '../models/message';\n\nconst CACHE_KEY = 'Attachments';\n\n// TODO: Use a listenable cache to be able to get reactive data from views\n\nexport const useAttachmentsCache = () => {\n    const cache = useCache();\n\n    if (!cache.has(CACHE_KEY)) {\n        cache.set(CACHE_KEY, new Map());\n    }\n    return cache.get(CACHE_KEY);\n};\n\nexport const useAttachments = () => {\n    const cache = useAttachmentsCache();\n    const api = useApi();\n    const { verify } = useSignatures();\n\n    const get = useCallback(\n        (attachment: Attachment = {}, message: MessageExtended = {}) =>\n            getAndVerify(attachment, message, false, { cache, api, verify }),\n        [cache, api]\n    );\n\n    const reverify = useCallback(\n        (attachment: Attachment = {}, message: MessageExtended = {}) =>\n            getAndVerify(attachment, message, true, { cache, api, verify }),\n        [cache, api]\n    );\n\n    const has = useCallback((attachment: Attachment = {}) => cache.get(getCacheKey(attachment)), [cache]);\n\n    const download = useCallback(\n        (attachment: Attachment = {}, message: MessageExtended = {}) =>\n            downloadAttachment(attachment, message, { cache, api }),\n        [cache, api]\n    );\n\n    const downloadAll = useCallback((message: MessageExtended = {}) => downloadAllAttachment(message, { cache, api }), [\n        cache,\n        api\n    ]);\n\n    return { get, reverify, has, download, downloadAll };\n};\n\nexport const useTransformAttachments = () => {\n    const attachmentLoader = useAttachments();\n\n    return useCallback(\n        async (message: MessageExtended, { mailSettings }: any) => {\n            return parser(message, mailSettings, { direction: 'blob', attachmentLoader });\n        },\n        [attachmentLoader]\n    );\n};\n","import { useCallback } from 'react';\nimport { useCache } from 'react-components';\nimport { transformEscape } from '../helpers/transforms/transformEscape';\nimport { transformLinks } from '../helpers/transforms/transformLinks';\nimport { transformEmbedded } from '../helpers/transforms/transformEmbedded';\nimport { transformWelcome } from '../helpers/transforms/transformWelcome';\nimport { transformBlockquotes } from '../helpers/transforms/transformBlockquotes';\nimport { transformStylesheet } from '../helpers/transforms/transformStylesheet';\nimport { transformRemote } from '../helpers/transforms/transformRemote';\nimport { transformBase } from '../helpers/transforms/transformBase';\nimport { useDecryptMessage } from './useDecryptMessage';\nimport { useLoadMessage } from './useLoadMessage';\nimport { useMarkAsRead } from './useMarkAsRead';\nimport { useTransformAttachments } from './useAttachments';\nimport { MessageExtended } from '../models/message';\n\n// Reference: Angular/src/app/message/services/prepareContent.js\n\ninterface ComputationOption {\n    action?: string;\n    cache: any;\n    mailSettings: any;\n}\n\ninterface Computation {\n    (message: MessageExtended, options: ComputationOption): Promise<MessageExtended> | MessageExtended;\n}\n\nexport const useComputeMessage = (mailSettings: any) => {\n    const cache = useCache();\n    const load = useLoadMessage();\n    const markAsRead = useMarkAsRead();\n    const decrypt = useDecryptMessage();\n    const transformAttachements = useTransformAttachments();\n\n    const transforms = [\n        transformEscape,\n        transformBase,\n        transformLinks,\n        transformEmbedded,\n        transformWelcome,\n        transformBlockquotes,\n        transformStylesheet,\n        transformAttachements,\n        transformRemote\n    ];\n\n    /**\n     * Run a computation on a message, wait until it finish\n     * Return the message extanded with the result of the computation\n     */\n    const run = useCallback(async (message: MessageExtended, compute: Computation, action?: string) => {\n        const result = (await compute(message, { action, cache, mailSettings })) || {};\n\n        if (result.document) {\n            result.content = result.document.innerHTML;\n        }\n\n        return { ...message, ...result } as MessageExtended;\n    }, []);\n\n    /**\n     * Run a list of computation sequentially\n     */\n    const runSerial = useCallback(\n        async (message: MessageExtended, computes: Computation[], action?: string) => {\n            return await computes.reduce(async (messagePromise: Promise<MessageExtended>, compute: Computation) => {\n                return run(await messagePromise, compute, action);\n            }, Promise.resolve(message));\n        },\n        [run]\n    );\n\n    // TODO: Handle cache?\n    const initialize = useCallback(\n        (message: MessageExtended, action?: string) => {\n            return runSerial(message, [load, markAsRead, decrypt, ...transforms], action);\n        },\n        [runSerial]\n    );\n\n    const loadRemoteImages = useCallback(\n        (message: MessageExtended, action?: string) => {\n            return run({ ...message, showRemoteImages: true }, transformRemote, action);\n        },\n        [run]\n    );\n\n    const loadEmbeddedImages = useCallback(\n        (message: MessageExtended, action?: string) => {\n            return runSerial(\n                { ...message, showEmbeddedImages: true },\n                [transformEmbedded, transformAttachements],\n                action\n            );\n        },\n        [runSerial]\n    );\n\n    return { run, runSerial, initialize, loadRemoteImages, loadEmbeddedImages };\n};\n","import { useCallback } from 'react';\nimport { useApi } from 'react-components';\nimport { getMessage } from 'proton-shared/lib/api/messages';\n\nexport const useLoadMessage = () => {\n    const api = useApi();\n\n    return useCallback(async ({ data: message }) => {\n        // If the Body is already there, no need to send a request\n        if (!message.Body) {\n            const { Message } = await api(getMessage(message.ID));\n            return { data: Message };\n        }\n    });\n};\n","import { useCallback } from 'react';\nimport { useGetPublicKeys, useGetAddressKeys } from 'react-components';\nimport { decryptMessageLegacy } from 'pmcrypto';\nimport { splitKeys } from 'proton-shared/lib/keys/keys';\nimport { VERIFICATION_STATUS } from '../constants';\nimport { MessageExtended } from '../models/message';\nimport { isMIME } from '../helpers/message';\n\n// Reference: Angular/src/app/message/factories/messageModel.js decryptBody\n\nexport const useDecryptMessage = () => {\n    const getPublicKeys = useGetPublicKeys();\n    const getAddressKeys = useGetAddressKeys();\n\n    // TODO: Cache result\n    return useCallback(\n        async ({ data: message }: MessageExtended): Promise<MessageExtended> => {\n            message = message || {};\n            message.Sender = message.Sender || {};\n\n            const [{ publicKeys = [] }, addressKeys] = await Promise.all([\n                getPublicKeys(message.Sender.Address),\n                getAddressKeys(message.AddressID)\n            ]);\n            const { privateKeys } = splitKeys(addressKeys);\n\n            // TODO: filter out compromised addresses (if not done already)\n\n            if (isMIME(message)) {\n                // TODO: decrypt mime message\n            } else {\n                const {\n                    data,\n                    verified: pmcryptoVerified = VERIFICATION_STATUS.NOT_SIGNED\n                } = (await decryptMessageLegacy({\n                    message: message.Body,\n                    messageDate: new Date((message.Time || 0) * 1000), // getDate(this),\n                    privateKeys,\n                    publicKeys\n                })) as any;\n\n                const signedInvalid = VERIFICATION_STATUS.SIGNED_AND_INVALID;\n                const signedPubkey = VERIFICATION_STATUS.SIGNED_NO_PUB_KEY;\n                const verified =\n                    !publicKeys.length && pmcryptoVerified === signedInvalid ? signedPubkey : pmcryptoVerified;\n\n                return { raw: data, verified, publicKeys, privateKeys };\n            }\n\n            return {};\n        },\n        [getPublicKeys, getAddressKeys]\n    );\n};\n","import React from 'react';\nimport { classnames } from 'react-components';\n\nimport { isPlainText } from '../../helpers/message';\nimport { MessageExtended } from '../../models/message';\n\nimport './MessageBody.scss';\n\ninterface Props {\n    message: MessageExtended;\n}\n\nconst MessageBody = ({ message: { content = '', data: message = {} } }: Props) => {\n    const plain = isPlainText(message);\n    return (\n        <div\n            className={classnames(['message-content bodyDecrypted', plain && 'plain'])}\n            dangerouslySetInnerHTML={{ __html: content }}\n        />\n    );\n};\n\nexport default MessageBody;\n","import { VERIFICATION_STATUS } from '../constants';\n\nimport { isAuto, isImported, inSigningPeriod } from './message';\n\nconst { SIGNED_AND_INVALID, SIGNED_AND_VALID, NOT_SIGNED } = VERIFICATION_STATUS;\n\n/**\n * Some complicated logic after internal discussions.\n * This function returns whether we should display a lock with check / warning (indicating the signature status)\n * or we just display a lock.\n * The following logic is applied:\n *  1. Old SENT messages (not imported, not autoresponse) are not signed\n *  2. If a SENT message has been correctly verified, a lonesome lock is displayed, unaccompanied by its check\n *      (because we don't consciously do key pinning here)\n *  3. If a SENT message doesn't have a signature, but should have, we display a warning. A SENT message should have a signature if:\n *      - it is not an autoreply AND\n *      - it is not an import AND\n *      - it is send after the time when we started signing all messages\n *  4. If a message fails the signature check, we display a warning\n *  5. If a (non-sent) message has been correctly verified, we display a check.\n *  6. Else we just display the appropriate lock.\n *      - this happens when there is no signature or it hasn't been verified (meaning unverified SENT message fall in this case).\n *  This logic is caused by sent message's signatures always being verified without requiring the user to enable key pinning\n *  (key pinning for your own keys happens as a consequence of our authentication method).\n *  Thus we don't want to display this check for people that don't understand key pinning, but still keep the\n *  same security.\n *  @return {() => boolean} whether to display the signature status\n */\nexport const displaySignatureStatus = ({ data: message, verified }) => {\n    // TODO: const isSentByMe = message.isSentByMe();\n    const isSentByMe = false;\n\n    // Rule 4 + 5 + 6 for non-SENT messages\n    if (!isSentByMe) {\n        return verified === SIGNED_AND_INVALID || verified === SIGNED_AND_VALID;\n    }\n    // SENT messages\n    const imported = isImported(message.data);\n    const auto = isAuto(message.data);\n    const period = inSigningPeriod(message.data.Time);\n    // Rule 1:\n    if (!auto && !imported && !period) {\n        return false;\n    }\n    // Rule 2:\n    if (verified === SIGNED_AND_VALID) {\n        return false;\n    }\n    // Rule 3:\n    if (verified === NOT_SIGNED && !auto && !imported && period) {\n        // warning\n        return true;\n    }\n    // Rule 4 + 6:\n    return verified === SIGNED_AND_INVALID;\n};\n","import { c } from 'ttag';\n\nimport {\n    isSentEncrypted,\n    isAuto,\n    isSent,\n    isDraft,\n    isInternalEncrypted,\n    isExternalEncrypted,\n    inSigningPeriod,\n    isImported\n} from './message';\n\nconst I18N = {\n    pm: [\n        c('Message encryption status').t`End-to-end encrypted message`,\n        // gettextCatalog.getString('End-to-end encrypted message', null, 'Message encryption status'),\n        c('Message encryption status').t`End-to-end encrypted message from verified address`,\n        // gettextCatalog.getString(\n        //     'End-to-end encrypted message from verified address',\n        //     null,\n        //     'Message encryption status'\n        // ),\n        c('Message encryption status').t`Sender verification failed`\n        // gettextCatalog.getString('Sender verification failed', null, 'Message encryption status')\n    ],\n    pgp: [\n        c('Message encryption status').t`PGP-encrypted message`,\n        // gettextCatalog.getString('PGP-encrypted message', null, 'Message encryption status'),\n        c('Message encryption status').t`PGP-encrypted message from verified address`,\n        // gettextCatalog.getString('PGP-encrypted message from verified address', null, 'Message encryption status'),\n        c('Message encryption status').t`Sender verification failed`\n        // gettextCatalog.getString('Sender verification failed', null, 'Message encryption status')\n    ],\n    clear: [\n        c('Message encryption status').t`Stored with zero access encryption`,\n        // gettextCatalog.getString('Stored with zero access encryption', null, 'Message encryption status'),\n        c('Message encryption status').t`PGP-signed message from verified address`,\n        // gettextCatalog.getString('PGP-signed message from verified address', null, 'Message encryption status'),\n        c('Message encryption status').t`Sender verification failed`\n        // gettextCatalog.getString('Sender verification failed', null, 'Message encryption status')\n    ],\n    sentEncrypted: [\n        c('Message encryption status').t`Sent by you with end-to-end encryption`,\n        // gettextCatalog.getString('Sent by you with end-to-end encryption', null, 'Message encryption status'),\n        c('Message encryption status').t`Sent by you with end-to-end encryption`,\n        // gettextCatalog.getString('Sent by you with end-to-end encryption', null, 'Message encryption status'),\n        c('Message encryption status').t`Sender verification failed`\n        // gettextCatalog.getString('Sender verification failed', null, 'Message encryption status')\n    ],\n    auto: [\n        c('Message encryption status').t`Sent by ProtonMail with zero access encryption`\n        // gettextCatalog.getString('Sent by ProtonMail with zero access encryption', null, 'Message encryption status')\n    ],\n    sentClear: [\n        c('Message encryption status').t`Stored with zero access encryption`,\n        // gettextCatalog.getString('Stored with zero access encryption', null, 'Message encryption status'),\n        c('Message encryption status').t`Stored with zero access encryption`,\n        // gettextCatalog.getString('Stored with zero access encryption', null, 'Message encryption status'),\n        c('Message encryption status').t`Sender verification failed`\n        // gettextCatalog.getString('Sender verification failed', null, 'Message encryption status')\n    ],\n    draft: [\n        c('Message encryption status').t`Encrypted message`\n        //gettextCatalog.getString('Encrypted message', null, 'Message encryption status')\n    ]\n};\n\nconst getFromType = (message) => {\n    if (isSentEncrypted(message)) {\n        return I18N.sentEncrypted;\n    }\n\n    if (isAuto(message)) {\n        return I18N.auto;\n    }\n\n    if (isSent(message)) {\n        return I18N.sentClear;\n    }\n\n    if (isDraft(message)) {\n        return I18N.draft;\n    }\n\n    if (isInternalEncrypted(message)) {\n        return I18N.pm;\n    }\n\n    if (isExternalEncrypted(message)) {\n        return I18N.pgp;\n    }\n\n    return I18N.clear;\n};\n\nexport const getEncryptionType = ({ data: message, verified = 0 }) => {\n    const encType = getFromType(message);\n\n    if (encType.length > verified) {\n        // Old messages are not signed, so missing sender signatures should be treated like external missing signatures, no warning\n        if (!inSigningPeriod(message) && isSentEncrypted(message) && !isImported(message)) {\n            return encType[0];\n        }\n\n        return encType[verified];\n    }\n\n    return encType[0];\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon, Tooltip, Href, classnames } from 'react-components';\nimport { displaySignatureStatus } from '../../helpers/displaySignature';\nimport { isPGPEncrypted, isInternal, isSentEncrypted, isDraft, isAuto } from '../../helpers/message';\nimport { getEncryptionType } from '../../helpers/encryptionType';\n\n// Reference: Angular/src/templates/message/encryptionStatus.tpl.html\n\nconst MessageLock = ({ message }) => {\n    const displaySignature = displaySignatureStatus(message);\n    const pgpEncrypted = isPGPEncrypted(message.data);\n\n    const tooltip = getEncryptionType(message);\n    const href = displaySignature\n        ? 'https://protonmail.com/support/knowledge-base/digital-signature/'\n        : pgpEncrypted\n        ? 'https://protonmail.com/support/knowledge-base/how-to-use-pgp'\n        : 'https://protonmail.com/support/knowledge-base/what-is-encrypted/';\n    // TODO: add lock-signed lock-warning in design system\n    // const icon = displaySignature ? (message.verified ? 'lock-signed' : 'lock-warning') : 'lock';\n    const icon = 'lock';\n    const internal =\n        isInternal(message.data) || isSentEncrypted(message.data) || isDraft(message.data) || isAuto(message.data);\n    const className = classnames([\n        'no-pointer-events-children',\n        ...(displaySignature\n            ? [\n                  message.verified === 1 && 'valid-sig',\n                  message.verified !== 1 && 'invalid-sig',\n                  internal && 'color-pm-blue', // 'internal',\n                  pgpEncrypted && 'pgp'\n              ]\n            : ['nodecoration color-global-grey flex', internal && 'color-pm-blue'])\n    ]);\n\n    return (\n        <Tooltip title={tooltip} className=\"inbl\">\n            <Href className={className} href={href}>\n                <Icon name={icon} className=\"fill-currentColor\" />\n            </Href>\n        </Tooltip>\n    );\n};\n\nMessageLock.propTypes = {\n    message: PropTypes.object.isRequired\n};\n\nexport default MessageLock;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { c } from 'ttag';\n\nimport ItemStar from '../../list/ItemStar';\nimport ItemDate from '../../list/ItemDate';\nimport { ELEMENT_TYPES } from '../../../constants';\nimport MessageLock from '../MessageLock';\nimport { isSent } from '../../../helpers/message';\nimport ItemLabels from '../../list/ItemLabels';\nimport ItemAttachmentIcon from '../../list/ItemAttachmentIcon';\n\nconst HeaderCollapsed = ({ message, labels, onExpand }) => {\n    const { Name, Address } = message.data.Sender;\n\n    const handleClick = (event) => {\n        if (event.target.classList.contains('item-star') || event.target.closest('.item-star')) {\n            event.stopPropagation();\n            return;\n        }\n\n        onExpand();\n    };\n\n    const inOutClass = isSent(message.data) ? 'is-outbound' : 'is-inbound';\n\n    return (\n        <div\n            className={`message-header flex flex-nowrap flex-items-center flex-spacebetween cursor-pointer ${inOutClass}`}\n            onClick={handleClick}\n        >\n            <div>\n                <span className=\"mr0-5\">{c('Label').t`From:`}</span>\n                <span className=\"bold mr0-5\" title={Name}>\n                    {Name}\n                </span>\n                <i title={Address}>&lt;{Address}&gt;</i>\n                <MessageLock message={message} />\n            </div>\n            <div>\n                <ItemAttachmentIcon element={message.data} type={ELEMENT_TYPES.MESSAGE} />\n                <ItemLabels element={message.data} labels={labels} type={ELEMENT_TYPES.MESSAGE} className=\"mr1\" />\n                <ItemDate className=\"mr1\" element={message.data} mode=\"distance\" />\n                <ItemStar element={message.data} type={ELEMENT_TYPES.MESSAGE} />\n            </div>\n        </div>\n    );\n};\n\nHeaderCollapsed.propTypes = {\n    message: PropTypes.object.isRequired,\n    labels: PropTypes.array.isRequired,\n    onExpand: PropTypes.func\n};\n\nexport default HeaderCollapsed;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon } from 'react-components';\nimport { c } from 'ttag';\n\nconst ExtraImages = ({ message: { showRemoteImages, showEmbeddedImages }, type, onLoadImages }) => {\n    // Flags will not be setted if there is no images\n    if ((type === 'remote' && showRemoteImages !== false) || (type === 'embedded' && showEmbeddedImages !== false)) {\n        return null;\n    }\n\n    return (\n        <div className=\"bg-white rounded bordered-container p0-5 mb0-5 flex flex-nowrap\">\n            <Icon name=\"insert-image\" className=\"fill-global-grey mtauto mbauto\" />\n            <span className=\"pl0-5 pr0-5 flex-item-fluid\">\n                {type === 'remote'\n                    ? c('Action').t`This message contains remote content`\n                    : c('Action').t`This message contains embedded images`}\n            </span>\n            <a onClick={onLoadImages} className=\"bold\">\n                {c('Action').t`Load`}\n            </a>\n        </div>\n    );\n};\n\nExtraImages.propTypes = {\n    message: PropTypes.object.isRequired,\n    type: PropTypes.string.isRequired,\n    onLoadImages: PropTypes.func.isRequired\n};\n\nexport default ExtraImages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon, Href } from 'react-components';\nimport { c } from 'ttag';\nimport { getListUnsubscribe } from '../../../helpers/message';\n\nconst ExtraUnsubscribe = ({ message }) => {\n    if (/*unsubscribed || */ !getListUnsubscribe(message.data)) {\n        return null;\n    }\n\n    return (\n        <div className=\"bg-white rounded bordered-container p0-5 mb0-5 flex flex-nowrap\">\n            <Icon name=\"email\" className=\"flex-item-noshrink fill-global-grey mtauto mbauto\" />\n            <span className=\"pl0-5 pr0-5 flex-item-fluid\">{c('Info').t`This message is from a mailing list`}</span>\n            <span className=\"flex-item-noshrink flex\">\n                <Href\n                    className=\"bold mr1 pl0-5 pr0-5\"\n                    href=\"https://protonmail.com/support/knowledge-base/auto-unsubscribe\"\n                >\n                    {c('Info').t`Learn more`}\n                </Href>\n                <a className=\"bold\">{c('Action').t`Unsubscribe`}</a>\n            </span>\n        </div>\n    );\n};\n\nExtraUnsubscribe.propTypes = {\n    message: PropTypes.object.isRequired\n};\n\nexport default ExtraUnsubscribe;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ExtraImages from '../extras/ExtraImages';\nimport ExtraUnsubscribe from '../extras/ExtraUnsubscribe';\n\nconst HeaderExtra = ({ message, onLoadRemoteImages, onLoadEmbeddedImages }) => {\n    return (\n        <section className=\"mt0-5 stop-propagation\">\n            {/* TODO: ExpirationTime */}\n            {/* TODO: SpamScore */}\n            {/* TODO: MIMEParsingFailed */}\n            {/* TODO: hasError */}\n            <ExtraUnsubscribe message={message} />\n            {/* TODO: requireReadReceiptConfirmation */}\n            {/* TODO: isAutoReply */}\n            {/* TODO: attachedPublicKey */}\n            {/* TODO: promptKeyPinning */}\n            {/* TODO: askResign */}\n            <ExtraImages message={message} type=\"remote\" onLoadImages={onLoadRemoteImages} />\n            <ExtraImages message={message} type=\"embedded\" onLoadImages={onLoadEmbeddedImages} />\n        </section>\n    );\n};\n\nHeaderExtra.propTypes = {\n    message: PropTypes.object.isRequired,\n    onLoadRemoteImages: PropTypes.func.isRequired,\n    onLoadEmbeddedImages: PropTypes.func.isRequired\n};\n\nexport default HeaderExtra;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { c } from 'ttag';\n\nconst HeaderRecipientsSimple = ({ message }) => {\n    const { ToList = [], CCList = [], BCCList = [] } = message;\n    const recipients = [...ToList, ...BCCList, ...CCList];\n\n    return (\n        <div className=\"flex\">\n            <span className=\"opacity-50 flex-self-vcenter container-to\">{c('Label').t`To:`}</span>\n            <span className=\"flex-self-vcenter mr1\">\n                {recipients.map(({ Address = '', Name = '' }, index) => {\n                    return (\n                        <span key={index} className=\"mr0-5\" title={Address}>\n                            {Name || Address}\n                            {index < recipients.length - 1 && ','}\n                        </span>\n                    );\n                })}\n            </span>\n        </div>\n    );\n};\n\nHeaderRecipientsSimple.propTypes = {\n    message: PropTypes.object.isRequired,\n    showDetails: PropTypes.bool\n};\n\nexport default HeaderRecipientsSimple;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { c } from 'ttag';\n\nconst RecipientsList = ({ list }) => (\n    <span className=\"flex-self-vcenter flex flex-column\">\n        {list.map(({ Address = '', Name = '' }, index) => {\n            return (\n                <span key={index}>\n                    {Name || Address} <span className=\"opacity-50\">&lt;{Address}&gt;</span>{' '}\n                </span>\n            );\n        })}\n    </span>\n);\n\nRecipientsList.propTypes = {\n    list: PropTypes.array.isRequired\n};\n\nconst HeaderRecipientsDetails = ({ message }) => {\n    const { ToList = [], CCList = [], BCCList = [] } = message;\n\n    return (\n        <div className=\"flex flex-column\">\n            {ToList.length > 0 && (\n                <span className=\"flex\">\n                    <span className=\"opacity-50 container-to\">{c('Label').t`To:`}</span>\n                    <span className=\"flex-self-vcenter mr1\">\n                        <RecipientsList list={ToList} />\n                    </span>\n                </span>\n            )}\n            {CCList.length > 0 && (\n                <span className=\"flex\">\n                    <span className=\"opacity-50 container-to\">{c('Label').t`CC:`}</span>\n                    <span className=\"flex-self-vcenter mr1\">\n                        <RecipientsList list={CCList} />\n                    </span>\n                </span>\n            )}\n            {BCCList.length > 0 && (\n                <span className=\"flex\">\n                    <span className=\"opacity-50 container-to\">{c('Label').t`BCC:`}</span>\n                    <span className=\"flex-self-vcenter mr1\">\n                        <RecipientsList list={BCCList} />\n                    </span>\n                </span>\n            )}\n        </div>\n    );\n};\n\nHeaderRecipientsDetails.propTypes = {\n    message: PropTypes.object.isRequired\n};\n\nexport default HeaderRecipientsDetails;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { c } from 'ttag';\nimport { SimpleDropdown, Icon, Group, ButtonGroup, useToggle } from 'react-components';\nimport humanSize from 'proton-shared/lib/helpers/humanSize';\n\nimport ItemStar from '../../list/ItemStar';\nimport ItemDate from '../../list/ItemDate';\nimport { ELEMENT_TYPES } from '../../../constants';\nimport ItemLabels from '../../list/ItemLabels';\nimport ItemLocation from '../../list/ItemLocation';\nimport MoveDropdown from '../../dropdown/MoveDropdown';\nimport LabelDropdown from '../../dropdown/LabelDropdown';\nimport HeaderExtra from './HeaderExtra';\nimport MessageLock from '../MessageLock';\nimport { isSent } from '../../../helpers/message';\nimport HeaderRecipientsSimple from './HeaderRecipientsSimple';\nimport HeaderRecipientsDetails from './HeaderRecipientsDetails';\nimport ItemAttachmentIcon from '../../list/ItemAttachmentIcon';\n\nconst HeaderExpanded = ({\n    labels,\n    message,\n    messageLoaded,\n    onLoadRemoteImages,\n    onLoadEmbeddedImages,\n    mailSettings,\n    onCollapse\n}) => {\n    const { state: showDetails, toggle: toggleDetails } = useToggle();\n\n    const { Name, Address } = message.data.Sender;\n    const inOutClass = isSent(message.data) ? 'is-outbound' : 'is-inbound';\n\n    const handleClick = (event) => {\n        if (event.target.closest('.stop-propagation')) {\n            event.stopPropagation();\n            return;\n        }\n\n        onCollapse();\n    };\n\n    return (\n        <div className={`message-header cursor-pointer ${inOutClass}`} onClick={handleClick}>\n            <div className=\"flex flex-nowrap flex-items-center flex-spacebetween mb0-5\">\n                <div>\n                    <span className=\"mr0-5\">{c('Label').t`From:`}</span>\n                    <span className=\"bold mr0-5\" title={Name}>\n                        {Name}\n                    </span>\n                    <i title={Address}>&lt;{Address}&gt;</i>\n                    <MessageLock message={message} />\n                </div>\n                <div>\n                    <ItemDate element={message.data} mode=\"distance\" />\n                </div>\n            </div>\n            <div className=\"flex flex-nowrap flex-items-start flex-spacebetween mb0-5\">\n                {showDetails ? (\n                    <HeaderRecipientsDetails message={message.data} />\n                ) : (\n                    <HeaderRecipientsSimple message={message.data} />\n                )}\n                <div className=\"stop-propagation\">\n                    <ItemAttachmentIcon element={message.data} type={ELEMENT_TYPES.MESSAGE} />\n                    <ItemLabels max={4} element={message.data} labels={labels} type={ELEMENT_TYPES.MESSAGE} />\n                    <ItemLocation message={message.data} mailSettings={mailSettings} />\n                    <ItemStar element={message.data} type={ELEMENT_TYPES.MESSAGE} />\n                </div>\n            </div>\n            {showDetails ? (\n                <>\n                    <div className=\"mb0-5\">\n                        <span className=\"mr0-5\">{c('Label').t`Size:`}</span>\n                        <span>{humanSize(message.data.Size)}</span>\n                    </div>\n                    <div className=\"mb0-5\">\n                        <ItemDate element={message.data} mode=\"full\" />\n                    </div>\n                </>\n            ) : null}\n            <HeaderExtra\n                message={message}\n                onLoadRemoteImages={onLoadRemoteImages}\n                onLoadEmbeddedImages={onLoadEmbeddedImages}\n            />\n            <div className=\"flex flex-spacebetween mb1 flex-nowrap\">\n                <a onClick={toggleDetails} className=\"bold flex-self-vcenter stop-propagation\">\n                    {showDetails ? c('Action').t`Hide details` : c('Action').t`Show details`}\n                </a>\n                <div className=\"stop-propagation\">\n                    <Group className=\"mr1\">\n                        <SimpleDropdown autoClose={false} content={<Icon name=\"folder\" />}>\n                            <MoveDropdown selectedIDs={[message.data.ID]} type={ELEMENT_TYPES.MESSAGE} />\n                        </SimpleDropdown>\n                        <SimpleDropdown autoClose={false} content={<Icon name=\"label\" />}>\n                            <LabelDropdown selectedIDs={[message.data.ID]} type={ELEMENT_TYPES.MESSAGE} />\n                        </SimpleDropdown>\n                    </Group>\n\n                    <Group>\n                        <ButtonGroup disabled={!messageLoaded}>\n                            <Icon name=\"reply\" />\n                        </ButtonGroup>\n                        <ButtonGroup disabled={!messageLoaded}>\n                            <Icon name=\"reply-all\" />\n                        </ButtonGroup>\n                        <ButtonGroup disabled={!messageLoaded}>\n                            <Icon name=\"forward\" />\n                        </ButtonGroup>\n                    </Group>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nHeaderExpanded.propTypes = {\n    labels: PropTypes.array,\n    mailSettings: PropTypes.object.isRequired,\n    message: PropTypes.object.isRequired,\n    messageLoaded: PropTypes.bool.isRequired,\n    onLoadRemoteImages: PropTypes.func.isRequired,\n    onLoadEmbeddedImages: PropTypes.func.isRequired,\n    onCollapse: PropTypes.func.isRequired\n};\n\nexport default HeaderExpanded;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport humanSize from 'proton-shared/lib/helpers/humanSize';\nimport { Icon, classnames } from 'react-components';\nimport { useAttachments } from '../../hooks/useAttachments';\n\n// Reference: Angular/src/templates/attachments/attachmentElement.tpl.html\n\nconst OUTER_MAP_CLASSNAME = {\n    zip: 'file-rar-zip',\n    mp3: 'file-video',\n    javascript: 'file-unknown',\n    vcard: 'file-unknown',\n    xls: 'file-xls',\n    mov: 'file-video',\n    pdf: 'file-pdf',\n    power: 'file-ppt',\n    word: 'file-doc'\n};\n\nconst INNER_MAP_CLASSNAME = {\n    'pgp-keys': 'fa-key'\n};\n\nconst getFileIconType = ({ MIMEType }) => {\n    const key = Object.keys(OUTER_MAP_CLASSNAME).find((key) => MIMEType.includes(key));\n    return OUTER_MAP_CLASSNAME[key];\n};\n\nconst getInnerFileIconType = ({ MIMEType }) => {\n    const key = Object.keys(INNER_MAP_CLASSNAME).find((key) => MIMEType.includes(key));\n    return INNER_MAP_CLASSNAME[key];\n};\n\n/*\n * embedded.isEmbedded doesn't work :/\n * As we have the header, it should be fine\n */\nconst isEmbeddedLocal = ({ Headers: { 'content-disposition': disposition, embedded } = {} } = {}) => {\n    return disposition === 'inline' || embedded === 1;\n};\n\nconst MessageAttachment = ({ attachment, message }) => {\n    const { download } = useAttachments();\n    const [showLoader, setShowLoader] = useState(false);\n    const [showInstant, setShowInstant] = useState(false);\n\n    const humanAttachmentSize = humanSize(attachment.Size);\n\n    const outerIcon = getFileIconType(attachment) || 'file-image';\n    const single = !getInnerFileIconType(attachment);\n    const isEmbedded = isEmbeddedLocal(attachment);\n\n    const classNames = classnames([\n        'listAttachments-icon listAttachments-signature-icon mauto file-outer-icon',\n        single && 'single',\n        isEmbedded && 'is-embedded'\n    ]);\n\n    const clickHandler = async () => {\n        setShowLoader(true);\n        await download(attachment, message);\n        setShowLoader(false);\n        setShowInstant(true);\n    };\n\n    const icon = showLoader ? '' : showInstant ? 'download' : outerIcon;\n    const showInner = !single && !showLoader && !showInstant;\n\n    return (\n        <li className=\"mr1 mb1\">\n            <a\n                className=\"message-attachment inline-flex flex-nowrap mw100 pm-button listAttachments-item relative no-pointer-events-children\"\n                title={`${attachment.Name} ${humanAttachmentSize}`}\n                onClick={clickHandler}\n            >\n                <span className=\"flex flex-item-noshrink message-attachmentIcon relative flex\">\n                    <Icon name={icon} size={20} className={classNames} aria-busy={showLoader} />\n                    {showInner && <Icon name=\"key\" className=\"file-inner-icon mauto\" />}\n                </span>\n                <span className=\"inbl ellipsis flex flex-column message-attachmentInfo\">\n                    <span className=\"bl ellipsis mw100\">{attachment.Name}</span>\n                    <span className=\"bl message-attachmentSize\">{humanAttachmentSize}</span>\n                </span>\n            </a>\n        </li>\n    );\n};\n\nMessageAttachment.propTypes = {\n    attachment: PropTypes.object.isRequired,\n    message: PropTypes.object.isRequired\n};\n\nexport default MessageAttachment;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { c, msgid } from 'ttag';\nimport { Icon } from 'react-components';\nimport humanSize from 'proton-shared/lib/helpers/humanSize';\n\nimport { attachmentsSize, getAttachments } from '../../helpers/message';\nimport MessageAttachment from './MessageAttachment';\nimport { useAttachments } from '../../hooks/useAttachments';\n\nconst MessageFooter = ({ message }) => {\n    const { downloadAll } = useAttachments();\n    const [showLoader, setShowLoader] = useState(false);\n    const [showInstant, setShowInstant] = useState(false);\n\n    const humanAttachmentsSize = humanSize(attachmentsSize(message.data));\n    const attachments = getAttachments(message.data);\n    const numAttachments = attachments.length;\n    const numEmbedded = message.numEmbedded;\n    const numPureAttachments = numAttachments - numEmbedded;\n\n    const handleDownloadAll = async () => {\n        setShowLoader(true);\n        await downloadAll(message);\n        setShowLoader(false);\n        setShowInstant(true);\n    };\n\n    return (\n        <div className=\"message-attachments\">\n            <div className=\"flex flex-spacebetween mb1\">\n                <span className=\"title\">\n                    <strong className=\"listAttachments-title-size mr0-5\">{humanAttachmentsSize}</strong>\n                    {numPureAttachments > 0 && (\n                        <span className=\"listAttachments-title-files mr0-5\">\n                            <Icon name=\"attach\" className=\"mr0-5\" />\n                            {c('Info').ngettext(\n                                msgid`${numPureAttachments} file attached`,\n                                `${numPureAttachments} files attached`,\n                                numPureAttachments\n                            )}\n                        </span>\n                    )}\n                    {numEmbedded > 0 && (\n                        <span className=\"listAttachments-title-embedded mr0-5\">\n                            {/* TODO: color=\"pm-blue\" */}\n                            <Icon name=\"file-image\" className=\"mr0-5\" />\n                            {c('Info').ngettext(\n                                msgid`${numEmbedded} embedded image`,\n                                `${numEmbedded} embedded images`,\n                                numEmbedded\n                            )}\n                        </span>\n                    )}\n                </span>\n                {numAttachments > 0 && (\n                    <div>\n                        <button onClick={handleDownloadAll} className=\"link strong mr0-5\">\n                            {c('Download attachments').t`Download all`}\n                        </button>\n                        {(showInstant || showLoader) && (\n                            <Icon name={showInstant ? 'download' : ''} aria-busy={showLoader} />\n                        )}\n                    </div>\n                )}\n            </div>\n\n            <ul className=\"listAttachments-list unstyled flex mb0\">\n                {attachments.map((attachment) => (\n                    <MessageAttachment key={attachment.ID} attachment={attachment} message={message} />\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nMessageFooter.propTypes = {\n    message: PropTypes.object.isRequired\n};\n\nexport default MessageFooter;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { useToggle, Loader, classnames } from 'react-components';\n\nimport { useComputeMessage } from '../../hooks/useComputeMessage';\nimport { hasAttachments } from '../../helpers/message';\nimport { Label } from '../../models/label';\n\nimport MessageBody from './MessageBody';\nimport HeaderCollapsed from './header/HeaderCollapsed';\nimport HeaderExpanded from './header/HeaderExpanded';\nimport MessageFooter from './MessageFooter';\nimport { Message, MessageExtended } from '../../models/message';\n\ninterface Props {\n    labels: Label[];\n    message: Message;\n    mailSettings: any;\n    initialExpand: boolean;\n    conversationIndex: number;\n}\n\nconst MessageView = ({ labels = [], message: inputMessage, mailSettings, initialExpand, conversationIndex }: Props) => {\n    const { state: expanded, set: setExpanded } = useToggle(initialExpand);\n    const [loaded, setLoaded] = useState(false);\n    const [message, setMessage] = useState({ data: inputMessage } as MessageExtended);\n    const elementRef = useRef<HTMLElement>(null);\n\n    const { initialize, loadRemoteImages, loadEmbeddedImages } = useComputeMessage(mailSettings);\n\n    const prepareMessage = async () => {\n        setMessage(await initialize(message));\n        setLoaded(true);\n        // Don't scroll if it's the first message of the conversation and only on the first automatic expand\n        if (conversationIndex !== 0 && initialExpand) {\n            elementRef.current && elementRef.current.scrollIntoView({ behavior: 'smooth', block: 'start' });\n        }\n    };\n\n    useEffect(() => {\n        if (!loaded && expanded) {\n            prepareMessage();\n        }\n    }, [expanded]);\n\n    const handleLoadRemoteImages = async () => {\n        setMessage(await loadRemoteImages(message));\n    };\n\n    const handleLoadEmbeddedImages = async () => {\n        setMessage(await loadEmbeddedImages(message));\n    };\n\n    const handleExpand = (value: boolean) => () => {\n        setExpanded(value);\n    };\n\n    return (\n        <article ref={elementRef} className={classnames(['message-container mb2', expanded && 'is-opened'])}>\n            {expanded ? (\n                <>\n                    <HeaderExpanded\n                        message={message}\n                        messageLoaded={loaded}\n                        onLoadRemoteImages={handleLoadRemoteImages}\n                        onLoadEmbeddedImages={handleLoadEmbeddedImages}\n                        labels={labels}\n                        mailSettings={mailSettings}\n                        onCollapse={handleExpand(false)}\n                    />\n                    {loaded ? (\n                        <>\n                            <MessageBody message={message} />\n                            {hasAttachments(message.data) ? <MessageFooter message={message} /> : null}\n                        </>\n                    ) : (\n                        <Loader />\n                    )}\n                </>\n            ) : (\n                <HeaderCollapsed message={message} labels={labels} onExpand={handleExpand(true)} />\n            )}\n        </article>\n    );\n};\n\nexport default MessageView;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useApi, useLoading, Loader, useLabels } from 'react-components';\nimport { getConversation } from 'proton-shared/lib/api/conversations';\nimport { orderBy } from 'proton-shared/lib/helpers/array';\n\nimport MessageView from '../message/MessageView';\nimport ItemStar from '../list/ItemStar';\nimport { ELEMENT_TYPES } from '../../constants';\nimport NumMessages from './NumMessages';\nimport ItemLabels from '../list/ItemLabels';\n\nconst ConversationView = ({ conversationID, messageID, mailSettings }) => {\n    const [conversation, updateConversation] = useState();\n    const [messages, updateMessages] = useState([]);\n    const [labels] = useLabels();\n    const api = useApi();\n    const [loading, withLoading] = useLoading();\n    const [initialExpand, setInitialExpand] = useState(null);\n\n    const requestConversation = async () => {\n        const { Conversation, Messages = [] } = await api(getConversation(conversationID, messageID));\n        const messages = orderBy(Messages, 'Order');\n        updateConversation(Conversation);\n        updateMessages(messages);\n        if (messages.length > 0) {\n            setInitialExpand(messages[messages.length - 1].ID);\n        }\n    };\n\n    useEffect(() => {\n        withLoading(requestConversation());\n    }, []);\n\n    if (loading) {\n        return (\n            <section className=\"view-column-detail p2 flex-item-fluid scroll-if-needed\">\n                <Loader />\n            </section>\n        );\n    }\n\n    if (!conversation) {\n        return null;\n    }\n\n    return (\n        <section className=\"view-column-detail p2 flex-item-fluid scroll-if-needed\">\n            <header className=\"flex flex-nowrap flex-spacebetween flex-items-center mb1\">\n                <h2 className=\"mb0\">\n                    <NumMessages mailSettings={mailSettings} className=\"mr0-25\" conversation={conversation} />\n                    {conversation.Subject}\n                </h2>\n                <div>\n                    <ItemLabels labels={labels} max={4} element={conversation} type={ELEMENT_TYPES.CONVERSATION} />\n                    <ItemStar element={conversation} type={ELEMENT_TYPES.CONVERSATION} />\n                </div>\n            </header>\n            {messages.map((message, index) => (\n                <MessageView\n                    key={message.ID}\n                    message={message}\n                    initialExpand={message.ID === initialExpand}\n                    labels={labels}\n                    mailSettings={mailSettings}\n                    conversationIndex={index}\n                />\n            ))}\n        </section>\n    );\n};\n\nConversationView.propTypes = {\n    conversationID: PropTypes.string.isRequired,\n    messageID: PropTypes.string,\n    mailSettings: PropTypes.object.isRequired\n};\n\nexport default ConversationView;\n","import React, { useEffect, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Button,\n    useUser,\n    useModals,\n    LinkButton,\n    AuthenticatedBugModal,\n    useConversationCounts,\n    useMessageCounts\n} from 'react-components';\nimport { c, msgid } from 'ttag';\nimport { toMap } from 'proton-shared/lib/helpers/object';\nimport { capitalize } from 'proton-shared/lib/helpers/string';\n\nimport conversationSingleSvg from 'design-system/assets/img/shared/selected-conversation-single.svg';\nimport conversationManySvg from 'design-system/assets/img/shared/selected-conversation-many.svg';\nimport welcomeMessageSvg from 'design-system/assets/img/shared/welcome-message.svg';\nimport { getCurrentType } from '../../helpers/element';\nimport { ELEMENT_TYPES } from '../../constants';\n\nconst PlaceholderView = ({ labelID = '', checkedIDs = [], onUncheckAll, welcomeRef, mailSettings }) => {\n    const total = checkedIDs.length;\n    const [conversationCounts] = useConversationCounts();\n    const [messageCounts] = useMessageCounts();\n    const [user] = useUser();\n    const { createModal } = useModals();\n    const type = getCurrentType({ mailSettings, labelID });\n\n    const unreadMap = useMemo(() => {\n        const counters = type === ELEMENT_TYPES.CONVERSATION ? conversationCounts : messageCounts;\n\n        if (!Array.isArray(counters)) {\n            return {};\n        }\n\n        return toMap(counters, 'LabelID');\n    }, [conversationCounts, messageCounts]);\n\n    const { Unread = 0 } = unreadMap[labelID] || {};\n\n    useEffect(() => {\n        return () => {\n            welcomeRef.current = true;\n        };\n    }, []);\n\n    if (welcomeRef.current) {\n        return (\n            <div className=\"flex-item-fluid aligncenter p3\">\n                <p className=\"mb2\">\n                    {c('Title').ngettext(\n                        msgid`You selected 1 element from this folder`,\n                        `You selected ${total} elements from this folder`,\n                        total\n                    )}\n                </p>\n                <div className=\"mb2\">\n                    <img\n                        src={checkedIDs.length > 1 ? conversationManySvg : conversationSingleSvg}\n                        alt={c('Alternative text for conversation image').t`Conversation`}\n                    />\n                </div>\n                {checkedIDs.length ? <Button onClick={onUncheckAll}>{c('Action').t`Deselect`}</Button> : null}\n            </div>\n        );\n    }\n\n    const reportBugButton = (\n        <LinkButton key=\"report-bug-btn\" onClick={() => createModal(<AuthenticatedBugModal />)}>{c('Action')\n            .t`report a bug`}</LinkButton>\n    );\n\n    const userName = capitalize(user.Name);\n\n    return (\n        <div className=\"flex-item-fluid aligncenter p3\">\n            <h2>{user.Name ? c('Title').t`Welcome, ${userName}!` : c('Title').t`Welcome`}</h2>\n            {Unread ? (\n                <p>\n                    {c('Title').ngettext(\n                        msgid`You have 1 unread email in this folder`,\n                        `You have ${Unread} unread emails in this folder`,\n                        Unread\n                    )}\n                </p>\n            ) : null}\n            {user.hadPaidMail ? (\n                <>\n                    <p>{c('Info')\n                        .jt`Having trouble sending or receiving emails? Interested in helping us improve our service? Feel free to ${reportBugButton}.`}</p>\n                    <img src={welcomeMessageSvg} alt={c('Alternative text for welcome image').t`Welcome`} />\n                </>\n            ) : (\n                <>\n                    <p>{c('Info')\n                        .t`Upgrade to a paid plan starting from $4/month only and get additional storage capacity and more addresses with ProtonMail Plus.`}</p>\n                </>\n            )}\n        </div>\n    );\n};\n\nPlaceholderView.propTypes = {\n    labelID: PropTypes.string.isRequired,\n    checkedIDs: PropTypes.array,\n    onUncheckAll: PropTypes.func,\n    welcomeRef: PropTypes.object,\n    mailSettings: PropTypes.object.isRequired\n};\n\nexport default PlaceholderView;\n","export default [\n    {\n        ID: 'jwz8fIP__5IylLvcJzmxU364ESEcS3hqha0hT9gXp1TCetBVqNNogM1cZZFgSizxopMuCE7LVQV6L13af-7kIw==',\n        Order: 34034,\n        Subject: 'Test with images',\n        Senders: [{ Address: 'matthieu.lux@gmail.com', Name: 'Matthieu Lux' }],\n        Recipients: [{ Address: 'swiiptest@protonmail.blue', Name: '' }],\n        NumMessages: 2,\n        NumUnread: 0,\n        NumAttachments: 4,\n        ExpirationTime: 0,\n        Size: 35029,\n        ContextSize: 35029,\n        ContextTime: 1574873870,\n        Time: 1574873870,\n        ContextNumMessages: 2,\n        ContextNumUnread: 0,\n        ContextNumAttachments: 4,\n        LabelIDs: ['0', '5'],\n        Labels: [\n            {\n                ContextNumMessages: 2,\n                ContextNumUnread: 0,\n                ContextTime: 1574873870,\n                ContextSize: 35029,\n                ContextNumAttachments: 4,\n                ID: '0'\n            },\n            {\n                ContextNumMessages: 2,\n                ContextNumUnread: 0,\n                ContextTime: 1574873870,\n                ContextSize: 35029,\n                ContextNumAttachments: 4,\n                ID: '5'\n            }\n        ]\n    },\n    {\n        ID: 'RvLe6S7b-2x2pBFILtuKXSaYO0d-53CHbPPlV0U8lnYQZSaj0nRdPJK1s0RPY913eOe5MNQNU-BT7Y-MEu0JLQ==',\n        Order: 34033,\n        Subject: 'Test with lots of address',\n        Senders: [{ Address: 'matthieu.lux@gmail.com', Name: 'Matthieu Lux' }],\n        Recipients: [\n            { Address: 'swiip.test@protonmail.com', Name: 'Swiip - Test account' },\n            { Address: 'matthieu.lux@protonmail.com', Name: '' },\n            { Address: 'swiiptest@protonmail.blue', Name: '' }\n        ],\n        NumMessages: 1,\n        NumUnread: 0,\n        NumAttachments: 0,\n        ExpirationTime: 0,\n        Size: 99,\n        ContextSize: 99,\n        ContextTime: 1574873561,\n        Time: 1574873561,\n        ContextNumMessages: 1,\n        ContextNumUnread: 0,\n        ContextNumAttachments: 0,\n        LabelIDs: ['0', '5'],\n        Labels: [\n            {\n                ContextNumMessages: 1,\n                ContextNumUnread: 0,\n                ContextTime: 1574873561,\n                ContextSize: 99,\n                ContextNumAttachments: 0,\n                ID: '0'\n            },\n            {\n                ContextNumMessages: 1,\n                ContextNumUnread: 0,\n                ContextTime: 1574873561,\n                ContextSize: 99,\n                ContextNumAttachments: 0,\n                ID: '5'\n            }\n        ]\n    },\n    {\n        ID: 'wboBnJpbHZTIn3Y9FqmmhBCsPncpKoIB8SKFY3udSO_LVrSxpmJ4d-lmYJ1jMFp-If3KR6T9ZelJm8Yv1KtP5g==',\n        Order: 34032,\n        Subject: 'Test',\n        Senders: [{ Address: 'matthieu.lux@gmail.com', Name: 'Matthieu Lux' }],\n        Recipients: [{ Address: 'swiiptest@protonmail.blue', Name: '' }],\n        NumMessages: 1,\n        NumUnread: 1,\n        NumAttachments: 0,\n        ExpirationTime: 0,\n        Size: 99,\n        ContextSize: 99,\n        ContextTime: 1574873421,\n        Time: 1574873421,\n        ContextNumMessages: 1,\n        ContextNumUnread: 1,\n        ContextNumAttachments: 0,\n        LabelIDs: ['0', '5'],\n        Labels: [\n            {\n                ContextNumMessages: 1,\n                ContextNumUnread: 1,\n                ContextTime: 1574873421,\n                ContextSize: 99,\n                ContextNumAttachments: 0,\n                ID: '0'\n            },\n            {\n                ContextNumMessages: 1,\n                ContextNumUnread: 1,\n                ContextTime: 1574873421,\n                ContextSize: 99,\n                ContextNumAttachments: 0,\n                ID: '5'\n            }\n        ]\n    },\n    {\n        ID: 'y-nE4uRgzA92U8mmjgiwk0DyWUijP9Q8i1bDhfVz768QAniCnMyjSOJMPGbLVKBrhgMgOMGI36pRbG4CB3xF_A==',\n        Order: 34031,\n        Subject: 'Test with images',\n        Senders: [{ Address: 'gibolin@protonmail.blue', Name: 'Gibolin' }],\n        Recipients: [{ Address: 'swiiptest@protonmail.blue', Name: 'swiip.test@protonmail.blue' }],\n        NumMessages: 1,\n        NumUnread: 0,\n        NumAttachments: 1,\n        ExpirationTime: 0,\n        Size: 7600,\n        ContextSize: 7600,\n        ContextTime: 1574873304,\n        Time: 1574873304,\n        ContextNumMessages: 1,\n        ContextNumUnread: 0,\n        ContextNumAttachments: 1,\n        LabelIDs: ['0', '5'],\n        Labels: [\n            {\n                ContextNumMessages: 1,\n                ContextNumUnread: 0,\n                ContextTime: 1574873304,\n                ContextSize: 7600,\n                ContextNumAttachments: 1,\n                ID: '0'\n            },\n            {\n                ContextNumMessages: 1,\n                ContextNumUnread: 0,\n                ContextTime: 1574873304,\n                ContextSize: 7600,\n                ContextNumAttachments: 1,\n                ID: '5'\n            }\n        ]\n    },\n    {\n        ID: '6vrpY5bn1iTmkDaHmoC2asgwrCcxXwY9VWOYbiA2Y8vuaisIgZO_pEwj3UsSfzh0FXX4wJXabr82Lqlan1VbGQ==',\n        Order: 34029,\n        Subject: 'Welcome to the future of email',\n        Senders: [{ Address: 'contact@protonmail.click', Name: 'ProtonMail' }],\n        Recipients: [{ Address: 'swiiptest@protonmail.blue', Name: '' }],\n        NumMessages: 1,\n        NumUnread: 1,\n        NumAttachments: 11,\n        ExpirationTime: 0,\n        Size: 251984,\n        ContextSize: 251984,\n        ContextTime: 1574872960,\n        Time: 1574872960,\n        ContextNumMessages: 1,\n        ContextNumUnread: 1,\n        ContextNumAttachments: 11,\n        LabelIDs: ['0', '5', '10'],\n        Labels: [\n            {\n                ContextNumMessages: 1,\n                ContextNumUnread: 1,\n                ContextTime: 1574872960,\n                ContextSize: 251984,\n                ContextNumAttachments: 11,\n                ID: '0'\n            },\n            {\n                ContextNumMessages: 1,\n                ContextNumUnread: 1,\n                ContextTime: 1574872960,\n                ContextSize: 251984,\n                ContextNumAttachments: 11,\n                ID: '5'\n            },\n            {\n                ContextNumMessages: 1,\n                ContextNumUnread: 1,\n                ContextTime: 1574872960,\n                ContextSize: 251984,\n                ContextNumAttachments: 11,\n                ID: '10'\n            }\n        ]\n    },\n    {\n        ID: 'MABuXq6XSzZZsq6N6CNvJo1FhjG5ANO4xRr4XoZMR_cI7g80O4vhduN2iOWaWAC8HHvZqlpywcmtON7HNewsog==',\n        Order: 34028,\n        Subject: 'How to secure your ProtonMail account',\n        Senders: [{ Address: 'contact@protonmail.click', Name: 'ProtonMail' }],\n        Recipients: [{ Address: 'swiiptest@protonmail.blue', Name: '' }],\n        NumMessages: 1,\n        NumUnread: 0,\n        NumAttachments: 10,\n        ExpirationTime: 0,\n        Size: 259955,\n        ContextSize: 259955,\n        ContextTime: 1574872960,\n        Time: 1574872960,\n        ContextNumMessages: 1,\n        ContextNumUnread: 0,\n        ContextNumAttachments: 10,\n        LabelIDs: ['0', '5', '10'],\n        Labels: [\n            {\n                ContextNumMessages: 1,\n                ContextNumUnread: 0,\n                ContextTime: 1574872960,\n                ContextSize: 259955,\n                ContextNumAttachments: 10,\n                ID: '0'\n            },\n            {\n                ContextNumMessages: 1,\n                ContextNumUnread: 0,\n                ContextTime: 1574872960,\n                ContextSize: 259955,\n                ContextNumAttachments: 10,\n                ID: '5'\n            },\n            {\n                ContextNumMessages: 1,\n                ContextNumUnread: 0,\n                ContextTime: 1574872960,\n                ContextSize: 259955,\n                ContextNumAttachments: 10,\n                ID: '10'\n            }\n        ]\n    },\n    {\n        ID: 'Mcb_lNlPtE6qgAr7LV3jRPedHBfzmBg0TT20bQ0boejiaBZJi8UNXgmizpDj8wUjEXh946oJZ7FTBUPtLFTMRw==',\n        Order: 34027,\n        Subject: 'Encrypt your Internet with ProtonVPN',\n        Senders: [{ Address: 'contact@protonmail.click', Name: 'ProtonMail' }],\n        Recipients: [{ Address: 'swiiptest@protonmail.blue', Name: '' }],\n        NumMessages: 1,\n        NumUnread: 0,\n        NumAttachments: 10,\n        ExpirationTime: 0,\n        Size: 230200,\n        ContextSize: 230200,\n        ContextTime: 1574872959,\n        Time: 1574872959,\n        ContextNumMessages: 1,\n        ContextNumUnread: 0,\n        ContextNumAttachments: 10,\n        LabelIDs: ['0', '5', '10'],\n        Labels: [\n            {\n                ContextNumMessages: 1,\n                ContextNumUnread: 0,\n                ContextTime: 1574872959,\n                ContextSize: 230200,\n                ContextNumAttachments: 10,\n                ID: '0'\n            },\n            {\n                ContextNumMessages: 1,\n                ContextNumUnread: 0,\n                ContextTime: 1574872959,\n                ContextSize: 230200,\n                ContextNumAttachments: 10,\n                ID: '5'\n            },\n            {\n                ContextNumMessages: 1,\n                ContextNumUnread: 0,\n                ContextTime: 1574872959,\n                ContextSize: 230200,\n                ContextNumAttachments: 10,\n                ID: '10'\n            }\n        ]\n    }\n];\n","import React, { useState, useMemo, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { useMailSettings, Loader, classnames } from 'react-components';\n\nimport Toolbar from '../components/toolbar/Toolbar';\nimport List from '../components/list/List';\nimport ConversationView from '../components/conversation/ConversationView';\nimport PlaceholderView from '../components/view/PlaceholderView';\nimport elements from './elements';\nimport { LABEL_IDS_TO_HUMAN } from '../constants';\nimport { VIEW_LAYOUT } from 'proton-shared/lib/constants';\n\nimport './main-area.scss';\n\n// eslint-disable-next-line\nconst MailboxContainer = ({ labelID, elementID, location, history }) => {\n    const [mailSettings, loadingMailSettings] = useMailSettings();\n    const [checkedElements, setCheckedElements] = useState(Object.create(null));\n    const [checkAll, setCheckAll] = useState(false);\n    const [sort, updateSort] = useState();\n    const [desc, updateDesc] = useState();\n    const [filter] = useState();\n    const welcomeRef = useRef(false);\n\n    const handleSort = ({ Sort, Desc }) => {\n        updateDesc(Desc);\n        updateSort(Sort);\n    };\n\n    const handleFilter = () => {};\n    const handleNext = () => {};\n    const handlePrevious = () => {};\n\n    const checkedIDs = useMemo(() => {\n        return Object.entries(checkedElements).reduce((acc, [elementID, isChecked]) => {\n            if (!isChecked) {\n                return acc;\n            }\n            acc.push(elementID);\n            return acc;\n        }, []);\n    }, [checkedElements]);\n\n    const selectedIDs = useMemo(() => {\n        if (checkedIDs.length) {\n            return checkedIDs;\n        }\n        if (elementID) {\n            return [elementID];\n        }\n        return [];\n    }, [checkedIDs, location.pathname]);\n\n    if (loadingMailSettings) {\n        return <Loader />;\n    }\n\n    const handleCheck = (IDs = [], checked = false) => {\n        const update = IDs.reduce((acc, contactID) => {\n            acc[contactID] = checked;\n            return acc;\n        }, Object.create(null));\n        setCheckedElements({ ...checkedElements, ...update });\n        setCheckAll(checked && IDs.length === elements.length);\n    };\n\n    const handleCheckAll = (checked = false) => handleCheck(elements.map(({ ID }) => ID), checked);\n    const handleUncheckAll = () => handleCheckAll(false);\n\n    const handleClick = (elementID) => {\n        history.push({\n            ...location,\n            pathname: `/${LABEL_IDS_TO_HUMAN[labelID] || labelID}/${elementID}`\n        });\n    };\n\n    const handleBack = () => {\n        history.push({\n            ...location,\n            pathname: `/${LABEL_IDS_TO_HUMAN[labelID] || labelID}`\n        });\n    };\n\n    const { ViewLayout = VIEW_LAYOUT.COLUMN } = mailSettings;\n    const isColumnMode = ViewLayout === VIEW_LAYOUT.COLUMN;\n\n    return (\n        <>\n            <Toolbar\n                labelID={labelID}\n                elementID={elementID}\n                selectedIDs={selectedIDs}\n                mailSettings={mailSettings}\n                checkAll={checkAll}\n                onCheckAll={handleCheckAll}\n                onSort={handleSort}\n                sort={sort}\n                desc={desc}\n                onFilter={handleFilter}\n                filter={filter}\n                onNext={handleNext}\n                onPrevious={handlePrevious}\n                onBack={handleBack}\n            />\n            <div\n                className={classnames([\n                    'main-area--withToolbar flex-item-fluid flex reset4print',\n                    !isColumnMode && 'main-area--rowMode'\n                ])}\n            >\n                {(isColumnMode || !elementID) && (\n                    <List\n                        labelID={labelID}\n                        mailSettings={mailSettings}\n                        elementID={elementID}\n                        elements={elements}\n                        selectedIDs={selectedIDs}\n                        checkedIDs={checkedIDs}\n                        onCheck={handleCheck}\n                        onClick={handleClick}\n                    />\n                )}\n                {(isColumnMode || elementID) &&\n                    (elementID ? (\n                        <ConversationView mailSettings={mailSettings} conversationID={elementID} />\n                    ) : (\n                        <PlaceholderView\n                            labelID={labelID}\n                            mailSettings={mailSettings}\n                            welcomeRef={welcomeRef}\n                            checkedIDs={checkedIDs}\n                            onUncheckAll={handleUncheckAll}\n                        />\n                    ))}\n            </div>\n        </>\n    );\n};\n\nMailboxContainer.propTypes = {\n    labelID: PropTypes.string,\n    elementID: PropTypes.string,\n    location: PropTypes.object,\n    history: PropTypes.object\n};\n\nexport default MailboxContainer;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { ErrorBoundary } from 'react-components';\n\nimport PrivateLayout from './components/layout/PrivateLayout';\nimport MailboxContainer from './containers/MailboxContainer';\nimport { HUMAN_TO_LABEL_IDS } from './constants';\n\nconst PrivateAppRoutes = () => {\n    return (\n        <Switch>\n            <Route\n                path=\"/:labelID/:elementID?\"\n                render={({ match, location, history }) => {\n                    const { elementID, labelID: currentLabelID } = match.params;\n                    const labelID = HUMAN_TO_LABEL_IDS[currentLabelID] || currentLabelID;\n                    return (\n                        <PrivateLayout labelID={labelID} location={location} history={history}>\n                            <ErrorBoundary key={location.pathname}>\n                                <MailboxContainer\n                                    labelID={labelID}\n                                    elementID={elementID}\n                                    location={location}\n                                    history={history}\n                                />\n                            </ErrorBoundary>\n                        </PrivateLayout>\n                    );\n                }}\n            />\n        </Switch>\n    );\n};\n\nexport default PrivateAppRoutes;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { StandardPrivateApp } from 'react-components';\nimport {\n    UserModel,\n    MailSettingsModel,\n    UserSettingsModel,\n    SubscriptionModel,\n    OrganizationModel,\n    LabelsModel,\n    AddressesModel,\n    ConversationCountsModel,\n    MessageCountsModel\n} from 'proton-shared/lib/models';\n\nimport locales from './locales';\nimport PrivateAppRoutes from './PrivateAppRoutes';\n\nconst PrivateApp = ({ onLogout }) => {\n    return (\n        <StandardPrivateApp\n            onLogout={onLogout}\n            locales={locales}\n            preloadModels={[UserModel, UserSettingsModel]}\n            eventModels={[\n                UserModel,\n                AddressesModel,\n                ConversationCountsModel,\n                MessageCountsModel,\n                MailSettingsModel,\n                UserSettingsModel,\n                LabelsModel,\n                SubscriptionModel,\n                OrganizationModel\n            ]}\n        >\n            <PrivateAppRoutes />\n        </StandardPrivateApp>\n    );\n};\n\nPrivateApp.propTypes = {\n    onLogout: PropTypes.func.isRequired\n};\n\nexport default PrivateApp;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icons } from 'react-components';\n\nconst PublicLayout = ({ children }) => {\n    return (\n        <>\n            <main className=\"main-full flex flex-column flex-nowrap reset4print\">{children}</main>\n            <Icons />\n        </>\n    );\n};\n\nPublicLayout.propTypes = {\n    children: PropTypes.node.isRequired\n};\n\nexport default PublicLayout;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { c } from 'ttag';\nimport { LoginForm, Href, SimpleDropdown, DropdownMenu, SignInLayout } from 'react-components';\n\nconst LoginContainer = ({ stopRedirect, history, onLogin }) => {\n    const handleLogin = (...args) => {\n        stopRedirect();\n        history.push('/inbox');\n        onLogin(...args);\n    };\n    return (\n        <SignInLayout title={c('Title').t`Log in`}>\n            <h2>{c('Title').t`User log in`}</h2>\n            <LoginForm\n                onLogin={handleLogin}\n                needHelp={\n                    <SimpleDropdown content={c('Dropdown button').t`Need help?`} className=\"pm-button--link\">\n                        <DropdownMenu>\n                            <div className=\"inbl w100 pt0-5 pb0-5 ellipsis\">\n                                <Link to=\"/reset-password\">{c('Link').t`Reset password`}</Link>\n                            </div>\n                            <div className=\"inbl w100 pt0-5 pb0-5 ellipsis\">\n                                <Link to=\"/forgot-username\">{c('Link').t`Forgot username?`}</Link>\n                            </div>\n                            <div className=\"inbl w100 pt0-5 pb0-5 ellipsis\">\n                                <Href url=\"https://protonmail.com/support/knowledge-base/common-login-problems/\">{c(\n                                    'Link'\n                                ).t`Common login problems`}</Href>\n                            </div>\n                            <div className=\"inbl w100 pt0-5 pb0-5 ellipsis\">\n                                <Href url=\"https://protonmail.com/support/\">{c('Link').t`Contact support`}</Href>\n                            </div>\n                        </DropdownMenu>\n                    </SimpleDropdown>\n                }\n            />\n        </SignInLayout>\n    );\n};\n\nLoginContainer.propTypes = {\n    history: PropTypes.object.isRequired,\n    location: PropTypes.object.isRequired,\n    onLogin: PropTypes.func.isRequired,\n    stopRedirect: PropTypes.func.isRequired\n};\n\nexport default LoginContainer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// eslint-disable-next-line\nconst SignupContainer = ({ match, history, onLogin, stopRedirect }) => {\n    return <>SignupContainer</>;\n};\n\nSignupContainer.propTypes = {\n    stopRedirect: PropTypes.func.isRequired,\n    onLogin: PropTypes.func.isRequired,\n    match: PropTypes.shape({\n        params: PropTypes.shape({\n            step: PropTypes.string\n        })\n    }).isRequired,\n    history: PropTypes.shape({\n        push: PropTypes.func.isRequired,\n        location: PropTypes.shape({\n            search: PropTypes.string.isRequired,\n            state: PropTypes.oneOfType([\n                PropTypes.shape({\n                    selector: PropTypes.string.isRequired,\n                    token: PropTypes.string.isRequired\n                }),\n                PropTypes.shape({\n                    Coupon: PropTypes.shape({ Code: PropTypes.string })\n                })\n            ])\n        }).isRequired\n    }).isRequired\n};\n\nexport default SignupContainer;\n","import React, { useState, useRef, useLayoutEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { Loader, ModalsChildren, ResetPasswordContainer, ForgotUsernameContainer } from 'react-components';\nimport { loadOpenPGP } from 'proton-shared/lib/openpgp';\n\nimport PublicLayout from './components/layout/PublicLayout';\nimport LoginContainer from './containers/LoginContainer';\nimport SignupContainer from './containers/SignupContainer';\n\nconst PublicApp = ({ onLogin }) => {\n    const hasStopRedirect = useRef(false);\n    const stopRedirect = () => (hasStopRedirect.current = true);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(false);\n\n    useLayoutEffect(() => {\n        (async () => {\n            await Promise.all([loadOpenPGP()]);\n        })()\n            .then(() => setLoading(false))\n            .catch(() => setError(true));\n    }, []);\n\n    if (error) {\n        return 'OpenPGP failed to load. Handle better.';\n    }\n\n    if (loading) {\n        return <Loader />;\n    }\n\n    return (\n        <>\n            <ModalsChildren />\n            <PublicLayout>\n                <Router>\n                    <Switch>\n                        <Route path=\"/reset-password\" render={() => <ResetPasswordContainer onLogin={onLogin} />} />\n                        <Route path=\"/forgot-username\" component={ForgotUsernameContainer} />\n                        <Route\n                            path=\"/login\"\n                            render={({ history, location }) => (\n                                <LoginContainer\n                                    stopRedirect={stopRedirect}\n                                    history={history}\n                                    location={location}\n                                    onLogin={onLogin}\n                                />\n                            )}\n                        />\n                        <Route\n                            path=\"/signup/:step?\"\n                            render={({ history, match }) => (\n                                <SignupContainer\n                                    stopRedirect={stopRedirect}\n                                    history={history}\n                                    match={match}\n                                    onLogin={onLogin}\n                                />\n                            )}\n                        />\n                    </Switch>\n                </Router>\n            </PublicLayout>\n        </>\n    );\n};\n\nPublicApp.propTypes = {\n    onLogin: PropTypes.func.isRequired\n};\n\nexport default PublicApp;\n","import { hot } from 'react-hot-loader/root';\nimport React from 'react';\nimport { ProtonApp, useAuthentication } from 'react-components';\n\nimport * as config from './config';\nimport PrivateApp from './PrivateApp';\nimport PublicApp from './PublicApp';\n\nimport './app.scss';\n\nconst Setup = () => {\n    const { UID, login, logout } = useAuthentication();\n    if (UID) {\n        return <PrivateApp onLogout={logout} />;\n    }\n    return <PublicApp onLogin={login} />;\n};\n\nconst App = () => {\n    return (\n        <ProtonApp config={config}>\n            <Setup />\n        </ProtonApp>\n    );\n};\n\nexport default hot(App);\n","import ReactDOM from 'react-dom';\nimport React from 'react';\nimport 'core-js/stable';\nimport 'regenerator-runtime/runtime';\nimport 'yetch/polyfill';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.querySelector('.app-root'));\n","var map = {\n\t\"./3-d-secure.svg\": \"0gKn\",\n\t\"./american-express-safekey.svg\": \"Jui7\",\n\t\"./cc-american-express.svg\": \"/qD2\",\n\t\"./cc-dankort.svg\": \"0T0d\",\n\t\"./cc-diners-club.svg\": \"vuvo\",\n\t\"./cc-discover.svg\": \"AZZk\",\n\t\"./cc-forbrugs.svg\": \"k2eZ\",\n\t\"./cc-jcb.svg\": \"7Amw\",\n\t\"./cc-maestro.svg\": \"lXKh\",\n\t\"./cc-mastercard.svg\": \"ZUPP\",\n\t\"./cc-paypal.svg\": \"egYP\",\n\t\"./cc-unionpay.svg\": \"ma7A\",\n\t\"./cc-visa.svg\": \"vO2o\",\n\t\"./cc-visaelectron.svg\": \"RMFI\",\n\t\"./discover-protectbuy.svg\": \"qsy5\",\n\t\"./mastercard-securecode.svg\": \"6Bn0\",\n\t\"./verified-by-visa.svg\": \"Q7qE\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"5FMj\";","var map = {\n\t\"./af/index.js\": [\n\t\t\"IqAn\",\n\t\t11\n\t],\n\t\"./ar-DZ/index.js\": [\n\t\t\"JVC1\",\n\t\t12\n\t],\n\t\"./ar-SA/index.js\": [\n\t\t\"xMju\",\n\t\t13\n\t],\n\t\"./be/index.js\": [\n\t\t\"YEhR\",\n\t\t3\n\t],\n\t\"./bg/index.js\": [\n\t\t\"isx8\",\n\t\t4\n\t],\n\t\"./bn/index.js\": [\n\t\t\"+b7I\",\n\t\t14\n\t],\n\t\"./ca/index.js\": [\n\t\t\"Vwa+\",\n\t\t15\n\t],\n\t\"./cs/index.js\": [\n\t\t\"dvhP\",\n\t\t16\n\t],\n\t\"./cy/index.js\": [\n\t\t\"HQUR\",\n\t\t17\n\t],\n\t\"./da/index.js\": [\n\t\t\"7ur/\",\n\t\t18\n\t],\n\t\"./de/index.js\": [\n\t\t\"bgw5\",\n\t\t19\n\t],\n\t\"./el/index.js\": [\n\t\t\"dH0v\",\n\t\t20\n\t],\n\t\"./en-AU/index.js\": [\n\t\t\"VHew\",\n\t\t21\n\t],\n\t\"./en-CA/index.js\": [\n\t\t\"wXhn\",\n\t\t22\n\t],\n\t\"./en-GB/index.js\": [\n\t\t\"nwJ3\",\n\t\t23\n\t],\n\t\"./en-US/index.js\": [\n\t\t\"IogR\",\n\t\t24\n\t],\n\t\"./eo/index.js\": [\n\t\t\"UB7v\",\n\t\t25\n\t],\n\t\"./es/index.js\": [\n\t\t\"/S0t\",\n\t\t26\n\t],\n\t\"./et/index.js\": [\n\t\t\"Br0m\",\n\t\t27\n\t],\n\t\"./fa-IR/index.js\": [\n\t\t\"gEFy\",\n\t\t28\n\t],\n\t\"./fi/index.js\": [\n\t\t\"ndVD\",\n\t\t29\n\t],\n\t\"./fr-CA/index.js\": [\n\t\t\"KTij\",\n\t\t30\n\t],\n\t\"./fr/index.js\": [\n\t\t\"LKA2\",\n\t\t31\n\t],\n\t\"./gl/index.js\": [\n\t\t\"4bge\",\n\t\t32\n\t],\n\t\"./gu/index.js\": [\n\t\t\"3t4y\",\n\t\t33\n\t],\n\t\"./he/index.js\": [\n\t\t\"75M+\",\n\t\t34\n\t],\n\t\"./hi/index.js\": [\n\t\t\"CUe2\",\n\t\t35\n\t],\n\t\"./hr/index.js\": [\n\t\t\"L9Jq\",\n\t\t36\n\t],\n\t\"./hu/index.js\": [\n\t\t\"Nm+E\",\n\t\t37\n\t],\n\t\"./hy/index.js\": [\n\t\t\"netp\",\n\t\t38\n\t],\n\t\"./id/index.js\": [\n\t\t\"A6C3\",\n\t\t39\n\t],\n\t\"./is/index.js\": [\n\t\t\"N4bE\",\n\t\t40\n\t],\n\t\"./it/index.js\": [\n\t\t\"hmb4\",\n\t\t41\n\t],\n\t\"./ja/index.js\": [\n\t\t\"uAXs\",\n\t\t42\n\t],\n\t\"./ka/index.js\": [\n\t\t\"pwL5\",\n\t\t43\n\t],\n\t\"./kk/index.js\": [\n\t\t\"zGPi\",\n\t\t5\n\t],\n\t\"./ko/index.js\": [\n\t\t\"iW8+\",\n\t\t44\n\t],\n\t\"./lt/index.js\": [\n\t\t\"xj+b\",\n\t\t45\n\t],\n\t\"./lv/index.js\": [\n\t\t\"x5pY\",\n\t\t6\n\t],\n\t\"./ms/index.js\": [\n\t\t\"gUWk\",\n\t\t46\n\t],\n\t\"./nb/index.js\": [\n\t\t\"73vv\",\n\t\t47\n\t],\n\t\"./nl/index.js\": [\n\t\t\"hCQt\",\n\t\t48\n\t],\n\t\"./nn/index.js\": [\n\t\t\"vORL\",\n\t\t49\n\t],\n\t\"./pl/index.js\": [\n\t\t\"B6yL\",\n\t\t7\n\t],\n\t\"./pt-BR/index.js\": [\n\t\t\"2dYp\",\n\t\t50\n\t],\n\t\"./pt/index.js\": [\n\t\t\"gdks\",\n\t\t51\n\t],\n\t\"./ro/index.js\": [\n\t\t\"r2yp\",\n\t\t52\n\t],\n\t\"./ru/index.js\": [\n\t\t\"nz/o\",\n\t\t8\n\t],\n\t\"./sk/index.js\": [\n\t\t\"Wqan\",\n\t\t9\n\t],\n\t\"./sl/index.js\": [\n\t\t\"KYSo\",\n\t\t53\n\t],\n\t\"./sr/index.js\": [\n\t\t\"7mU3\",\n\t\t54\n\t],\n\t\"./sv/index.js\": [\n\t\t\"hxgj\",\n\t\t55\n\t],\n\t\"./ta/index.js\": [\n\t\t\"1ssA\",\n\t\t56\n\t],\n\t\"./te/index.js\": [\n\t\t\"SGoj\",\n\t\t57\n\t],\n\t\"./th/index.js\": [\n\t\t\"Pk+z\",\n\t\t58\n\t],\n\t\"./tr/index.js\": [\n\t\t\"3ZWG\",\n\t\t59\n\t],\n\t\"./ug/index.js\": [\n\t\t\"yT3n\",\n\t\t60\n\t],\n\t\"./uk/index.js\": [\n\t\t\"LCGg\",\n\t\t10\n\t],\n\t\"./vi/index.js\": [\n\t\t\"dGQT\",\n\t\t61\n\t],\n\t\"./zh-CN/index.js\": [\n\t\t\"UJqf\",\n\t\t62\n\t],\n\t\"./zh-TW/index.js\": [\n\t\t\"zn9v\",\n\t\t63\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"YO3j\";\nmodule.exports = webpackAsyncContext;","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"dTS7\";"],"sourceRoot":""}