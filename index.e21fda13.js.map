{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/app/config.ts","webpack:///./src/app/locales.js","webpack:///./src/app/components/header/AdvancedSearchDropdown.js","webpack:///./src/app/components/header/PrivateHeader.js","webpack:///./src/app/components/sidebar/LocationAside.js","webpack:///./src/app/components/sidebar/RefreshButton.js","webpack:///./src/app/constants.ts","webpack:///./src/app/helpers/mailSettings.ts","webpack:///./src/app/helpers/elements.ts","webpack:///./src/app/components/sidebar/PrivateSidebar.tsx","webpack:///./src/app/components/layout/PrivateLayout.tsx","webpack:///./src/app/helpers/labels.ts","webpack:///./src/app/helpers/paging.ts","webpack:///./src/app/hooks/useElements.ts","webpack:///./src/app/helpers/url.ts","webpack:///./src/app/helpers/mailboxUrl.ts","webpack:///./src/app/components/toolbar/ToolbarSeparator.tsx","webpack:///./src/app/components/toolbar/ToolbarButton.tsx","webpack:///./src/app/components/toolbar/ReadUnreadButtons.tsx","webpack:///./src/app/components/toolbar/ToolbarDropdown.tsx","webpack:///./src/app/components/toolbar/LayoutDropdown.tsx","webpack:///./src/app/components/toolbar/MoveButtons.tsx","webpack:///./src/app/components/toolbar/DeleteButton.tsx","webpack:///./src/app/components/toolbar/SortDropdown.tsx","webpack:///./src/app/components/toolbar/FilterDropdown.tsx","webpack:///./src/app/components/toolbar/SelectAll.tsx","webpack:///./src/app/components/dropdown/MoveDropdown.tsx","webpack:///./src/app/components/dropdown/LabelDropdown.tsx","webpack:///./src/app/components/toolbar/BackButton.tsx","webpack:///./src/app/components/toolbar/PagingControls.tsx","webpack:///./src/app/components/toolbar/Toolbar.tsx","webpack:///./src/app/components/list/ItemCheckbox.tsx","webpack:///./src/app/helpers/conversation.ts","webpack:///./src/app/helpers/message/messages.ts","webpack:///./src/app/helpers/parserHtml.ts","webpack:///./src/app/components/list/ItemStar.tsx","webpack:///./src/app/components/list/ItemLabels.tsx","webpack:///./src/app/components/list/ItemAttachmentIcon.js","webpack:///./src/app/components/list/ItemLocation.js","webpack:///./src/app/helpers/date.js","webpack:///./src/app/components/list/ItemDate.js","webpack:///./src/app/components/conversation/NumMessages.tsx","webpack:///./src/app/components/list/ItemColumnLayout.tsx","webpack:///./src/app/components/list/ItemRowLayout.tsx","webpack:///./src/app/components/list/Item.tsx","webpack:///./src/app/components/view/EmptyView.tsx","webpack:///./src/app/components/list/List.tsx","webpack:///./src/app/components/message/MessageBody.tsx","webpack:///./src/app/helpers/displaySignature.js","webpack:///./src/app/helpers/encryptionType.js","webpack:///./src/app/components/message/MessageLock.tsx","webpack:///./src/app/components/message/header/HeaderCollapsed.tsx","webpack:///./src/app/components/message/extras/ExtraImages.tsx","webpack:///./src/app/components/message/extras/ExtraUnsubscribe.tsx","webpack:///./src/app/components/message/header/HeaderExtra.tsx","webpack:///./src/app/components/message/header/HeaderRecipientsSimple.tsx","webpack:///./src/app/components/message/header/HeaderRecipientsDetails.tsx","webpack:///./src/app/components/message/header/HeaderDropdown.tsx","webpack:///./src/app/components/message/header/HeaderExpanded.tsx","webpack:///./src/app/api/attachments.js","webpack:///./src/app/helpers/attachment/attachmentLoader.ts","webpack:///./src/app/helpers/attachment/attachmentDownloader.ts","webpack:///./src/app/hooks/useAttachments.ts","webpack:///./src/app/components/message/MessageAttachment.tsx","webpack:///./src/app/helpers/attachment/attachments.ts","webpack:///./src/app/components/message/MessageFooter.tsx","webpack:///./src/app/helpers/string.ts","webpack:///./src/app/helpers/purify.ts","webpack:///./src/app/helpers/dom.ts","webpack:///./src/app/helpers/transforms/transformEscape.js","webpack:///./src/app/helpers/transforms/transformLinks.js","webpack:///./src/app/helpers/embedded/embeddedUtils.ts","webpack:///./src/app/helpers/embedded/embeddedStoreCids.ts","webpack:///./src/app/helpers/embedded/embeddedFinder.ts","webpack:///./src/app/helpers/embedded/embeddedStoreBlobs.ts","webpack:///./src/app/helpers/image.ts","webpack:///./src/app/helpers/embedded/embeddedParser.ts","webpack:///./src/app/helpers/transforms/transformEmbedded.ts","webpack:///./src/app/helpers/transforms/transformWelcome.js","webpack:///./src/app/helpers/transforms/transformBlockquotes.js","webpack:///./src/app/helpers/transforms/transformRemote.js","webpack:///./src/app/helpers/transforms/transformStylesheet.js","webpack:///./src/app/helpers/transforms/transformBase.js","webpack:///./src/app/helpers/attachment/attachmentConverter.ts","webpack:///./src/app/helpers/message/messageDecrypt.ts","webpack:///./src/app/hooks/useDecryptMessage.ts","webpack:///./src/app/containers/MessageProvider.tsx","webpack:///./src/app/helpers/addresses.ts","webpack:///./src/app/helpers/contacts.ts","webpack:///./src/app/helpers/base64.ts","webpack:///./src/app/helpers/send/sendPreferences.ts","webpack:///./src/app/helpers/send/sendMimeBuilder.ts","webpack:///./src/app/helpers/send/sendTopPackages.ts","webpack:///./src/app/helpers/send/sendSubPackages.ts","webpack:///./src/app/helpers/send/sendEncrypt.ts","webpack:///./src/app/hooks/useSendMessage.ts","webpack:///./src/app/helpers/message/messageEncrypt.ts","webpack:///./src/app/hooks/useEncryptMessage.ts","webpack:///./src/app/hooks/useMessage.ts","webpack:///./src/app/components/message/MessageView.tsx","webpack:///./src/app/helpers/message/messageExpandable.ts","webpack:///./src/app/components/conversation/TrashWarning.tsx","webpack:///./src/app/components/conversation/ConversationView.tsx","webpack:///./src/app/hooks/useConversation.ts","webpack:///./src/app/components/view/WelcomePane.tsx","webpack:///./src/app/components/view/SelectionPane.tsx","webpack:///./src/app/components/view/PlaceholderView.tsx","webpack:///./src/app/components/message/MessageOnlyView.tsx","webpack:///./src/app/containers/MailboxContainer.tsx","webpack:///./src/app/hooks/useMailboxPageTitle.ts","webpack:///./src/app/containers/PageContainer.tsx","webpack:///./src/app/components/composer/ComposerTitleBar.tsx","webpack:///./src/app/components/composer/addresses/AddressesItem.tsx","webpack:///./src/app/components/composer/addresses/AddressesInput.tsx","webpack:///./src/app/components/composer/addresses/AddressesEditor.tsx","webpack:///./src/app/components/composer/addresses/AddressesSummary.tsx","webpack:///./src/app/components/composer/addresses/Addresses.tsx","webpack:///./src/app/components/composer/ComposerMeta.tsx","webpack:///./src/app/components/composer/ComposerContent.tsx","webpack:///./src/app/components/composer/ComposerActions.tsx","webpack:///./src/app/components/composer/Composer.tsx","webpack:///./src/app/helpers/dedent.ts","webpack:///./src/app/helpers/message/messageSignature.ts","webpack:///./src/app/helpers/message/messageDraft.ts","webpack:///./src/app/containers/ComposerContainer.tsx","webpack:///./src/app/PrivateApp.tsx","webpack:///./src/app/components/layout/PublicLayout.js","webpack:///./src/app/containers/LoginContainer.js","webpack:///./src/app/containers/SignupContainer.js","webpack:///./src/app/PublicApp.js","webpack:///./src/app/App.js","webpack:///./src/app/index.js","webpack:///./node_modules/design-system/assets/img/shared/bank-icons sync .svg$","webpack:///./node_modules/date-fns/locale lazy ^\\.\\/[a-z]{2}(-([A-Z]{2}))","webpack:///./src/i18n lazy .json$"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","sriHashes","exports","module","l","e","promises","installedChunkData","promise","Promise","resolve","reject","onScriptComplete","script","document","createElement","charset","timeout","nc","setAttribute","src","p","jsonpScriptSrc","indexOf","window","location","origin","crossOrigin","error","Error","event","onerror","onload","clearTimeout","chunk","errorType","type","realSrc","target","message","name","request","undefined","setTimeout","integrity","head","appendChild","all","m","c","d","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","oe","err","console","jsonpArray","oldJsonpFunction","slice","CLIENT_ID","CLIENT_TYPE","CLIENT_SECRET","APP_VERSION","APP_NAME","API_URL","SECURE_URL","LOCALES","API_VERSION","DATE_VERSION","CHANGELOG_PATH","VERSION_PATH","SENTRY_RELEASE","SENTRY_DSN","locales","require","keys","reduce","acc","ALL","INBOX","MAILBOX_LABEL_IDS","TRASH","SPAM","ARCHIVE","AdvancedSearchDropdown","history","formRef","useRef","useState","model","updateModel","useLabels","labels","locationOptions","text","concat","filter","Exclusive","LABEL_EXCLUSIVE","FOLDER","map","ID","Name","LABEL","SimpleDropdown","originalPlacement","hasCaret","content","Icon","className","ref","onSubmit","current","reset","Label","htmlFor","Select","id","options","onChange","PrimaryButton","PrivateHeader","expanded","onToggleExpand","onSearch","useUser","hasPaidMail","MainLogo","url","Hamburger","onToggle","Searchbox","placeholder","advanced","TopNavbar","UpgradeButton","external","TopNavbarLink","to","icon","aria-current","SupportDropdown","LocationAside","action","unread","RefreshButton","useEventManager","useLoading","loading","withLoading","handleRefresh","a","preventDefault","disabled","onClick","fill","MESSAGE_ACTIONS","ELEMENT_TYPES","LABEL_IDS_TO_HUMAN","ALL_DRAFTS","ALL_SENT","ALL_MAIL","SENT","DRAFTS","STARRED","HUMAN_TO_LABEL_IDS","entries","LABEL_IDS_TO_I18N","VERIFICATION_STATUS","MESSAGE_FLAGS","ENCRYPTED_STATUS","isColumnMode","ViewLayout","VIEW_LAYOUT","COLUMN","isConversationMode","labelID","ViewMode","VIEW_MODE","GROUP","alwaysMessageLabels","includes","getCurrentType","mailSettings","getDate","Time","ContextTime","Date","getLabelIds","Labels","LabelIDs","hasLabel","element","some","getTime","find","getLabel","getSize","Size","sort","elements","getValue","e1","e2","b","valueA","valueB","Order","desc","PrivateSidebar","currentLabelID","onCompose","useConversationCounts","conversationCounts","loadingConversationCounts","useMessageCounts","messageCounts","loadingMessageCounts","useMailSettings","loadingMailSettings","loadingLabels","ShowMoved","unreadMap","useMemo","counters","Array","isArray","toMap","Loader","getAside","Unread","list","aside","link","SHOW_MOVED","redirectTo","Color","color","data-expanded","NEW","NavMenu","PrivateLayout","children","mainAreaRef","setExpand","useEffect","pathname","AppsSidebar","items","StorageSpaceStatus","upgradeButton","Href","keyword","log","normalize","Provider","getHumanLabelID","getLabelName","getI18nLabelID","labelsMap","isCustomLabel","values","pageCount","page","Math","ceil","total","size","emptyCache","params","pages","useElements","conversationMode","api","useApi","subscribe","setLoading","localCache","setLocalCache","minPage","startIndex","endIndex","filtered","sortElements","isExpectedLength","expectedPageLength","shouldResetCache","shouldSendRequest","queryElement","elementID","query","getConversation","getMessage","Conversation","Message","queryElements","queryConversations","queryMessageMetadata","Page","PageSize","Limit","limit","LabelID","Sort","Desc","Total","Elements","Conversations","Messages","load","ConversationCounts","MessageCounts","count","Action","Element","EVENT_ACTIONS","DELETE","toDelete","UPDATE_DRAFT","UPDATE_FLAGS","toUpdate","CREATE","toCreate","existingElement","toUpdateCompleted","newReplacements","forEach","newElements","getSearchParams","URLSearchParams","search","changeSearchParams","newParams","delete","set","queryString","toString","urlFragment","setPathInUrl","sortToString","filterToString","pageFromUrl","string","pageNumber","parseInt","isNaN","stringToPage","ToolbarSeparator","ToolbarButton","rest","classnames","ReadUnreadButtons","selectedIDs","MessageButtons","MESSAGE_BUTTONS","READ_UNREAD","markAs","status","isUnread","markConversationsAsUnread","markConversationsAsRead","markMessageAsUnread","markMessageAsRead","buttons","title","UNREAD_READ","reverse","ToolbarDropdown","autoClose","generateUID","uid","usePopperAnchor","anchorRef","isOpen","toggle","close","DropdownButton","buttonRef","caretClassName","Dropdown","onClose","LayoutDropdown","currentLayoutIcon","updateLayout","viewLayout","updateViewLayout","DropdownMenu","DropdownMenuButton","ROW","MoveButtons","createNotification","useNotifications","handleMove","labelConversations","labelMessages","IDs","displayTrash","displayInbox","displayArchive","displaySpam","DeleteButton","createModal","useModals","displayDelete","displayEmpty","handleDelete","Confirm","ngettext","msgid","confirm","ErrorButton","onConfirm","Alert","deleteConversations","deleteMessages","handleEmpty","emptyLabel","AddressID","TIME","SIZE","ICONS","SortDropdown","onSort","FilterDropdown","onFilter","SelectAll","checked","onCheck","Checkbox","SearchInput","UntypedSearchInput","MoveDropdown","updateSearch","normSearch","folders","Boolean","folder","Tooltip","label","autoFocus","index","LabelDropdown","lastChecked","setLastChecked","alsoArchive","updateAlsoArchive","selectedLabelIDs","updateSelectedLabelIDs","handleApply","labelAction","unlabelAction","unlabelMessages","unlabelConversations","handleCheck","shiftKey","nativeEvent","labelIDs","start","findIndex","end","min","max","update","lineId","BackButton","PagingControls","onPage","setPage","String","_","newPage","Toolbar","checkAll","onCheckAll","onBack","columnMode","ItemCheckbox","getRecipientLabel","Address","FLAG_RECEIVED","FLAG_SENT","FLAG_RECEIPT_REQUEST","FLAG_IMPORTED","FLAG_REPLIED","FLAG_REPLIEDALL","FLAG_FORWARDED","FLAG_INTERNAL","FLAG_AUTO","FLAG_E2E","FLAG_SIGN","FLAG_PUBLIC_KEY","PLAINTEXT","MIME_TYPES","hasMimeType","MIMEType","isMIME","MIME","isPlainText","isHTML","DEFAULT","hasFlag","flag","Flags","hasBit","isImported","isInternal","isExternal","isAuto","isReceived","isSent","isSentAndReceived","isDraft","isE2E","isSentEncrypted","isInternalEncrypted","isSign","isPGPEncrypted","inSigningPeriod","isEO","Password","addReceived","setBit","getSenderLabel","Sender","getRecipients","ToList","CCList","BCCList","getRecipientsAddresses","identity","getParsedHeaders","parameter","ParsedHeaders","getAttachments","Attachments","hasAttachments","isSentAutoReply","h","k","v","toLowerCase","getHTML","exportPlainText","replace","html","appendLines","convertImages","turndownService","TurndownService","bulletListMarker","hr","protonSignature","node","classList","contains","replacement","trim","replaceBreakLine","parentElement","nodeName","childElementCount","textContent","lastElementChild","replaceImg","image","attribute","alt","replaceAnchor","replaceDiv","use","addRule","escape","output","turndown","startsWith","toText","getPlainText","downconvert","ItemStar","isConversation","isStarred","iconName","handleClick","ItemLabels","onUnlabel","orderBy","style","backgroundColor","borderColor","Link","ItemAttachmentIcon","ContextNumAttachments","ItemLocation","formatSimpleDate","date","format","isToday","locale","dateLocale","formatFullDate","FORMATERS","simple","full","distance","dateFnsFormatDistanceToNow","addSuffix","ItemDate","formater","NumMessages","conversation","ItemColumnLayout","senders","Subject","ItemRowLayout","humanSize","Item","displayRecipients","Senders","getSendersLabels","recipients","Recipients","getMessageRecipientsLabels","ItemLayout","NumUnread","closest","stopPropagation","getInitial","join","EmptyView","isInbox","isFolder","noResultFolderSvg","noResultInboxSvg","data-if","List","checkedIDs","elementIDs","MessageBody","plain","dangerouslySetInnerHTML","__html","SIGNED_AND_INVALID","SIGNED_AND_VALID","I18N","pm","pgp","clear","sentEncrypted","auto","sentClear","draft","getFromType","isExternalEncrypted","MessageLock","inputClassName","displaySignature","verified","displaySignatureStatus","pgpEncrypted","tooltip","encType","getEncryptionType","href","internal","HeaderCollapsed","onExpand","inOutClass","ExtraImages","showRemoteImages","showEmbeddedImages","onLoadImages","ExtraUnsubscribe","getListUnsubscribe","HeaderExtra","onLoadRemoteImages","onLoadEmbeddedImages","HeaderRecipientsSimple","RecipientsList","HeaderRecipientsDetails","HeaderDropdown","HeaderExpanded","messageLoaded","onCollapse","useToggle","showDetails","state","toggleDetails","handleCompose","referenceMessage","Group","ButtonGroup","REPLY","REPLY_ALL","FORWARD","getAttachment","attachmentID","method","decrypt","encryptedBinaryBuffer","sessionKey","encryptedBinary","Uint8Array","decryptMessage","sessionKeys","getRequest","getSessionKey","attachment","keyPackets","binaryStringToArray","decodeBase64","KeyPackets","privateKeys","decryptSessionKey","getDecryptedAttachment","blob","concatArrays","binary","getAndVerify","cache","Preview","has","attachmentdata","formatDownload","isError","generateDownload","download","downloadFile","Blob","formatDownloadAll","att","currentName","split","ext","pop","newName","getZipAttachmentName","downloadAll","zip","JSZip","file","generateAsync","useAttachmentsCache","globalCache","useCache","Map","OUTER_MAP_CLASSNAME","mp3","javascript","vcard","xls","mov","pdf","power","word","INNER_MAP_CLASSNAME","MessageAttachment","showLoader","setShowLoader","showInstant","setShowInstant","humanAttachmentSize","outerIcon","single","getInnerFileIconType","isEmbedded","Headers","disposition","embedded","Number","isEmbeddedLocal","classNames","clickHandler","showInner","aria-busy","MessageFooter","humanAttachmentsSize","attachmentsSize","attachments","numAttachments","numEmbedded","numPureAttachments","handleDownloadAll","OPEN_TAG_AUTOCOMPLETE","CLOSE_TAG_AUTOCOMPLETE","OPEN_TAG_AUTOCOMPLETE_RAW","CLOSE_TAG_AUTOCOMPLETE_RAW","ucFirst","input","charAt","toUpperCase","replaceLineBreaks","REGEXP_URL_ATTR","RegExp","attr","LIST_PROTON_ATTR","MAP_PROTON_ATTR","CONFIG","default","ALLOWED_URI_REGEXP","ADD_TAGS","ADD_ATTR","FORBID_TAGS","FORBID_ATTR","raw","WHOLE_DOCUMENT","RETURN_DOM","protonizer","ALLOW_UNKNOWN_PROTOCOLS","RETURN_DOM_FRAGMENT","escapeURLinStyle","handleEscape","unescapedEncoding","radix","ignored","val","fromCodePoint","unescape","char","escapeFlag","escapedStyle","beforeSanitizeElements","nodeType","from","attributes","item","getAttribute","removeAttribute","escaped","purifyHTMLHooks","active","DOMPurify","addHook","removeHook","getConfig","clean","config","clearConfig","sanitize","attachHooks","process","matches","selector","msMatchesSelector","parseInDiv","div","innerHTML","FORBIDDEN_SVG","HTML_STRING","VERIFY_ELEMENT_END","REGEXP_SVG_BREAK","removeBase64","activeCache","match","hash","random","now","put","escapeSVG","transformEscape","activeHooks","purifyHTML","PROTOCOLS","ALL_PROTOCOLS","MAP","getNormalizedHref","sanitizeRelativeHttpLinks","proto","linkUsesProtocols","disableAnchors","isEmptyAnchor","pointerEvents","transformLinks","querySelectorAll","hasHTTP","isRelative","httpInNewTab","noReferrerInfo","REGEXP_CID_START","trimQuotes","substr","readCID","findEmbedded","cid","convertMimeHeaders","headers","formatted","mimemessage","factory","CIDList","getMessageCIDs","embeddedAttachments","extractEmbedded","addMessageCID","listInlineAttachments","MAP_CID","contentId","contentName","contentDisposition","filename","getAttachementName","urlCreator","URL","webkitURL","Blobs","MAP_BLOBS","getHashKey","msg","ConversationID","store","imageUrl","createObjectURL","isContentLocation","getBlob","hasBlob","isInlineEmbedded","wrapImage","img","container","wrapper","firstChild","outerHTML","parentNode","insertBefore","remove","wrap","getUrl","srcToCID","prepareImages","show","isReplyForward","isOutside","showEmbedded","add","removeChild","triggerSigVerification","wait","actionDirection","nodes","mutateHTML","direction","escapeSrc","noop","unescapeSrc","Encrypted","storeAttachement","buffer","transformEmbedded","attachmentsCache","ShowImages","SHOW_IMAGES","EMBEDDED","transformWelcome","images","str","quotes","transformBlockquotes","doc","blockquotes","parent","found","blockquote","child","before","after","button","transformStylesheet","firstElement","firstElementChild","test","position","WHITELIST","ATTRIBUTES","REGEXP_FIXER","prepareInjection","hasAttribute","mapAttributes","transformRemote","inputShowImages","regex","showImages","REMOTE","hasImages","$1","substring","ELEMENTS","transformBase","base","querySelector","BASE_URL","baseUrl","getBaseURL","bindAttribute","el","keyproton","ptValue","convert","number","parsedAttachment","generatedFileName","transferEncoding","contentType","filenameOption","checksum","getId","JSON","stringify","Signature","attachmentData","convertSingle","getVerifiedStatus","pmcryptoVerified","publicKeys","signedInvalid","signedPubkey","decryptMimeMessage","headerFilename","sender","decryptMIMEMessage","Body","messageDate","getBody","body","mimetype","verify","getEncryptedSubject","encryptedSubject","decryptLegacyMessage","decryptMessageLegacy","useDecryptMessage","getPublicKeys","useGetPublicKeys","getAddressKeys","useGetAddressKeys","useCallback","addressKeys","splitKeys","MessageContext","createContext","MessageProvider","useInstance","createCache","createLRU","useLayoutEffect","REGEX_RECIPIENT","validateAddress","address","REGEX_EMAIL","normalizeEmail","email","removeEmailAlias","getByEmail","addresses","cleanEmail","Email","isFallbackAddress","Receive","isOwnAddress","inputToRecipient","exec","recipientToInput","recipient","findSender","enabledAddresses","Status","a1","a2","originalAddress","findEmailInCache","arrayToBase64","encodeBase64","arrayToBinaryString","emailInExtrInfo","contactEmail","ContactID","getInExtrInfo","usesDefaults","Defaults","encryptionEnabled","KEY_FLAGS","ENABLE_ENCRYPTION","getDefaultInfo","defaultMimeType","eoEnabled","globalSign","RecipientType","Keys","Warnings","warnings","RECIPIENT_TYPE","TYPE_INTERNAL","TYPE_EXTERNAL","settingsScheme","PGPScheme","settingsMime","PACKAGE_TYPE","SEND_PGP_MIME","ownAddress","fallbackAddress","getKeys","PublicKey","SEND_PM","encrypt","sign","publickeys","primaryPinned","scheme","pinned","isVerified","SEND_EO","SEND_CLEAR","mimetypeLogic","defaultMimetype","SEND_PGP_INLINE","isPrimaryPinned","base64Keys","sendKeys","sendKeyObjects","pinnedKey","pinnedFingerprint","getFingerprint","extractInfo","keyData","encryptFlag","signFlag","inputMimetype","emailKeys","inputScheme","isExternalWithKeys","pmKey","then","isExpiredKey","isExpired","keyObjs","keyObjects","getApiInfo","normalizedEmail","info","getCacheInfo","inCache","emails","contactEmailList","every","inExtractedInfoCache","getInfo","getSendPreferences","catchErrors","Sign","normEmails","unique","normInfos","normMap","assign","cur","buildEmbeddedHtml","htmlEntity","contentTransferEncoding","relatedBody","buildPlaintextEntity","plaintext","buildBodyEntity","buildAlternateEntity","build","bodyEntity","constructMime","generateMimePackage","Addresses","generatePlainTextPackage","generateHTMLPackage","generateTopPackages","sendPrefs","packagesStatus","packages","demandedPackages","sendPM","Type","sendPMEncryptedOutside","warn","sendPGPMime","sendPGPInline","sendClear","attachSubPackages","bindPackageSet","pack","packageToUpdate","packageType","encryptKeyPacket","passwords","encryptSessionKey","algorithm","packets","write","encryptAttachmentKeys","attachmentKeys","generateSessionKeyHelper","generateSessionKey","encryptBodyPackage","ownKeys","cleanPublicKeys","encryptMessage","returnSessionKey","compression","splitMessage","asymmetric","encrypted","encryptDraftBodyPackage","ownPublicKeys","flat","armorBytes","encryptBody","publicKeysList","encryptPack","counter","publicKey","BodyKeyPacket","subPack","BodyKey","Algorithm","Key","encryptPackage","getAttachmentKeys","encryptPackages","packageList","useSendMessage","useAddresses","uniqueEmails","sendMessage","Packages","Sent","useEncryptMessage","mergeMessages","messageState","messageModel","useMessage","inputMessage","useContext","computeCache","messageID","setMessageID","setMessage","changedMessageID","transforms","loadData","markAsRead","createDraftApi","updateDraft","deleteRequest","runSingle","compute","run","computes","messagePromise","initialize","initialized","newMessage","loadRemoteImages","loadEmbeddedImages","createDraft","saveDraft","messageToSave","send","deleteDraft","MessageView","initialExpand","conversationIndex","setExpanded","elementRef","loaded","prepareMessage","scrollIntoView","behavior","block","existingDraft","handleLoadRemoteImages","handleLoadEmbeddedImages","handleExpand","getFirstMessageToRead","messages","getLast","TrashWarning","inTrash","ConversationView","conversationID","miss","useCachedModelResult","useConversation","conversationData","toggleFilter","filteredMessages","messagesToShow","showTrashWarning","realMessages","latest","findMessageToExpand","WelcomePane","labelCount","user","unreadsLabel","reportBugButton","LinkButton","AuthenticatedBugModal","DisplayName","capitalize","jt","welcomeMessageSvg","SelectionPane","onUncheckAll","checkeds","labelName","conversationManySvg","conversationSingleSvg","Button","PlaceholderView","welcomeRef","MessageOnlyView","MailboxContainer","inputLabelID","inputElementID","searchParams","stringToSort","sortFromUrl","stringToFilter","filterFromUrl","checkedElements","setCheckedElements","setCheckAll","loadingUser","loadings","unreads","unreadString","useMailboxPageTitle","contactID","handleCheckAll","setPageInUrl","setSortInUrl","setFilterInUrl","PageContainer","ErrorBoundary","TitleBarButton","ComposerTitleBar","minimized","maximized","toggleMinimized","toggleMaximized","AddressesItem","onRemove","setModel","editableRef","validate","valid","setValid","handleChange","contentEditable","onKeyUp","onPaste","onBlur","AddressesInput","addressesFocusRef","inputModel","setInputModel","inputRef","focus","toChange","toRemove","Input","onKeyDown","keyCode","AddressesEditor","toggleExpanded","handleContactModal","AddressesSummary","onFocus","addressesBlurRef","editor","setEditor","ComposerMeta","addressesOptions","Block","Quill","import","tagName","register","ComposerContent","contentFocusRef","ComposerActions","onSave","onSend","onDelete","m1","m2","Composer","inputStyle","modelMessage","setModelMessage","syncedMessage","useWindowSize","width","height","COMPOSER_VERTICAL_GUTTER","HEADER_HEIGHT","COMPOSER_HEIGHT","COMPOSER_SWITCH_MODE","save","handleSave","handleSend","handleClose","right","COMPOSER_GUTTER","APP_BAR_WIDTH","computeStyle","dedentTpl","callSite","args","getProtonSignature","PMSignature","PM_SIGNATURE","isEmptyUserSignature","signature","createSpace","tagOpen","getSpaces","isReply","isUserEmpty","isEmptySignature","between","getClassNamesSignature","isProtonEmpty","userClass","protonClass","containerClass","templateBuilder","noSpace","space","template","insertSignature","isAfter","insertAdjacentHTML","RE_PREFIX","FW_PREFIX","formatSubject","subject","prefix","hasPrefix","newCopy","useEncrypted","reply","ReplyTos","replyAll","userAddresses","CCListWithoutUserAddresses","forward","handleActions","generateBlockquote","previously","newContent","hasFocus","rightPositions","maxHeight","zIndex","COMPOSER_ZINDEX","getComposeExisting","composeArgs","getComposeNew","ComposerContainer","loadingSettings","loadingAddresses","setMessages","focusedMessage","setFocusedMessage","newMessages","handleFocus","range","share","computeRightPositions","composeExisting","composeNew","getComposeArgs","existingMessage","DraftMIMEType","RightToLeft","AttachPublicKey","originalTo","senderAddress","ParentID","PasswordHint","ExpirationTime","ExpiresIn","createNewDraft","oldMessage","PrivateApp","onLogout","StandardPrivateApp","preloadModels","UserModel","UserSettingsModel","eventModels","AddressesModel","ConversationCountsModel","MessageCountsModel","MailSettingsModel","LabelsModel","SubscriptionModel","OrganizationModel","Route","path","render","routeProps","PublicLayout","Icons","LoginContainer","stopRedirect","onLogin","SignInLayout","LoginForm","needHelp","SignupContainer","propTypes","PropTypes","func","isRequired","shape","step","oneOfType","token","Coupon","Code","PublicApp","hasStopRedirect","setError","loadOpenPGP","catch","Switch","ResetPasswordContainer","component","ForgotUsernameContainer","Redirect","Setup","useAuthentication","UID","login","logout","hot","ProtonApp","ReactDOM","webpackContext","req","webpackContextResolve","code","webpackAsyncContext","ids","webpackEmptyAsyncContext"],"mappings":"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CnB,oBAAqB,OACrB,gBAAiB,OACjB,wBAAyB,OACzB,4BAA6B,OAC7B,8BAA+B,OAC/B,yBAA0B,QAI3B,SAASm6C,EAAeC,GACvB,IAAIn5C,EAAKo5C,EAAsBD,GAC/B,OAAO5hD,EAAoByI,GAE5B,SAASo5C,EAAsBD,GAC9B,IAAI5hD,EAAoBuD,EAAEiE,EAAKo6C,GAAM,CACpC,IAAIphD,EAAI,IAAIwB,MAAM,uBAAyB4/C,EAAM,KAEjD,MADAphD,EAAEshD,KAAO,mBACHthD,EAEP,OAAOgH,EAAIo6C,GAEZD,EAAe57C,KAAO,WACrB,OAAOjH,OAAOiH,KAAKyB,IAEpBm6C,EAAe9gD,QAAUghD,EACzBvhD,EAAOD,QAAUshD,EACjBA,EAAel5C,GAAK,Q,4CCtCpB,IAAIjB,EAAM,CACT,gBAAiB,CAChB,OACA,IAED,mBAAoB,CACnB,OACA,IAED,mBAAoB,CACnB,OACA,IAED,gBAAiB,CAChB,OACA,GAED,gBAAiB,CAChB,OACA,GAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,mBAAoB,CACnB,OACA,IAED,mBAAoB,CACnB,OACA,IAED,mBAAoB,CACnB,OACA,IAED,mBAAoB,CACnB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,mBAAoB,CACnB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,mBAAoB,CACnB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,GAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,GAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,GAED,mBAAoB,CACnB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,GAED,gBAAiB,CAChB,OACA,GAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,mBAAoB,CACnB,OACA,IAED,mBAAoB,CACnB,OACA,KAGF,SAASu6C,EAAoBH,GAC5B,IAAI5hD,EAAoBuD,EAAEiE,EAAKo6C,GAC9B,OAAOhhD,QAAQC,UAAUgnC,MAAK,WAC7B,IAAIrnC,EAAI,IAAIwB,MAAM,uBAAyB4/C,EAAM,KAEjD,MADAphD,EAAEshD,KAAO,mBACHthD,KAIR,IAAIwhD,EAAMx6C,EAAIo6C,GAAMn5C,EAAKu5C,EAAI,GAC7B,OAAOhiD,EAAoBQ,EAAEwhD,EAAI,IAAIna,MAAK,WACzC,OAAO7nC,EAAoByI,MAG7Bs5C,EAAoBh8C,KAAO,WAC1B,OAAOjH,OAAOiH,KAAKyB,IAEpBu6C,EAAoBt5C,GAAK,OACzBnI,EAAOD,QAAU0hD,G,mECxQjB,SAASE,EAAyBL,GAGjC,OAAOhhD,QAAQC,UAAUgnC,MAAK,WAC7B,IAAIrnC,EAAI,IAAIwB,MAAM,uBAAyB4/C,EAAM,KAEjD,MADAphD,EAAEshD,KAAO,mBACHthD,KAGRyhD,EAAyBl8C,KAAO,WAAa,MAAO,IACpDk8C,EAAyBphD,QAAUohD,EACnC3hD,EAAOD,QAAU4hD,EACjBA,EAAyBx5C,GAAK,Q","file":"index.e21fda13.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// script path function\n \tfunction jsonpScriptSrc(chunkId) {\n \t\treturn __webpack_require__.p + \"\" + ({}[chunkId]||chunkId) + \".\" + {\"3\":\"a766c754\",\"4\":\"b687be8d\",\"5\":\"08b49301\",\"6\":\"e14e0b10\",\"7\":\"71ea43d0\",\"8\":\"c83e11f3\",\"9\":\"6f969052\",\"10\":\"acc3a379\",\"11\":\"2655a52c\",\"12\":\"3129dedd\",\"13\":\"c4193237\",\"14\":\"c477fadd\",\"15\":\"7fa2f242\",\"16\":\"6b69565e\",\"17\":\"de647d30\",\"18\":\"4b6290e6\",\"19\":\"cc9efb0f\",\"20\":\"95162842\",\"21\":\"7f782aee\",\"22\":\"e633e454\",\"23\":\"410bdc56\",\"24\":\"62ab7a94\",\"25\":\"3e88d017\",\"26\":\"1f00106f\",\"27\":\"9a8cd4f2\",\"28\":\"39a061a8\",\"29\":\"7ec08092\",\"30\":\"821f620a\",\"31\":\"1e78135a\",\"32\":\"2cb50446\",\"33\":\"d207ac51\",\"34\":\"c9a9c3de\",\"35\":\"0d7e882c\",\"36\":\"ae9d6dbd\",\"37\":\"709e9b86\",\"38\":\"38386b88\",\"39\":\"8f237674\",\"40\":\"7aea9cd0\",\"41\":\"f60b5d33\",\"42\":\"4e4d4d90\",\"43\":\"c348088a\",\"44\":\"b11a6c24\",\"45\":\"bbbcd847\",\"46\":\"6dc7db1d\",\"47\":\"a2c3a578\",\"48\":\"a96f5994\",\"49\":\"a55ff49f\",\"50\":\"70a25107\",\"51\":\"620ccea3\",\"52\":\"a660da6c\",\"53\":\"0b81131a\",\"54\":\"1770bba1\",\"55\":\"54de7c44\",\"56\":\"e12e0380\",\"57\":\"fe5137d1\",\"58\":\"f11e5222\",\"59\":\"5c7628d6\",\"60\":\"b9a95272\",\"61\":\"a151046a\",\"62\":\"acf34cf8\",\"63\":\"064b14ff\",\"64\":\"2de657c6\"}[chunkId] + \".chunk.js\"\n \t}\n \tvar sriHashes = {\"3\":\"sha384-9934ABN6uqPEPFosQLqxuVhvYUV4okLUNbM0wPFOjE32xxR0586aPIAfPwsnK0aM\",\"4\":\"sha384-c8lzpMfT7HLNH/GninvVmldA6MAz78U7S67XgZ0sL1zC/XsvbAc1sk/8WCbo5DRm\",\"5\":\"sha384-lv7AR2bqV8OenkumNTiZZdadAbQfO2XuJbYqEt9AzFdGlC10pFrN3Cs+aZUgjPcD\",\"6\":\"sha384-zGs+rCNJ2ybc4gZG6rllZSyRoPEPzHKQsQdmg5Ct1obpLbhfrgY0Eh8xKnaVYAWQ\",\"7\":\"sha384-pYGHH3VUsYMwA4BAKILHXmvGjpaxZlX7K4Of8Vf0TpR1zS6KDsgHFNzDpzirDyBf\",\"8\":\"sha384-ACeUJuCEJ59IYImLrUenrF6deSrpeWezxLcOsBAQyORKzdpa17wYYLC3/lu9FXfx\",\"9\":\"sha384-i0T45goKd5FtPV6EQM7mrJpda8H8zPWOz5tjU9ymETt7xBC6jUjwNqHloDdlm24u\",\"10\":\"sha384-8jUnc1d4TZkeepUWsacU28Ba3xjVZQC+DhOPOUgsOujkW4AH00aKevnp3eALoF96\",\"11\":\"sha384-DArCUJcqJmVbAYO1HmaQBxRDAd1LhtMG3EtURSQnKJtwDiZ1YwnP2rwfkK69PMf4\",\"12\":\"sha384-XS0QUhEY75QdhPe6i1rnrb4KAI4vmxXrsCsUmdIWSbx+ZzXXqOOWQouR+Hua6ukg\",\"13\":\"sha384-m+5HhZASMNDlwdTS4rbCfY+uMTLoDEBuHkgo2eRz1U72aRnXBRtcFNIpYN8UcOw0\",\"14\":\"sha384-lRW/huJoiN9BopHCZ2RcPCpNHFtWg3585yWFpWhv+DHGLlUB9fgLWMA1V/Roj1+b\",\"15\":\"sha384-irOAQuzwBISkvtz8hzaB0WP9TNhpfAYByjaJsV8JxgV+2F+3umYIZtxCJDfclqux\",\"16\":\"sha384-BRfHejCiWsn28LbRHzgaPHBmWBeqhz+loh+/rXH2QTedcz0OMFYxD7pvQch4Maq8\",\"17\":\"sha384-UP9yAZvoLx3uOKiaRwDd8CnL+TG6XnvmCQ/dqZUmuxDfNZimQYs6mhtwaDm1mC/E\",\"18\":\"sha384-ES8l1C4+eGYE3gz5iokugFlvGNUc3Jkl+RqsyPcNNYjnbugjT4OPnWttCcelmjC/\",\"19\":\"sha384-zuIZQSzznBcH/aeP6dj/cfl9tnmBnFZ5OvQWlFuj6zTniPXSJ825U++zKvplDaFc\",\"20\":\"sha384-jKcgQSWZyXXAHZ7g5WNU6glCJtd1tVX4BAcyO+Qo4PJMWFI7EIYYfbb1ieSu4Eob\",\"21\":\"sha384-8kzw/z8VFEI4cFXKzDPIhxdSEz3rcKu7VL7Hb8dm/1jP9WDy3G/6Pq1sk0DwdlUQ\",\"22\":\"sha384-vQaEGDUlI+f05Zln/tyPRJX7Q+EH6KpzX5B+1Ksqeq6smzvDMRw/VcuU7WO/9UWo\",\"23\":\"sha384-AoehfZkceTHXRM5ePhp5CSnOVH2PoqIeL8gzUpv5R1Vw2lZJrXIDuzUsxp4KZgq3\",\"24\":\"sha384-hMnh3w0w1iPOFlEhpEHjBAlGJVlowHPzeZ0M2IgBRwTD2htzyWAa5MRvVPkTzdJA\",\"25\":\"sha384-W/vYvDOgjWSw6gxJmVjoKKQmMwfR9dWhEORiTWcPGpDRuwQORazeQfeyxzfjoXdW\",\"26\":\"sha384-l0G9EBxQrDdTWOPdCuYSNETCg5O6AtKYekF47wIyiTjGwE04QYa8SLMSFxd8o71d\",\"27\":\"sha384-6OO7XYx9E3QXkIhdIlHQVH8Ue44DVJp6nrwTvFmrbXg9Nli+uRZgKGomg8WeiR5q\",\"28\":\"sha384-kf5ojG+WPoIphDkrlnR3D8popMDAnND5JLIltB7TQ3ye6zb8uOGYlF9AbKB08a9+\",\"29\":\"sha384-tnX0KN/cE5IZdJclcW7QcVbgrkg9mJrThT3/qxojXwCgrikX9kQaSLV7HtGWEp0J\",\"30\":\"sha384-WkkBR/2HPdRYZvC42rOkNplMBjlRLXlN6PHAN44T7C/py4oriEnv33Ze51S6Rd82\",\"31\":\"sha384-UNRa2ZGZ41ii/29/KnlYViDgvnb2hA6l3XuLrgDQLwLazM8VuaURvhQ02mJeICwL\",\"32\":\"sha384-AsuQU0y81OeHG6H/atJuFNibNJ5XjvuskJjC8MqHRThMTaVPAmIOVriCK+2vvchr\",\"33\":\"sha384-LgLJ3EvoZtIH0CDV7fGICHlQSeplOQ91vtIYNNJDdA0ENr/Q8yHfcxRMibTRv2lT\",\"34\":\"sha384-hb/lMcKNyJvXHCaXxXXmGClN2mW6KRgbY+U2PjU1kOm93RG9Om+r8pX3Kpdnnqh4\",\"35\":\"sha384-z+Zv2ZTMH6JCh48NoXvxPueez9w8XAHZlpPDMY1Y7I/pt1eJSgxgxDwf0PK0JIOR\",\"36\":\"sha384-XSYUc6dvyA7SajIlM8GwH5oqi7VeUAjVBcc+vQzlmJa7ttnN2oEJLsCphFHkS5C0\",\"37\":\"sha384-5h0AJiBbQmnmdLoIV6T3+wDDvPlyPQt8iwni+MkRZDnYXO26pMsmc4d/l9zZV3N3\",\"38\":\"sha384-W8sU1K3akH3iR1b2CgC0NjRHd2navx73bLUlbH/kxAxjm80AEJ9+GkNHEwiGvtS8\",\"39\":\"sha384-VzYMHzEL3iG47djGZ8oFdSxk2k88lejaAAXa9j9sP8JFkQ9KO6juZrjnv0Qt+Qhv\",\"40\":\"sha384-T4PpKTsD9/LYiH7irzAx7ZNGJbC/5RGjEpsq+i/Sov/Ok3YDK/L6soiemAuLjJIN\",\"41\":\"sha384-PPuiSgLVtm9dKVr7s5Yf2+MmSsnBNsQizBIyR1tTgVclLmyp8M/+LaANz/QaZl4w\",\"42\":\"sha384-fjyvCz3D+xT+Y1DiQ1DXBeYM/yVCjVhkIMJIK7Hmj2KRnh/JgCmUS9Y3BchRLHKE\",\"43\":\"sha384-9cRxEJRfWCr3NJOWD5RWORkImWu7NhRUbdWmKRL4O30QZt5YHGWqGAHdu3nm6iJN\",\"44\":\"sha384-ojzmhdPobWffn3uS7YlXq8nUjrFSKnIEo5igI9VmsV0hf5sML1vuqo3WNQ8cVTd0\",\"45\":\"sha384-zx8A2SLhiOzCrp0YsZI3L67f601RtYZkG+T8Ypn7cEIxMb/5kfyjlu0AncxNsqRl\",\"46\":\"sha384-orcgeC+mhWxY99KH2JApmjOshTEcJ8ndZzOdUKfttrMZQPDlTULjWPOarYsXRrbC\",\"47\":\"sha384-nJ0DaYc5GWnwssOIfk5YahTBrNISX+r0xmSvJ0bF4pAIQejpnw1KPc2LOAKkK5x3\",\"48\":\"sha384-jzEKNGMf5XBJm1srqq8UZsYGD+XNEsV5YBMeGRWR0udJC4N3pC8R8pttnubZVHtk\",\"49\":\"sha384-WahoBLbM74PGDr/7/fXrnbvs2TwiYihLfkiAnqvHOqFsnZNmEasRBasd43J3F4X7\",\"50\":\"sha384-C4bS4nSOgnJlFMdjHgoFhiVjA+XiFeet6Tqtfgg7zRxg/kBVdibpD/2as6vLDNrA\",\"51\":\"sha384-wRNAFACmiKh7qvcPXQkjdrU2MwDDvwci1sZepkaQDh9RAPWI7RNjPoHAZGV5FYlW\",\"52\":\"sha384-a0b3xhuXCCBxCKwbP5wjNQc9ZCzDHmH+TTVVkdrpNKO4OwbDLA5UyJTJ90l9nGv8\",\"53\":\"sha384-XP0rQY7SqZIC5f/uxurYuYi0a8MNVdxarSV8Vb6nscMsXpLRjrUREf2siCZ6KvBM\",\"54\":\"sha384-VQiGyLj12mnQv4Gbq262pqG3ClZUAWoI4cOiClzNf9fqBd66eAI+Jp+I149+8Qe5\",\"55\":\"sha384-rV6u8eshKm1ESH0MK6LYeqyY5+8C2Nt/qVn8ooBr+GcZSUnFi2c9aXdddVrU/wIp\",\"56\":\"sha384-zaGeszS8oQHGzgMlYL0/wQkNyuEvpbswRtityiuS4y0GzxCjy+d+NIL3CNRSg4cn\",\"57\":\"sha384-hS/5RVkIw66sQdEqjl66X/YjLX3eBqWBSce7sbXdSbLGiEpb8nGbrj9SNx8hRqwy\",\"58\":\"sha384-s763XtDuYj/NBS8L6/uXd3TCBhjsztgBv2SZPbX/QtpaDiv0LgKLxIx2astqjLY5\",\"59\":\"sha384-TzW2aFz9aLA54S/yPUzTlCBuh1+hJ2iPVNdgtZIAP1LzEfKwF8ZvBhzWTpmz8CPr\",\"60\":\"sha384-skCRYdZpBI4T0RUlwriRgXKe5LNXomfke5BxGWyCbQJw5i3xUe3AFrEM/7F63s/0\",\"61\":\"sha384-Q4E0teznn7Aj66mYA9mT7JRn+zOhBcDvsEjxSOoAoV52jtiBsKJh7Tlh0MejtUB/\",\"62\":\"sha384-GZV2VNVAzNi975g0cLQQ/DKnCiLUkNI7Ooc00P42VLsnwOdxRt0e8DaO754mBJ6K\",\"63\":\"sha384-eU8Nu5+9hDL+VCxDT9Kl2XnXb08gLe5740xMLlDmOcE06oBYmO3l9Lwv0EelIyDy\",\"64\":\"sha384-XoiKA1IU2zJPo8CPBM/oQVuTJcij0q5Xr5oQMtlJLP4ArWl/A05zMuLZ03LCVVsy\"};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n\n\n \t\t// JSONP chunk loading for javascript\n\n \t\tvar installedChunkData = installedChunks[chunkId];\n \t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n \t\t\t// a Promise means \"currently loading\".\n \t\t\tif(installedChunkData) {\n \t\t\t\tpromises.push(installedChunkData[2]);\n \t\t\t} else {\n \t\t\t\t// setup Promise in chunk cache\n \t\t\t\tvar promise = new Promise(function(resolve, reject) {\n \t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n \t\t\t\t});\n \t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n \t\t\t\t// start chunk loading\n \t\t\t\tvar script = document.createElement('script');\n \t\t\t\tvar onScriptComplete;\n\n \t\t\t\tscript.charset = 'utf-8';\n \t\t\t\tscript.timeout = 120;\n \t\t\t\tif (__webpack_require__.nc) {\n \t\t\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n \t\t\t\t}\n \t\t\t\tscript.src = jsonpScriptSrc(chunkId);\n \t\t\t\tif (script.src.indexOf(window.location.origin + '/') !== 0) {\n \t\t\t\t\tscript.crossOrigin = \"anonymous\";\n \t\t\t\t}\n \t\t\t\t// create error before stack unwound to get useful stacktrace later\n \t\t\t\tvar error = new Error();\n \t\t\t\tonScriptComplete = function (event) {\n \t\t\t\t\t// avoid mem leaks in IE.\n \t\t\t\t\tscript.onerror = script.onload = null;\n \t\t\t\t\tclearTimeout(timeout);\n \t\t\t\t\tvar chunk = installedChunks[chunkId];\n \t\t\t\t\tif(chunk !== 0) {\n \t\t\t\t\t\tif(chunk) {\n \t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n \t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n \t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n \t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n \t\t\t\t\t\t\terror.type = errorType;\n \t\t\t\t\t\t\terror.request = realSrc;\n \t\t\t\t\t\t\tchunk[1](error);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tinstalledChunks[chunkId] = undefined;\n \t\t\t\t\t}\n \t\t\t\t};\n \t\t\t\tvar timeout = setTimeout(function(){\n \t\t\t\t\tonScriptComplete({ type: 'timeout', target: script });\n \t\t\t\t}, 120000);\n \t\t\t\tscript.onerror = script.onload = onScriptComplete;\n \t\t\t\tscript.integrity = sriHashes[chunkId];\n \t\t\t\tscript.crossOrigin = \"anonymous\";\n \t\t\t\tdocument.head.appendChild(script);\n \t\t\t}\n \t\t}\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// on error function for async loading\n \t__webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,2]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","export const CLIENT_ID = 'WebMail';\nexport const CLIENT_TYPE = 1;\nexport const CLIENT_SECRET = '';\nexport const APP_VERSION = '1.0.0';\nexport const APP_NAME = 'proton-mail';\nexport const API_URL = 'https://protonmail.blue/api';\nexport const SECURE_URL = 'https://secure.protonmail.blue';\nexport const LOCALES = {};\nexport const API_VERSION = '3';\nexport const DATE_VERSION = 'Tue, 07 Jan 2020 08:10:13 GMT';\nexport const CHANGELOG_PATH = 'assets/changelog.tpl.html';\nexport const VERSION_PATH = 'assets/version.json';\nexport const SENTRY_RELEASE = '';\nexport const SENTRY_DSN = '';","const locales = require.context('../i18n', true, /.json$/, 'lazy');\n\nexport default locales.keys().reduce((acc, key) => {\n    acc[key.slice(2, key.length - 5)] = () => locales(key);\n    return acc;\n}, {});\n","import React, { useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon, SimpleDropdown, PrimaryButton, Label, Select, useLabels } from 'react-components';\nimport { MAILBOX_LABEL_IDS, LABEL_EXCLUSIVE } from 'proton-shared/lib/constants';\nimport { c } from 'ttag';\n\nconst ALL = 'all';\nconst { INBOX, TRASH, SPAM, ARCHIVE } = MAILBOX_LABEL_IDS;\n\nconst AdvancedSearchDropdown = ({ location, history }) => {\n    const formRef = useRef();\n    const [model, updateModel] = useState({});\n    const [labels = []] = useLabels();\n    const locationOptions = [\n        { value: ALL, text: c('Option').t`All` },\n        { value: INBOX, text: c('Mailbox').t`Inbox` },\n        { value: ARCHIVE, text: c('Mailbox').t`Archive` },\n        { value: SPAM, text: c('Mailbox').t`Spam` },\n        { value: TRASH, text: c('Mailbox').t`Trash` }\n    ]\n        .concat(\n            labels\n                .filter(({ Exclusive }) => Exclusive === LABEL_EXCLUSIVE.FOLDER)\n                .map(({ ID: value, Name: text }) => ({ value, text }))\n        )\n        .concat(\n            labels\n                .filter(({ Exclusive }) => Exclusive === LABEL_EXCLUSIVE.LABEL)\n                .map(({ ID: value, Name: text }) => ({ value, text }))\n        );\n    const handleSubmit = () => {\n        const state = {}; // TODO\n        history.push({ ...location }, state);\n        formRef.current.reset();\n    };\n    return (\n        <SimpleDropdown\n            originalPlacement=\"bottom-right\"\n            hasCaret={false}\n            content={<Icon name=\"caret\" className=\"fill-white searchbox-advanced-search-icon\" />}\n            className=\"searchbox-advanced-search-button\"\n        >\n            <form ref={formRef} name=\"advanced-search\" className=\"p1\" onSubmit={handleSubmit}>\n                <div className=\"mb1\">\n                    <Label htmlFor=\"location\">{c('Label').t`Location`}</Label>\n                    <Select\n                        id=\"location\"\n                        options={locationOptions}\n                        onChange={({ target }) => updateModel({ ...model, location: target.value })}\n                    />\n                </div>\n                <div className=\"mb1 flex flex-nowrap\">\n                    <div className=\"mr1\">\n                        <Label>{c('Label').t`Sender`}</Label>\n                    </div>\n                    <div>\n                        <Label>{c('Label').t`Recipient`}</Label>\n                    </div>\n                </div>\n                <div className=\"mb1 flex flex-nowrap\">\n                    <div className=\"mr1\">\n                        <Label>{c('Label').t`Start date`}</Label>\n                    </div>\n                    <div>\n                        <Label>{c('Label').t`End date`}</Label>\n                    </div>\n                </div>\n                <div className=\"mb1 flex flex-nowrap\">\n                    <div className=\"mr1\">\n                        <Label>{c('Label').t`Address`}</Label>\n                    </div>\n                    <div>\n                        <Label>{c('Label').t`Attachments`}</Label>\n                    </div>\n                </div>\n                <div>\n                    <PrimaryButton className=\"w100\" type=\"submit\">{c('Action').t`Search`}</PrimaryButton>\n                </div>\n            </form>\n        </SimpleDropdown>\n    );\n};\n\nAdvancedSearchDropdown.propTypes = {\n    history: PropTypes.object.isRequired,\n    location: PropTypes.object.isRequired\n};\n\nexport default AdvancedSearchDropdown;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    MainLogo,\n    SupportDropdown,\n    Hamburger,\n    TopNavbar,\n    TopNavbarLink,\n    UpgradeButton,\n    Searchbox,\n    useUser\n} from 'react-components';\nimport { c } from 'ttag';\n\nimport AdvancedSearchDropdown from './AdvancedSearchDropdown';\n\nconst PrivateHeader = ({ location, history, expanded, onToggleExpand, onSearch }) => {\n    const [{ hasPaidMail }] = useUser();\n    return (\n        <header className=\"header flex flex-nowrap reset4print\">\n            <MainLogo url=\"/inbox\" className=\"nomobile\" />\n            <Hamburger expanded={expanded} onToggle={onToggleExpand} />\n            <Searchbox\n                placeholder={c('Placeholder').t`Search messages`}\n                onSearch={onSearch}\n                advanced={<AdvancedSearchDropdown location={location} history={history} />}\n            />\n            <TopNavbar>\n                {hasPaidMail ? null : <UpgradeButton external={true} />}\n                <TopNavbarLink to=\"/inbox\" icon=\"mailbox\" text={c('Title').t`Mailbox`} aria-current={true} />\n                <TopNavbarLink external={true} to=\"/settings\" icon=\"settings-master\" text={c('Title').t`Settings`} />\n                <SupportDropdown />\n            </TopNavbar>\n        </header>\n    );\n};\n\nPrivateHeader.propTypes = {\n    location: PropTypes.object.isRequired,\n    history: PropTypes.object.isRequired,\n    onSearch: PropTypes.func.isRequired,\n    expanded: PropTypes.bool,\n    onToggleExpand: PropTypes.func.isRequired\n};\n\nexport default PrivateHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst LocationAside = ({ action, unread = 0 }) => {\n    return (\n        <>\n            {action}\n            {unread ? <span className=\"navigation__counterItem flex-item-noshrink rounded\">{unread}</span> : null}\n        </>\n    );\n};\n\nLocationAside.propTypes = {\n    action: PropTypes.node,\n    unread: PropTypes.number.isRequired\n};\n\nexport default LocationAside;\n","import React from 'react';\nimport { Icon, useEventManager, useLoading } from 'react-components';\n\nconst RefreshButton = () => {\n    const { call } = useEventManager();\n    const [loading, withLoading] = useLoading();\n\n    const handleRefresh = async (event) => {\n        event.preventDefault();\n        await call();\n    };\n\n    return (\n        <button\n            className=\"mr0-5\"\n            disabled={loading}\n            type=\"button\"\n            onClick={(event) => withLoading(handleRefresh(event))}\n        >\n            <Icon fill=\"light\" name=\"reload\" />\n        </button>\n    );\n};\n\nexport default RefreshButton;\n","import { c } from 'ttag';\nimport { MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\n\nexport const PAGE_SIZE = 50;\n\nexport const ELEMENT_TYPES = {\n    MESSAGE: 'message',\n    CONVERSATION: 'conversation'\n};\n\nexport const LABEL_IDS_TO_HUMAN = {\n    [MAILBOX_LABEL_IDS.INBOX]: 'inbox',\n    [MAILBOX_LABEL_IDS.ALL_DRAFTS]: 'all-drafts',\n    [MAILBOX_LABEL_IDS.ALL_SENT]: 'all-sent',\n    [MAILBOX_LABEL_IDS.TRASH]: 'trash',\n    [MAILBOX_LABEL_IDS.SPAM]: 'spam',\n    [MAILBOX_LABEL_IDS.ALL_MAIL]: 'all-mail',\n    [MAILBOX_LABEL_IDS.ARCHIVE]: 'archive',\n    [MAILBOX_LABEL_IDS.SENT]: 'sent',\n    [MAILBOX_LABEL_IDS.DRAFTS]: 'drafts',\n    [MAILBOX_LABEL_IDS.STARRED]: 'starred'\n};\n\nexport const HUMAN_TO_LABEL_IDS = Object.entries(LABEL_IDS_TO_HUMAN).reduce((acc, [key, value]) => {\n    acc[value] = key;\n    return acc;\n}, Object.create(null));\n\nexport const LABEL_IDS_TO_I18N = {\n    [MAILBOX_LABEL_IDS.INBOX]: c('Link').t`Inbox`,\n    [MAILBOX_LABEL_IDS.ALL_DRAFTS]: c('Link').t`Drafts`,\n    [MAILBOX_LABEL_IDS.ALL_SENT]: c('Link').t`Sent`,\n    [MAILBOX_LABEL_IDS.TRASH]: c('Link').t`Trash`,\n    [MAILBOX_LABEL_IDS.SPAM]: c('Link').t`Spam`,\n    [MAILBOX_LABEL_IDS.ALL_MAIL]: c('Link').t`All mail`,\n    [MAILBOX_LABEL_IDS.ARCHIVE]: c('Link').t`Archive`,\n    [MAILBOX_LABEL_IDS.SENT]: c('Link').t`Sent`,\n    [MAILBOX_LABEL_IDS.DRAFTS]: c('Link').t`Drafts`,\n    [MAILBOX_LABEL_IDS.STARRED]: c('Link').t`Starred`\n};\n\nexport const SIGNATURE_START = 1546300800; // January 1, 2019\n\nexport const VERIFICATION_STATUS = {\n    NOT_VERIFIED: -1,\n    NOT_SIGNED: 0,\n    SIGNED_AND_VALID: 1,\n    SIGNED_AND_INVALID: 2,\n    SIGNED_NO_PUB_KEY: 3\n};\n\nexport const MESSAGE_FLAGS = {\n    FLAG_RECEIVED: 1, // whether a message is received\n    FLAG_SENT: 2, // whether a message is sent\n    FLAG_INTERNAL: 4, // whether the message is between ProtonMail recipients\n    FLAG_E2E: 8, // whether the message is end-to-end encrypted\n    FLAG_AUTO: 16, // whether the message is an autoresponse\n    FLAG_REPLIED: 32, // whether the message is replied to\n    FLAG_REPLIEDALL: 64, // whether the message is replied all to\n    FLAG_FORWARDED: 128, // whether the message is forwarded\n    FLAG_AUTOREPLIED: 256, // whether the message has been responded to with an autoresponse\n    FLAG_IMPORTED: 512, // whether the message is an import\n    FLAG_OPENED: 1024, // whether the message has ever been opened by the user\n    FLAG_RECEIPT_SENT: 2048, // whether a read receipt has been sent in response to the message\n    // For drafts only\n    FLAG_RECEIPT_REQUEST: 65536, // whether to request a read receipt for the message\n    FLAG_PUBLIC_KEY: 131072, // whether to attach the public key\n    FLAG_SIGN: 262144 // whether to sign the message\n};\n\nexport const ENCRYPTED_STATUS = {\n    PGP_MIME: 8 // Used for attachment\n};\n\nexport const AES256 = 'aes256';\n\nexport enum MESSAGE_ACTIONS {\n    NEW = -1,\n    REPLY = 0,\n    REPLY_ALL = 1,\n    FORWARD = 2\n}\n","import { VIEW_LAYOUT, VIEW_MODE, MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\n\ninterface MailSettings {\n    ViewLayout?: number;\n    ViewMode?: number;\n}\n\nexport const isColumnMode = ({ ViewLayout = VIEW_LAYOUT.COLUMN }: MailSettings = {}) =>\n    ViewLayout === VIEW_LAYOUT.COLUMN;\n\nexport const isConversationMode = (labelID = '', { ViewMode = VIEW_MODE.GROUP }: MailSettings = {}) => {\n    const alwaysMessageLabels = [\n        MAILBOX_LABEL_IDS.DRAFTS,\n        MAILBOX_LABEL_IDS.ALL_DRAFTS,\n        MAILBOX_LABEL_IDS.SENT,\n        MAILBOX_LABEL_IDS.ALL_SENT\n    ];\n\n    return !alwaysMessageLabels.includes(labelID as MAILBOX_LABEL_IDS) && ViewMode === VIEW_MODE.GROUP;\n};\n","import { formatRelative, format } from 'date-fns';\n\nimport { ELEMENT_TYPES } from '../constants';\nimport { Element } from '../models/element';\nimport { Sort } from '../models/tools';\nimport { Message } from '../models/message';\nimport { isConversationMode } from './mailSettings';\n\nexport interface TypeParams {\n    labelID?: string;\n    mailSettings?: any;\n}\n\nexport const getCurrentType = ({ labelID, mailSettings }: TypeParams) =>\n    isConversationMode(labelID, mailSettings) ? ELEMENT_TYPES.CONVERSATION : ELEMENT_TYPES.MESSAGE;\n\nexport const isConversation = (element: Element): boolean => !(element as Message).ConversationID;\nexport const isMessage = (element: Element): boolean => !isConversation(element);\n\nexport const getDate = ({ Time = 0, ContextTime = 0 }: Element = {}) => new Date((ContextTime || Time) * 1000);\n\n/**\n * Get readable time to display from message / conversation\n * @param {Integer} element.Time\n * @return {String} Jan 17, 2016\n */\nexport const getReadableTime = ({ Time = 0, ContextTime = 0 }: Element = {}) => {\n    const date = new Date((ContextTime || Time) * 1000);\n    const now = new Date();\n    return formatRelative(date, now);\n};\n\nexport const getReadableFullTime = ({ Time = 0, ContextTime = 0 }: Element = {}) => {\n    const date = new Date((ContextTime || Time) * 1000);\n    return format(date, 'Ppp');\n};\n\nexport const isUnread = (element: Element) => {\n    if ('NumUnread' in element) {\n        return element.NumUnread !== 0;\n    }\n    if ('Unread' in element) {\n        return element.Unread !== 0;\n    }\n    return false;\n};\n\nexport const getLabel = ({ Labels = [] }: Element, labelID: string) => Labels.find(({ ID = '' }) => ID === labelID);\n\nexport const getLabelIds = ({ Labels, LabelIDs }: Element) =>\n    Labels ? Labels.map(({ ID }) => ID || '') : LabelIDs || [];\n\nexport const hasLabel = (element: Element, labelID: string) => {\n    return getLabelIds(element).some((ID) => labelID === ID);\n};\n\nexport const getTime = (element: Element, labelID: string) =>\n    element.ContextTime || element.Time || (getLabel(element, labelID) || {}).ContextTime || 0;\n\nexport const getSize = ({ Size = 0 }: Element) => Size;\n\nexport const sort = (elements: Element[], sort: Sort, labelID: string) => {\n    const getValue = {\n        Time: getTime,\n        Size: getSize\n    }[sort.sort];\n    const compare = (a: Element, b: Element) => {\n        const valueA = getValue(a, labelID);\n        const valueB = getValue(b, labelID);\n        if (valueA === valueB) {\n            return (a.Order || 0) - (b.Order || 0);\n        }\n        return sort.desc ? valueB - valueA : valueA - valueB;\n    };\n    return [...elements].sort((e1, e2) => compare(e1, e2));\n};\n","import React, { useMemo } from 'react';\nimport {\n    NavMenu,\n    MainLogo,\n    Loader,\n    useMailSettings,\n    useLabels,\n    useConversationCounts,\n    useMessageCounts,\n    PrimaryButton\n} from 'react-components';\nimport { SHOW_MOVED, LABEL_EXCLUSIVE, MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\nimport { redirectTo } from 'proton-shared/lib/helpers/browser';\nimport { toMap } from 'proton-shared/lib/helpers/object';\nimport { c } from 'ttag';\n\nimport LocationAside from './LocationAside';\nimport RefreshButton from './RefreshButton';\nimport { LABEL_IDS_TO_HUMAN, ELEMENT_TYPES, MESSAGE_ACTIONS } from '../../constants';\nimport { getCurrentType } from '../../helpers/elements';\nimport { LabelCount, Label } from '../../models/label';\nimport { OnCompose } from '../../containers/ComposerContainer';\n\ntype UnreadMap = { [labelID: string]: LabelCount };\n\ninterface Props {\n    labelID: string;\n    onCompose: OnCompose;\n    expanded?: boolean;\n}\n\nconst PrivateSidebar = ({ expanded = false, labelID: currentLabelID, onCompose }: Props) => {\n    const [conversationCounts, loadingConversationCounts] = useConversationCounts();\n    const [messageCounts, loadingMessageCounts] = useMessageCounts();\n    const [mailSettings, loadingMailSettings] = useMailSettings();\n    const [labels, loadingLabels]: [Label[], (labels: Label[]) => void] = useLabels();\n    const { ShowMoved } = mailSettings || {};\n    const type = getCurrentType({ mailSettings, labelID: currentLabelID });\n\n    const unreadMap = useMemo<UnreadMap>(() => {\n        const counters = type === ELEMENT_TYPES.CONVERSATION ? conversationCounts : messageCounts;\n\n        if (!Array.isArray(counters)) {\n            return {};\n        }\n\n        return toMap(counters, 'LabelID') as UnreadMap;\n    }, [conversationCounts, messageCounts]);\n\n    if (loadingMailSettings || loadingLabels || loadingConversationCounts || loadingMessageCounts) {\n        return <Loader />;\n    }\n\n    const getAside = (labelID = '') => {\n        return (\n            <LocationAside\n                unread={unreadMap[labelID].Unread}\n                action={labelID === currentLabelID ? <RefreshButton /> : null}\n            />\n        );\n    };\n\n    const list = [\n        {\n            icon: 'inbox',\n            text: c('Link').t`Inbox`,\n            aside: getAside(MAILBOX_LABEL_IDS.INBOX),\n            link: `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.INBOX]}`\n        },\n        {\n            icon: 'drafts',\n            text: c('Link').t`Drafts`,\n            aside: getAside(ShowMoved & SHOW_MOVED.DRAFTS ? MAILBOX_LABEL_IDS.ALL_DRAFTS : MAILBOX_LABEL_IDS.DRAFTS),\n            link:\n                ShowMoved & SHOW_MOVED.DRAFTS\n                    ? `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.ALL_DRAFTS]}`\n                    : `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.DRAFTS]}`\n        },\n        {\n            icon: 'sent',\n            text: c('Link').t`Sent`,\n            aside: getAside(ShowMoved & SHOW_MOVED.SENT ? MAILBOX_LABEL_IDS.ALL_SENT : MAILBOX_LABEL_IDS.SENT),\n            link:\n                ShowMoved & SHOW_MOVED.SENT\n                    ? `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.ALL_SENT]}`\n                    : `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.SENT]}`\n        },\n        {\n            icon: 'star',\n            text: c('Link').t`Starred`,\n            aside: getAside(MAILBOX_LABEL_IDS.STARRED),\n            link: `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.STARRED]}`\n        },\n        {\n            icon: 'archive',\n            text: c('Link').t`Archive`,\n            aside: getAside(MAILBOX_LABEL_IDS.ARCHIVE),\n            link: `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.ARCHIVE]}`\n        },\n        {\n            icon: 'spam',\n            text: c('Link').t`Spam`,\n            aside: getAside(MAILBOX_LABEL_IDS.SPAM),\n            link: `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.SPAM]}`\n        },\n        {\n            icon: 'trash',\n            text: c('Link').t`Trash`,\n            aside: getAside(MAILBOX_LABEL_IDS.TRASH),\n            link: `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.TRASH]}`\n        },\n        {\n            icon: 'all-emails',\n            text: c('Link').t`All mail`,\n            aside: getAside(MAILBOX_LABEL_IDS.ALL_MAIL),\n            link: `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.ALL_MAIL]}`\n        },\n        {\n            icon: 'folder-label',\n            text: c('Link').t`Folders/labels`,\n            className: 'alignleft',\n            type: 'button',\n            onClick() {\n                redirectTo('/settings/labels');\n            }\n        },\n        ...labels.map(({ ID, Name, Exclusive, Color }) => ({\n            icon: Exclusive === LABEL_EXCLUSIVE.LABEL ? 'label' : 'folder',\n            text: Name,\n            aside: getAside(ID),\n            link: `/${ID}`,\n            color: Color\n        }))\n    ];\n\n    const handleCompose = () => {\n        onCompose({ action: MESSAGE_ACTIONS.NEW });\n    };\n\n    return (\n        <div className=\"sidebar flex flex-column noprint\" data-expanded={expanded}>\n            <div className=\"nodesktop notablet\">\n                <MainLogo url=\"/inbox\" />\n            </div>\n            <div className=\"pl1 pr1 mb1\">\n                <PrimaryButton className=\"w100 bold\" onClick={handleCompose}>{c('Action').t`Compose`}</PrimaryButton>\n            </div>\n            <nav className=\"navigation mw100 flex-item-fluid scroll-if-needed\">\n                <NavMenu list={list} className=\"mt0\" />\n            </nav>\n        </div>\n    );\n};\n\nexport default PrivateSidebar;\n","import React, { useRef, useState, useEffect, ReactNode } from 'react';\nimport { c } from 'ttag';\nimport { AppsSidebar, StorageSpaceStatus, MainAreaContext, Href } from 'react-components';\nimport { normalize } from 'proton-shared/lib/helpers/string';\n\nimport PrivateHeader from '../header/PrivateHeader';\nimport PrivateSidebar from '../sidebar/PrivateSidebar';\nimport { Location, History } from 'history';\nimport { OnCompose } from '../../containers/ComposerContainer';\n\ninterface Props {\n    children: ReactNode;\n    location: Location;\n    history: History;\n    labelID: string;\n    onCompose: OnCompose;\n}\n\nconst PrivateLayout = ({ children, location, history, labelID, onCompose }: Props) => {\n    const mainAreaRef = useRef<HTMLDivElement>(null);\n    const [expanded, setExpand] = useState(false);\n\n    const handleSearch = (keyword: string) => {\n        console.log(normalize(keyword));\n    };\n\n    useEffect(() => {\n        setExpand(false);\n    }, [location.pathname]);\n\n    return (\n        <div className=\"flex flex-nowrap no-scroll\">\n            <AppsSidebar\n                items={[\n                    <StorageSpaceStatus\n                        key=\"storage\"\n                        upgradeButton={\n                            <Href\n                                url=\"/settings/subscription\"\n                                target=\"_self\"\n                                className=\"pm-button pm-button--primary pm-button--small\"\n                            >\n                                {c('Action').t`Upgrade`}\n                            </Href>\n                        }\n                    ></StorageSpaceStatus>\n                ]}\n            />\n            <div className=\"content flex-item-fluid reset4print\">\n                <PrivateHeader\n                    location={location}\n                    history={history}\n                    expanded={expanded}\n                    onToggleExpand={() => setExpand(!expanded)}\n                    onSearch={handleSearch}\n                />\n                <div className=\"flex flex-nowrap\">\n                    {/* <Route path=\"/:path\" render={() => <PrivateSidebar labelID={labelID} expanded={expanded} />} /> */}\n                    <PrivateSidebar labelID={labelID} expanded={expanded} onCompose={onCompose} />\n                    <div className=\"main flex-item-fluid scroll-smooth-touch\" ref={mainAreaRef}>\n                        <div className=\"flex-item-fluid\">\n                            <MainAreaContext.Provider value={mainAreaRef}>{children}</MainAreaContext.Provider>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default PrivateLayout;\n","import { LABEL_IDS_TO_HUMAN, LABEL_IDS_TO_I18N } from '../constants';\nimport { MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\nimport { Label } from '../models/label';\nimport { toMap } from 'proton-shared/lib/helpers/object';\n\nexport const getHumanLabelID = (labelID: string) => LABEL_IDS_TO_HUMAN[labelID as MAILBOX_LABEL_IDS] || labelID;\n\nexport const getI18nLabelID = (labelID: string) => LABEL_IDS_TO_I18N[labelID as MAILBOX_LABEL_IDS] || labelID;\n\nexport const getLabelName = (labelID: string, labels: Label[]): string => {\n    if (labelID in LABEL_IDS_TO_HUMAN) {\n        return getI18nLabelID(labelID);\n    }\n\n    const labelsMap: { [key: string]: Label } = toMap(labels) as any;\n    if (labelID in labelsMap) {\n        return labelsMap[labelID].Name || labelID;\n    }\n\n    return labelID;\n};\n\nexport const isCustomLabel = (labelID: string) =>\n    !Object.values(MAILBOX_LABEL_IDS).includes(labelID as MAILBOX_LABEL_IDS);\n","import { Page } from '../models/tools';\n\nexport const pageCount = (page: Page) => Math.ceil(page.total / page.size);\n\nexport const expectedPageLength = (page: Page) => {\n    if (page.total === 0) {\n        return 0;\n    }\n    if (page.total % page.size === 0) {\n        return page.size;\n    }\n    if (pageCount(page) - 1 === page.page) {\n        return page.total % page.size;\n    }\n    return page.size;\n};\n","import { useState, useEffect, useMemo } from 'react';\nimport { useApi, useEventManager } from 'react-components';\nimport { queryConversations, getConversation } from 'proton-shared/lib/api/conversations';\nimport { queryMessageMetadata, getMessage } from 'proton-shared/lib/api/messages';\nimport { EVENT_ACTIONS } from 'proton-shared/lib/constants';\nimport { toMap } from 'proton-shared/lib/helpers/object';\n\nimport { Conversation } from '../models/conversation';\nimport { sort as sortElements, hasLabel } from '../helpers/elements';\nimport { Element } from '../models/element';\nimport { Page, Filter, Sort } from '../models/tools';\nimport { expectedPageLength } from '../helpers/paging';\nimport { ElementEvent, Event, ElementCountEvent, ConversationEvent, MessageEvent } from '../models/event';\n\ninterface Options {\n    conversationMode: boolean;\n    labelID: string;\n    page: Page;\n    sort: Sort;\n    filter: Filter;\n}\n\ninterface CacheParams {\n    labelID: string;\n    sort: Sort;\n    filter: Filter;\n}\n\ninterface Cache {\n    params: CacheParams;\n    page: Page;\n    pages: number[];\n    elements: { [ID: string]: Element };\n}\n\nconst emptyCache = (page: Page, params: CacheParams): Cache => ({ params, page, elements: {}, pages: [] });\n\nexport const useElements = ({\n    conversationMode,\n    labelID,\n    page,\n    sort,\n    filter\n}: Options): [string, Conversation[], boolean, number] => {\n    const api = useApi();\n    const { subscribe } = useEventManager();\n    const [loading, setLoading] = useState(false);\n    const [localCache, setLocalCache] = useState<Cache>(emptyCache(page, { labelID, sort, filter }));\n\n    // Compute the conversations list from the cache\n    const elements = useMemo(() => {\n        // Getting all params from the cache and not from scoped params\n        // To prevent any desynchronization between cache and the output of the memo\n        const {\n            params: { labelID, sort },\n            page\n        } = localCache;\n        const minPage = localCache.pages.reduce((acc, page) => (page < acc ? page : acc), localCache.pages[0]);\n        const startIndex = (page.page - minPage) * page.size;\n        const endIndex = startIndex + page.size;\n        const elementsArray = Object.values(localCache.elements);\n        const filtered = elementsArray.filter((element) => hasLabel(element, labelID));\n        const sorted = sortElements(filtered, sort, labelID);\n        return sorted.slice(startIndex, endIndex);\n    }, [localCache]);\n\n    const total = useMemo(() => localCache.page.total, [localCache.page.total]);\n\n    const paramsChanged = () =>\n        labelID !== localCache.params.labelID || sort !== localCache.params.sort || filter !== localCache.params.filter;\n\n    const pageCached = () => localCache.pages.includes(page.page);\n\n    const pageIsConsecutive = () =>\n        localCache.pages.some((p) => p === page.page || p === page.page - 1 || p === page.page + 1);\n\n    const isExpectedLength = () => elements.length === expectedPageLength({ ...page, total });\n\n    const shouldResetCache = () => !loading && (paramsChanged() || !pageIsConsecutive());\n\n    const shouldSendRequest = () => !loading && (shouldResetCache() || !pageCached() || !isExpectedLength());\n\n    const queryElement = async (elementID: string): Promise<Element> => {\n        const query = conversationMode ? getConversation : getMessage;\n        const result = await api(query(elementID));\n        return conversationMode ? result.Conversation : result.Message;\n    };\n\n    const queryElements = async (): Promise<{ Total: number; Elements: Element[] }> => {\n        const query = conversationMode ? queryConversations : queryMessageMetadata;\n        const result = await api(\n            query({\n                Page: page.page,\n                PageSize: page.size,\n                Limit: page.limit,\n                LabelID: labelID,\n                Sort: sort.sort,\n                Desc: sort.desc ? 1 : 0,\n                // Begin,\n                // End,\n                // BeginID,\n                // EndID,\n                // Keyword,\n                // To,\n                // From,\n                // Subject,\n                // Attachments,\n                // Starred,\n                Unread: filter.Unread\n                // AddressID,\n                // ID,\n                // AutoWildcard\n            } as any)\n        );\n        return {\n            Total: result.Total,\n            Elements: conversationMode ? result.Conversations : result.Messages\n        };\n    };\n\n    const resetCache = () => setLocalCache(emptyCache(page, { labelID, sort, filter }));\n\n    const load = async () => {\n        setLoading(true);\n        try {\n            const { Total, Elements } = await queryElements();\n            setLocalCache(\n                (localCache: Cache): Cache => {\n                    return {\n                        ...localCache,\n                        page: {\n                            ...localCache.page,\n                            page: page.page,\n                            total: Total\n                        },\n                        pages: [...localCache.pages, page.page],\n                        elements: {\n                            ...localCache.elements,\n                            ...(toMap(Elements, 'ID') as { [ID: string]: Element })\n                        }\n                    };\n                }\n            );\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    // Main effect watching all inputs and responsible to trigger actions on the cache\n    useEffect(() => {\n        shouldResetCache() && resetCache();\n        shouldSendRequest() && load();\n    }, [labelID, page, sort, filter]);\n\n    // Listen to event manager and update de cache\n    useEffect(\n        () => {\n            return subscribe(\n                async ({ Conversations = [], Messages = [], ConversationCounts = [], MessageCounts = [] }: Event) => {\n                    const Elements: ElementEvent[] = conversationMode ? Conversations : Messages;\n                    const Counts: ElementCountEvent[] = conversationMode ? ConversationCounts : MessageCounts;\n\n                    const count = Counts.find((count) => count.LabelID === labelID);\n\n                    console.log('event', Elements, count);\n\n                    const { toDelete, toUpdate, toCreate } = Elements.reduce(\n                        (acc, event) => {\n                            const { ID, Action } = event;\n                            const Element = conversationMode\n                                ? (event as ConversationEvent).Conversation\n                                : (event as MessageEvent).Message;\n                            switch (Action) {\n                                case EVENT_ACTIONS.DELETE:\n                                    acc.toDelete.push(ID);\n                                    break;\n                                case EVENT_ACTIONS.UPDATE_DRAFT:\n                                case EVENT_ACTIONS.UPDATE_FLAGS:\n                                    acc.toUpdate.push({ ID, ...Element });\n                                    break;\n                                case EVENT_ACTIONS.CREATE:\n                                    acc.toCreate.push(Element);\n                                    break;\n                            }\n                            return acc;\n                        },\n                        { toDelete: [] as string[], toUpdate: [] as Element[], toCreate: [] as Element[] }\n                    );\n\n                    const toUpdateCompleted = await Promise.all(\n                        toUpdate.map(async (element) => {\n                            const elementID = element.ID || '';\n                            const existingElement = localCache.elements[elementID];\n\n                            return existingElement ? { ...existingElement, ...element } : queryElement(elementID);\n                        })\n                    );\n\n                    setLocalCache((localCache) => {\n                        const newReplacements: { [ID: string]: Element } = {};\n\n                        [...toCreate, ...toUpdateCompleted].forEach((element) => {\n                            newReplacements[element.ID || ''] = element;\n                        });\n                        const newElements = {\n                            ...localCache.elements,\n                            ...newReplacements\n                        };\n                        toDelete.forEach((elementID) => {\n                            delete newElements[elementID];\n                        });\n\n                        return {\n                            ...localCache,\n                            elements: newElements,\n                            page: {\n                                ...localCache.page,\n                                total: count ? count.Total : localCache.page.total\n                            }\n                        };\n                    });\n                }\n            );\n        },\n        // Having the cache in dependency will subscribe / unsubscribe to the eventmanager many times\n        // But it's mandatory for the function to have the reference of the current localCache\n        [localCache]\n    );\n\n    return [localCache.params.labelID, elements, loading, localCache.page.total];\n};\n","import { Location } from 'history';\n\nexport const getSearchParams = (location: Location): { [key: string]: string } => {\n    const params = new URLSearchParams(location.search);\n\n    const result: { [key: string]: string } = {};\n\n    params.forEach((value, key) => {\n        result[key] = value;\n    });\n\n    return result;\n};\n\nexport const changeSearchParams = (location: Location, newParams: { [key: string]: string | undefined }) => {\n    const params = new URLSearchParams(location.search);\n\n    for (const key in newParams) {\n        if (newParams[key] === undefined) {\n            params.delete(key);\n        } else {\n            params.set(key, newParams[key] as string);\n        }\n    }\n\n    const queryString = params.toString();\n    const urlFragment = (queryString === '' ? '' : '?') + queryString;\n\n    return location.pathname + urlFragment;\n};\n","import { Sort, Filter } from '../models/tools';\nimport { getSearchParams, changeSearchParams } from './url';\nimport { Location } from 'history';\nimport { getHumanLabelID } from './labels';\n\nexport const setPathInUrl = (location: Location, labelID: string, elementID?: string): Location => {\n    const urlFragment = elementID === undefined ? '' : `/${elementID}`;\n    return {\n        ...location,\n        pathname: `/${getHumanLabelID(labelID)}${urlFragment}`\n    };\n};\n\nconst stringToPage = (string: string | undefined): number => {\n    if (string === undefined) {\n        return 0;\n    }\n    const pageNumber = parseInt(string, 10);\n    if (!isNaN(pageNumber)) {\n        return pageNumber - 1;\n    }\n    return 0;\n};\n\nconst stringToSort = (string: string | undefined): Sort => {\n    switch (string) {\n        case '-size':\n            return { sort: 'Size', desc: true };\n        case 'size':\n            return { sort: 'Size', desc: false };\n        case 'date':\n            return { sort: 'Time', desc: false };\n        default:\n            return { sort: 'Time', desc: true };\n    }\n};\n\nconst sortToString = (sort: Sort): string | undefined =>\n    sort.sort === 'Time' ? (sort.desc ? undefined : 'date') : sort.desc ? '-size' : 'size';\n\nconst stringToFilter = (string: string | undefined): Filter => {\n    switch (string) {\n        case 'read':\n            return { Unread: 0 };\n        case 'unread':\n            return { Unread: 1 };\n        default:\n            return {};\n    }\n};\n\nconst filterToString = (filter: Filter): string | undefined =>\n    filter.Unread === undefined ? undefined : filter.Unread === 0 ? 'read' : 'unread';\n\nexport const pageFromUrl = (location: Location) => stringToPage(getSearchParams(location).page);\n\nexport const sortFromUrl = (location: Location) => stringToSort(getSearchParams(location).sort);\n\nexport const filterFromUrl = (location: Location) => stringToFilter(getSearchParams(location).filter);\n\nexport const setPageInUrl = (location: Location, page: number) =>\n    changeSearchParams(location, { page: page === 0 ? undefined : String(page + 1) });\n\nexport const setSortInUrl = (location: Location, sort: Sort) =>\n    changeSearchParams(location, { sort: sortToString(sort) });\n\nexport const setFilterInUrl = (location: Location, filter: Filter) =>\n    changeSearchParams(location, { filter: filterToString(filter) });\n","import React from 'react';\n\nconst ToolbarSeparator = () => <span className=\"toolbar-separator\" />;\n\nexport default ToolbarSeparator;\n","import React, { ReactNode } from 'react';\nimport { classnames } from 'react-components';\n\ninterface Props {\n    disabled?: boolean;\n    loading?: boolean;\n    children: ReactNode;\n    className?: string;\n    title?: string;\n    [rest: string]: any;\n}\n\nconst ToolbarButton = ({ children, loading = false, disabled = false, className = '', ...rest }: Props) => {\n    return (\n        <button\n            type=\"button\"\n            disabled={disabled || loading}\n            className={classnames(['toolbar-button', className])}\n            {...rest}\n        >\n            {children}\n        </button>\n    );\n};\n\nexport default ToolbarButton;\n","import React from 'react';\nimport { MESSAGE_BUTTONS } from 'proton-shared/lib/constants';\nimport { Icon, useApi, useEventManager, useLoading } from 'react-components';\nimport { markMessageAsRead, markMessageAsUnread } from 'proton-shared/lib/api/messages';\nimport { markConversationsAsRead, markConversationsAsUnread } from 'proton-shared/lib/api/conversations';\nimport { c } from 'ttag';\n\nimport ToolbarButton from './ToolbarButton';\nimport { getCurrentType } from '../../helpers/elements';\nimport { ELEMENT_TYPES } from '../../constants';\n\nconst UNREAD = 0;\nconst READ = 1;\n\ninterface Props {\n    mailSettings: any;\n    selectedIDs: string[];\n    labelID: string;\n}\n\nconst ReadUnreadButtons = ({ mailSettings, labelID, selectedIDs = [] }: Props) => {\n    const api = useApi();\n    const { call } = useEventManager();\n    const { MessageButtons = MESSAGE_BUTTONS.READ_UNREAD } = mailSettings;\n    const type = getCurrentType({ mailSettings, labelID });\n    const [loading, withLoading] = useLoading();\n\n    const markAs = async (status = UNREAD) => {\n        const isUnread = status === UNREAD;\n        const action =\n            type === ELEMENT_TYPES.CONVERSATION\n                ? isUnread\n                    ? markConversationsAsUnread\n                    : markConversationsAsRead\n                : isUnread\n                ? markMessageAsUnread\n                : markMessageAsRead;\n        await api(action(selectedIDs));\n        await call();\n    };\n\n    const buttons = [\n        <ToolbarButton\n            key=\"read\"\n            title={c('Action').t`Mark as read`}\n            loading={loading}\n            disabled={!selectedIDs.length}\n            onClick={() => withLoading(markAs(READ))}\n        >\n            <Icon className=\"toolbar-icon mauto\" name=\"read\" />\n        </ToolbarButton>,\n        <ToolbarButton\n            key=\"unread\"\n            title={c('Action').t`Mark as unread`}\n            loading={loading}\n            disabled={!selectedIDs.length}\n            onClick={() => withLoading(markAs(UNREAD))}\n        >\n            <Icon className=\"toolbar-icon mauto\" name=\"unread\" />\n        </ToolbarButton>\n    ];\n\n    if (MessageButtons === MESSAGE_BUTTONS.UNREAD_READ) {\n        buttons.reverse();\n    }\n\n    // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/20356\n    return <>{buttons}</>;\n};\n\nexport default ReadUnreadButtons;\n","import React, { ReactNode, useState } from 'react';\nimport { classnames, usePopperAnchor, DropdownButton, Dropdown, generateUID } from 'react-components';\n\ninterface Props {\n    autoClose?: boolean;\n    title?: string;\n    className?: string;\n    content?: ReactNode;\n    children: ({ onClose }: { onClose: () => void }) => ReactNode;\n    disabled?: boolean;\n    size?: string;\n    [rest: string]: any;\n}\n\nconst ToolbarDropdown = ({\n    title,\n    content,\n    className,\n    children,\n    autoClose = true,\n    disabled = false,\n    size = 'normal',\n    ...rest\n}: Props) => {\n    const [uid] = useState(generateUID('dropdown'));\n\n    const { anchorRef, isOpen, toggle, close } = usePopperAnchor();\n\n    return (\n        <>\n            <DropdownButton\n                title={title}\n                buttonRef={anchorRef}\n                isOpen={isOpen}\n                onClick={toggle}\n                hasCaret={true}\n                disabled={disabled}\n                caretClassName=\"toolbar-icon\"\n                className={classnames(['flex-item-noshrink toolbar-button toolbar-button--dropdown', className])}\n                {...rest}\n            >\n                {content}\n            </DropdownButton>\n            <Dropdown\n                id={uid}\n                size={size}\n                autoClose={autoClose}\n                isOpen={isOpen}\n                anchorRef={anchorRef}\n                onClose={close}\n                className=\"toolbar-dropdown\"\n            >\n                {children({ onClose: close })}\n            </Dropdown>\n        </>\n    );\n};\n\nexport default ToolbarDropdown;\n","import React from 'react';\nimport { Icon, DropdownMenu, DropdownMenuButton, useApi, useEventManager, useLoading } from 'react-components';\nimport { VIEW_LAYOUT } from 'proton-shared/lib/constants';\nimport { updateViewLayout } from 'proton-shared/lib/api/mailSettings';\nimport { c } from 'ttag';\n\nimport ToolbarDropdown from './ToolbarDropdown';\n\ninterface Props {\n    mailSettings: any;\n}\n\nconst LayoutDropdown = ({ mailSettings = {} }: Props) => {\n    const { ViewLayout = VIEW_LAYOUT.COLUMN } = mailSettings;\n\n    const api = useApi();\n    const { call } = useEventManager();\n    const [loading, withLoading] = useLoading();\n    const currentLayoutIcon = ViewLayout === VIEW_LAYOUT.COLUMN ? 'layout-columns' : 'layout-rows';\n\n    const updateLayout = async (viewLayout: number) => {\n        await api(updateViewLayout(viewLayout));\n        await call();\n    };\n\n    return (\n        <ToolbarDropdown\n            title={c('Action').t`Change layout`}\n            content={<Icon className=\"toolbar-icon\" name={currentLayoutIcon} />}\n        >\n            {() => (\n                <DropdownMenu>\n                    <DropdownMenuButton\n                        disabled={ViewLayout === VIEW_LAYOUT.COLUMN}\n                        loading={loading}\n                        className=\"alignleft\"\n                        onClick={() => withLoading(updateLayout(VIEW_LAYOUT.COLUMN))}\n                    >\n                        <Icon name=\"layout-columns\" className=\"mr0-5\" />\n                        {c('Action').t`Column layout`}\n                    </DropdownMenuButton>\n                    <DropdownMenuButton\n                        disabled={ViewLayout === VIEW_LAYOUT.ROW}\n                        loading={loading}\n                        className=\"alignleft\"\n                        onClick={() => withLoading(updateLayout(VIEW_LAYOUT.ROW))}\n                    >\n                        <Icon name=\"layout-rows\" className=\"mr0-5\" />\n                        {c('Action').t`Row layout`}\n                    </DropdownMenuButton>\n                </DropdownMenu>\n            )}\n        </ToolbarDropdown>\n    );\n};\n\nexport default LayoutDropdown;\n","import React from 'react';\nimport { Icon, useLoading, useNotifications, useEventManager, useApi } from 'react-components';\nimport { MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\nimport { labelMessages } from 'proton-shared/lib/api/messages';\nimport { labelConversations } from 'proton-shared/lib/api/conversations';\nimport { c } from 'ttag';\n\nimport ToolbarButton from './ToolbarButton';\nimport { getCurrentType } from '../../helpers/elements';\nimport { ELEMENT_TYPES } from '../../constants';\n\nconst { TRASH, SPAM, DRAFTS, ARCHIVE, SENT, INBOX, ALL_DRAFTS, ALL_SENT } = MAILBOX_LABEL_IDS;\n\ninterface Props {\n    labelID: string;\n    mailSettings: any;\n    selectedIDs: string[];\n}\n\nconst MoveButtons = ({ labelID = '', mailSettings = {}, selectedIDs = [] }: Props) => {\n    const { createNotification } = useNotifications();\n    const { call } = useEventManager();\n    const api = useApi();\n    const [loading, withLoading] = useLoading();\n    const type = getCurrentType({ mailSettings, labelID });\n\n    const handleMove = async (LabelID: string) => {\n        const action = type === ELEMENT_TYPES.CONVERSATION ? labelConversations : labelMessages;\n        await api(action({ LabelID, IDs: selectedIDs }));\n        await call();\n        createNotification({ text: c('Success').t`Elements moved` });\n    };\n\n    const displayTrash = ![DRAFTS, ALL_DRAFTS, TRASH].includes(labelID as MAILBOX_LABEL_IDS);\n    const displayInbox = ![SENT, ALL_SENT, DRAFTS, ALL_DRAFTS].includes(labelID as MAILBOX_LABEL_IDS);\n    const displayArchive = ![DRAFTS, ALL_DRAFTS, ARCHIVE].includes(labelID as MAILBOX_LABEL_IDS);\n    const displaySpam = ![SENT, ALL_SENT, SPAM].includes(labelID as MAILBOX_LABEL_IDS);\n\n    return (\n        <>\n            {displayTrash ? (\n                <ToolbarButton\n                    loading={loading}\n                    title={c('Action').t`Move to trash`}\n                    onClick={() => withLoading(handleMove(TRASH))}\n                >\n                    <Icon className=\"toolbar-icon mauto\" name=\"trash\" />\n                </ToolbarButton>\n            ) : null}\n            {displayInbox ? (\n                <ToolbarButton\n                    loading={loading}\n                    title={c('Action').t`Move to inbox`}\n                    onClick={() => withLoading(handleMove(INBOX))}\n                >\n                    <Icon className=\"toolbar-icon mauto\" name=\"inbox\" />\n                </ToolbarButton>\n            ) : null}\n            {displayArchive ? (\n                <ToolbarButton\n                    loading={loading}\n                    title={c('Action').t`Move to archive`}\n                    onClick={() => withLoading(handleMove(ARCHIVE))}\n                >\n                    <Icon className=\"toolbar-icon mauto\" name=\"archive\" />\n                </ToolbarButton>\n            ) : null}\n            {displaySpam ? (\n                <ToolbarButton\n                    loading={loading}\n                    title={c('Action').t`Move to spam`}\n                    onClick={() => withLoading(handleMove(SPAM))}\n                >\n                    <Icon className=\"toolbar-icon mauto\" name=\"spam\" />\n                </ToolbarButton>\n            ) : null}\n        </>\n    );\n};\n\nexport default MoveButtons;\n","import React from 'react';\nimport {\n    Icon,\n    useLoading,\n    useNotifications,\n    useEventManager,\n    useApi,\n    ConfirmModal,\n    ErrorButton,\n    useModals,\n    Alert\n} from 'react-components';\nimport { MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\nimport { deleteMessages, emptyLabel } from 'proton-shared/lib/api/messages';\nimport { deleteConversations } from 'proton-shared/lib/api/conversations';\nimport { c, msgid } from 'ttag';\n\nimport ToolbarButton from './ToolbarButton';\nimport { getCurrentType } from '../../helpers/elements';\nimport { ELEMENT_TYPES } from '../../constants';\n\nconst { TRASH, SPAM, DRAFTS, ALL_DRAFTS, ALL_MAIL, INBOX, SENT, ALL_SENT, ARCHIVE } = MAILBOX_LABEL_IDS;\n\ninterface Props {\n    labelID: string;\n    mailSettings: any;\n    selectedIDs: string[];\n}\n\nconst DeleteButton = ({ labelID = '', mailSettings = {}, selectedIDs = [] }: Props) => {\n    const { createNotification } = useNotifications();\n    const { createModal } = useModals();\n    const { call } = useEventManager();\n    const api = useApi();\n    const [loading, withLoading] = useLoading();\n    const displayDelete = [TRASH, SPAM, DRAFTS, ALL_DRAFTS, SENT, ALL_SENT].includes(labelID as MAILBOX_LABEL_IDS);\n    const displayEmpty = ![INBOX, SENT, ALL_SENT, ARCHIVE, ALL_MAIL].includes(labelID as MAILBOX_LABEL_IDS);\n    const type = getCurrentType({ mailSettings, labelID });\n\n    const handleDelete = async () => {\n        await new Promise((resolve, reject) => {\n            createModal(\n                <ConfirmModal\n                    title={c('Title').ngettext(msgid`Delete email`, `Delete emails`, selectedIDs.length)}\n                    confirm={(<ErrorButton type=\"submit\" icon={null}>{c('Action').t`Delete`}</ErrorButton>) as any}\n                    onConfirm={resolve}\n                    onClose={reject}\n                >\n                    <Alert type=\"warning\">\n                        {c('Info').ngettext(\n                            msgid`This action will permanently delete the selected email. Are you sure you want to delete this email?`,\n                            `This action will permanently delete the selected emails. Are you sure you want to delete these emails?`,\n                            selectedIDs.length\n                        )}\n                    </Alert>\n                </ConfirmModal>\n            );\n        });\n        const action = type === ELEMENT_TYPES.CONVERSATION ? deleteConversations : deleteMessages;\n        await api(action(selectedIDs));\n        await call();\n        createNotification({ text: c('Success').t`Elements deleted` });\n    };\n\n    const handleEmpty = async () => {\n        await new Promise((resolve, reject) => {\n            createModal(\n                <ConfirmModal\n                    title={c('Title').t`Empty folder`}\n                    confirm={(<ErrorButton type=\"submit\" icon={null}>{c('Action').t`Empty`}</ErrorButton>) as any}\n                    onConfirm={resolve}\n                    onClose={reject}\n                >\n                    <Alert type=\"warning\">{c('Info')\n                        .t`This action will permanently delete your emails. Are you sure you want to empty this folder?`}</Alert>\n                </ConfirmModal>\n            );\n        });\n        c;\n        await api(emptyLabel({ LabelID: labelID, AddressID: undefined }));\n        await call();\n        createNotification({ text: c('Success').t`Folder cleared` });\n    };\n\n    return (\n        <>\n            {displayDelete ? (\n                <ToolbarButton\n                    loading={loading}\n                    title={c('Action').t`Delete`}\n                    onClick={() => withLoading(handleDelete())}\n                >\n                    <Icon className=\"toolbar-icon mauto\" name=\"delete\" />\n                </ToolbarButton>\n            ) : null}\n            {displayEmpty ? (\n                <ToolbarButton\n                    loading={loading}\n                    title={c('Action').t`Empty folder`}\n                    onClick={() => withLoading(handleEmpty())}\n                >\n                    <Icon className=\"toolbar-icon mauto\" name=\"empty-folder\" />\n                </ToolbarButton>\n            ) : null}\n        </>\n    );\n};\n\nexport default DeleteButton;\n","import React from 'react';\nimport { DropdownMenu, DropdownMenuButton, Icon } from 'react-components';\nimport { c } from 'ttag';\n\nimport ToolbarDropdown from './ToolbarDropdown';\nimport { Sort } from '../../models/tools';\n\nconst ASC = 0;\nconst DESC = 1;\nconst TIME = 'Time';\nconst SIZE = 'Size';\n\nconst ICONS = {\n    [SIZE]: {\n        [ASC]: 'sort-small-large',\n        [DESC]: 'sort-large-small'\n    },\n    [TIME]: {\n        [ASC]: 'sort-old-new',\n        [DESC]: 'sort-new-old'\n    }\n};\n\ninterface Props {\n    loading?: boolean;\n    sort: Sort;\n    onSort: (sort: Sort) => void;\n}\n\nconst SortDropdown = ({ loading, sort: { sort, desc }, onSort }: Props) => {\n    return (\n        <ToolbarDropdown content={<Icon className=\"toolbar-icon\" name={ICONS[sort][desc ? DESC : ASC]} />}>\n            {() => (\n                <DropdownMenu>\n                    <DropdownMenuButton\n                        disabled={sort === SIZE && !desc}\n                        className=\"alignleft\"\n                        loading={loading}\n                        onClick={() => onSort({ sort: SIZE, desc: false })}\n                    >\n                        <Icon name={ICONS[SIZE][ASC]} className=\"mr0-5\" />\n                        {c('Action').t`Size: small to large`}\n                    </DropdownMenuButton>\n                    <DropdownMenuButton\n                        disabled={sort === SIZE && desc}\n                        className=\"alignleft\"\n                        loading={loading}\n                        onClick={() => onSort({ sort: SIZE, desc: true })}\n                    >\n                        <Icon name={ICONS[SIZE][DESC]} className=\"mr0-5\" />\n                        {c('Action').t`Size: large to small`}\n                    </DropdownMenuButton>\n                    <DropdownMenuButton\n                        disabled={sort === TIME && desc}\n                        className=\"alignleft\"\n                        loading={loading}\n                        onClick={() => onSort({ sort: TIME, desc: true })}\n                    >\n                        <Icon name={ICONS[TIME][DESC]} className=\"mr0-5\" />\n                        {c('Action').t`Date: new to old`}\n                    </DropdownMenuButton>\n                    <DropdownMenuButton\n                        disabled={sort === TIME && !desc}\n                        className=\"alignleft\"\n                        loading={loading}\n                        onClick={() => onSort({ sort: TIME, desc: false })}\n                    >\n                        <Icon name={ICONS[TIME][ASC]} className=\"mr0-5\" />\n                        {c('Action').t`Date: old to new`}\n                    </DropdownMenuButton>\n                </DropdownMenu>\n            )}\n        </ToolbarDropdown>\n    );\n};\n\nexport default SortDropdown;\n","import React from 'react';\nimport { DropdownMenu, DropdownMenuButton, Icon } from 'react-components';\nimport { c } from 'ttag';\n\nimport ToolbarDropdown from './ToolbarDropdown';\nimport { Filter } from '../../models/tools';\n\ninterface Props {\n    loading?: boolean;\n    filter: Filter;\n    onFilter: (filter: Filter) => void;\n}\n\nconst FilterDropdown = ({ loading, filter = {}, onFilter }: Props) => {\n    return (\n        <ToolbarDropdown content={<Icon className=\"toolbar-icon\" name=\"bullet-points\" />}>\n            {() => (\n                <DropdownMenu>\n                    <DropdownMenuButton\n                        disabled={Object.values(filter).length === 0}\n                        className=\"alignleft\"\n                        loading={loading}\n                        onClick={() => onFilter({})}\n                    >\n                        <Icon name=\"bullet-points\" className=\"mr0-5\" />\n                        {c('Action').t`Show all`}\n                    </DropdownMenuButton>\n                    <DropdownMenuButton\n                        disabled={filter.Unread === 1}\n                        className=\"alignleft\"\n                        loading={loading}\n                        onClick={() => onFilter({ Unread: 1 })}\n                    >\n                        <Icon name=\"unread\" className=\"mr0-5\" />\n                        {c('Action').t`Show unread`}\n                    </DropdownMenuButton>\n                    <DropdownMenuButton\n                        disabled={filter.Unread === 0}\n                        className=\"alignleft\"\n                        loading={loading}\n                        onClick={() => onFilter({ Unread: 0 })}\n                    >\n                        <Icon name=\"read\" className=\"mr0-5\" />\n                        {c('Action').t`Show read`}\n                    </DropdownMenuButton>\n                </DropdownMenu>\n            )}\n        </ToolbarDropdown>\n    );\n};\n\nexport default FilterDropdown;\n","import React from 'react';\nimport { Checkbox, DropdownMenu, DropdownMenuButton, Icon } from 'react-components';\nimport { c } from 'ttag';\n\nimport ToolbarDropdown from './ToolbarDropdown';\n\ninterface Props {\n    loading?: boolean;\n    disabled?: boolean;\n    checked: boolean;\n    onCheck: (checked?: boolean) => void;\n}\n\nconst SelectAll = ({ loading, disabled, checked, onCheck }: Props) => {\n    return (\n        <>\n            <Checkbox\n                className=\"flex pl1\"\n                checked={checked}\n                disabled={disabled}\n                loading={loading}\n                onChange={({ target }) => onCheck(target.checked)}\n            />\n            <ToolbarDropdown\n                disabled={disabled}\n                loading={loading}\n                title={c('Title').t`Open actions dropdown`}\n                content=\"\"\n            >\n                {() => (\n                    <DropdownMenu>\n                        <DropdownMenuButton className=\"alignleft\" onClick={() => onCheck()}>\n                            <Icon name=\"show-all-emails\" className=\"mr0-5\" />\n                            {c('Action').t`Select all`}\n                        </DropdownMenuButton>\n                        <DropdownMenuButton className=\"alignleft\" onClick={() => onCheck()}>\n                            <Icon name=\"unread\" className=\"mr0-5\" />\n                            {c('Action').t`All unread`}\n                        </DropdownMenuButton>\n                        <DropdownMenuButton className=\"alignleft\" onClick={() => onCheck()}>\n                            <Icon name=\"read\" className=\"mr0-5\" />\n                            {c('Action').t`All read`}\n                        </DropdownMenuButton>\n                        <DropdownMenuButton className=\"alignleft\" onClick={() => onCheck()}>\n                            <Icon name=\"star\" className=\"mr0-5\" />\n                            {c('Action').t`All unstarred`}\n                        </DropdownMenuButton>\n                        <DropdownMenuButton className=\"alignleft\" onClick={() => onCheck()}>\n                            <Icon name=\"starfull\" className=\"mr0-5\" />\n                            {c('Action').t`All starred`}\n                        </DropdownMenuButton>\n                    </DropdownMenu>\n                )}\n            </ToolbarDropdown>\n        </>\n    );\n};\n\nexport default SelectAll;\n","import React, { useState } from 'react';\nimport {\n    LabelModal,\n    SearchInput as UntypedSearchInput,\n    Icon,\n    useLabels,\n    useModals,\n    PrimaryButton,\n    classnames,\n    Tooltip,\n    useLoading,\n    useApi,\n    useNotifications,\n    useEventManager\n} from 'react-components';\nimport { LABEL_EXCLUSIVE, MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\nimport { c } from 'ttag';\nimport { normalize } from 'proton-shared/lib/helpers/string';\nimport { labelMessages } from 'proton-shared/lib/api/messages';\nimport { labelConversations } from 'proton-shared/lib/api/conversations';\n\nimport { ELEMENT_TYPES } from '../../constants';\nimport { Label } from '../../models/label';\n\nimport './MoveDropdown.scss';\n\nconst SearchInput = UntypedSearchInput as any;\n\nconst { INBOX, TRASH, SPAM, ARCHIVE } = MAILBOX_LABEL_IDS;\n\ninterface Props {\n    selectedIDs: string[];\n    type: string;\n    onClose: () => void;\n}\n\nconst MoveDropdown = ({ selectedIDs = [], type, onClose }: Props) => {\n    const { createNotification } = useNotifications();\n    const [loading, withLoading] = useLoading();\n    const api = useApi();\n    const { call } = useEventManager();\n    const { createModal } = useModals();\n    const [labels = []]: [Label[]] = useLabels();\n    const [search, updateSearch] = useState('');\n    const normSearch = normalize(search);\n    const folders = labels\n        .filter(({ Exclusive }) => Exclusive === LABEL_EXCLUSIVE.FOLDER)\n        .concat(\n            [\n                { ID: INBOX, Name: c('Mailbox').t`Inbox`, icon: 'inbox' },\n                { ID: ARCHIVE, Name: c('Mailbox').t`Archive`, icon: 'archive' },\n                { ID: SPAM, Name: c('Mailbox').t`Spam`, icon: 'spam' },\n                { ID: TRASH, Name: c('Mailbox').t`Trash`, icon: 'trash' }\n            ].filter(Boolean)\n        )\n        .filter(({ Name = '' }) => {\n            if (!search) {\n                return true;\n            }\n            const normName = normalize(Name);\n            return normName.includes(normSearch);\n        });\n\n    const handleMove = async (folder: Label) => {\n        const action = type === ELEMENT_TYPES.CONVERSATION ? labelConversations : labelMessages;\n        await api(action({ LabelID: folder.ID, IDs: selectedIDs }));\n        await call();\n        onClose();\n        createNotification({ text: c('Success').t`Elements moved to ${folder.Name}` });\n    };\n\n    return (\n        <div className=\"p1\">\n            <div className=\"flex flex-spacebetween flex-items-center mb1\">\n                <label htmlFor=\"filter-folders\" className=\"bold\">{c('Label').t`Move to`}</label>\n                <Tooltip title={c('Title').t`Create folder`}>\n                    <PrimaryButton\n                        className=\"pm-button--small pm-button--for-smallicon\"\n                        onClick={() => {\n                            createModal(<LabelModal type=\"folder\" label={null} />);\n                        }}\n                    >\n                        <Icon name=\"folder\" fill=\"light\" className=\"flex-item-noshrink mr0-25\" />+\n                    </PrimaryButton>\n                </Tooltip>\n            </div>\n            <div className=\"mb1\">\n                <SearchInput\n                    autoFocus={true}\n                    value={search}\n                    onChange={updateSearch}\n                    id=\"filter-folders\"\n                    placeholder={c('Placeholder').t`Filter folders`}\n                />\n            </div>\n            <div className=\"scroll-if-needed scroll-smooth-touch moveDropdown-list-container\">\n                <ul className=\"unstyled mt0 mb0\">\n                    {folders.map((folder, index) => {\n                        return (\n                            <li key={folder.ID} className={classnames([index < folders.length - 1 && 'border-bottom'])}>\n                                <button\n                                    type=\"button\"\n                                    disabled={loading}\n                                    className=\"w100 flex flex-nowrap flex-items-center pt0-5 pb0-5\"\n                                    onClick={() => withLoading(handleMove(folder))}\n                                >\n                                    <Icon name=\"folder\" color={folder.Color} className=\"flex-item-noshrink mr0-5\" />\n                                    <span className=\"ellipsis\" title={folder.Name}>\n                                        {folder.Name}\n                                    </span>\n                                </button>\n                            </li>\n                        );\n                    })}\n                </ul>\n            </div>\n        </div>\n    );\n};\n\nexport default MoveDropdown;\n","import React, { useState, ChangeEvent } from 'react';\nimport { c } from 'ttag';\nimport {\n    SearchInput as UntypedSearchInput,\n    Icon,\n    useLabels,\n    useModals,\n    PrimaryButton,\n    LabelModal,\n    classnames,\n    Tooltip,\n    useLoading,\n    useApi,\n    useNotifications,\n    Checkbox,\n    useEventManager,\n    generateUID\n} from 'react-components';\nimport { LABEL_EXCLUSIVE } from 'proton-shared/lib/constants';\nimport { labelMessages, unlabelMessages } from 'proton-shared/lib/api/messages';\nimport { labelConversations, unlabelConversations } from 'proton-shared/lib/api/conversations';\nimport { normalize } from 'proton-shared/lib/helpers/string';\n\nimport { ELEMENT_TYPES } from '../../constants';\nimport { Label } from '../../models/label';\n\nimport './LabelDropdown.scss';\n\nconst SearchInput = UntypedSearchInput as any;\n\ninterface Props {\n    selectedIDs: string[];\n    type: string;\n    onClose: () => void;\n}\n\nconst LabelDropdown = ({ selectedIDs = [], type, onClose }: Props) => {\n    const [uid] = useState(generateUID('label-dropdown'));\n    const { createNotification } = useNotifications();\n    const [loading, withLoading] = useLoading();\n    const api = useApi();\n    const { call } = useEventManager();\n    const { createModal } = useModals();\n    const [labels = []]: [Label[]] = useLabels();\n    const [search, updateSearch] = useState('');\n    const [lastChecked, setLastChecked] = useState(''); // Store ID of the last label ID checked\n    const [alsoArchive, updateAlsoArchive] = useState(false);\n    const [selectedLabelIDs, updateSelectedLabelIDs] = useState<{ [labelID: string]: boolean }>({}); // TODO\n\n    const normSearch = normalize(search);\n    const list = labels\n        .filter(({ Exclusive }) => Exclusive === LABEL_EXCLUSIVE.LABEL)\n        .filter(({ Name = '' }) => {\n            if (!search) {\n                return true;\n            }\n            const normName = normalize(Name);\n            return normName.includes(normSearch);\n        });\n\n    const handleApply = async () => {\n        const labelAction = type === ELEMENT_TYPES.MESSAGE ? labelMessages : labelConversations;\n        const unlabelAction = type === ELEMENT_TYPES.MESSAGE ? unlabelMessages : unlabelConversations;\n        // TODO to improve: we call label / unlabel too much\n        const promises = list.map(({ ID: LabelID = '' }) => {\n            if (selectedLabelIDs[LabelID]) {\n                return api(labelAction({ LabelID, IDs: selectedIDs }));\n            } else {\n                return api(unlabelAction({ LabelID, IDs: selectedIDs }));\n            }\n        });\n        await Promise.all(promises);\n        await call();\n        onClose();\n        createNotification({ text: c('Success').t`Labels applied` });\n    };\n\n    const handleCheck = (labelID: string) => ({ target, nativeEvent }: ChangeEvent) => {\n        const { shiftKey } = nativeEvent as any;\n        const labelIDs = [labelID];\n\n        if (lastChecked && shiftKey) {\n            const start = list.findIndex(({ ID }) => ID === labelID);\n            const end = list.findIndex(({ ID }) => ID === lastChecked);\n            labelIDs.push(...list.slice(Math.min(start, end), Math.max(start, end) + 1).map(({ ID = '' }) => ID));\n        }\n\n        setLastChecked(labelID);\n        const update = labelIDs.reduce((acc, ID) => {\n            acc[ID] = (target as HTMLInputElement).checked;\n            return acc;\n        }, Object.create(null));\n\n        console.log('handleCheck', selectedLabelIDs, update);\n\n        updateSelectedLabelIDs({ ...selectedLabelIDs, ...update });\n    };\n\n    return (\n        <div className=\"p1\">\n            <div className=\"flex flex-spacebetween flex-items-center mb1\">\n                <label htmlFor=\"filter-labels\" className=\"bold\">{c('Label').t`Label as`}</label>\n                <Tooltip title={c('Title').t`Create label`}>\n                    <PrimaryButton\n                        className=\"pm-button--small pm-button--for-smallicon\"\n                        onClick={() => {\n                            createModal(<LabelModal type=\"label\" label={null} />);\n                        }}\n                    >\n                        <Icon name=\"label\" fill=\"light\" className=\"flex-item-noshrink mr0-25\" />+\n                    </PrimaryButton>\n                </Tooltip>\n            </div>\n            <div className=\"mb1\">\n                <SearchInput\n                    autoFocus={true}\n                    value={search}\n                    onChange={updateSearch}\n                    id=\"filter-labels\"\n                    placeholder={c('Placeholder').t`Filter labels`}\n                />\n            </div>\n            <div className=\"scroll-if-needed scroll-smooth-touch mb1 labelDropdown-list-container\">\n                <ul className=\"unstyled mt0 mb0\">\n                    {list.map(({ ID = '', Name = '', Color = '' }, index) => {\n                        // The dropdown is several times in the view, native html ids has to be different each time\n                        const lineId = `${uid}-${ID}`;\n                        return (\n                            <li\n                                key={lineId}\n                                className={classnames([\n                                    'w100 flex flex-nowrap flex-spacebetween flex-items-center pt0-5 pb0-5',\n                                    index < list.length - 1 && 'border-bottom'\n                                ])}\n                            >\n                                <div className=\"flex flex-nowrap flex-spacebetween flex-items-center\">\n                                    <Icon name=\"label\" color={Color} className=\"flex-item-noshrink mr0-5\" />\n                                    <label htmlFor={lineId} title={Name} className=\"ellipsis\">\n                                        {Name}\n                                    </label>\n                                </div>\n                                <Checkbox\n                                    className=\"flex-item-noshrink\"\n                                    id={lineId}\n                                    checked={selectedLabelIDs[ID] || false}\n                                    onChange={handleCheck(ID)}\n                                />\n                            </li>\n                        );\n                    })}\n                </ul>\n            </div>\n            <div className=\"mb1 flex flex-spacebetween\">\n                <label htmlFor=\"alsoArchive\">{c('Label').t`Also archive`}</label>\n                <Checkbox\n                    id=\"alsoArchive\"\n                    checked={alsoArchive}\n                    onChange={({ target }) => updateAlsoArchive(target.checked)}\n                />\n            </div>\n            <div>\n                <PrimaryButton className=\"w100\" loading={loading} onClick={() => withLoading(handleApply())}>\n                    {c('Action').t`Apply`}\n                </PrimaryButton>\n            </div>\n        </div>\n    );\n};\n\nexport default LabelDropdown;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon } from 'react-components';\n\nimport ToolbarButton from './ToolbarButton';\n\ninterface Props {\n    onClick: () => void;\n}\n\nconst BackButton = ({ onClick }: Props) => {\n    return (\n        <ToolbarButton onClick={onClick}>\n            <Icon className=\"toolbar-icon mauto\" name=\"arrow-left\" />\n        </ToolbarButton>\n    );\n};\n\nBackButton.propTypes = {\n    onClick: PropTypes.func.isRequired\n};\n\nexport default BackButton;\n","import React from 'react';\nimport { Icon, DropdownMenu, DropdownMenuButton } from 'react-components';\nimport { c } from 'ttag';\n\nimport ToolbarButton from './ToolbarButton';\nimport ToolbarDropdown from './ToolbarDropdown';\n\nimport { Page } from '../../models/tools';\nimport { pageCount } from '../../helpers/paging';\n\ninterface Props {\n    loading: boolean;\n    page: Page;\n    onPage: (page: number) => void;\n}\n\nconst PagingControls = ({ loading, page, onPage }: Props) => {\n    const setPage = (pageNumber: number) => onPage(pageNumber);\n    const handleNext = () => setPage(page.page + 1);\n    const handlePrevious = () => setPage(page.page - 1);\n    const handlePage = (newPage: number) => () => setPage(newPage);\n    const count = pageCount(page);\n\n    return (\n        <>\n            <ToolbarButton\n                loading={loading}\n                disabled={page.page <= 0}\n                title={c('Action').t`Previous`}\n                onClick={handlePrevious}\n            >\n                <Icon className=\"toolbar-icon rotateZ-90 mauto\" name=\"caret\" />\n            </ToolbarButton>\n            <ToolbarDropdown\n                title={c('Action').t`Change layout`}\n                content={String(page.page + 1)}\n                disabled={count <= 1}\n                size=\"narrow\"\n            >\n                {() => (\n                    <DropdownMenu>\n                        {[...Array(count)].map((_, i) => (\n                            <DropdownMenuButton\n                                key={i}\n                                loading={loading}\n                                disabled={page.page === i}\n                                onClick={handlePage(i)}\n                            >\n                                {i + 1}\n                            </DropdownMenuButton>\n                        ))}\n                    </DropdownMenu>\n                )}\n            </ToolbarDropdown>\n            <ToolbarButton\n                loading={loading}\n                disabled={page.page >= count - 1}\n                title={c('Action').t`Next`}\n                onClick={handleNext}\n            >\n                <Icon className=\"toolbar-icon rotateZ-270 mauto\" name=\"caret\" />\n            </ToolbarButton>\n        </>\n    );\n};\n\nexport default PagingControls;\n","import React from 'react';\nimport { Icon } from 'react-components';\n\nimport ToolbarSeparator from './ToolbarSeparator';\nimport ReadUnreadButtons from './ReadUnreadButtons';\nimport ToolbarDropdown from './ToolbarDropdown';\nimport LayoutDropdown from './LayoutDropdown';\nimport MoveButtons from './MoveButtons';\nimport DeleteButton from './DeleteButton';\nimport SortDropdown from './SortDropdown';\nimport FilterDropdown from './FilterDropdown';\nimport SelectAll from './SelectAll';\nimport MoveDropdown from '../dropdown/MoveDropdown';\nimport LabelDropdown from '../dropdown/LabelDropdown';\nimport BackButton from './BackButton';\nimport PagingControls from './PagingControls';\nimport { getCurrentType } from '../../helpers/elements';\nimport { isColumnMode } from '../../helpers/mailSettings';\nimport { Page, Sort, Filter } from '../../models/tools';\n\nimport './Toolbar.scss';\n\ninterface Props {\n    loading?: boolean;\n    checkAll: boolean;\n    onCheckAll: () => void;\n    labelID: string;\n    elementID?: string;\n    selectedIDs: string[];\n    mailSettings: any;\n    page: Page;\n    onPage: (page: number) => void;\n    sort: Sort;\n    onSort: (sort: Sort) => void;\n    filter: Filter;\n    onFilter: (filter: Filter) => void;\n    onBack: () => void;\n}\n\nconst Toolbar = ({\n    labelID = '',\n    elementID,\n    checkAll,\n    onCheckAll,\n    mailSettings = {},\n    selectedIDs = [],\n    loading = false,\n    onSort,\n    sort,\n    onFilter,\n    filter,\n    onBack,\n    page,\n    onPage\n}: Props) => {\n    const type = getCurrentType({ mailSettings, labelID });\n\n    const columnMode = isColumnMode(mailSettings);\n\n    return (\n        <nav className=\"toolbar flex noprint flex-spacebetween\">\n            <div className=\"flex\">\n                {columnMode || !elementID ? (\n                    <SelectAll checked={checkAll} onCheck={onCheckAll} loading={loading} />\n                ) : (\n                    <BackButton onClick={onBack} />\n                )}\n                <ToolbarSeparator />\n                <ReadUnreadButtons labelID={labelID} mailSettings={mailSettings} selectedIDs={selectedIDs} />\n                <ToolbarSeparator />\n                <MoveButtons labelID={labelID} mailSettings={mailSettings} selectedIDs={selectedIDs} />\n                <DeleteButton labelID={labelID} mailSettings={mailSettings} selectedIDs={selectedIDs} />\n                <ToolbarSeparator />\n                <ToolbarDropdown autoClose={false} content={<Icon className=\"toolbar-icon\" name=\"folder\" />}>\n                    {({ onClose }) => <MoveDropdown selectedIDs={selectedIDs} type={type} onClose={onClose} />}\n                </ToolbarDropdown>\n                <ToolbarDropdown autoClose={false} content={<Icon className=\"toolbar-icon\" name=\"label\" />}>\n                    {({ onClose }) => <LabelDropdown selectedIDs={selectedIDs} type={type} onClose={onClose} />}\n                </ToolbarDropdown>\n            </div>\n            <div className=\"flex\">\n                <FilterDropdown loading={loading} filter={filter} onFilter={onFilter} />\n                <SortDropdown loading={loading} sort={sort} onSort={onSort} />\n                <LayoutDropdown mailSettings={mailSettings} />\n                <ToolbarSeparator />\n                <PagingControls loading={loading} page={page} onPage={onPage} />\n            </div>\n        </nav>\n    );\n};\n\nexport default Toolbar;\n","import React, { ReactElement, ChangeEvent } from 'react';\nimport { Icon, classnames } from 'react-components';\n\ninterface Props {\n    children: ReactElement | string;\n    className: string;\n    checked: boolean;\n    onChange: (event: ChangeEvent) => void;\n}\n\nconst ItemCheckbox = ({ children, className, ...rest }: Props) => {\n    return (\n        <label className={classnames(['relative', className])}>\n            <input type=\"checkbox\" className=\"item-checkbox inner-ratio-container cursor-pointer m0\" {...rest} />\n            <span className=\"item-icon flex-item-noshrink rounded50 bg-white inline-flex\">\n                <span className=\"mauto item-abbr\">{children}</span>\n                <span className=\"item-icon-fakecheck mauto\">\n                    <Icon name=\"on\" className=\"fill-white\" />\n                </span>\n            </span>\n        </label>\n    );\n};\n\nexport default ItemCheckbox;\n","import { Conversation } from '../models/conversation';\nimport { Recipient } from '../models/message';\n\nexport const getRecipientLabel = ({ Address, Name }: Recipient) => Name || Address || '';\n\nexport const getSendersLabels = ({ Senders = [] }: Conversation = {}) => Senders.map(getRecipientLabel);\n\nexport const getRecipientsLabels = ({ Recipients = [] }: Conversation) => Recipients.map(getRecipientLabel);\n","import { MIME_TYPES } from 'proton-shared/lib/constants';\nimport { hasBit, setBit } from 'proton-shared/lib/helpers/bitset';\nimport { identity } from 'proton-shared/lib/helpers/function';\n\nimport { MESSAGE_FLAGS, SIGNATURE_START } from '../../constants';\nimport { Message, Recipient, MessageExtended } from '../../models/message';\nimport { toText } from '../parserHtml';\n\nconst {\n    FLAG_RECEIVED,\n    FLAG_SENT,\n    FLAG_RECEIPT_REQUEST,\n    FLAG_IMPORTED,\n    FLAG_REPLIED,\n    FLAG_REPLIEDALL,\n    FLAG_FORWARDED,\n    FLAG_INTERNAL,\n    FLAG_AUTO,\n    FLAG_E2E,\n    FLAG_SIGN,\n    FLAG_PUBLIC_KEY\n} = MESSAGE_FLAGS;\n\nconst { PLAINTEXT, MIME } = MIME_TYPES;\n\n/**\n * Check if a message has a mime type\n */\nconst hasMimeType = (type: MIME_TYPES) => ({ MIMEType }: Message = {}) => MIMEType === type;\n\nexport const isMIME = hasMimeType(MIME);\nexport const isPlainText = hasMimeType(PLAINTEXT);\nexport const isHTML = hasMimeType(MIME_TYPES.DEFAULT);\n\n/**\n * Check if a message has a flag in the flags bitmap\n */\nexport const hasFlag = (flag: number) => ({ Flags = 0 }: Message = {}) => hasBit(Flags, flag);\n\nexport const isRequestReadReceipt = hasFlag(FLAG_RECEIPT_REQUEST);\nexport const isImported = hasFlag(FLAG_IMPORTED);\nexport const isInternal = hasFlag(FLAG_INTERNAL);\nexport const isExternal = (message: Message) => !isInternal(message);\nexport const isAuto = hasFlag(FLAG_AUTO);\nexport const isReceived = hasFlag(FLAG_RECEIVED);\nexport const isSent = hasFlag(FLAG_SENT);\nexport const isReplied = hasFlag(FLAG_REPLIED);\nexport const isRepliedAll = hasFlag(FLAG_REPLIEDALL);\nexport const isForwarded = hasFlag(FLAG_FORWARDED);\nexport const isSentAndReceived = hasFlag(FLAG_SENT | FLAG_RECEIVED);\nexport const isDraft = (message: Message = {}) => !isSent(message) && !isReceived(message);\nexport const isE2E = hasFlag(FLAG_E2E);\nexport const isSentEncrypted = hasFlag(FLAG_E2E | FLAG_SENT);\nexport const isInternalEncrypted = hasFlag(FLAG_E2E | FLAG_INTERNAL);\nexport const isSign = hasFlag(FLAG_SIGN);\nexport const isAttachPublicKey = hasFlag(FLAG_PUBLIC_KEY);\nexport const isExternalEncrypted = (message: Message) => isE2E(message) && !isInternal(message);\nexport const isPGPEncrypted = (message: Message = {}) => isExternal(message) && isReceived(message) && isE2E(message);\nexport const inSigningPeriod = ({ Time = 0 }: Message) => Time >= SIGNATURE_START;\n\nexport const isPGPInline = (message: Message) => isPGPEncrypted(message) && !isMIME(message);\n\nexport const isEO = (message: Message = {}) => !!message.Password;\n\nexport const addReceived = (Flags = 0) => setBit(Flags, MESSAGE_FLAGS.FLAG_RECEIVED);\n\nexport const getRecipientLabel = ({ Address, Name }: Recipient) => Name || Address || '';\nexport const getSenderLabel = ({ Sender = {} }: Message = {}) => getRecipientLabel(Sender);\nexport const getRecipients = ({ ToList = [], CCList = [], BCCList = [] }: Message = {}) => [\n    ...ToList,\n    ...CCList,\n    ...BCCList\n];\nexport const getRecipientsLabels = (message: Message = {}) => getRecipients(message).map(getRecipientLabel);\nexport const getRecipientsAddresses = (message: Message = {}) =>\n    getRecipients(message)\n        .map(({ Address }) => Address || '')\n        .filter(identity);\n\n/**\n * Extract and normalize recipients\n * @param {Object} message\n * @return {Array<String>}\n */\n// export const normalizeRecipients = (message = {}) => {\n//     return getRecipients(message).map(({ Address }) => normalizeEmail(Address));\n// };\n\n/**\n * Decrypt simple message body with password\n * @param {String} message.Body\n * @param {String} password\n * @return {String} body\n */\n// export async function decrypt({ Body = '' } = {}, password) {\n//     const message = await getMessage(Body);\n//     const { data: body } = await decryptMessage({\n//         message,\n//         passwords: [password]\n//     });\n//     return body;\n// }\n\n/**\n * Get the label ids to add for a message that has moved.\n *\n * Types definition\n *   - 1: a draft\n * if you move it to trash and back to inbox, it will go to draft instead\n *   - 2: is sent\n *  if you move it to trash and back, it will go back to sent\n *   - 3: is inbox and sent (a message sent to yourself)\n * if you move it from trash to inbox, it will acquire both the inbox and sent labels ( 0 and 2 ).\n *\n * @param {Message} message\n * @param {String} labelID label id to which it is moved\n * @returns {Array}\n */\n// export const getLabelIDsMoved = (message, labelID) => {\n//     const toInbox = labelID === MAILBOX_IDENTIFIERS.inbox;\n\n//     if (toInbox) {\n//         // This message is a draft, if you move it to trash and back to inbox, it will go to draft instead\n//         if (message.isDraft()) {\n//             return [MAILBOX_IDENTIFIERS.allDrafts, MAILBOX_IDENTIFIERS.drafts];\n//         }\n\n//         // If you move it from trash to inbox, it will acquire both the inbox and sent labels ( 0 and 2 ).\n//         if (message.isSentAndReceived()) {\n//             return [MAILBOX_IDENTIFIERS.inbox, MAILBOX_IDENTIFIERS.allSent, MAILBOX_IDENTIFIERS.sent];\n//         }\n\n//         // This message is sent, if you move it to trash and back, it will go back to sent\n//         if (message.isSent()) {\n//             return [MAILBOX_IDENTIFIERS.allSent, MAILBOX_IDENTIFIERS.sent];\n//         }\n//     }\n\n//     return [labelID];\n// };\n\n/**\n * Get date from message\n */\nexport const getDate = ({ Time = 0 }: Message = {}) => new Date(Time * 1000);\n\n/**\n * Check if these all messages shared the same sender (by email address)\n * @param {Array<message>} messages\n * @return {Boolean}\n */\n// export const sameSender = (messages = []) => {\n//     if (!messages.length) {\n//         return false;\n//     }\n\n//     const [{ Sender: firstSender } = {}] = messages;\n//     const firstAddress = normalizeEmail(firstSender.Address);\n\n//     return (\n//         messages.length ===\n//         messages.filter(({ Sender = {} }) => {\n//             return normalizeEmail(Sender.Address) === firstAddress;\n//         }).length\n//     );\n// };\n\nexport const getParsedHeaders = (message: Message, parameter: string) => {\n    const { ParsedHeaders = {} } = message;\n\n    if (parameter) {\n        return ParsedHeaders[parameter];\n    }\n\n    return ParsedHeaders;\n};\n\nexport const getListUnsubscribe = (message: Message) => {\n    return getParsedHeaders(message, 'List-Unsubscribe') || '';\n};\n\nexport const getListUnsubscribePost = (message: Message) => {\n    return getParsedHeaders(message, 'List-Unsubscribe-Post') || '';\n};\n\nexport const getAttachments = (message: Message = {}) => message.Attachments || [];\nexport const hasAttachments = (message: Message = {}) => getAttachments(message).length > 0;\nexport const attachmentsSize = (message: Message = {}) =>\n    getAttachments(message).reduce((acc, { Size = 0 } = {}) => acc + +Size, 0);\n\nexport const isSentAutoReply = ({ Flags, ParsedHeaders = {} }: Message) => {\n    if (!isSent({ Flags })) {\n        return false;\n    }\n\n    if (isAuto({ Flags })) {\n        return true;\n    }\n\n    const autoReplyHeaders = ['X-Autoreply', 'X-Autorespond', 'X-Autoreply-From', 'X-Mail-Autoreply'];\n    const autoReplyHeaderValues = [\n        ['Auto-Submitted', 'auto-replied'],\n        ['Precedence', 'auto_reply'],\n        ['X-Precedence', 'auto_reply'],\n        ['Delivered-To', 'autoresponder']\n    ];\n    // These headers are not always available. But we should check them to support\n    // outlook / mail autoresponses.\n    return (\n        autoReplyHeaders.some((h) => h in ParsedHeaders) ||\n        autoReplyHeaderValues.some(([k, v]) => k in ParsedHeaders && ParsedHeaders[k].toLowerCase() === v)\n    );\n};\n\n/**\n * We NEVER upconvert, if the user wants html: plaintext is actually fine as well\n */\nexport const getHTML = (message: MessageExtended) => (isHTML(message.data) ? message.content : undefined);\n\nexport const exportPlainText = (message: MessageExtended) => {\n    /*\n     * The replace removes any characters that are produced by the copying process (like zero width characters)\n     * See: http://www.berklix.org/help/majordomo/#quoted we want to avoid sending unnecessary quoted printable encodings\n     */\n    if (message.data?.MIMEType !== MIME_TYPES.DEFAULT) {\n        return message.content?.replace(/\\u200B/g, '');\n    }\n    return toText(message.content || '', true, true).replace(/\\u200B/g, '');\n};\n\n/**\n * Generates/Gets the plaintext body from the message. If the message is not composed in plaintext, it will downconvert\n * the html body to plaintext if downconvert is set. If downconvert is disabled it will return false.\n */\nexport const getPlainText = (message: MessageExtended, downconvert: boolean) => {\n    if (!isPlainText(message.data) && !downconvert) {\n        return undefined;\n    }\n    return exportPlainText(message);\n};\n","import TurndownService from 'turndown';\n\nimport { identity } from 'proton-shared/lib/helpers/function';\n\n/**\n * Transform HTML to text\n * Append lines before the content if it starts with a Signature\n */\nexport const toText = (html: string, appendLines = true, convertImages = false) => {\n    const turndownService = new TurndownService({\n        bulletListMarker: '-',\n        // strongDelimiter: '',\n        // emDelimiter: '',\n        hr: ''\n    });\n\n    const protonSignature = {\n        filter: (node: HTMLElement) => node.classList.contains('protonmail_signature_block'),\n        replacement(content: string) {\n            return `\\u200B${content.trim()}\\u200B`;\n        }\n    };\n\n    const replaceBreakLine = {\n        filter: 'br',\n        replacement(content: string, node: HTMLElement) {\n            // It matches the new line of a signature\n            if (node.parentElement?.nodeName === 'DIV' && node.parentElement.childElementCount === 1) {\n                return !node.parentElement.textContent ? '\\n\\n' : '\\n';\n            }\n\n            // ex <li>monique<br></li>\n            if (node.parentElement?.lastElementChild?.nodeName === 'BR' && node.parentElement.textContent) {\n                return node.parentElement.nodeName !== 'LI' ? '\\n' : '';\n            }\n\n            return '\\n\\n';\n        }\n    } as TurndownService.Rule;\n\n    const replaceImg = {\n        filter: 'img',\n        replacement(content: string, element: HTMLElement) {\n            if (!convertImages) {\n                return '';\n            }\n\n            const image = element as HTMLImageElement;\n\n            // needed for the automatic conversion done by pgp/inline, otherwise the conversion happens and people forget that they have selected this for some contacts\n            const attribute = image.alt || image.src;\n            return attribute ? `[${attribute}]` : '';\n        }\n    } as TurndownService.Rule;\n\n    const replaceAnchor = {\n        filter: 'a',\n        replacement(content: string, node: HTMLElement) {\n            return node.textContent;\n        }\n    } as TurndownService.Rule;\n\n    const replaceDiv = {\n        filter: ['div'],\n        replacement(content: string) {\n            return content;\n        }\n    } as TurndownService.Rule;\n\n    turndownService.use([\n        () => turndownService.addRule('replaceAnchor', replaceAnchor),\n        () => turndownService.addRule('replaceDiv', replaceDiv),\n        () => turndownService.addRule('replaceImg', replaceImg),\n        () => turndownService.addRule('replaceBreakLine', replaceBreakLine),\n        () => turndownService.addRule('protonSignature', protonSignature)\n    ]);\n\n    /**\n     * Override turndown to NOT escape any HTML. For example MONO_TLS_PROVIDER -> MONO\\_TLS\\_PROVIDER.\n     * Just return the value that is passed in.\n     * Fixes https://github.com/ProtonMail/Angular/issues/6556\n     */\n    turndownService.escape = identity;\n\n    const output = turndownService.turndown(html);\n\n    // It's the signature, we need some space\n    if (output.startsWith('\\u200B') && appendLines) {\n        return `\\n\\n\\n${output}\\n\\n`;\n    }\n\n    return output;\n};\n","import React from 'react';\nimport { Icon, useLoading, useApi, useEventManager, classnames } from 'react-components';\nimport { MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\nimport { labelMessages, unlabelMessages } from 'proton-shared/lib/api/messages';\nimport { labelConversations, unlabelConversations } from 'proton-shared/lib/api/conversations';\n\nimport { ELEMENT_TYPES } from '../../constants';\nimport { Element } from '../../models/element';\nimport { getLabelIds } from '../../helpers/elements';\n\ninterface Props {\n    element?: Element;\n    type: string;\n}\n\nconst ItemStar = ({ element = {}, type }: Props) => {\n    const api = useApi();\n    const isConversation = type === ELEMENT_TYPES.CONVERSATION;\n    const { call } = useEventManager();\n    const [loading, withLoading] = useLoading();\n    const labelIDs = getLabelIds(element);\n    const isStarred = labelIDs.includes(MAILBOX_LABEL_IDS.STARRED);\n    const iconName = isStarred ? 'starfull' : 'star';\n\n    const handleClick = async () => {\n        const action = isConversation\n            ? isStarred\n                ? unlabelConversations\n                : labelConversations\n            : isStarred\n            ? unlabelMessages\n            : labelMessages;\n        await api(action({ LabelID: MAILBOX_LABEL_IDS.STARRED, IDs: [element.ID] }));\n        await call();\n    };\n\n    return (\n        <button\n            disabled={loading}\n            type=\"button\"\n            className={classnames(['starbutton item-star inline-flex', isStarred && 'starbutton--is-starred'])}\n            onClick={() => withLoading(handleClick())}\n        >\n            <Icon name={iconName} fill=\"\" />\n        </button>\n    );\n};\n\nexport default ItemStar;\n","import React from 'react';\nimport { toMap } from 'proton-shared/lib/helpers/object';\nimport { orderBy } from 'proton-shared/lib/helpers/array';\nimport { Link } from 'react-router-dom';\nimport { Icon, classnames } from 'react-components';\n\nimport { Label } from '../../models/label';\nimport { getLabelIds } from '../../helpers/elements';\nimport { Element } from '../../models/element';\n\ninterface Props {\n    element: Element;\n    labels?: Label[];\n    max?: number;\n    onUnlabel?: (labelID: string) => void;\n    className?: string;\n}\n\nconst ItemLabels = ({ element, onUnlabel, max = 99, labels = [], className = '' }: Props) => {\n    const labelIDs = getLabelIds(element);\n    const labelsMap: { [labelID: string]: Label } = toMap(labels) as any;\n\n    return (\n        <div className={classnames(['inbl', className])}>\n            {orderBy(labelIDs.map((ID) => labelsMap[ID]).filter(Boolean), 'Order')\n                .slice(0, max)\n                .map(({ ID = '', Name = '', Color = '' }) => {\n                    const style = {\n                        backgroundColor: Color,\n                        borderColor: Color\n                    };\n                    const to = `/${ID}`;\n                    return (\n                        <span className=\"badgeLabel\" style={style} key={ID}>\n                            <Link to={to}>{Name}</Link>\n                            {onUnlabel ? (\n                                <button type=\"button\" onClick={() => onUnlabel(ID)}>\n                                    <Icon name=\"off\" />\n                                </button>\n                            ) : null}\n                        </span>\n                    );\n                })}\n        </div>\n    );\n};\n\nexport default ItemLabels;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon, classnames } from 'react-components';\n\nimport { ELEMENT_TYPES } from '../../constants';\nimport { hasAttachments } from '../../helpers/message/messages';\n\nconst ItemAttachmentIcon = ({ element = {}, type = ELEMENT_TYPES.CONVERSATION, className }) => {\n    const isConversation = type === ELEMENT_TYPES.CONVERSATION;\n    const hasAttachment = isConversation ? element.ContextNumAttachments : hasAttachments(element);\n\n    if (!hasAttachment) {\n        return null;\n    }\n\n    return <Icon name=\"attach\" fill=\"\" className={classnames(['fill-global-success', className])} />;\n};\n\nItemAttachmentIcon.propTypes = {\n    element: PropTypes.object,\n    type: PropTypes.oneOf([ELEMENT_TYPES.CONVERSATION, ELEMENT_TYPES.MESSAGE]).isRequired,\n    className: PropTypes.string\n};\n\nexport default ItemAttachmentIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { Icon } from 'react-components';\nimport { MAILBOX_LABEL_IDS, SHOW_MOVED } from 'proton-shared/lib/constants';\nimport { c } from 'ttag';\n\nimport { LABEL_IDS_TO_HUMAN } from '../../constants';\n\nconst { INBOX, TRASH, SPAM, ARCHIVE, SENT, DRAFTS } = MAILBOX_LABEL_IDS;\n\nconst getFolders = ({ ShowMoved }) => ({\n    [INBOX]: {\n        icon: 'inbox',\n        name: c('Mailbox').t`Inbox`,\n        to: '/inbox'\n    },\n    [TRASH]: {\n        icon: 'trash',\n        name: c('Mailbox').t`Trash`,\n        to: '/trash'\n    },\n    [SPAM]: {\n        icon: 'spam',\n        name: c('Mailbox').t`Spam`,\n        to: '/spam'\n    },\n    [ARCHIVE]: {\n        icon: 'archive',\n        name: c('Mailbox').t`Archive`,\n        to: '/archive'\n    },\n    [SENT]: {\n        icon: 'sent',\n        name: c('Mailbox').t`Sent`,\n        to:\n            ShowMoved & SHOW_MOVED.SENT\n                ? `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.ALL_SENT]}`\n                : `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.SENT]}`\n    },\n    [DRAFTS]: {\n        icon: 'drafts',\n        name: c('Mailbox').t`Drafts`,\n        to:\n            ShowMoved & SHOW_MOVED.DRAFTS\n                ? `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.ALL_DRAFTS]}`\n                : `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.DRAFTS]}`\n    }\n});\n\nconst ItemLocation = ({ message, mailSettings }) => {\n    const { LabelIDs = [] } = message;\n    const folders = getFolders(mailSettings);\n\n    return (\n        <>\n            {LabelIDs.filter((labelID) => folders[labelID]).map((labelID) => {\n                const { icon, name, to } = folders[labelID];\n                return (\n                    <Link to={to} className=\"mr0-25 flex-item-noshrink\" key={labelID} title={name}>\n                        <Icon name={icon} />\n                    </Link>\n                );\n            })}\n        </>\n    );\n};\n\nItemLocation.propTypes = {\n    message: PropTypes.object.isRequired,\n    mailSettings: PropTypes.object.isRequired\n};\n\nexport default ItemLocation;\n","import { format, formatDistanceToNow as dateFnsFormatDistanceToNow, isToday } from 'date-fns';\nimport { dateLocale } from 'proton-shared/lib/i18n';\n\nexport const formatSimpleDate = (date) => format(date, isToday(date) ? 'p' : 'PP', { locale: dateLocale });\n\nexport const formatFullDate = (date) => format(date, 'PPPPp', { locale: dateLocale });\n\nexport const formatDistanceToNow = (date) => dateFnsFormatDistanceToNow(date, { locale: dateLocale, addSuffix: true });\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { classnames } from 'react-components';\n\nimport { getDate } from '../../helpers/elements';\nimport { formatSimpleDate, formatFullDate, formatDistanceToNow } from '../../helpers/date';\n\nconst FORMATERS = {\n    simple: formatSimpleDate,\n    full: formatFullDate,\n    distance: formatDistanceToNow\n};\n\n// TODO: Update with a setInterval?\n\nconst ItemDate = ({ element, className, mode = 'simple' }) => {\n    const formater = FORMATERS[mode] || FORMATERS.distance;\n    return <span className={classnames(['item-date', className])}>{formater(getDate(element))}</span>;\n};\n\nItemDate.propTypes = {\n    element: PropTypes.object.isRequired,\n    className: PropTypes.string,\n    mode: PropTypes.string\n};\n\nexport default ItemDate;\n","import React from 'react';\nimport { Conversation } from '../../models/conversation';\n\ninterface Props {\n    conversation: Conversation;\n    className?: string;\n}\n\nconst NumMessages = ({ conversation, className }: Props) => {\n    // ContextNumMessages shoud not be used\n    const { NumMessages = 0 } = conversation;\n\n    if (NumMessages <= 1) {\n        return null;\n    }\n\n    return <span className={className}>({NumMessages})</span>;\n};\n\nexport default NumMessages;\n","import React from 'react';\nimport { classnames } from 'react-components';\n\nimport ItemStar from './ItemStar';\nimport { ELEMENT_TYPES } from '../../constants';\nimport ItemLabels from './ItemLabels';\nimport ItemAttachmentIcon from './ItemAttachmentIcon';\nimport ItemLocation from './ItemLocation';\nimport ItemDate from './ItemDate';\nimport NumMessages from '../conversation/NumMessages';\nimport { Label } from '../../models/label';\nimport { Element } from '../../models/element';\n\ninterface Props {\n    labels?: Label[];\n    element: Element;\n    mailSettings: any;\n    type: string;\n    senders: string;\n    unread: boolean;\n}\n\nconst ItemColumnLayout = ({ labels, element, mailSettings = {}, type, senders, unread }: Props) => {\n    const { Subject } = element;\n    const isConversation = type === ELEMENT_TYPES.CONVERSATION;\n\n    return (\n        <div className=\"flex-item-fluid flex flex-nowrap flex-column flex-spacebetween item-titlesender\">\n            <div className=\"flex\">\n                <div className=\"flex-item-fluid flex w0 pr1\">\n                    {isConversation ? (\n                        <NumMessages className={classnames(['mr0-25', unread && 'bold'])} conversation={element} />\n                    ) : (\n                        <ItemLocation message={element} mailSettings={mailSettings} />\n                    )}\n                    <span className={classnames(['inbl mw100 ellipsis', unread && 'bold'])}>{Subject}</span>\n                </div>\n                <ItemDate element={element} className={unread ? 'bold' : undefined} />\n            </div>\n            <div className=\"flex\">\n                <div className=\"flex-item-fluid flex pr1\">\n                    <span className={classnames(['inbl mw100 ellipsis', unread && 'bold'])}>{senders}</span>\n                </div>\n                <div className=\"item-icons\">\n                    <ItemLabels max={4} labels={labels} element={element} />\n                    {' ' /* This space is important to keep a small space between elements */}\n                    <ItemAttachmentIcon element={element} type={type} />\n                    {' ' /* This space is important to keep a small space between elements */}\n                    <ItemStar element={element} type={type} />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ItemColumnLayout;\n","import React from 'react';\nimport { classnames } from 'react-components';\n\nimport ItemStar from './ItemStar';\nimport { ELEMENT_TYPES } from '../../constants';\nimport ItemLabels from './ItemLabels';\nimport ItemAttachmentIcon from './ItemAttachmentIcon';\nimport ItemLocation from './ItemLocation';\nimport ItemDate from './ItemDate';\nimport NumMessages from '../conversation/NumMessages';\nimport humanSize from 'proton-shared/lib/helpers/humanSize';\nimport { Label } from '../../models/label';\nimport { Element } from '../../models/element';\n\ninterface Props {\n    labels?: Label[];\n    element: Element;\n    mailSettings: any;\n    type: string;\n    senders: string;\n    unread: boolean;\n}\n\nconst ItemRowLayout = ({ labels, element, mailSettings = {}, type, senders, unread }: Props) => {\n    const { Subject, Size } = element;\n    const isConversation = type === ELEMENT_TYPES.CONVERSATION;\n    const size = humanSize(Size);\n\n    return (\n        <div className=\"flex-item-fluid flex flex-nowrap flex-row flex-spacebetween item-titlesender\">\n            <div className={classnames(['w20 flex mauto pr1', unread && 'bold'])}>{senders}</div>\n            <div className=\"flex-item-fluid flex mauto\">\n                {isConversation ? (\n                    <NumMessages className={classnames(['mr0-25', unread && 'bold'])} conversation={element} />\n                ) : (\n                    <ItemLocation message={element} mailSettings={mailSettings} />\n                )}\n                <span className={classnames(['inbl mw100 ellipsis', unread && 'bold'])}>{Subject}</span>\n                <ItemLabels max={4} labels={labels} element={element} />\n                <ItemAttachmentIcon element={element} type={type} className=\"ml0-5\" />\n            </div>\n            <span className=\"mtauto mbauto mr1 ml1 ng-binding\">{size}</span>\n            <span className=\"mauto\">\n                <ItemDate element={element} className={unread ? 'bold' : undefined} />\n            </span>\n            <div className=\"mtauto mbauto ml0-5\">\n                <ItemStar element={element} type={type} />\n            </div>\n        </div>\n    );\n};\n\nexport default ItemRowLayout;\n","import React, { ChangeEvent } from 'react';\nimport { classnames } from 'react-components';\nimport { getInitial } from 'proton-shared/lib/helpers/string';\nimport { MAILBOX_LABEL_IDS, VIEW_LAYOUT } from 'proton-shared/lib/constants';\n\nimport ItemCheckbox from './ItemCheckbox';\nimport { getSendersLabels, getRecipientsLabels } from '../../helpers/conversation';\nimport { getSenderLabel, getRecipientsLabels as getMessageRecipientsLabels } from '../../helpers/message/messages';\nimport { getCurrentType, isUnread } from '../../helpers/elements';\nimport ItemColumnLayout from './ItemColumnLayout';\nimport ItemRowLayout from './ItemRowLayout';\nimport { Label } from '../../models/label';\nimport { Element } from '../../models/element';\nimport { ELEMENT_TYPES } from '../../constants';\n\nconst { SENT, ALL_SENT, DRAFTS, ALL_DRAFTS } = MAILBOX_LABEL_IDS;\n\ninterface Props {\n    labels?: Label[];\n    labelID: string;\n    elementID?: string;\n    mailSettings: any;\n    element: Element;\n    checked?: boolean;\n    onCheck: (event: ChangeEvent) => void;\n    onClick: (element: Element) => void;\n}\n\nconst Item = ({ labelID, labels, element, elementID, mailSettings = {}, checked = false, onCheck, onClick }: Props) => {\n    const { ID = '' } = element;\n    const displayRecipients = [SENT, ALL_SENT, DRAFTS, ALL_DRAFTS].includes(labelID as MAILBOX_LABEL_IDS);\n    const type = getCurrentType({ mailSettings, labelID });\n    const isConversation = type === ELEMENT_TYPES.CONVERSATION;\n    const senders = isConversation ? getSendersLabels(element) : [getSenderLabel(element)];\n    const recipients = isConversation ? getRecipientsLabels(element) : getMessageRecipientsLabels(element);\n\n    const { ViewLayout = VIEW_LAYOUT.COLUMN } = mailSettings;\n    const isColumnMode = ViewLayout === VIEW_LAYOUT.COLUMN;\n    const ItemLayout = isColumnMode ? ItemColumnLayout : ItemRowLayout;\n    const unread = isUnread(element);\n\n    const clickHandler = (event: React.MouseEvent) => {\n        const target = event.target as HTMLElement;\n        if (target.classList.contains('item-checkbox') || target.closest('.item-checkbox')) {\n            event.stopPropagation();\n            return;\n        }\n        onClick(element);\n    };\n\n    return (\n        <div\n            onClick={clickHandler}\n            className={classnames([\n                'flex flex-nowrap cursor-pointer',\n                isColumnMode ? 'item-container' : 'item-container-row',\n                elementID === ID && 'item-is-selected',\n                !unread && 'read'\n            ])}\n        >\n            <ItemCheckbox className=\"mr1 item-checkbox\" checked={checked} onChange={onCheck}>\n                {getInitial(displayRecipients ? recipients[0] : senders[0])}\n            </ItemCheckbox>\n            <ItemLayout\n                labels={labels}\n                element={element}\n                mailSettings={mailSettings}\n                type={type}\n                senders={(displayRecipients ? recipients : senders).join(', ')}\n                unread={unread}\n            />\n        </div>\n    );\n};\n\nexport default Item;\n","import React from 'react';\nimport { c } from 'ttag';\n\nimport { MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\nimport noResultSearchSvg from 'design-system/assets/img/shared/no-result-search.svg';\nimport noResultFolderSvg from 'design-system/assets/img/shared/no-result-folder.svg';\nimport noResultInboxSvg from 'design-system/assets/img/shared/no-result-inbox.svg';\n\ninterface Props {\n    labelID: string;\n}\n\nconst EmptyView = ({ labelID }: Props) => {\n    const isInbox = labelID === MAILBOX_LABEL_IDS.INBOX;\n    const isFolder = !isInbox;\n    const isSearch = false; // TODO: when the search will be implemented\n\n    return (\n        <div className=\"m2\">\n            <figure className=\"flex-item-fluid aligncenter p3\">\n                {isSearch && <img src={noResultSearchSvg} alt={c('Search - no results').t`No results found`} />}\n                {isFolder && <img src={noResultFolderSvg} alt={c('Search - no results').t`No messages found`} />}\n                {isInbox && <img src={noResultInboxSvg} alt={c('Search - no results').t`No messages found`} />}\n\n                <figcaption className=\"mt2\">\n                    <h3 className=\"bold\">\n                        {isSearch\n                            ? c('Search - no results').t`No results found`\n                            : isFolder\n                            ? c('Search - no results').t`No messages found`\n                            : c('Search - no results').t`No messages found`}\n                    </h3>\n                    <p data-if=\"folder\">\n                        {isSearch\n                            ? // TODO: Add a link on clear it when search will work\n                              c('Info').t`Search - no results: You can either update your search query or clear it`\n                            : isFolder\n                            ? c('Info').t`You do not have any messages here`\n                            : c('Info').t`Seems like you are all caught up for now`}\n                    </p>\n                </figcaption>\n            </figure>\n        </div>\n    );\n};\n\nexport default EmptyView;\n","import React, { useState, ChangeEvent } from 'react';\nimport { useLabels } from 'react-components';\n\nimport Item from './Item';\nimport { Element } from '../../models/element';\nimport EmptyView from '../view/EmptyView';\n\ninterface Props {\n    labelID: string;\n    elementID?: string;\n    mailSettings: any;\n    elements?: Element[];\n    checkedIDs?: string[];\n    onCheck: (IDs?: string[], checked?: boolean) => void;\n    onClick: (element: Element) => void;\n}\n\nconst List = ({ labelID, elementID, mailSettings = {}, elements = [], checkedIDs = [], onCheck, onClick }: Props) => {\n    const [labels] = useLabels();\n    const [lastChecked, setLastChecked] = useState(); // Store ID of the last element ID checked\n\n    const handleCheck = (elementID: string) => (event: ChangeEvent) => {\n        const target = event.target as HTMLInputElement;\n        const { shiftKey } = event.nativeEvent as any;\n        const elementIDs = [elementID];\n\n        if (lastChecked && shiftKey) {\n            const start = elements.findIndex(({ ID }) => ID === elementID);\n            const end = elements.findIndex(({ ID }) => ID === lastChecked);\n            elementIDs.push(\n                ...elements.slice(Math.min(start, end), Math.max(start, end) + 1).map(({ ID }) => ID || '')\n            );\n        }\n\n        setLastChecked(elementID);\n        onCheck(elementIDs, target.checked);\n    };\n\n    return elements.length === 0 ? (\n        <EmptyView labelID={labelID} />\n    ) : (\n        <>\n            {elements.map((element) => {\n                return (\n                    <Item\n                        labels={labels}\n                        labelID={labelID}\n                        key={element.ID}\n                        elementID={elementID}\n                        element={element}\n                        checked={checkedIDs.includes(element.ID || '')}\n                        onCheck={handleCheck(element.ID || '')}\n                        onClick={onClick}\n                        mailSettings={mailSettings}\n                    />\n                );\n            })}\n        </>\n    );\n};\n\nexport default List;\n","import React from 'react';\nimport { classnames } from 'react-components';\n\nimport { isPlainText } from '../../helpers/message/messages';\nimport { MessageExtended } from '../../models/message';\n\nimport './MessageBody.scss';\n\ninterface Props {\n    message: MessageExtended;\n}\n\nconst MessageBody = ({ message: { content = '', data: message = {} } }: Props) => {\n    const plain = isPlainText(message);\n    return (\n        <div\n            className={classnames(['message-content bodyDecrypted', plain && 'plain'])}\n            dangerouslySetInnerHTML={{ __html: content }}\n        />\n    );\n};\n\nexport default MessageBody;\n","import { VERIFICATION_STATUS } from '../constants';\n\nimport { isAuto, isImported, inSigningPeriod } from './message/messages';\n\nconst { SIGNED_AND_INVALID, SIGNED_AND_VALID, NOT_SIGNED } = VERIFICATION_STATUS;\n\n/**\n * Some complicated logic after internal discussions.\n * This function returns whether we should display a lock with check / warning (indicating the signature status)\n * or we just display a lock.\n * The following logic is applied:\n *  1. Old SENT messages (not imported, not autoresponse) are not signed\n *  2. If a SENT message has been correctly verified, a lonesome lock is displayed, unaccompanied by its check\n *      (because we don't consciously do key pinning here)\n *  3. If a SENT message doesn't have a signature, but should have, we display a warning. A SENT message should have a signature if:\n *      - it is not an autoreply AND\n *      - it is not an import AND\n *      - it is send after the time when we started signing all messages\n *  4. If a message fails the signature check, we display a warning\n *  5. If a (non-sent) message has been correctly verified, we display a check.\n *  6. Else we just display the appropriate lock.\n *      - this happens when there is no signature or it hasn't been verified (meaning unverified SENT message fall in this case).\n *  This logic is caused by sent message's signatures always being verified without requiring the user to enable key pinning\n *  (key pinning for your own keys happens as a consequence of our authentication method).\n *  Thus we don't want to display this check for people that don't understand key pinning, but still keep the\n *  same security.\n *  @return {() => boolean} whether to display the signature status\n */\nexport const displaySignatureStatus = ({ data: message = {}, verified = 0 }) => {\n    // TODO: const isSentByMe = message.isSentByMe();\n    const isSentByMe = false;\n\n    // Rule 4 + 5 + 6 for non-SENT messages\n    if (!isSentByMe) {\n        return verified === SIGNED_AND_INVALID || verified === SIGNED_AND_VALID;\n    }\n    // SENT messages\n    const imported = isImported(message.data);\n    const auto = isAuto(message.data);\n    const period = inSigningPeriod(message.data.Time);\n    // Rule 1:\n    if (!auto && !imported && !period) {\n        return false;\n    }\n    // Rule 2:\n    if (verified === SIGNED_AND_VALID) {\n        return false;\n    }\n    // Rule 3:\n    if (verified === NOT_SIGNED && !auto && !imported && period) {\n        // warning\n        return true;\n    }\n    // Rule 4 + 6:\n    return verified === SIGNED_AND_INVALID;\n};\n","import { c } from 'ttag';\n\nimport {\n    isSentEncrypted,\n    isAuto,\n    isSent,\n    isDraft,\n    isInternalEncrypted,\n    isExternalEncrypted,\n    inSigningPeriod,\n    isImported\n} from './message/messages';\n\nconst I18N = {\n    pm: [\n        c('Message encryption status').t`End-to-end encrypted message`,\n        // gettextCatalog.getString('End-to-end encrypted message', null, 'Message encryption status'),\n        c('Message encryption status').t`End-to-end encrypted message from verified address`,\n        // gettextCatalog.getString(\n        //     'End-to-end encrypted message from verified address',\n        //     null,\n        //     'Message encryption status'\n        // ),\n        c('Message encryption status').t`Sender verification failed`\n        // gettextCatalog.getString('Sender verification failed', null, 'Message encryption status')\n    ],\n    pgp: [\n        c('Message encryption status').t`PGP-encrypted message`,\n        // gettextCatalog.getString('PGP-encrypted message', null, 'Message encryption status'),\n        c('Message encryption status').t`PGP-encrypted message from verified address`,\n        // gettextCatalog.getString('PGP-encrypted message from verified address', null, 'Message encryption status'),\n        c('Message encryption status').t`Sender verification failed`\n        // gettextCatalog.getString('Sender verification failed', null, 'Message encryption status')\n    ],\n    clear: [\n        c('Message encryption status').t`Stored with zero access encryption`,\n        // gettextCatalog.getString('Stored with zero access encryption', null, 'Message encryption status'),\n        c('Message encryption status').t`PGP-signed message from verified address`,\n        // gettextCatalog.getString('PGP-signed message from verified address', null, 'Message encryption status'),\n        c('Message encryption status').t`Sender verification failed`\n        // gettextCatalog.getString('Sender verification failed', null, 'Message encryption status')\n    ],\n    sentEncrypted: [\n        c('Message encryption status').t`Sent by you with end-to-end encryption`,\n        // gettextCatalog.getString('Sent by you with end-to-end encryption', null, 'Message encryption status'),\n        c('Message encryption status').t`Sent by you with end-to-end encryption`,\n        // gettextCatalog.getString('Sent by you with end-to-end encryption', null, 'Message encryption status'),\n        c('Message encryption status').t`Sender verification failed`\n        // gettextCatalog.getString('Sender verification failed', null, 'Message encryption status')\n    ],\n    auto: [\n        c('Message encryption status').t`Sent by ProtonMail with zero access encryption`\n        // gettextCatalog.getString('Sent by ProtonMail with zero access encryption', null, 'Message encryption status')\n    ],\n    sentClear: [\n        c('Message encryption status').t`Stored with zero access encryption`,\n        // gettextCatalog.getString('Stored with zero access encryption', null, 'Message encryption status'),\n        c('Message encryption status').t`Stored with zero access encryption`,\n        // gettextCatalog.getString('Stored with zero access encryption', null, 'Message encryption status'),\n        c('Message encryption status').t`Sender verification failed`\n        // gettextCatalog.getString('Sender verification failed', null, 'Message encryption status')\n    ],\n    draft: [\n        c('Message encryption status').t`Encrypted message`\n        //gettextCatalog.getString('Encrypted message', null, 'Message encryption status')\n    ]\n};\n\nconst getFromType = (message) => {\n    if (isSentEncrypted(message)) {\n        return I18N.sentEncrypted;\n    }\n\n    if (isAuto(message)) {\n        return I18N.auto;\n    }\n\n    if (isSent(message)) {\n        return I18N.sentClear;\n    }\n\n    if (isDraft(message)) {\n        return I18N.draft;\n    }\n\n    if (isInternalEncrypted(message)) {\n        return I18N.pm;\n    }\n\n    if (isExternalEncrypted(message)) {\n        return I18N.pgp;\n    }\n\n    return I18N.clear;\n};\n\nexport const getEncryptionType = ({ data: message = {}, verified = 0 }) => {\n    const encType = getFromType(message);\n\n    if (encType.length > verified) {\n        // Old messages are not signed, so missing sender signatures should be treated like external missing signatures, no warning\n        if (!inSigningPeriod(message) && isSentEncrypted(message) && !isImported(message)) {\n            return encType[0];\n        }\n\n        return encType[verified];\n    }\n\n    return encType[0];\n};\n","import React from 'react';\nimport { Icon, Tooltip, Href, classnames } from 'react-components';\nimport { displaySignatureStatus } from '../../helpers/displaySignature';\nimport { isPGPEncrypted, isInternal, isSentEncrypted, isDraft, isAuto } from '../../helpers/message/messages';\nimport { getEncryptionType } from '../../helpers/encryptionType';\nimport { MessageExtended } from '../../models/message';\n\n// Reference: Angular/src/templates/message/encryptionStatus.tpl.html\n\ninterface Props {\n    message: MessageExtended;\n    className?: string;\n}\n\nconst MessageLock = ({ message, className: inputClassName }: Props) => {\n    const displaySignature = displaySignatureStatus(message);\n    const pgpEncrypted = isPGPEncrypted(message.data);\n\n    const tooltip = getEncryptionType(message);\n    const href = displaySignature\n        ? 'https://protonmail.com/support/knowledge-base/digital-signature/'\n        : pgpEncrypted\n        ? 'https://protonmail.com/support/knowledge-base/how-to-use-pgp'\n        : 'https://protonmail.com/support/knowledge-base/what-is-encrypted/';\n    // TODO: add lock-signed lock-warning in design system\n    // const icon = displaySignature ? (message.verified ? 'lock-signed' : 'lock-warning') : 'lock';\n    const icon = 'lock';\n    const internal =\n        isInternal(message.data) || isSentEncrypted(message.data) || isDraft(message.data) || isAuto(message.data);\n    const className = classnames([\n        inputClassName,\n        'no-pointer-events-children',\n        ...(displaySignature\n            ? [\n                  message.verified === 1 && 'valid-sig',\n                  message.verified !== 1 && 'invalid-sig',\n                  internal && 'color-pm-blue', // 'internal',\n                  pgpEncrypted && 'pgp'\n              ]\n            : ['nodecoration color-global-grey flex', internal && 'color-pm-blue'])\n    ]);\n\n    return (\n        <Tooltip title={tooltip} className=\"inbl\">\n            <Href className={className} href={href}>\n                <Icon name={icon} className=\"fill-currentColor\" />\n            </Href>\n        </Tooltip>\n    );\n};\n\nexport default MessageLock;\n","import React, { MouseEvent } from 'react';\nimport { c } from 'ttag';\n\nimport ItemStar from '../../list/ItemStar';\nimport ItemDate from '../../list/ItemDate';\nimport { ELEMENT_TYPES } from '../../../constants';\nimport MessageLock from '../MessageLock';\nimport { isSent } from '../../../helpers/message/messages';\nimport ItemLabels from '../../list/ItemLabels';\nimport ItemAttachmentIcon from '../../list/ItemAttachmentIcon';\nimport { MessageExtended } from '../../../models/message';\nimport { Label } from '../../../models/label';\n\ninterface Props {\n    message: MessageExtended;\n    labels: Label[];\n    onExpand: () => void;\n}\n\nconst HeaderCollapsed = ({ message, labels, onExpand }: Props) => {\n    const { Name, Address } = (message.data || {}).Sender || {};\n\n    const handleClick = (event: MouseEvent) => {\n        const target = event.target as HTMLElement;\n        if (target.classList.contains('item-star') || target.closest('.item-star')) {\n            event.stopPropagation();\n            return;\n        }\n\n        onExpand();\n    };\n\n    const inOutClass = isSent(message.data) ? 'is-outbound' : 'is-inbound';\n\n    return (\n        <div\n            className={`message-header message-header-collapsed flex flex-nowrap flex-items-center flex-spacebetween cursor-pointer ${inOutClass}`}\n            onClick={handleClick}\n        >\n            <div>\n                <span className=\"mr0-5\">{c('Label').t`From:`}</span>\n                <span className=\"bold mr0-5\" title={Name}>\n                    {Name}\n                </span>\n                <i title={Address}>&lt;{Address}&gt;</i>\n                <MessageLock message={message} />\n            </div>\n            <div>\n                <ItemAttachmentIcon element={message.data} type={ELEMENT_TYPES.MESSAGE} />\n                <ItemLabels element={message.data || {}} labels={labels} className=\"mr1\" />\n                <ItemDate className=\"mr1\" element={message.data || {}} mode=\"distance\" />\n                <ItemStar element={message.data} type={ELEMENT_TYPES.MESSAGE} />\n            </div>\n        </div>\n    );\n};\n\nexport default HeaderCollapsed;\n","import React from 'react';\nimport { Icon } from 'react-components';\nimport { c } from 'ttag';\nimport { MessageExtended } from '../../../models/message';\n\ninterface Props {\n    message: MessageExtended;\n    type: string;\n    onLoadImages: () => void;\n}\n\nconst ExtraImages = ({\n    message: { showRemoteImages = true, showEmbeddedImages = true },\n    type,\n    onLoadImages\n}: Props) => {\n    // Flags will not be setted if there is no images\n    if ((type === 'remote' && showRemoteImages !== false) || (type === 'embedded' && showEmbeddedImages !== false)) {\n        return null;\n    }\n\n    return (\n        <div className=\"bg-white rounded bordered-container p0-5 mb0-5 flex flex-nowrap\">\n            <Icon name=\"insert-image\" className=\"fill-global-grey mtauto mbauto\" />\n            <span className=\"pl0-5 pr0-5 flex-item-fluid\">\n                {type === 'remote'\n                    ? c('Action').t`This message contains remote content`\n                    : c('Action').t`This message contains embedded images`}\n            </span>\n            <a onClick={onLoadImages} className=\"bold\">\n                {c('Action').t`Load`}\n            </a>\n        </div>\n    );\n};\n\nexport default ExtraImages;\n","import React from 'react';\nimport { Icon, Href } from 'react-components';\nimport { c } from 'ttag';\nimport { getListUnsubscribe } from '../../../helpers/message/messages';\nimport { MessageExtended } from '../../../models/message';\n\ninterface Props {\n    message: MessageExtended;\n}\n\nconst ExtraUnsubscribe = ({ message: { data: message = {} } }: Props) => {\n    if (/*unsubscribed || */ !getListUnsubscribe(message)) {\n        return null;\n    }\n\n    return (\n        <div className=\"bg-white rounded bordered-container p0-5 mb0-5 flex flex-nowrap\">\n            <Icon name=\"email\" className=\"flex-item-noshrink fill-global-grey mtauto mbauto\" />\n            <span className=\"pl0-5 pr0-5 flex-item-fluid\">{c('Info').t`This message is from a mailing list`}</span>\n            <span className=\"flex-item-noshrink flex\">\n                <Href\n                    className=\"bold mr1 pl0-5 pr0-5\"\n                    href=\"https://protonmail.com/support/knowledge-base/auto-unsubscribe\"\n                >\n                    {c('Info').t`Learn more`}\n                </Href>\n                <a className=\"bold\">{c('Action').t`Unsubscribe`}</a>\n            </span>\n        </div>\n    );\n};\n\nexport default ExtraUnsubscribe;\n","import React from 'react';\nimport ExtraImages from '../extras/ExtraImages';\nimport ExtraUnsubscribe from '../extras/ExtraUnsubscribe';\nimport { MessageExtended } from '../../../models/message';\n\ninterface Props {\n    message: MessageExtended;\n    onLoadRemoteImages: () => void;\n    onLoadEmbeddedImages: () => void;\n}\n\nconst HeaderExtra = ({ message, onLoadRemoteImages, onLoadEmbeddedImages }: Props) => {\n    return (\n        <section className=\"ml1 mr1 mt0-5\">\n            {/* TODO: ExpirationTime */}\n            {/* TODO: SpamScore */}\n            {/* TODO: MIMEParsingFailed */}\n            {/* TODO: hasError */}\n            <ExtraUnsubscribe message={message} />\n            {/* TODO: requireReadReceiptConfirmation */}\n            {/* TODO: isAutoReply */}\n            {/* TODO: attachedPublicKey */}\n            {/* TODO: promptKeyPinning */}\n            {/* TODO: askResign */}\n            <ExtraImages message={message} type=\"remote\" onLoadImages={onLoadRemoteImages} />\n            <ExtraImages message={message} type=\"embedded\" onLoadImages={onLoadEmbeddedImages} />\n        </section>\n    );\n};\n\nexport default HeaderExtra;\n","import React from 'react';\nimport { c } from 'ttag';\nimport { Message } from '../../../models/message';\n\ninterface Props {\n    message?: Message;\n}\n\nconst HeaderRecipientsSimple = ({ message = {} }: Props) => {\n    const { ToList = [], CCList = [], BCCList = [] } = message;\n    const recipients = [...ToList, ...BCCList, ...CCList];\n\n    return (\n        <div className=\"flex\">\n            <span className=\"opacity-50 flex-self-vcenter container-to\">{c('Label').t`To:`}</span>\n            <span className=\"flex-self-vcenter mr1\">\n                {recipients.map(({ Address = '', Name = '' }, index) => {\n                    return (\n                        <span key={index} className=\"mr0-5\" title={Address}>\n                            {Name || Address}\n                            {index < recipients.length - 1 && ','}\n                        </span>\n                    );\n                })}\n            </span>\n        </div>\n    );\n};\n\nexport default HeaderRecipientsSimple;\n","import React from 'react';\nimport { c } from 'ttag';\nimport { Message, Recipient } from '../../../models/message';\n\ninterface Props {\n    message?: Message;\n}\n\ninterface ListProps {\n    list: Recipient[];\n}\n\nconst RecipientsList = ({ list }: ListProps) => (\n    <span className=\"flex-self-vcenter flex flex-column\">\n        {list.map(({ Address = '', Name = '' }, index) => {\n            return (\n                <span key={index}>\n                    {Name || Address} <span className=\"opacity-50\">&lt;{Address}&gt;</span>{' '}\n                </span>\n            );\n        })}\n    </span>\n);\n\nconst HeaderRecipientsDetails = ({ message = {} }: Props) => {\n    const { ToList = [], CCList = [], BCCList = [] } = message;\n\n    return (\n        <div className=\"flex flex-column\">\n            {ToList.length > 0 && (\n                <span className=\"flex\">\n                    <span className=\"opacity-50 container-to\">{c('Label').t`To:`}</span>\n                    <span className=\"flex-self-vcenter mr1\">\n                        <RecipientsList list={ToList} />\n                    </span>\n                </span>\n            )}\n            {CCList.length > 0 && (\n                <span className=\"flex\">\n                    <span className=\"opacity-50 container-to\">{c('Label').t`CC:`}</span>\n                    <span className=\"flex-self-vcenter mr1\">\n                        <RecipientsList list={CCList} />\n                    </span>\n                </span>\n            )}\n            {BCCList.length > 0 && (\n                <span className=\"flex\">\n                    <span className=\"opacity-50 container-to\">{c('Label').t`BCC:`}</span>\n                    <span className=\"flex-self-vcenter mr1\">\n                        <RecipientsList list={BCCList} />\n                    </span>\n                </span>\n            )}\n        </div>\n    );\n};\n\nexport default HeaderRecipientsDetails;\n","import React, { useState, ReactNode } from 'react';\nimport { generateUID, usePopperAnchor, DropdownButton, Dropdown } from 'react-components';\n\ninterface Props {\n    content?: ReactNode;\n    children: ({ onClose }: { onClose: () => void }) => ReactNode;\n    autoClose?: boolean;\n    [rest: string]: any;\n}\n\nconst HeaderDropdown = ({ content, children, autoClose, ...rest }: Props) => {\n    const [uid] = useState(generateUID('dropdown'));\n\n    const { anchorRef, isOpen, toggle, close } = usePopperAnchor();\n\n    return (\n        <>\n            <DropdownButton {...rest} buttonRef={anchorRef} isOpen={isOpen} onClick={toggle} caretClassName={null}>\n                {content}\n            </DropdownButton>\n            <Dropdown id={uid} autoClose={autoClose} isOpen={isOpen} anchorRef={anchorRef} onClose={close}>\n                {children({ onClose: close })}\n            </Dropdown>\n        </>\n    );\n};\n\nexport default HeaderDropdown;\n","import React, { MouseEvent } from 'react';\nimport { c } from 'ttag';\nimport { Icon, Group, ButtonGroup, useToggle } from 'react-components';\nimport humanSize from 'proton-shared/lib/helpers/humanSize';\n\nimport ItemStar from '../../list/ItemStar';\nimport ItemDate from '../../list/ItemDate';\nimport { ELEMENT_TYPES, MESSAGE_ACTIONS } from '../../../constants';\nimport ItemLabels from '../../list/ItemLabels';\nimport ItemLocation from '../../list/ItemLocation';\nimport MoveDropdown from '../../dropdown/MoveDropdown';\nimport LabelDropdown from '../../dropdown/LabelDropdown';\nimport HeaderExtra from './HeaderExtra';\nimport MessageLock from '../MessageLock';\nimport { isSent } from '../../../helpers/message/messages';\nimport HeaderRecipientsSimple from './HeaderRecipientsSimple';\nimport HeaderRecipientsDetails from './HeaderRecipientsDetails';\nimport ItemAttachmentIcon from '../../list/ItemAttachmentIcon';\nimport { MessageExtended } from '../../../models/message';\nimport { Label } from '../../../models/label';\nimport HeaderDropdown from './HeaderDropdown';\nimport { OnCompose } from '../../../containers/ComposerContainer';\n\nimport './MessageHeader.scss';\n\ninterface Props {\n    labels?: Label[];\n    mailSettings: any;\n    message: MessageExtended;\n    messageLoaded: boolean;\n    onLoadRemoteImages: () => void;\n    onLoadEmbeddedImages: () => void;\n    onCollapse: () => void;\n    onCompose: OnCompose;\n}\n\nconst HeaderExpanded = ({\n    labels,\n    message,\n    messageLoaded,\n    onLoadRemoteImages,\n    onLoadEmbeddedImages,\n    mailSettings,\n    onCollapse,\n    onCompose\n}: Props) => {\n    const { state: showDetails, toggle: toggleDetails } = useToggle();\n\n    const { Name, Address } = (message.data || {}).Sender || {};\n    const inOutClass = isSent(message.data) ? 'is-outbound' : 'is-inbound';\n\n    const handleClick = (event: MouseEvent) => {\n        if ((event.target as HTMLElement).closest('.stop-propagation')) {\n            event.stopPropagation();\n            return;\n        }\n\n        onCollapse();\n    };\n    const handleCompose = (action: MESSAGE_ACTIONS) => () => {\n        onCompose({\n            action,\n            referenceMessage: message\n        });\n    };\n\n    return (\n        <div className={`message-header message-header-expanded ${inOutClass}`}>\n            <div\n                className=\"flex flex-nowrap flex-items-center flex-spacebetween pt1 pl1 pr1 pb0-5 cursor-pointer\"\n                onClick={handleClick}\n            >\n                <div>\n                    <span className=\"mr0-5\">{c('Label').t`From:`}</span>\n                    <span className=\"bold mr0-5\" title={Name}>\n                        {Name}\n                    </span>\n                    <i title={Address}>&lt;{Address}&gt;</i>\n                    <MessageLock message={message} className=\"stop-propagation\" />\n                </div>\n                <div>\n                    <ItemDate element={message.data || {}} mode=\"distance\" />\n                </div>\n            </div>\n            <div className=\"flex flex-nowrap flex-items-start flex-spacebetween ml1 mr1 mb0-5\">\n                {showDetails ? (\n                    <HeaderRecipientsDetails message={message.data} />\n                ) : (\n                    <HeaderRecipientsSimple message={message.data} />\n                )}\n                <div>\n                    <ItemAttachmentIcon element={message.data || {}} type={ELEMENT_TYPES.MESSAGE} />\n                    {' ' /* This space is important to keep a small space between elements */}\n                    <ItemLabels max={4} element={message.data || {}} labels={labels} />\n                    {' ' /* This space is important to keep a small space between elements */}\n                    <ItemLocation message={message.data || {}} mailSettings={mailSettings} />\n                    {' ' /* This space is important to keep a small space between elements */}\n                    <ItemStar element={message.data || {}} type={ELEMENT_TYPES.MESSAGE} />\n                </div>\n            </div>\n            {showDetails ? (\n                <>\n                    <div className=\"ml1 mr1 mb0-5\">\n                        <span className=\"mr0-5\">{c('Label').t`Size:`}</span>\n                        <span>{humanSize((message.data || {}).Size || 0)}</span>\n                    </div>\n                    <div className=\"ml1 mr1 mb0-5\">\n                        <ItemDate element={message.data || {}} mode=\"full\" />\n                    </div>\n                </>\n            ) : null}\n            <div className=\"flex flex-spacebetween ml1 mr1 mb1 flex-nowrap\">\n                <a onClick={toggleDetails} className=\"bold flex-self-vcenter\">\n                    {showDetails ? c('Action').t`Hide details` : c('Action').t`Show details`}\n                </a>\n                <div>\n                    <Group className=\"mr1\">\n                        <HeaderDropdown autoClose={false} content={<Icon name=\"folder\" />}>\n                            {({ onClose }) => (\n                                <MoveDropdown\n                                    selectedIDs={[(message.data || {}).ID || '']}\n                                    type={ELEMENT_TYPES.MESSAGE}\n                                    onClose={onClose}\n                                />\n                            )}\n                        </HeaderDropdown>\n                        <HeaderDropdown autoClose={false} content={<Icon name=\"label\" />}>\n                            {({ onClose }) => (\n                                <LabelDropdown\n                                    selectedIDs={[(message.data || {}).ID || '']}\n                                    type={ELEMENT_TYPES.MESSAGE}\n                                    onClose={onClose}\n                                />\n                            )}\n                        </HeaderDropdown>\n                    </Group>\n\n                    <Group>\n                        <ButtonGroup disabled={!messageLoaded} onClick={handleCompose(MESSAGE_ACTIONS.REPLY)}>\n                            <Icon name=\"reply\" />\n                        </ButtonGroup>\n                        <ButtonGroup disabled={!messageLoaded} onClick={handleCompose(MESSAGE_ACTIONS.REPLY_ALL)}>\n                            <Icon name=\"reply-all\" />\n                        </ButtonGroup>\n                        <ButtonGroup disabled={!messageLoaded} onClick={handleCompose(MESSAGE_ACTIONS.FORWARD)}>\n                            <Icon name=\"forward\" />\n                        </ButtonGroup>\n                    </Group>\n                </div>\n            </div>\n            <HeaderExtra\n                message={message}\n                onLoadRemoteImages={onLoadRemoteImages}\n                onLoadEmbeddedImages={onLoadEmbeddedImages}\n            />\n        </div>\n    );\n};\n\nexport default HeaderExpanded;\n","export const getAttachment = (attachmentID) => ({\n    method: 'get',\n    url: `attachments/${attachmentID}`,\n    output: 'arrayBuffer'\n});\n","import {\n    binaryStringToArray,\n    concatArrays,\n    decodeBase64,\n    decryptMessage,\n    decryptSessionKey,\n    getMessage\n} from 'pmcrypto';\n\nimport { getAttachment } from '../../api/attachments';\nimport { MessageExtended } from '../../models/message';\nimport { Attachment, AttachmentData } from '../../models/attachment';\nimport { AttachmentsCache } from '../../hooks/useAttachments';\nimport { Api, Binary } from '../../models/utils';\n\n// Reference: Angular/src/app/attachments/services/AttachmentLoader.js\n\nexport interface SessionKey {\n    data: Binary;\n    algorithm?: string;\n}\n\n// TODO: Handle isOutside()\n\nexport const decrypt = async (encryptedBinaryBuffer: ArrayBuffer, sessionKey: SessionKey): Promise<AttachmentData> => {\n    const encryptedBinary = new Uint8Array(encryptedBinaryBuffer);\n\n    try {\n        return await decryptMessage({\n            message: await getMessage(encryptedBinary),\n            sessionKeys: [sessionKey],\n            format: 'binary'\n        });\n    } catch (err) {\n        console.error(err);\n        throw err;\n    }\n};\n\nexport const getRequest = ({ ID }: Attachment = {}, api: Api): Promise<ArrayBuffer> => {\n    // if (isOutside()) {\n    //     const decryptedToken = eoStore.getToken();\n    //     const token = $stateParams.tag;\n    //     return Eo.attachment(decryptedToken, token, ID);\n    // }\n\n    return api(getAttachment(ID));\n};\n\nexport const getSessionKey = async (attachment: Attachment, message: MessageExtended): Promise<SessionKey> => {\n    // if (attachment.sessionKey) {\n    //     return attachment;\n    // }\n\n    const keyPackets = binaryStringToArray(decodeBase64(attachment.KeyPackets));\n    const options: any = { message: await getMessage(keyPackets) };\n\n    // if (isOutside()) {\n    //     options.passwords = [eoStore.getPassword()];\n    // } else {\n    // options.privateKeys = keysModel.getPrivateKeys(message.AddressID);\n    options.privateKeys = message.privateKeys;\n    // }\n\n    const sessionKey = await decryptSessionKey(options);\n\n    return sessionKey;\n};\n\nexport const getDecryptedAttachment = async (\n    attachment: Attachment,\n    message: MessageExtended,\n    api: Api\n): Promise<AttachmentData> => {\n    const encryptedBinary = await getRequest(attachment, api);\n    try {\n        const sessionKey = await getSessionKey(attachment, message);\n        return await decrypt(encryptedBinary, sessionKey);\n    } catch (error) {\n        const blob = concatArrays([\n            binaryStringToArray(decodeBase64(attachment.KeyPackets)),\n            new Uint8Array(encryptedBinary)\n        ]);\n        // Fallback download raw attachment\n        throw { data: attachment, binary: blob, error };\n    }\n};\n\nexport const getAndVerify = async (\n    attachment: Attachment = {},\n    message: MessageExtended = {},\n    reverify = false,\n    cache: AttachmentsCache,\n    api: Api\n): Promise<AttachmentData> => {\n    let attachmentdata: AttachmentData;\n\n    const attachmentID = attachment.ID || '';\n\n    if (attachment.Preview) {\n        return { data: attachment.Preview };\n    }\n\n    if (cache.has(attachmentID)) {\n        attachmentdata = cache.get(attachmentID) as AttachmentData;\n    } else {\n        attachmentdata = await getDecryptedAttachment(attachment, message, api);\n\n        if (reverify) {\n            // await verify(attachment, newAttachment, message, signatures, signatureCache));\n        }\n    }\n\n    cache.set(attachmentID, attachmentdata);\n\n    return attachmentdata;\n};\n\nexport const get = (\n    attachment: Attachment = {},\n    message: MessageExtended = {},\n    cache: AttachmentsCache,\n    api: Api\n): Promise<AttachmentData> => getAndVerify(attachment, message, false, cache, api);\n\nexport const reverify = (\n    attachment: Attachment = {},\n    message: MessageExtended = {},\n    cache: AttachmentsCache,\n    api: Api\n): Promise<AttachmentData> => getAndVerify(attachment, message, true, cache, api);\n","import JSZip from 'jszip';\nimport downloadFile from 'proton-shared/lib/helpers/downloadFile';\n\nimport { MessageExtended, Message } from '../../models/message';\nimport { Attachment } from '../../models/attachment';\nimport { getAndVerify } from './attachmentLoader';\nimport { AttachmentsCache } from '../../hooks/useAttachments';\nimport { Api, Binary } from '../../models/utils';\n\ninterface Download {\n    attachment: Attachment;\n    data: Binary;\n    isError?: boolean;\n}\n\n/**\n * Format attachment for the download\n */\nconst formatDownload = async (\n    attachment: Attachment,\n    message: MessageExtended,\n    cache: AttachmentsCache,\n    api: Api\n): Promise<Download> => {\n    try {\n        const { data } = await getAndVerify(attachment, message, false, cache, api);\n        return {\n            attachment,\n            data\n        };\n    } catch (e) {\n        // If the decryption fails we download the encrypted version\n        if (e.data) {\n            return {\n                attachment: {\n                    Name: `${attachment.Name}.pgp`,\n                    MIMEType: 'application/pgp',\n                    ID: attachment.ID\n                },\n                data: e.data,\n                isError: true\n            };\n        }\n        throw e;\n    }\n};\n\n/**\n * Generate a download for an attachment\n */\nconst generateDownload = async (download: Download /*, message: MessageExtended*/) => {\n    // TODO: uncomment\n    // try {\n    //     await checkAllSignatures(message, [attachment]);\n    // } catch (e) {\n    //     // swallow as the user is informed already by a confirmation and actually caused this error\n    //     return;\n    // }\n\n    downloadFile(new Blob([download.data], { type: download.attachment.MIMEType }), download.attachment.Name);\n};\n\n/**\n * Download an attachment\n */\nexport const download = async (\n    attachment: Attachment,\n    message: MessageExtended,\n    cache: AttachmentsCache,\n    api: Api\n): Promise<void> => {\n    const download = await formatDownload(attachment, message, cache, api);\n\n    // TODO: uncomment\n    // if (download.isError) {\n    //     if (!(await allowDownloadBrokenAtt())) {\n    //         return; // We don't want to download it\n    //     }\n    // }\n\n    return generateDownload(download);\n};\n\n/**\n * The attachment's Name is not uniq we need a uniq name in order\n * to make the zip. The lib doesn't allow duplicates\n */\nconst formatDownloadAll = async (message: MessageExtended, cache: AttachmentsCache, api: Api): Promise<Download[]> => {\n    const { Attachments = [] } = message.data || {};\n    const { list }: { list: Attachment[] } = Attachments.reduce(\n        (acc: any, att) => {\n            const name = att.Name || '';\n            if (!acc.map[name]) {\n                acc.map[name] = { index: 0 };\n            } else {\n                acc.map[name].index++;\n                // We can have an extension\n                const currentName = name.split('.');\n                const ext = currentName.pop();\n                const newName = `${currentName.join('.')} (${acc.map[name].index}).${ext}`;\n                att.Name = newName;\n            }\n            acc.list.push(att);\n            return acc;\n        },\n        { list: [], map: {} }\n    );\n\n    return Promise.all(list.map((att) => formatDownload(att, message, cache, api)));\n};\n\nconst getZipAttachmentName = (message: Message = {}) => `Attachments-${message.Subject}.zip`;\n\n/**\n * Download all attachments as a zipfile\n */\nexport const downloadAll = async (message: MessageExtended = {}, cache: AttachmentsCache, api: Api): Promise<void> => {\n    const list = await formatDownloadAll(message, cache, api);\n\n    // TODO: uncomment\n    // try {\n    //     await checkAllSignatures(message, list);\n    // } catch (e) {\n    //     // swallow as the user is informed already by a confirmation and actually caused this error\n    //     return;\n    // }\n\n    // TODO: uncomment\n    // // Detect if we have at least one error\n    // if (list.some(({ isError }) => isError)) {\n    //     if (!(await allowDownloadBrokenAtt())) {\n    //         return; // We don't want to download it\n    //     }\n    // }\n\n    const zip = new JSZip();\n    list.forEach(({ attachment: { Name = '' }, data }) => zip.file(Name, data));\n    const content = await zip.generateAsync({ type: 'blob' });\n    downloadFile(content, getZipAttachmentName(message.data));\n};\n","import { useCache } from 'react-components';\nimport { AttachmentData } from '../models/attachment';\n\nconst CACHE_KEY = 'Attachments';\n\n// TODO: Use a listenable cache to be able to get reactive data from views\n\nexport type AttachmentsCache = Map<string, AttachmentData>;\n\nexport const useAttachmentsCache = (): AttachmentsCache => {\n    const globalCache = useCache();\n\n    if (!globalCache.has(CACHE_KEY)) {\n        globalCache.set(CACHE_KEY, new Map());\n    }\n\n    return globalCache.get(CACHE_KEY);\n};\n","import React, { useState } from 'react';\nimport humanSize from 'proton-shared/lib/helpers/humanSize';\nimport { Icon, classnames, useApi } from 'react-components';\nimport { MessageExtended } from '../../models/message';\nimport { isEmbeddedLocal } from '../../helpers/attachment/attachments';\nimport { Attachment } from '../../models/attachment';\nimport { download } from '../../helpers/attachment/attachmentDownloader';\nimport { useAttachmentsCache } from '../../hooks/useAttachments';\n\n// Reference: Angular/src/templates/attachments/attachmentElement.tpl.html\n\nconst OUTER_MAP_CLASSNAME: { [key: string]: string } = {\n    zip: 'file-rar-zip',\n    mp3: 'file-video',\n    javascript: 'file-unknown',\n    vcard: 'file-unknown',\n    xls: 'file-xls',\n    mov: 'file-video',\n    pdf: 'file-pdf',\n    power: 'file-ppt',\n    word: 'file-doc'\n};\n\nconst INNER_MAP_CLASSNAME: { [key: string]: string } = {\n    'pgp-keys': 'fa-key'\n};\n\nconst getFileIconType = ({ MIMEType = '' }: Attachment) => {\n    const key = Object.keys(OUTER_MAP_CLASSNAME).find((key) => MIMEType.includes(key));\n    return OUTER_MAP_CLASSNAME[key || ''] || '';\n};\n\nconst getInnerFileIconType = ({ MIMEType = '' }: Attachment) => {\n    const key = Object.keys(INNER_MAP_CLASSNAME).find((key) => MIMEType.includes(key));\n    return INNER_MAP_CLASSNAME[key || ''] || '';\n};\n\ninterface Props {\n    attachment: Attachment;\n    message: MessageExtended;\n}\n\nconst MessageAttachment = ({ attachment, message }: Props) => {\n    const cache = useAttachmentsCache();\n    const api = useApi();\n    const [showLoader, setShowLoader] = useState(false);\n    const [showInstant, setShowInstant] = useState(false);\n\n    const humanAttachmentSize = humanSize(attachment.Size);\n\n    const outerIcon = getFileIconType(attachment) || 'file-image';\n    const single = !getInnerFileIconType(attachment);\n    const isEmbedded = isEmbeddedLocal(attachment);\n\n    const classNames = classnames([\n        'listAttachments-icon listAttachments-signature-icon mauto file-outer-icon',\n        single && 'single',\n        isEmbedded && 'is-embedded'\n    ]);\n\n    const clickHandler = async () => {\n        setShowLoader(true);\n        await download(attachment, message, cache, api);\n        setShowLoader(false);\n        setShowInstant(true);\n    };\n\n    const icon = showLoader ? '' : showInstant ? 'download' : outerIcon;\n    const showInner = !single && !showLoader && !showInstant;\n\n    return (\n        <li className=\"mr1 mb1\">\n            <a\n                className=\"message-attachment inline-flex flex-nowrap mw100 pm-button listAttachments-item relative no-pointer-events-children\"\n                title={`${attachment.Name} ${humanAttachmentSize}`}\n                onClick={clickHandler}\n            >\n                <span className=\"flex flex-item-noshrink message-attachmentIcon relative flex\">\n                    <Icon name={icon} size={20} className={classNames} aria-busy={showLoader} />\n                    {showInner && <Icon name=\"key\" className=\"file-inner-icon mauto\" />}\n                </span>\n                <span className=\"inbl ellipsis flex flex-column message-attachmentInfo\">\n                    <span className=\"bl ellipsis mw100\">{attachment.Name}</span>\n                    <span className=\"bl message-attachmentSize\">{humanAttachmentSize}</span>\n                </span>\n            </a>\n        </li>\n    );\n};\n\nexport default MessageAttachment;\n","import { Attachment } from '../../models/attachment';\n\nexport const isEmbeddedLocal = ({\n    Headers: { 'content-disposition': disposition, embedded } = {}\n}: Attachment = {}) => {\n    return disposition === 'inline' || Number(embedded) === 1;\n};\n","import React, { useState } from 'react';\nimport { c, msgid } from 'ttag';\nimport { Icon, useApi } from 'react-components';\nimport humanSize from 'proton-shared/lib/helpers/humanSize';\n\nimport { attachmentsSize, getAttachments } from '../../helpers/message/messages';\nimport MessageAttachment from './MessageAttachment';\nimport { MessageExtended } from '../../models/message';\nimport { useAttachmentsCache } from '../../hooks/useAttachments';\nimport { downloadAll } from '../../helpers/attachment/attachmentDownloader';\n\ninterface Props {\n    message: MessageExtended;\n}\n\nconst MessageFooter = ({ message }: Props) => {\n    const cache = useAttachmentsCache();\n    const api = useApi();\n    const [showLoader, setShowLoader] = useState(false);\n    const [showInstant, setShowInstant] = useState(false);\n\n    const humanAttachmentsSize = humanSize(attachmentsSize(message.data));\n    const attachments = getAttachments(message.data);\n    const numAttachments = attachments.length;\n    const numEmbedded = message.numEmbedded || 0;\n    const numPureAttachments = numAttachments - numEmbedded;\n\n    const handleDownloadAll = async () => {\n        setShowLoader(true);\n        await downloadAll(message, cache, api);\n        setShowLoader(false);\n        setShowInstant(true);\n    };\n\n    return (\n        <div className=\"message-attachments\">\n            <div className=\"flex flex-spacebetween mb1\">\n                <span className=\"title\">\n                    <strong className=\"listAttachments-title-size mr0-5\">{humanAttachmentsSize}</strong>\n                    {numPureAttachments > 0 && (\n                        <span className=\"listAttachments-title-files mr0-5\">\n                            <Icon name=\"attach\" className=\"mr0-5\" />\n                            {c('Info').ngettext(\n                                msgid`${numPureAttachments} file attached`,\n                                `${numPureAttachments} files attached`,\n                                numPureAttachments\n                            )}\n                        </span>\n                    )}\n                    {numEmbedded > 0 && (\n                        <span className=\"listAttachments-title-embedded mr0-5\">\n                            {/* TODO: color=\"pm-blue\" */}\n                            <Icon name=\"file-image\" className=\"mr0-5\" />\n                            {c('Info').ngettext(\n                                msgid`${numEmbedded} embedded image`,\n                                `${numEmbedded} embedded images`,\n                                numEmbedded\n                            )}\n                        </span>\n                    )}\n                </span>\n                {numAttachments > 0 && (\n                    <div>\n                        <button onClick={handleDownloadAll} className=\"link strong mr0-5\">\n                            {c('Download attachments').t`Download all`}\n                        </button>\n                        {(showInstant || showLoader) && (\n                            <Icon name={showInstant ? 'download' : ''} aria-busy={showLoader} />\n                        )}\n                    </div>\n                )}\n            </div>\n\n            <ul className=\"listAttachments-list unstyled flex mb0\">\n                {attachments.map((attachment) => (\n                    <MessageAttachment key={attachment.ID} attachment={attachment} message={message} />\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default MessageFooter;\n","// import getRandomValues from 'get-random-values';\n\n// import { EMAIL_FORMATING } from '../app/constants';\n\nexport const EMAIL_FORMATING = {\n    OPEN_TAG_AUTOCOMPLETE: '‹',\n    CLOSE_TAG_AUTOCOMPLETE: '›',\n    OPEN_TAG_AUTOCOMPLETE_RAW: '<',\n    CLOSE_TAG_AUTOCOMPLETE_RAW: '>'\n};\n\nconst {\n    OPEN_TAG_AUTOCOMPLETE,\n    CLOSE_TAG_AUTOCOMPLETE,\n    OPEN_TAG_AUTOCOMPLETE_RAW,\n    CLOSE_TAG_AUTOCOMPLETE_RAW\n} = EMAIL_FORMATING;\n\nexport const MAP_TAGS = {\n    [OPEN_TAG_AUTOCOMPLETE_RAW]: OPEN_TAG_AUTOCOMPLETE,\n    [CLOSE_TAG_AUTOCOMPLETE_RAW]: CLOSE_TAG_AUTOCOMPLETE,\n    [OPEN_TAG_AUTOCOMPLETE]: OPEN_TAG_AUTOCOMPLETE_RAW,\n    [CLOSE_TAG_AUTOCOMPLETE]: CLOSE_TAG_AUTOCOMPLETE_RAW\n};\n\nexport const escape = (string: string) => {\n    const UNESCAPE_HTML_REGEX = /[&<>\"']/g;\n    const HTML_ESCAPES = {\n        '&': '&amp;',\n        '<': '&lt;',\n        '>': '&gt;',\n        '\"': '&quot;',\n        \"'\": '&#39;'\n    };\n\n    return string.replace(UNESCAPE_HTML_REGEX, HTML_ESCAPES as any);\n};\n\nexport const unescape = (string: string) => {\n    const ESCAPED_HTML_REGEX = /&(?:amp|lt|gt|quot|#39);/g;\n    const HTML_UNESCAPES = {\n        '&amp;': '&',\n        '&lt;': '<',\n        '&gt;': '>',\n        '&quot;': '\"',\n        '&#39;': \"'\"\n    };\n\n    return string.replace(ESCAPED_HTML_REGEX, HTML_UNESCAPES as any);\n};\n\n/**\n * Replace custom unicode escape for chevrons by default\n * Replace <> (for a tag) via unicode or reverse it\n * mode undefined for toUnicode, reverse for unicode -> <|>\n */\nexport function unicodeTag(input = '', mode: 'reverse' | undefined) {\n    if (mode === 'reverse') {\n        const matchTagUnicodeOpenClose = () => new RegExp(`${OPEN_TAG_AUTOCOMPLETE}|${CLOSE_TAG_AUTOCOMPLETE}`, 'ig');\n\n        return input.replace(matchTagUnicodeOpenClose(), (match) => MAP_TAGS[match] || '');\n    }\n\n    const matchTagOpenClose = () => new RegExp(`${OPEN_TAG_AUTOCOMPLETE_RAW}|${CLOSE_TAG_AUTOCOMPLETE_RAW}`, 'ig');\n    return input.replace(matchTagOpenClose(), (match) => MAP_TAGS[match] || '');\n}\n\n/**\n * Converts the integer to a 32-bit base encoded string in 2s complement format, so that it doesn't contain a sign \"-\"\n * @param val The integer to be encoded\n * @param bits The amount of bits per character\n */\nexport const toUnsignedString = (val: number, bits: number) => {\n    const base = 1 << bits;\n    const wordCount = Math.ceil(32 / bits);\n    const bottomBits = (wordCount - 1) * bits;\n\n    const bottom = val & ((1 << bottomBits) - 1);\n    const top = val >>> bottomBits;\n    if (top === 0) {\n        return bottom.toString(base);\n    }\n    const topString = top.toString(base);\n    const bottomString = bottom.toString(base);\n    const padLength = wordCount - topString.length - bottomString.length;\n    const middleString = '0'.repeat(padLength);\n    return topString + middleString + bottomString;\n};\n\n/**\n * Unescape a string in hex or octal encoding.\n * See https://www.w3.org/International/questions/qa-escapes#css_other for all possible cases.\n */\nexport const unescapeCSSEncoding = (str: string) => {\n    // Regexp declared inside the function to reset its state (because of the global flag).\n    // cf https://stackoverflow.com/questions/1520800/why-does-a-regexp-with-global-flag-give-wrong-results\n    const UNESCAPE_CSS_ESCAPES_REGEX = /\\\\([0-9A-Fa-f]{1,6}) ?/g;\n    const UNESCAPE_HTML_DEC_REGEX = /&#(\\d+)(;|(?=[^\\d;]))/g;\n    const UNESCAPE_HTML_HEX_REGEX = /&#x([0-9A-Fa-f]+)(;|(?=[^\\d;]))/g;\n    const OTHER_ESC = /\\\\(.)/g;\n\n    const handleEscape = (radix: number) => (ignored: any, val: string) =>\n        String.fromCodePoint(Number.parseInt(val, radix));\n    /*\n     * basic unescaped named sequences: &amp; etcetera, lodash does not support a lot, but that is not a problem for our case.\n     * Actually handling all escaped sequences would mean keeping track of a very large and ever growing amount of named sequences\n     */\n    const namedUnescaped = unescape(str);\n    // lodash doesn't unescape &#160; or &#xA0; sequences, we have to do this manually:\n    const decUnescaped = namedUnescaped.replace(UNESCAPE_HTML_DEC_REGEX, handleEscape(10));\n    const hexUnescaped = decUnescaped.replace(UNESCAPE_HTML_HEX_REGEX, handleEscape(16));\n    // unescape css backslash sequences\n    const strUnescapedHex = hexUnescaped.replace(UNESCAPE_CSS_ESCAPES_REGEX, handleEscape(16));\n\n    return strUnescapedHex.replace(OTHER_ESC, (_, char) => char);\n};\n\nexport const ucFirst = (input = '') => {\n    return input.charAt(0).toUpperCase() + input.slice(1);\n};\n\n/**\n * Extract value between chevrons\n * @param str ex: Andy <andy@pm.me>\n * @return ex: andy@pm.me\n */\nexport const extractChevrons = (str = '') => {\n    const CHEVRONS_REGEX = /<([^>]+)>/g;\n    const [, match = ''] = CHEVRONS_REGEX.exec(str) || [];\n    return match;\n};\n\n/**\n * @{link https://css-tricks.com/snippets/javascript/htmlentities-for-javascript/}\n */\nexport const htmlEntities = (str = '') => {\n    return String(str)\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;');\n};\n\nexport const uniqID = () => {\n    return `pt${Math.random()\n        .toString(32)\n        .slice(2, 12)}-${Date.now()}`;\n};\n\n/**\n * Generates a contact UID of the form 'proton-web-uuid'\n * @return {String}\n */\nexport function generateUID() {\n    const s4 = () => {\n        return Math.floor((1 + Math.random()) * 0x10000)\n            .toString(16)\n            .substring(1);\n    };\n\n    return `proton-web-${s4()}${s4()}-${s4()}-${s4()}-${s4()}-${s4()}${s4()}${s4()}`;\n}\n\n/**\n * Generate a random string.\n * @param {Number} length\n * @return {string}\n */\n// export const getRandomString = (length) => {\n//     const charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n//     let i;\n//     let result = '';\n\n//     const values = getRandomValues(new Uint32Array(length));\n\n//     for (i = 0; i < length; i++) {\n//         result += charset[values[i] % charset.length];\n//     }\n\n//     return result;\n// };\n\nexport const replaceLineBreaks = (content: string) => {\n    return content.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />');\n};\n","import DOMPurify from 'dompurify';\n\nimport { unicodeTag, unescapeCSSEncoding, escape } from './string';\n\n/*\nThis is valid\n    - background:&#117;r&#108;(\n    - background:url&lpar;\n    - etc.\n*/\nconst CSS_URL = '((url)(\\\\(|&(#40|#x00028|lpar);))';\nconst REGEXP_URL_ATTR = new RegExp(CSS_URL, 'gi');\nconst { LIST_PROTON_ATTR, MAP_PROTON_ATTR } = [\n    'data-src',\n    'src',\n    'srcset',\n    'background',\n    'poster',\n    'xlink:href'\n].reduce(\n    (acc, attr) => {\n        acc.LIST_PROTON_ATTR.push(`proton-${attr}`);\n        acc.MAP_PROTON_ATTR[attr] = true;\n        return acc;\n    },\n    {\n        LIST_PROTON_ATTR: [] as string[],\n        MAP_PROTON_ATTR: Object.create(null)\n    }\n);\n\nconst CONFIG: { [key: string]: any } = {\n    default: {\n        ALLOWED_URI_REGEXP: /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|blob|xmpp|data):|[^a-z]|[a-z+.\\-]+(?:[^a-z+.\\-:]|$))/i, // eslint-disable-line no-useless-escape\n        ADD_TAGS: ['proton-src', 'base', 'proton-svg'],\n        ADD_ATTR: ['target', 'proton-src'],\n        FORBID_TAGS: ['style', 'input', 'form'],\n        FORBID_ATTR: ['srcset']\n    },\n    // When we display a message we need to be global and return more informations\n    raw: { WHOLE_DOCUMENT: true, RETURN_DOM: true },\n    html: { WHOLE_DOCUMENT: false, RETURN_DOM: true },\n    protonizer: {\n        FORBID_ATTR: {},\n        ADD_ATTR: ['target'].concat(LIST_PROTON_ATTR),\n        WHOLE_DOCUMENT: true,\n        RETURN_DOM: true\n    },\n    content: {\n        ALLOW_UNKNOWN_PROTOCOLS: true,\n        WHOLE_DOCUMENT: false,\n        RETURN_DOM: true,\n        RETURN_DOM_FRAGMENT: true\n    }\n};\n\n/**\n * Escape some WTF from the CSSParser, cf spec files\n * @param  {String} style\n * @return {String}\n */\nconst escapeURLinStyle = (style: string) => {\n    // handle the case where the value is html encoded, e.g.:\n    // background:&#117;rl(&quot;https://i.imgur.com/WScAnHr.jpg&quot;)\n\n    const unescapedEncoding = unescapeCSSEncoding(style);\n    const escapeFlag = unescapedEncoding !== style;\n\n    const escapedStyle = unescapedEncoding.replace(/\\\\r/g, 'r').replace(REGEXP_URL_ATTR, 'proton-url(');\n\n    if (escapedStyle === unescapedEncoding) {\n        // nothing escaped: just return input\n        return style;\n    }\n\n    return escapeFlag ? escape(escapedStyle) : escapedStyle;\n};\n\nfunction beforeSanitizeElements(node: Element) {\n    // We only work on elements\n    if (node.nodeType !== 1) {\n        return node;\n    }\n\n    Array.from(node.attributes).forEach((type) => {\n        const item = type.name;\n        if (MAP_PROTON_ATTR[item]) {\n            node.setAttribute('proton-' + item, node.getAttribute(item) || '');\n            node.removeAttribute(item);\n        }\n\n        if (item === 'style') {\n            const escaped = escapeURLinStyle(node.getAttribute('style') || '');\n            node.setAttribute('style', escaped);\n        }\n    });\n\n    return node;\n}\n\nexport const purifyHTMLHooks = (active: boolean) => {\n    if (active) {\n        return DOMPurify.addHook('beforeSanitizeElements', beforeSanitizeElements);\n    }\n\n    DOMPurify.removeHook('beforeSanitizeElements');\n};\n\nconst getConfig = (type: string) => ({ ...CONFIG.default, ...(CONFIG[type] || {}) });\n\nconst clean = (mode: string) => {\n    const config = getConfig(mode);\n\n    return (input: string | Node): string | Node => {\n        DOMPurify.clearConfig();\n        const value = DOMPurify.sanitize(input, config);\n        purifyHTMLHooks(false); // Always remove the hooks\n        if (mode === 'str') {\n            // When trusted types is available, DOMPurify returns a trustedHTML object and not a string, force cast it.\n            return value + '';\n        }\n        return value;\n    };\n};\n\n/**\n * Custom config only for messages\n */\nexport const message = clean('str') as (input: string) => string;\n\n/**\n * Sanitize input with a config similar than Squire + ours\n */\nexport const html = clean('raw') as (input: Node) => Node;\n\n/**\n * Sanitize input with a config similar than Squire + ours\n */\nexport const protonizer = (input: string, attachHooks: boolean): Node => {\n    const process = clean('protonizer');\n    purifyHTMLHooks(attachHooks);\n    return process(input) as Node;\n};\n\n/**\n * Sanitize input and returns the whole document\n\n */\nexport const content = clean('content') as (input: string) => Node;\n\n/**\n * Default config we don't want any custom behaviour\n */\nexport const input = (str: string) => DOMPurify.sanitize(str, {}) + '';\n\nexport const toTagUnicode = unicodeTag;\n","// const JUICE_OPTIONS = {\n//     applyAttributesTableElements: false\n// };\n\n// const DECLASSIFY_OPTIONS = {\n//     ignore: BLOCKQUOTE_SELECTORS.filter((selector) => selector.startsWith('.'))\n//         .map((selector) => selector.replace('.', ''))\n//         .concat(/proton-.*/)\n//         .concat(/protonmail.*/)\n// };\n\n/**\n * Iterates through all parent nodes (including current), comparing against cb.\n * @param {DOMNode} node\n * @param {Function} cb\n * @returns {*}\n */\n// eslint-disable-next-line import/prefer-default-export\n// export const findParent = (node, cb) => {\n//     let traverse = node;\n//     if (traverse && cb(traverse)) {\n//         return traverse;\n//     }\n//     while (traverse.parentNode) {\n//         traverse = traverse.parentNode;\n//         if (cb(traverse)) {\n//             return traverse;\n//         }\n//     }\n// };\n\n/**\n * Inline css into an element and remove all obsolete class names.\n * @param {String} html\n * @returns {String}\n */\n// export const inlineCss = (html = '') => {\n//     try {\n//         return declassify.process(juice(html, JUICE_OPTIONS), DECLASSIFY_OPTIONS);\n//     } catch (err) {\n//         console.error(err);\n//         return html;\n//     }\n// };\n\n/**\n * Set an element to be hidden.\n * @param {DOMNode} el\n * @param {Boolean} value Hidden or shown\n */\n// export const setHidden = (el, value = false) => {\n//     el.style.display = value ? 'none' : '';\n// };\n\n/**\n * Force redraw of an element.\n * Copied from https://stackoverflow.com/a/3485654\n * @param {HTMLElement} el\n */\n// export const forceRedraw = (el) => {\n//     el.style.display = 'none';\n//     // eslint-disable-next-line no-unused-expressions\n//     el.offsetHeight;\n//     el.style.display = '';\n// };\n\nexport const escapeSrc = (value = '') => value.replace(/ src=/g, ' data-src=');\nexport const unescapeSrc = (value = '') => value.replace(/ data-src=/g, ' src=');\n\n/**\n * Toggle class on element depending on conditon\n * @param {DOMNode} element\n * @param {String} className\n * @param {Boolean} value\n */\n// export const toggle = (element, className, value) => {\n//     element.classList.contains(className) === value || element.classList.toggle(className);\n// };\n\n/**\n * Returns whether the element is a node.\n * See {@link https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType}\n * @param {DOMNode} node\n * @returns {boolean}\n */\n// export const isElement = (node) => node && node.nodeType === 1;\n\n/**\n * Get children configuration for a node/fragment\n * As IE is not able to deal with the dom API we need to \"emulate it\"\n * @param  {Element} node Can be a fragment\n * @return {Object}      {children: <Array>, first:<Element>, last:<Element>}\n */\n// export const getChildrenElements = (node) => {\n//     if (!isIE11() || node.firstElementChild) {\n//         return {\n//             first: node.firstElementChild,\n//             last: node.lastElementChild,\n//             children: node.children\n//         };\n//     }\n//     const children = _.filter(node.childNodes, isElement);\n\n//     return {\n//         first: children[0],\n//         last: _.last(children),\n//         children\n//     };\n// };\n\n/**\n * Test if the string contains HTML data\n * It doesn't have loading resources side effects\n * @param {String} str\n * @return {Object}\n */\n// export const isHTML = (str = '') => {\n//     const doc = new DOMParser().parseFromString(str, 'text/html');\n//     const firstChild = doc.body.childNodes[0];\n//     return {\n//         isHtml: Array.from(doc.body.childNodes).some(isElement),\n//         isWrapped: !!isElement(firstChild)\n//     };\n// };\n\nexport const matches = (element: Element, selector: string) =>\n    (element.matches || (element as any).msMatchesSelector).call(element, selector);\n\nexport const wrap = (element: Element, html: string) => {\n    const container = document.createElement('div');\n    container.innerHTML = html;\n\n    const wrapper = container.firstChild as Element;\n\n    wrapper.innerHTML = element.outerHTML;\n\n    element.parentNode?.insertBefore(wrapper, element);\n    element.remove();\n};\n\nexport const parseInDiv = (content: string) => {\n    const div = document.createElement('div');\n    div.innerHTML = content;\n    return div;\n};\n","import { uniqID } from '../string';\nimport { protonizer as purifyHTML } from '../purify';\nimport { parseInDiv } from '../dom';\n\n/*\n * match attributes or elements with svg, xlink, srcset, src, background, poster.\n * the regex checks that the element/attribute is actually in an element by looking forward and seeing if it\n * ends properly with a >\n *\n * Another assumption in these regex are: all attributes use the \" quotes instead of the ' quote. This is satisfied\n * by the previous standardization steps\n */\nconst SVG_LIST = ['svg'];\nconst FORBIDDEN_SVG = `(${SVG_LIST.join('|')})`;\nconst NO_SPECIALS = '([^\"><\\\\\\\\]|\\\\\\\\[^><])';\nconst NO_QUOTS = '(\\\\\\\\.|[^\"\\\\\\\\])';\nconst HTML_STRING = `(\"${NO_QUOTS}*\")`;\nconst VERIFY_ELEMENT_END = `(?=(${NO_SPECIALS}|${HTML_STRING})*>)`;\nconst VERIFY_UNIQUE = '([^-])';\n\n// Ensure that the forbidden attributes are not already escaped with proton- by checking that there is no '-' character in front of them.\nconst REGEXP_SVG_BREAK = new RegExp(VERIFY_UNIQUE + FORBIDDEN_SVG + VERIFY_ELEMENT_END, 'gi');\n\n/**\n * Parsing base64 is expensive and can create a crash.\n * Here we can reduce input string from many Mb to less than 100kb, which is way easier to escape.\n * So instead of escaping everything with it too, we remove them from the HTML\n * and we replace it with an attribute with an uniq hash so we can load them\n * later for the user via injectMessageMedia component.\n * Store it inside inside a cache, an Angular Factory as we will need it for:\n *     - lazy load the image post render message\n *     - open the composer we need to lazy load it here too\n *\n * Source: regexp https://www.regextester.com/95505\n * @param  {String} input       Raw unescaped HTML\n * @param  {Object} cache       cacheBase64 factory\n * @param  {Boolean} activeCache\n * @return {String}\n */\nfunction removeBase64(input, cache, activeCache) {\n    /* eslint no-useless-escape: \"off\" */\n    return input.replace(/src=\"data:image\\/([a-zA-Z]*);base64,([^\\\"]*)\\\"/g, (match) => {\n        const hash = uniqID();\n        activeCache && cache.put(hash, match);\n        return `data-proton-replace-base=\"${hash}\"`;\n    });\n}\n\n/**\n * Parse the dom and find all matching base64 custom tags we added\n * then replace them by the valid SRC for the base64.\n * @param  {Element} node\n * @param  {Object} cache cacheBase64 service\n * @return {String}       HTML\n */\nexport function attachBase64Parser(node, cache) {\n    const nodes = [...node.querySelectorAll('[data-proton-replace-base]')];\n    nodes.forEach((node) => {\n        const hash = node.getAttribute('data-proton-replace-base');\n\n        // Clean the string and remove \\n else it won't load inside the browser\n        const src = (cache.get(hash) || '')\n            .replace(/^src=\"/, '')\n            .replace(/\"$/, '')\n            .replace(/\\n/, '');\n        src && node.setAttribute('src', src);\n        node.removeAttribute('data-proton-replace-base');\n    });\n    return node.innerHTML;\n}\n\n/**\n * Attach escaped base64 to the dom if the input is a txt\n * @param  {String} input HTML\n * @param  {Object} cache cacheBase64 service\n * @return {String}       HTML\n */\nexport function attachBase64(input, cache) {\n    // const [$parser] = $.parseHTML(`<div>${input}</div>`);\n    const div = parseInDiv(input);\n    return attachBase64Parser(div, cache);\n}\n\nfunction escapeSVG(input = '') {\n    return input.replace(REGEXP_SVG_BREAK, '$1proton-$2');\n}\n\n/**\n * Escape content for a message\n * Content can be a Document when we open a message, it's useful\n * in order to bind the base if it exists\n * @param  {String|Document} content                       Content to escape\n * @param  {String} options.action           Type of action\n * @return {Node}                            Parser\n */\nexport const transformEscape = async ({ raw, action }, { cache, activeCache = true } = {}) => {\n    const value = removeBase64(raw, cache, activeCache);\n    const activeHooks = action !== 'user.inject';\n    return { document: purifyHTML(escapeSVG(value), activeHooks) };\n};\n","import { matches } from '../dom';\n\nconst PROTOCOLS = ['ftp://', 'http://', 'https://', 'xmpp:', 'tel:', 'callto:'];\nconst ALL_PROTOCOLS = PROTOCOLS.concat(['mailto:']);\nconst MAP = PROTOCOLS.reduce((acc, key) => ((acc[key] = true), acc), {});\nconst EXCLUDE_ANCHORS = ':not([href=\"\"]):not([href^=\"#\"])';\n\nconst getNormalizedHref = (link) => {\n    return link\n        .getAttribute('href')\n        .trim()\n        .toLowerCase();\n};\n\nconst linkUsesProtocols = (link) => ALL_PROTOCOLS.some((proto) => getNormalizedHref(link).startsWith(proto));\n\nconst isEmptyAnchor = (link) => {\n    const href = getNormalizedHref(link);\n    return href === '' || MAP[href];\n};\n\nconst noReferrerInfo = (link) => {\n    link.setAttribute('rel', 'noreferrer nofollow noopener');\n};\n\n/**\n * make links open in a new tab\n * @param  {Array} links Collection of links\n * @return {Array}       links\n */\nconst httpInNewTab = (link) => {\n    if (matches(link, EXCLUDE_ANCHORS)) {\n        const href = link.getAttribute('href') || '';\n        const hasHTTP = href.indexOf('http') === 0;\n        const isRelative = href.indexOf('/') === 0;\n        // Prevent issue for Edge/IE A security problem cf https://jsfiddle.net/dpaoxoks/7/\n        if (hasHTTP || isRelative) {\n            link.setAttribute('target', '_blank');\n        }\n    }\n};\n\n/**\n * turn these relative links into absolute links\n * (example.com/a -> http://example.com)\n * @param  {Array} links Collection of links\n * @return {Array}       links\n */\nconst sanitizeRelativeHttpLinks = (link) => {\n    if (matches(link, EXCLUDE_ANCHORS) && !linkUsesProtocols(link) && link.nodeName === 'A') {\n        // link.href is the absolute value of the link: mail.protonmail.com is prepended, use getAttribute\n        const url = link.getAttribute('href');\n\n        link.setAttribute('href', `http://${url}`);\n    }\n};\n\n/*\n * Anchors will work on the whole protonmail page, so we need to disable them\n * opening them in a new tab will just open a empty page.\n */\nconst disableAnchors = (link) => {\n    isEmptyAnchor(link) && (link.style.pointerEvents = 'none');\n};\n\nexport const transformLinks = ({ document }) => {\n    const links = [...document.querySelectorAll('[href]')];\n\n    links.forEach((link) => {\n        httpInNewTab(link);\n        noReferrerInfo(link);\n        sanitizeRelativeHttpLinks(link);\n        disableAnchors(link);\n    });\n\n    return { document };\n};\n","import mimemessage from 'mimemessage';\n\nimport { ucFirst } from '../string';\nimport { Attachment } from '../../models/attachment';\n\nexport const REGEXP_CID_START = /^cid:/g;\n\n/**\n * Removes enclosing quotes (\"\", '', &lt;&gt;) from a string\n */\nconst trimQuotes = (input: string) => {\n    const value = `${input || ''}`.trim(); // input can be a number\n\n    if (['\"', \"'\", '<'].indexOf(value.charAt(0)) > -1 && ['\"', \"'\", '>'].indexOf(value.charAt(value.length - 1)) > -1) {\n        return value.substr(1, value.length - 2);\n    }\n\n    return value;\n};\n\nexport const readCID = (Headers: any = {}) => {\n    if (Headers['content-id']) {\n        return trimQuotes(Headers['content-id']);\n    }\n\n    // We can find an image without cid so base64 the location\n    if (Headers['content-location']) {\n        return trimQuotes(Headers['content-location']);\n    }\n\n    return '';\n};\n\n/**\n * Find embedded element in div\n */\nexport const findEmbedded = (cid: string, document: Element) => {\n    // If cid is an empty string, it can give a false positive\n    if (!cid) {\n        return [];\n    }\n    const selector = [\n        `img[src=\"${cid}\"]`,\n        `img[src=\"cid:${cid}\"]`,\n        `img[data-embedded-img=\"${cid}\"]`,\n        `img[data-embedded-img=\"cid:${cid}\"]`,\n        `img[data-src=\"cid:${cid}\"]`,\n        `img[proton-src=\"cid:${cid}\"]`\n    ];\n    return [...document.querySelectorAll(selector.join(', '))];\n};\n\n/**\n * Extract embedded attachment from body\n */\nexport const extractEmbedded = (attachments: Attachment[] = [], document: Element) => {\n    return attachments.filter(({ Headers = {} }) => {\n        const cid = readCID(Headers);\n        const nodes = findEmbedded(cid, document);\n\n        return nodes.length;\n    });\n};\n\n/**\n * Convert raw headers to better format handled by the mimemessage lib\n */\nexport const convertMimeHeaders = (config: { [key: string]: string } = {}) => {\n    const headers = Object.keys(config)\n        .filter((key) => key.startsWith('content'))\n        .reduce((acc, key) => {\n            const [, type] = key.split('-');\n            acc[`content${ucFirst(type)}`] = config[key];\n            return acc;\n        }, Object.create(null));\n\n    return {\n        formatted: mimemessage.factory(headers),\n        headers\n    };\n};\n\nexport const getAttachementName = (Headers: { [key: string]: string } = {}) => {\n    if (Headers['content-disposition'] !== 'inline') {\n        const { formatted = {} as any } = convertMimeHeaders(Headers);\n        const { params: { filename = '' } = {} } = formatted.contentDisposition() || {};\n        if (filename) {\n            return filename.replace(/\"/g, '');\n        }\n    }\n\n    return '';\n};\n\n/**\n * Get the url for an embedded image\n */\nexport const srcToCID = (node: Element) => {\n    const attribute = node.getAttribute('data-embedded-img') || '';\n    return attribute.replace(REGEXP_CID_START, '');\n};\n","import { Message } from '../../models/message';\nimport { Attachment } from '../../models/attachment';\nimport { readCID } from './embeddedUtils';\n\nconst CIDList: { [ID: string]: { [cid: string]: Attachment } } = {};\n\nexport const getMessageCIDs = ({ ID = '' }: Message = {}) => CIDList[ID] || {};\n\nexport const containsMessageCIDs = ({ ID = '' }: Message = {}) => Object.keys(CIDList[ID] || {}).length > 0;\n\nexport const addMessageCID = ({ ID = '' }: Message, { Headers = {}, Name = '' }: Attachment) => {\n    !CIDList[ID] && (CIDList[ID] = {});\n    // !message.NumEmbedded && (message.NumEmbedded = 0);\n\n    const cid = readCID(Headers);\n    Headers.embedded = '1';\n    // message.NumEmbedded++;\n    CIDList[ID][cid] = { Headers, Name };\n};\n\n/**\n * Check if the cid exist for a specific message\n */\nexport const existMessageCID = (message: Message, cid: string) => {\n    return !!getMessageCIDs(message)[cid];\n};\n","import { MessageExtended, Message } from '../../models/message';\nimport { extractEmbedded, getAttachementName, REGEXP_CID_START } from '../embedded/embeddedUtils';\nimport { addMessageCID, getMessageCIDs } from './embeddedStoreCids';\nimport { Attachment } from '../../models/attachment';\n\nexport const getAttachment = (message: Message = {}, src = '') => {\n    const cid = src.replace(REGEXP_CID_START, '');\n    return getMessageCIDs(message)[cid] || {};\n};\n\nexport const find = (message: MessageExtended) => {\n    const list = (message.data || {}).Attachments || [];\n\n    if (!list.length || !message.document) {\n        return [];\n    }\n\n    const embeddedAttachments = extractEmbedded(list, message.document);\n\n    embeddedAttachments.forEach((attachment) => {\n        addMessageCID(message.data || {}, attachment);\n    });\n\n    return embeddedAttachments;\n};\n\n/**\n * Find all attachements inline\n */\nexport const listInlineAttachments = (message: MessageExtended) => {\n    const list = (message.data || {}).Attachments || [];\n    const MAP_CID = getMessageCIDs(message.data);\n\n    return Object.keys(MAP_CID).reduce((acc, cid) => {\n        // Extract current attachement content-id\n        const contentId = ((MAP_CID[cid] || {}).Headers || {})['content-id'];\n        const contentName = getAttachementName(MAP_CID[cid].Headers);\n\n        // Find the matching attachement\n        const attachment = list.find(({ Headers = {}, Name = '' } = {}) => {\n            if (Headers['content-id']) {\n                return Headers['content-id'] === contentId;\n            }\n\n            if (Headers['content-location']) {\n                return Name === contentName;\n            }\n\n            return false;\n        });\n\n        attachment && acc.push({ cid, attachment });\n        return acc;\n    }, [] as { cid: string; attachment: Attachment }[]);\n};\n","import { Message } from '../../models/message';\nimport { isDraft } from '../message/messages';\nimport { getMessageCIDs } from './embeddedStoreCids';\n\nexport interface BlobInfo {\n    url: string;\n    isContentLocation: boolean;\n}\n\nconst PREFIX_DRAFT = 'draft_';\n\nconst urlCreator = () => window.URL || window.webkitURL;\n\nconst Blobs: { [cid: string]: BlobInfo } = {};\nconst MAP_BLOBS: { [key: string]: string[] } = {};\n\nconst getHashKey = (msg: Message) => {\n    const draft = isDraft(msg);\n    const prefix = draft ? PREFIX_DRAFT : '';\n    return `${prefix}${msg.ConversationID || msg.ID}`.trim();\n};\n\n/**\n * The URL.revokeObjectURL() static method releases an existing object URL\n * which was previously created by calling URL.createObjectURL().\n * Call this method when you've finished using a object URL, in order to let\n * the browser know it doesn't need to keep the reference to the file\n * any longer.\n */\nfunction deallocateList(key: string) {\n    const list = MAP_BLOBS[key] || [];\n    list.forEach((cid) => {\n        if (Blobs[cid]) {\n            urlCreator().revokeObjectURL(Blobs[cid].url);\n            // Remove the Blob ref from our store\n            delete Blobs[cid];\n        }\n    });\n    delete MAP_BLOBS[key];\n}\n\n/**\n * blob URLs never get deallocated automatically--\n * we manage deallocation to avoid a massive memory leak\n * once we navigate away from a conversation\n * eg. this can be triggered from the conversations controller\n */\nexport function deallocate(message: Message = {}) {\n    const key = getHashKey(message);\n    Object.keys(MAP_BLOBS)\n        .filter((k) => k !== key && k.indexOf(PREFIX_DRAFT) !== 0) // Do nothing for draft and itself\n        .forEach(deallocateList);\n}\n\n/**\n * Use the Blobs array to store CIDs url reference\n * once the attachment has been decrypted\n * so we can re-use the blob instead of decrypting\n * this should be rewritted a bit to work with\n * the service store\n */\nexport const store = (message: Message = {}, cid = '') => {\n    const Attachments = getMessageCIDs(message);\n    const { Headers = {} } = Attachments[cid] || {};\n\n    const key = getHashKey(message);\n\n    MAP_BLOBS[key] = MAP_BLOBS[key] || [];\n\n    return (data: Uint8Array, MIME = '') => {\n        // If you switch to another conversation the MAP_BLOBS won't exist anymore\n        if (MAP_BLOBS[key]) {\n            // Turn the decrypted attachment data into a blob.\n            let blob: Blob | null = new Blob([data], { type: MIME });\n            // Generate the URL\n            let imageUrl: string | null = urlCreator().createObjectURL(blob);\n            // Store the generated URL\n            Blobs[cid] = {\n                url: imageUrl,\n                isContentLocation:\n                    typeof Headers['content-location'] !== 'undefined' && typeof Headers['content-id'] === 'undefined'\n            };\n            // this is supposed to remove the blob so it\n            // can be garbage collected. we dont save it (for now)\n            blob = null;\n            imageUrl = null;\n\n            MAP_BLOBS[key].push(cid);\n            // dispatcher.embeddedStore('store', { cid });\n        }\n    };\n};\n\nexport const getBlob = (cid: string) => Blobs[cid] || {};\n\nexport const hasBlob = (cid: string) => !!Blobs[cid];\n","// import { REGEX_IMAGE_EXTENSION } from 'proton-shared/lib/constants';\n\n/**\n * Convert base64 string to Image\n * @param  {String} base64str\n * @return {Object}\n */\n// export const toImage = (base64str) => {\n//     return new Promise((resolve) => {\n//         const image = new Image();\n\n//         image.onload = () => {\n//             resolve(image);\n//         };\n\n//         image.src = base64str;\n//     });\n// };\n\n/**\n * Resizes a picture to a maximum length/width (based on largest dimension)\n * @param {String} original Base64 representation of image to be resized.\n * @param {Number} maxSize Amount of pixels that largest dimention (whether width or length) should have.\n * @param {String} finalMimeType Mime type of the resulting resized image.\n * @param {Number} encoderOptions A Number between 0 and 1 indicating image quality if the requested type is image/jpeg or image/webp\n * @return {Promise} receives base64 string of resized image.\n */\n// export const resizeImage = (original, maxSize, finalMimeType = 'image/jpeg', encoderOptions = 1) => {\n//     return toImage(original).then((image) => {\n//         // Resize the image\n//         const canvas = document.createElement('canvas');\n//         let width = image.width;\n//         let height = image.height;\n\n//         if (width > height && width > maxSize) {\n//             height *= maxSize / width;\n//             width = maxSize;\n//         } else if (height > maxSize) {\n//             width *= maxSize / height;\n//             height = maxSize;\n//         }\n\n//         canvas.width = width;\n//         canvas.height = height;\n//         canvas.getContext('2d').drawImage(image, 0, 0, width, height);\n\n//         return canvas.toDataURL(finalMimeType, encoderOptions);\n//     });\n// };\n\n/**\n * Extract the mime and base64 str from a base64 image.\n * @param {String} str\n * @returns {Promise} {mime, base64}\n */\n// const extractBase64Image = (str = '') => {\n//     const [mimeInfo = '', base64 = ''] = (str || '').split(',');\n//     const [, mime = ''] = mimeInfo.match(/:(.*?);/) || [];\n//     return { mime, base64 };\n// };\n\n/**\n * Convert a base 64 str to an uint8 array.\n * @param base64str\n * @returns {Uint8Array}\n */\n// const toUint8Array = (base64str) => {\n//     const bstr = atob(base64str);\n//     let n = bstr.length;\n//     const u8arr = new Uint8Array(n);\n//     while (n--) {\n//         u8arr[n] = bstr.charCodeAt(n);\n//     }\n//     return u8arr;\n// };\n\n/**\n * Convert a data URL to a Blob Object\n * @param {String} base64str\n * @param {String} filename\n * @return {Object}\n */\n// export const toFile = (base64str, filename = 'file') => {\n//     const { base64, mime } = extractBase64Image(base64str);\n//     return new File([toUint8Array(base64)], filename, { type: mime });\n// };\n\n/**\n * Convert a data URL to a Blob Object\n * @param  {String} base64str\n * @return {Blob}\n */\n// export const toBlob = (base64str) => {\n//     const { base64, mime } = extractBase64Image(base64str);\n//     return new Blob([toUint8Array(base64)], { type: mime });\n// };\n\n/**\n * Down size image to reach the max size limit\n * @param  {String} base64str\n * @param  {} maxSize in bytes\n * @param  {String} mimeType\n * @param  {Number} encoderOptions\n * @return {Promise}\n */\n// export const downSize = (base64str, maxSize, mimeType = 'image/jpeg', encoderOptions = 1) => {\n//     const process = (source, max) => {\n//         return resizeImage(source, max, mimeType, encoderOptions).then((resized) => {\n//             const { size } = toBlob(resized);\n\n//             if (size <= maxSize) {\n//                 return resized;\n//             }\n\n//             return process(resized, Math.round(max * 0.9));\n//         });\n//     };\n\n//     return toImage(base64str).then(({ height, width }) => process(base64str, height > width ? height : width));\n// };\n\n/**\n * Returns true if the URL is an inline embedded image.\n * @param {String} src\n * @returns {boolean}\n */\nexport const isInlineEmbedded = (src = '') => src.startsWith('data:');\n\n/**\n * Returns true if the URL is an embedded image.\n * @param {String} src\n * @returns {boolean}\n */\nexport const isEmbedded = (src = '') => src.startsWith('cid:');\n\n/**\n * Prepare image source to be display\n * @param {String} value\n * @return {String}\n */\n// export const formatImage = (value = '') => {\n//     if (!value) {\n//         return value;\n//     }\n\n//     if (REGEX_IMAGE_EXTENSION.test(value)) {\n//         return value;\n//     }\n\n//     if (value.startsWith('data:')) {\n//         return value;\n//     }\n\n//     return `data:image/png;base64,${value}`;\n// };\n","import { MessageExtended } from '../../models/message';\nimport { escapeSrc, unescapeSrc, wrap } from '../dom';\nimport { Api } from '../../models/utils';\nimport { ENCRYPTED_STATUS } from '../../constants';\nimport { listInlineAttachments, getAttachment } from './embeddedFinder';\nimport { hasBlob, store, getBlob, BlobInfo } from './embeddedStoreBlobs';\nimport { get } from '../attachment/attachmentLoader';\nimport { Attachment } from '../../models/attachment';\nimport { noop } from 'proton-shared/lib/helpers/function';\nimport { wait } from 'proton-shared/lib/helpers/promise';\nimport { getMessageCIDs } from './embeddedStoreCids';\nimport { findEmbedded, srcToCID } from './embeddedUtils';\nimport { isInlineEmbedded, isEmbedded } from '../image';\nimport { AttachmentsCache } from '../../hooks/useAttachments';\n\nconst EMBEDDED_CLASSNAME = 'proton-embedded';\n\nconst wrapImage = (img: Element) => wrap(img, '<div class=\"image loading\"></div>');\n\n/**\n * Get the url for an embedded image\n */\nexport const getUrl = (node: Element) => {\n    // If it's an inline embedded img, just return the src because that contains the img data.\n    const src = node.getAttribute('data-embedded-img') || '';\n    if (isInlineEmbedded(src)) {\n        return src;\n    }\n    const cid = srcToCID(node);\n    const { url = '' } = getBlob(cid);\n    return url;\n};\n\n/**\n * Prepare embedded images in the document\n */\nexport const prepareImages = (message: MessageExtended, show: boolean, isReplyForward: boolean, isOutside: boolean) => {\n    if (!message.document) {\n        return;\n    }\n\n    let showEmbedded = message.showEmbeddedImages;\n\n    const images = [...message.document.querySelectorAll('img[proton-src]')];\n\n    images.forEach((image) => {\n        const src = image.getAttribute('proton-src') || undefined;\n        image.setAttribute('referrerPolicy', 'no-referrer');\n        const attachment = getAttachment(message.data, src);\n\n        if (!image.classList.contains(EMBEDDED_CLASSNAME)) {\n            image.classList.add(EMBEDDED_CLASSNAME);\n        }\n\n        if (!image.parentElement) {\n            return;\n        }\n\n        // check if the attachment exist before processing\n        if (!(attachment && Object.keys(attachment).length > 0)) {\n            /**\n             * If the attachment does not exist and the proton-src attribute\n             * starts with cid:, it's an embedded image that does not exist in the list of attachments,\n             * or is not a valid image.\n             * So remove the element from the DOM because it will not display anything useful anyway.\n             */\n            if (isEmbedded(src)) {\n                image.parentElement.removeChild(image);\n            }\n            // If it's not an inline embedded image, it's either an embedded image or a remote image. So stop here.\n            // Otherwise, continue so that the inline image is detected as an embedded image.\n            if (!isInlineEmbedded(src)) {\n                return;\n            }\n        }\n\n        if (show) {\n            image.setAttribute('data-embedded-img', src || '');\n            /**\n             * Since the image is supposed to be displayed, remove the proton-src attribute.\n             * Then it will be parsed by the embeddedParser in the blob or cid direction.\n             */\n            image.removeAttribute('proton-src');\n\n            // Auto load image inside a reply draft\n            if (isReplyForward) {\n                // `getUrl` may return undefined here because the embedded attachments have not yet been decrypted and put in the blob store.\n                const url = getUrl(image);\n                // only set it if it is defined, otherwise the unescapeSrc will add two src=\"\"\n                url && image.setAttribute('src', url);\n                return;\n            }\n\n            // We don't need to add it outside\n            if (!isOutside) {\n                !image.parentElement.classList.contains('loading') && wrapImage(image);\n                image.removeAttribute('src');\n            }\n            return;\n        }\n\n        showEmbedded = false;\n\n        // Inline embedded images does not have an attachment.\n        if (attachment) {\n            image.setAttribute('alt', attachment.Name || '');\n        }\n    });\n\n    return showEmbedded;\n};\n\n/**\n * launch and forget: we don't need to do anything with the result\n * wait a bit before disabling the invalidsignature modal\n * this allows the user to see the change icon popup.\n *\n * More elaborate explanation:\n * We're addressing a fairly rare UX thing here.\n * We want to avoid showing a popup saying the confirmmodal when the signature is invalid to often.\n * For instance, when embedding images you can see that the icon says the signature is invalid,\n * so we don't show this icon (as the user can know it before clicking).\n *\n * However, if you would click on the embedded attachment before it has downloaded the attachment, it will not show this icon.\n * So consider you clicking on this attachment when it didn't verify the attachment yet.\n * Then just after that the attachment loader downloaded the attachment and\n * verified it signature and sets invalidSignature.askAgain to false.\n * Then you don't know that this happened, but in this case you should get a popup.\n *\n * Note when thinking  this is just a race condition: also consider the case where you are clicking\n * on the icon and it shows the icon just before you click: it's not humanly possible to see that it\n * changed and is not valid. So even in that case we want to show the icon.\n */\nconst triggerSigVerification = (\n    message: MessageExtended,\n    attachments: Attachment[],\n    api: Api,\n    cache: Map<string, any>\n) => {\n    /*\n     * launch and forget: we don't need to do anything with the result\n     * wait a bit before disabling the invalidsignature modal\n     * this allows the user to see the change icon popup.\n     */\n    Promise.all(\n        attachments.map(async (attachment) => {\n            await get(attachment, message, cache, api);\n            await wait(1000);\n            // invalidSignature.askAgain(message, attachment, false);\n        })\n    );\n};\n\n/**\n * It works on data-src attribute for this reason:\n * Don't set the src attribute since it's evaluated and cid:cid create an error (#3330)\n * NET::ERR_UNKNOWN_URL_SCHEME because src=\"cid:xxxx\" is not valid HTML\n * This function expects the content to be properly unescaped later.\n */\nconst actionDirection: { [key: string]: (nodes: Element[], cid: string, url: string) => void } = {\n    blob(nodes: Element[], cid: string, url: string) {\n        nodes.forEach((node) => {\n            // Always remove the `data-` src attribute set by the cid function, otherwise it can get displayed if the user does not auto load embedded images.\n            node.removeAttribute('data-src');\n            if (node.getAttribute('proton-src')) {\n                return;\n            }\n            node.setAttribute('data-src', url);\n            node.setAttribute('data-embedded-img', cid);\n            node.classList.add(EMBEDDED_CLASSNAME);\n        });\n    },\n    cid(nodes: Element[], cid: string) {\n        nodes.forEach((node) => {\n            node.removeAttribute('data-embedded-img');\n            node.removeAttribute('src');\n            node.setAttribute('data-src', `cid:${cid}`);\n        });\n    }\n};\n\n/**\n * Parse the content to inject the generated blob src\n */\nexport const mutateHTML = (message: MessageExtended, direction: string) => {\n    if (!message.document) {\n        return;\n    }\n\n    const document = message.document;\n\n    document.innerHTML = escapeSrc(document.innerHTML);\n\n    Object.keys(getMessageCIDs(message.data)).forEach((cid) => {\n        const nodes = findEmbedded(cid, document);\n\n        if (nodes.length) {\n            const { url = '' } = getBlob(cid);\n\n            (actionDirection[direction] || noop)(nodes, cid, url);\n        }\n    });\n\n    document.innerHTML = unescapeSrc(document.innerHTML);\n};\n\nexport const decrypt = async (message: MessageExtended, api: Api, cache: AttachmentsCache) => {\n    const list = listInlineAttachments(message);\n    const attachments = list.map(({ attachment }) => attachment);\n    // const show = message.showEmbeddedImages === true || mailSettings.ShowImages & SHOW_IMAGES.EMBEDDED;\n    // const sigList = show ? list : list.filter(({ attachment }) => cache.has(attachment.ID));\n\n    // For a draft if we close it before the end of the attachment upload, there are no keyPackets\n    // pgp attachments do not have keypackets.\n\n    const promises = list\n        .filter(({ attachment }) => attachment.KeyPackets || attachment.Encrypted === ENCRYPTED_STATUS.PGP_MIME)\n        .filter(({ cid }) => !hasBlob(cid))\n        .map(async ({ cid, attachment }) => {\n            const storeAttachement = store(message.data, cid);\n            const buffer = await get(attachment, message, cache, api);\n            return storeAttachement(buffer.data, attachment.MIMEType);\n        });\n\n    if (!promises.length) {\n        // all cid was already stored, we can resolve\n        triggerSigVerification(message, attachments, api, cache);\n        return {};\n    }\n\n    await Promise.all(promises);\n\n    // We need to trigger on the original list not after filtering: after filter they are just stored\n    // somewhere else\n    triggerSigVerification(message, attachments, api, cache);\n    return list.reduce((acc, { cid }) => {\n        acc[cid] = getBlob(cid);\n        return acc;\n    }, {} as { [cid: string]: BlobInfo });\n};\n","import { SHOW_IMAGES } from 'proton-shared/lib/constants';\nimport { Computation } from '../../hooks/useMessage';\nimport { find } from '../embedded/embeddedFinder';\nimport { mutateHTML, decrypt, prepareImages } from '../embedded/embeddedParser';\nimport { MESSAGE_ACTIONS } from '../../constants';\n\nexport const transformEmbedded: Computation = async (message, { attachmentsCache, api, mailSettings }) => {\n    const { ShowImages = 0 } = mailSettings as { ShowImages: number };\n    const show = message.showEmbeddedImages === true || ShowImages === SHOW_IMAGES.EMBEDDED;\n    const isReplyForward =\n        message.action === MESSAGE_ACTIONS.REPLY ||\n        message.action === MESSAGE_ACTIONS.REPLY_ALL ||\n        message.action === MESSAGE_ACTIONS.FORWARD;\n    const isOutside = false; // TODO: const isEoReply = $state.is('eo.reply');\n\n    const attachments = find(message);\n    const showEmbeddedImages = prepareImages(message, show, isReplyForward, isOutside);\n\n    const direction = 'blob';\n\n    if (attachments.length === 0 || !show) {\n        /**\n         * cf #5088 we need to escape the body again if we forgot to set the password First.\n         * Prevent unescaped HTML.\n         *\n         * Don't do it everytime because it's \"slow\" and we don't want to slow down the process.\n         */\n        if (isOutside) {\n            mutateHTML(message, direction);\n        }\n    } else {\n        await decrypt(message, api, attachmentsCache);\n        mutateHTML(message, direction);\n    }\n\n    return { document: message.document, showEmbeddedImages, numEmbedded: attachments.length };\n};\n","export const transformWelcome = ({ document }) => {\n    // For the welcome email, we need to change the path to the welcome image lock\n    const images = [...document.querySelectorAll('img[src=\"/img/app/welcome_lock.gif\"]')];\n\n    if (images.length > 0) {\n        images.forEach((image) => {\n            image.src = '/assets/img/emails/welcome_lock.gif';\n        });\n    }\n\n    return { document };\n};\n","import { c } from 'ttag';\n\nconst BLOCKQUOTE_SELECTORS = [\n    '.protonmail_quote',\n    '.gmail_quote',\n    '.yahoo_quoted',\n    '.gmail_extra',\n    '.moz-cite-prefix',\n    // '.WordSection1',\n    '#isForwardContent',\n    '#isReplyContent',\n    '#mailcontent:not(table)',\n    '#origbody',\n    '#reply139content',\n    '#oriMsgHtmlSeperator',\n    'blockquote[type=\"cite\"]'\n];\n\nconst quotes = BLOCKQUOTE_SELECTORS.map((selector) => `${selector}:not(:empty)`).join(',');\n\nexport const transformBlockquotes = ({ document: doc }) => {\n    const blockquotes = [...doc.querySelectorAll(quotes)];\n    const parent = doc.textContent;\n    let found = false;\n\n    blockquotes.forEach((blockquote) => {\n        if (!found) {\n            const child = blockquote.textContent;\n            const [before = '', after = ''] = parent.split(child);\n\n            if (child.length < parent.length && before.length && !after.length) {\n                const button = document.createElement('button');\n                const title = c('Title').t`Show previous message`;\n\n                button.className = 'pm-button pm-button--small more proton-message-blockquote-toggle';\n                button.textContent = '...'; // perf issue we can't use <icon> as we don't want to compile.\n                button.setAttribute('title', title);\n\n                // For some messages, the content of the message before <button> is not inside <div>\n                blockquote.parentNode.insertBefore(document.createElement('BR'), blockquote);\n                blockquote.parentNode.insertBefore(button, blockquote);\n\n                found = true;\n            }\n        }\n    });\n\n    return { document: doc };\n};\n","import { flow, filter, reduce } from 'lodash/fp';\n\nimport { SHOW_IMAGES } from 'proton-shared/lib/constants';\n\nconst WHITELIST = ['notify@protonmail.com'];\n\n// const { dispatcher } = dispatchers(['message.open']);\n\nconst ATTRIBUTES = ['url', 'xlink:href', 'srcset', 'src', 'svg', 'background', 'poster'].map(\n    (name) => `proton-${name}`\n);\n\nconst REGEXP_FIXER = (() => {\n    const str = ATTRIBUTES.map((key) => {\n        if (key === 'proton-src') {\n            return `${key}=(?!\"(cid|data):)`;\n        }\n        return key;\n    }).join('|');\n    return `(${str})`;\n})();\n\n/**\n * Find inside the current parser DOM every content escaped\n * and build a list of Object <attribute>:<value> but don't parse them if\n * it is an embedded content.\n * As we have many differents attributes we create a list\n * @param  {Node} html parser\n * @return {Array}\n */\nfunction prepareInjection(html) {\n    // Query selector\n    const selector = ATTRIBUTES.map((attr) => {\n        const [key] = attr.split(':');\n        return `[${key}]`;\n    })\n        .concat('[style]')\n        .join(', ');\n\n    /**\n     * Create a map of every proton-x attribute and its value\n     * @param  {Node} node Current element\n     * @return {Object}\n     */\n    const mapAttributes = (node) => {\n        return flow(\n            filter((attr) => ATTRIBUTES.indexOf(attr.name) !== -1),\n            reduce((acc, attr) => ((acc[`${attr.name}`] = attr.value), acc), {})\n        )(node.attributes);\n    };\n\n    const $list = [].slice.call(html.querySelectorAll(selector));\n\n    // Create a list containing a map of every attributes (proton-x) per node\n    const attributes = $list.reduce((acc, node) => {\n        if (node.hasAttribute('proton-src')) {\n            const src = node.getAttribute('proton-src');\n\n            // We don't want to unescape attachments or inline embedded as we are going to process them later\n            if (src.indexOf('cid:') !== -1) {\n                return acc;\n            }\n            if (src.indexOf('data:') !== -1) {\n                return acc;\n            }\n        }\n        acc.push(mapAttributes(node));\n        return acc;\n    }, []);\n\n    return attributes;\n}\n\nexport const transformRemote = (\n    { data: message = {}, document = null, showRemoteImages: inputShowImages = false },\n    { action = null, mailSettings }\n) => {\n    const regex = new RegExp(REGEXP_FIXER, 'g');\n    const showImages =\n        inputShowImages ||\n        !!(mailSettings.ShowImages & SHOW_IMAGES.REMOTE || WHITELIST.includes(message.Sender.Address));\n    const content = document.innerHTML;\n    const hasImages = regex.test(content);\n\n    if (showImages) {\n        // If load:manual we use a custom directive to inject the content\n        if (action === 'user.inject') {\n            // TODO: uncoment this block\n            // const list = prepareInjection(html);\n            prepareInjection(document);\n            // const hasSVG = /svg/.test(html.innerHTML);\n            // if (list.length || hasSVG) {\n            //     dispatcher['message.open']('remote.injected', { action, list, message, hasSVG });\n            // }\n        } else {\n            document.innerHTML = content.replace(regex, (match, $1) => $1.substring(7));\n        }\n    }\n    return { document, showRemoteImages: hasImages ? showImages : undefined };\n};\n","export const transformStylesheet = ({ document }) => {\n    const firstElement = document.firstElementChild;\n\n    /**\n     * Some emails from ex: tripit contains a position absolute on the container\n     * => hack to prevent margin on android/ios\n     * @{@link https://twitter.com/HTeuMeuLeu/status/852110032045035520}\n     * Gmail changes the dom too.\n     */\n    if (firstElement && /absolute/.test(firstElement.style.position)) {\n        firstElement.style.position = 'inherit';\n    }\n    return { document };\n};\n","const ELEMENTS = [\n    {\n        selector: 'a:not([href^=\"http\"])',\n        attribute: 'href'\n    },\n    {\n        selector: 'img:not([src^=\"http\"]):not([proton-src^=\"cid\"])',\n        attribute: 'proton-src'\n    }\n];\n\nconst getBaseURL = (base) => {\n    // Make sure base has trailing slash\n    const baseUrl = base.getAttribute('href');\n    if (baseUrl.substr(-1, 1) !== '/') {\n        return `${baseUrl}/`;\n    }\n    return baseUrl;\n};\n\n/**\n * Append base url to any href/src if we need to\n * @param  {Node} html HTML document from DOMPurify\n * @return {Node}      Dom based\n */\nexport const transformBase = ({ document }) => {\n    const base = document.querySelector('base');\n\n    if (!base || !base.getAttribute('href')) {\n        return { document };\n    }\n\n    // Make sure base has trailing slash\n    const BASE_URL = getBaseURL(base);\n\n    const bindAttribute = (node, key, value = '') => {\n        if (!value.startsWith('http')) {\n            node.setAttribute(key, BASE_URL + value);\n        }\n    };\n\n    ELEMENTS.forEach(({ selector, attribute }) => {\n        [...document.querySelectorAll(selector)].forEach((el) => {\n            const keyproton = `proton-${attribute}`;\n            const value = el.getAttribute(attribute) || '';\n            const ptValue = el.getAttribute(keyproton) || '';\n            // Ensure we don't add a useless / if we already have one\n            const url = value.charAt(0) === '/' ? value.slice(1) : value;\n\n            /*\n                Bind the value only when we need, if there is a proton-src we don't need\n                to add the src else it will generate a request to the domain\n             */\n            !ptValue && bindAttribute(el, attribute, url);\n            ptValue && bindAttribute(el, keyproton, ptValue);\n        });\n    });\n\n    return { document };\n};\n","import { Message } from '../../models/message';\nimport { ENCRYPTED_STATUS } from '../../constants';\nimport { Attachment, AttachmentMime, AttachmentData } from '../../models/attachment';\nimport { AttachmentsCache } from '../../hooks/useAttachments';\n\n// This prefix is really useful to distinguish 'real' attachments from pgp attachments.\nconst ID_PREFIX = 'PGPAttachment';\n\nconst getId = (message: Message, parsedAttachment: any, number: number) =>\n    `${ID_PREFIX}_${message.ID}_${parsedAttachment.checksum}_${number}`;\n\n/**\n * Unfortunately mailparser doesn't expose header data directly so we will reconstruct the headers\n */\nconst getHeaders = ({\n    generatedFileName = '',\n    contentDisposition = '',\n    contentId = '',\n    transferEncoding = '',\n    contentType = ''\n}: AttachmentMime) => {\n    const headers: { [key: string]: any } = {};\n    const filenameOption = '; filename=' + JSON.stringify(generatedFileName);\n    headers['content-disposition'] = contentDisposition + filenameOption;\n    // test if this is an assigned content id\n    if (!/^.*@mailparser$/.test(contentId)) {\n        headers['content-id'] = /^<.*>$/.test(contentId) ? contentId : `<${contentId}>`;\n    }\n    if (contentDisposition.toLowerCase() === 'inline') {\n        headers.embedded = 1;\n    }\n    if (transferEncoding) {\n        headers['content-transfer-encoding'] = transferEncoding;\n    }\n    headers['content-type'] = contentType + filenameOption;\n    return headers;\n};\n\n/**\n * Convert a single attachment\n */\nconst convertSingle = (\n    message: Message,\n    parsedAttachment: AttachmentMime,\n    number: number,\n    verified: number,\n    cache: AttachmentsCache\n): Attachment => {\n    const ID = getId(message, parsedAttachment, number);\n\n    const attachment: Attachment = {\n        ID,\n        Headers: getHeaders(parsedAttachment),\n        Name: parsedAttachment.generatedFileName,\n        KeyPackets: null, // already decrypted;\n        MIMEType: parsedAttachment.contentType,\n        Signature: null,\n        Size: parsedAttachment.length,\n        Encrypted: ENCRYPTED_STATUS.PGP_MIME\n    };\n\n    const attachmentData: AttachmentData = {\n        data: parsedAttachment.content\n    };\n\n    cache.set(ID, attachmentData /*, verified*/);\n    // invalidSignature.askAgain(message, attachment, false);\n    return attachment;\n};\n\n/**\n * Converts the parsedAttachment coming from mailparser to an attachment linked to the message provided.\n */\nexport const convert = (\n    message: Message,\n    attachments: AttachmentMime[],\n    verified: number,\n    cache: AttachmentsCache\n): Attachment[] => {\n    return attachments.map((attachment, number) => convertSingle(message, attachment, number, verified, cache));\n};\n","import { decryptMIMEMessage, decryptMessageLegacy } from 'pmcrypto/lib/pmcrypto';\nimport { MIME_TYPES } from 'proton-shared/lib/constants';\nimport { c } from 'ttag';\n\nimport { Message, MessageExtended } from '../../models/message';\nimport { convert } from '../attachment/attachmentConverter';\nimport { VERIFICATION_STATUS } from '../../constants';\nimport { getDate } from './messages';\nimport { AttachmentsCache } from '../../hooks/useAttachments';\n\nconst getVerifiedStatus = (pmcryptoVerified: number, publicKeys: any) => {\n    const signedInvalid = VERIFICATION_STATUS.SIGNED_AND_INVALID;\n    const signedPubkey = VERIFICATION_STATUS.SIGNED_NO_PUB_KEY;\n    return !publicKeys.length && pmcryptoVerified === signedInvalid ? signedPubkey : pmcryptoVerified;\n};\n\nexport const decryptMimeMessage = async (\n    message: Message,\n    privateKeys: any,\n    publicKeys: any,\n    attachmentsCache: AttachmentsCache\n): Promise<MessageExtended> => {\n    const headerFilename = c('Encrypted Headers').t`Encrypted Headers filename`;\n    const sender = (message.Sender || {}).Address;\n\n    const result = await decryptMIMEMessage({\n        message: message.Body,\n        messageDate: getDate(message),\n        privateKeys,\n        publicKeys,\n        headerFilename,\n        sender\n    });\n\n    const { body = c('Message empty').t`Message content if empty`, mimetype = MIME_TYPES.PLAINTEXT } =\n        (await result.getBody()) || {};\n\n    const verified = getVerifiedStatus(await result.verify(), publicKeys);\n\n    const attachments = convert(message, await result.getAttachments(), verified, attachmentsCache);\n    const encryptedSubject = await result.getEncryptedSubject();\n\n    return { raw: body, data: { ...message, Attachments: attachments }, verified, encryptedSubject, mimetype };\n};\n\nexport const decryptLegacyMessage = async (\n    message: Message,\n    privateKeys: any,\n    publicKeys: any\n): Promise<MessageExtended> => {\n    const { data, verified: pmcryptoVerified = VERIFICATION_STATUS.NOT_SIGNED } = (await decryptMessageLegacy({\n        message: message.Body,\n        messageDate: getDate(message),\n        privateKeys,\n        publicKeys\n    })) as any;\n\n    const verified = getVerifiedStatus(pmcryptoVerified, publicKeys);\n\n    return { raw: data, verified, publicKeys, privateKeys };\n};\n","import { useCallback } from 'react';\nimport { useGetPublicKeys, useGetAddressKeys } from 'react-components';\nimport { splitKeys } from 'proton-shared/lib/keys/keys';\nimport { MessageExtended } from '../models/message';\nimport { isMIME } from '../helpers/message/messages';\nimport { decryptLegacyMessage, decryptMimeMessage } from '../helpers/message/messageDecrypt';\nimport { useAttachmentsCache } from './useAttachments';\n\n// Reference: Angular/src/app/message/factories/messageModel.js decryptBody\n\nexport const useDecryptMessage = () => {\n    const getPublicKeys = useGetPublicKeys();\n    const getAddressKeys = useGetAddressKeys();\n    const attachmentsCache = useAttachmentsCache();\n\n    return useCallback(\n        async ({ data: message = {} }: MessageExtended): Promise<MessageExtended> => {\n            const [{ publicKeys = [] }, addressKeys] = await Promise.all([\n                getPublicKeys((message.Sender || {}).Address),\n                getAddressKeys(message.AddressID)\n            ]);\n            const { privateKeys } = splitKeys(addressKeys) as any;\n\n            // TODO: filter out compromised addresses (if not done already)\n\n            if (isMIME(message)) {\n                return decryptMimeMessage(message, privateKeys, publicKeys, attachmentsCache);\n            }\n\n            return decryptLegacyMessage(message, privateKeys, publicKeys);\n        },\n        [getPublicKeys, getAddressKeys, attachmentsCache]\n    );\n};\n","import React, { useLayoutEffect, createContext } from 'react';\nimport { useInstance, useEventManager } from 'react-components';\nimport createCache from 'proton-shared/lib/helpers/cache';\nimport createLRU from 'proton-shared/lib/helpers/lru';\nimport { EVENT_ACTIONS } from 'proton-shared/lib/constants';\nimport { MessageExtended } from '../models/message';\nimport { Event } from '../models/event';\n\ninterface Props {\n    children: JSX.Element;\n}\n\nexport interface Cache<Key, Value> {\n    has: (key: Key) => boolean;\n    get: (key: Key) => Value;\n    set: (key: Key, value: Value) => void;\n    delete: (key: Key) => void;\n    subscribe: (handler: (key: Key) => void) => () => void;\n}\n\nexport type MessageCache = Cache<string, MessageExtended>;\n\nexport const MessageContext = createContext<MessageCache>(null as any /* Just to please TS */);\n\n/**\n * The purpose of this provider is to synchronize individual message fetches with updates from the event manager,\n * and to have a separate LRU cache for it.\n */\nconst MessageProvider = ({ children }: Props) => {\n    const { subscribe } = useEventManager();\n    const cache: MessageCache = useInstance(() => {\n        return createCache(createLRU({ max: 50 } as any));\n    });\n\n    useLayoutEffect(() => {\n        return subscribe(({ Messages }: Event) => {\n            if (!Array.isArray(Messages)) {\n                return;\n            }\n            for (const { ID, Action, Message } of Messages) {\n                // Ignore updates for non-fetched messages.\n                if (!cache.has(ID)) {\n                    continue;\n                }\n                if (Action === EVENT_ACTIONS.DELETE) {\n                    cache.delete(ID);\n                }\n                if (Action === EVENT_ACTIONS.UPDATE_DRAFT || Action === EVENT_ACTIONS.UPDATE_FLAGS) {\n                    cache.set(ID, { ...cache.get(ID), ...Message });\n                }\n            }\n        });\n    }, []);\n\n    return <MessageContext.Provider value={cache}>{children}</MessageContext.Provider>;\n};\n\nexport default MessageProvider;\n","import { REGEX_EMAIL } from 'proton-shared/lib/constants';\nimport { Address } from '../models/address';\nimport { Key } from '../models/key';\nimport { Recipient, Message } from '../models/message';\n\nexport const REGEX_RECIPIENT = /(.*)\\s*<([^>]*)>/;\n\nexport const validateAddress = (address = '') => REGEX_EMAIL.test(address);\n\nexport const validateAddresses = (addresses: string[]) => addresses.every(validateAddress);\n\n/**\n * Transform value to be normalized (lowercase)\n */\nexport const normalizeEmail = (email = '') => email.toLowerCase();\n\n/**\n * Remove plus alias part present in the email value\n */\nexport const removeEmailAlias = (email = '') => {\n    return normalizeEmail(email)\n        .replace(/(\\+[^@]*)@/, '@')\n        .replace(/[._-](?=[^@]*@)/g, '');\n};\n\n/**\n * Add plus alias part for an email\n */\nexport const addPlusAlias = (email = '', plus = '') => {\n    const atIndex = email.indexOf('@');\n    const plusIndex = email.indexOf('+');\n\n    if (atIndex === -1 || plusIndex > -1) {\n        return email;\n    }\n\n    const name = email.substring(0, atIndex);\n    const domain = email.substring(atIndex, email.length);\n\n    return `${name}+${plus}${domain}`;\n};\n\n/**\n * Get address from email\n * Remove + alias and transform to lower case\n */\nexport const getByEmail = (addresses: Address[], email = '') => {\n    const cleanEmail = removeEmailAlias(email);\n    return addresses.find(({ Email }) => removeEmailAlias(Email) === cleanEmail);\n};\n\n/**\n * Check if the address is fallback (Can't receive but has keys)\n */\nexport const isFallbackAddress = (address?: Address, keys: Key[] = []) =>\n    !!address && !address.Receive && !!keys.length;\n\nexport const isOwnAddress = (address?: Address, keys: Key[] = []) => !isFallbackAddress(address, keys);\n\nexport const inputToRecipient = (input: string): Recipient => {\n    const match = REGEX_RECIPIENT.exec(input);\n\n    if (match !== null) {\n        return {\n            Name: match[1],\n            Address: match[2]\n        };\n    }\n    return {\n        Name: input,\n        Address: input\n    };\n};\n\nexport const recipientToInput = (recipient: Recipient = {}): string => {\n    if (recipient.Address && recipient.Name && recipient.Address !== recipient.Name) {\n        return `${recipient.Name} <${recipient.Address}>`;\n    }\n\n    if (recipient.Address === recipient.Name) {\n        return recipient.Address || '';\n    }\n\n    return `${recipient.Name} ${recipient.Address}`;\n};\n\n/**\n * Detect if the email address is a valid plus alias and returns the address model appropriate\n */\nexport const getAddressFromPlusAlias = (addresses: Address[], email = ''): Address | undefined => {\n    const plusIndex = email.indexOf('+');\n    const atIndex = email.indexOf('@');\n\n    if (plusIndex === -1 || atIndex === -1) {\n        return;\n    }\n\n    // Remove the plus alias part to find a match with existing addresses\n    const address = getByEmail(addresses, removeEmailAlias(email));\n    const { Status, Receive, Send } = address || {};\n\n    if (!Status || !Receive || !Send) {\n        // pm.me addresses on free accounts (Send = 0)\n        return;\n    }\n\n    const plusPart = email.substring(plusIndex + 1, atIndex);\n\n    // Returns an address where the Email is build to respect the exising capitalization and add the plus part\n    return { ...address, Email: addPlusAlias(address?.Email, plusPart) };\n};\n\n/**\n * Return list of addresses available in the FROM select\n */\nexport const getFromAdresses = (addresses: Address[], originalTo = '') => {\n    const result = addresses\n        .filter(({ Status, Receive }) => Status === 1 && Receive === 1)\n        .sort((a1, a2) => (a1.Order || 0) - (a2.Order || 0));\n\n    const plusAddress = getAddressFromPlusAlias(addresses, originalTo);\n\n    if (plusAddress) {\n        // It's important to unshift the plus address to be found first with find()\n        result.unshift(plusAddress);\n    }\n\n    return result;\n};\n\n/**\n * Find the current sender for a message\n */\nexport const findSender = (addresses: Address[] = [], { AddressID = '' }: Message = {}): Address | undefined => {\n    const enabledAddresses = addresses\n        .filter((address) => address.Status === 1)\n        .sort((a1, a2) => (a1.Order || 0) - (a2.Order || 0));\n\n    if (AddressID) {\n        const originalAddress = enabledAddresses.find((address) => address.ID === AddressID);\n        if (originalAddress) {\n            return originalAddress;\n        }\n    }\n\n    return enabledAddresses[0];\n};\n","import { ContactEmailCache, ContactEmail } from '../models/contact';\nimport { normalizeEmail } from './addresses';\n\nexport const findEmailInCache = (cache: ContactEmailCache, email: string): ContactEmail =>\n    [...cache.values()].find(({ Email }) => {\n        return email === normalizeEmail(Email);\n    }) || {};\n","import { encodeBase64, decodeBase64 } from 'pmcrypto';\nimport { arrayToBinaryString, binaryStringToArray } from 'proton-shared/lib/helpers/string';\nimport { Binary } from '../models/utils';\n\nexport const arrayToBase64 = (data: Binary): string => encodeBase64(arrayToBinaryString(data));\n\nexport const base64ToArray = (data: string): Binary => binaryStringToArray(decodeBase64(data));\n","import { getKeys, decodeBase64, binaryStringToArray, getFingerprint, isExpiredKey } from 'pmcrypto';\n\nimport { unique } from 'proton-shared/lib/helpers/array';\nimport { PACKAGE_TYPE, RECIPIENT_TYPE, MIME_TYPES, KEY_FLAGS } from 'proton-shared/lib/constants';\n\nimport { Message } from '../../models/message';\nimport { isEO, isSign } from '../message/messages';\nimport { normalizeEmail } from '../addresses';\nimport { Address } from '../../models/address';\nimport { getByEmail, isOwnAddress, isFallbackAddress } from '../addresses';\nimport { KeyData, Key } from '../../models/key';\nimport { findEmailInCache } from '../contacts';\nimport { ContactEmailCache, ContactEmail } from '../../models/contact';\nimport { base64ToArray } from '../base64';\n\nexport type MapPreference = { [email: string]: SendPreference };\n\nexport interface SendPreference {\n    encrypt: boolean;\n    sign: boolean;\n    mimetype: MIME_TYPES;\n    publickeys: Key[];\n    primaryPinned: boolean;\n    scheme: PACKAGE_TYPE;\n    pinned: boolean;\n    isVerified: boolean;\n    warnings: any[];\n    ownAddress: boolean;\n}\n\ntype CachePreference = { [contactID: string]: { [email: string]: PreferenceInfo } };\n\ninterface PreferenceInfo {\n    encryptFlag: boolean;\n    signFlag: boolean;\n    emailKeys: string[];\n    mimetype: MIME_TYPES;\n    scheme: PACKAGE_TYPE;\n    isVerified: boolean;\n}\n\nconst cache: CachePreference = {};\n\nconst emailInExtrInfo = (contactEmail: ContactEmail) =>\n    cache[contactEmail.ContactID || ''] && cache[contactEmail.ContactID || ''][normalizeEmail(contactEmail.Email)];\n\nconst getInExtrInfo = (contactEmail: ContactEmail) =>\n    (cache[contactEmail.ContactID || ''] || {})[normalizeEmail(contactEmail.Email)] || {};\n\nconst usesDefaults = (contactEmail: ContactEmail) => !contactEmail || contactEmail.Defaults;\n\n/**\n * Determines if a certain key object is allowed to be used for encryption\n */\nconst encryptionEnabled = ({ Flags }: Key) => Flags & KEY_FLAGS.ENABLE_ENCRYPTION;\n\n/**\n * Returns the default send preferences if no contact is available for the specified email address.\n * The global settings, composer mode and API keys can still change the defaults though.\n */\nconst getDefaultInfo = async (\n    email: string,\n    { RecipientType, Keys = [], Warnings: warnings = [] }: KeyData,\n    defaultMimeType: MIME_TYPES,\n    eoEnabled: boolean,\n    globalSign: boolean,\n    mailSettings: any,\n    addresses: Address[]\n): Promise<SendPreference> => {\n    const isInternal = RecipientType === RECIPIENT_TYPE.TYPE_INTERNAL;\n    const isExternal = RecipientType === RECIPIENT_TYPE.TYPE_EXTERNAL;\n    const settingsScheme = mailSettings.PGPScheme;\n    const settingsMime = settingsScheme === PACKAGE_TYPE.SEND_PGP_MIME ? MIME_TYPES.MIME : MIME_TYPES.PLAINTEXT;\n    const address = getByEmail(addresses, email);\n    const ownAddress = isOwnAddress(address, Keys);\n\n    if ((isInternal || isExternal) && Keys.length) {\n        const fallbackAddress = isFallbackAddress(address, Keys);\n\n        return {\n            warnings,\n            encrypt: true,\n            sign: true,\n            mimetype: isExternal ? settingsMime : defaultMimeType,\n            publickeys: await getKeys(Keys[0].PublicKey),\n            primaryPinned: !fallbackAddress,\n            scheme: isInternal ? PACKAGE_TYPE.SEND_PM : settingsScheme,\n            pinned: ownAddress,\n            ownAddress,\n            isVerified: true\n        };\n    }\n    if (eoEnabled) {\n        return {\n            warnings,\n            encrypt: true,\n            sign: false,\n            mimetype: defaultMimeType,\n            publickeys: [],\n            primaryPinned: true,\n            scheme: PACKAGE_TYPE.SEND_EO,\n            pinned: false,\n            ownAddress,\n            isVerified: true\n        };\n    }\n    return {\n        warnings,\n        encrypt: false,\n        sign: globalSign,\n        mimetype: globalSign ? settingsMime : defaultMimeType,\n        publickeys: [],\n        primaryPinned: true,\n        scheme: globalSign ? settingsScheme : PACKAGE_TYPE.SEND_CLEAR,\n        pinned: false,\n        ownAddress,\n        isVerified: true\n    };\n};\n\nconst mimetypeLogic = (\n    mimetype: MIME_TYPES,\n    defaultMimetype: MIME_TYPES,\n    scheme: PACKAGE_TYPE,\n    sign: boolean,\n    encrypt: boolean\n) => {\n    /*\n     * PGP/MIME can only send using the MIME encoding as it doesn't support separate attachments and we need to encode\n     * them in the body\n     */\n    if (scheme === PACKAGE_TYPE.SEND_PGP_MIME && (sign || encrypt)) {\n        return MIME_TYPES.MIME;\n    }\n    if (scheme === PACKAGE_TYPE.SEND_PGP_INLINE && (sign || encrypt)) {\n        return MIME_TYPES.PLAINTEXT;\n    }\n    // If sending EO, respect the mime type of the composer, since it will be what the API returns when retrieving the message.\n    if (scheme === PACKAGE_TYPE.SEND_EO) {\n        return defaultMimetype;\n    }\n    if (defaultMimetype === MIME_TYPES.PLAINTEXT || mimetype === null) {\n        // NEVER upconvert\n        return defaultMimetype;\n    }\n    return mimetype;\n};\n\n/**\n * Checks if one of the allowed sending keys is pinned. This function returns true if key pinning is disabled\n * or if atleast on of the Sending keys are in the contacts\n * Should be done on extract, so API changes (the other user resetting their password) are noticed.\n */\nconst isPrimaryPinned = async (base64Keys: string[], Keys: Key[], email: string, addresses: Address[]) => {\n    if (base64Keys.length === 0) {\n        const address = getByEmail(addresses, email);\n        return !isFallbackAddress(address, Keys);\n    }\n\n    const sendKeys = Keys.filter(encryptionEnabled).map((key) => key.PublicKey);\n    const keys = await Promise.all(sendKeys.map(getKeys));\n    const sendKeyObjects = keys.filter(([k = false]: any) => !!k);\n    const [pinnedKey] = await getKeys(base64ToArray(base64Keys[0]) as any);\n    const pinnedFingerprint = getFingerprint(pinnedKey);\n\n    return (\n        sendKeyObjects.length === 0 || sendKeyObjects.map(([k]: any) => getFingerprint(k)).includes(pinnedFingerprint)\n    );\n};\n\n/**\n * Generates the sendpreferences using the extracted information after parsing the contacts.\n * This function is the counterpart extractInfo\n */\nconst extractInfo = async (\n    { encryptFlag, signFlag, mimetype: inputMimetype, emailKeys, scheme: inputScheme, isVerified }: PreferenceInfo,\n    keyData: KeyData,\n    defaultMimeType: MIME_TYPES,\n    eoEnabled: boolean,\n    globalSign: boolean,\n    email: string,\n    mailSettings: any,\n    addresses: Address[]\n): Promise<SendPreference> => {\n    // const info: SendPreference = {};\n    const { RecipientType, Warnings = [], Keys = [] } = keyData;\n    const isInternal = RecipientType === RECIPIENT_TYPE.TYPE_INTERNAL;\n    const isExternalWithKeys = RecipientType === RECIPIENT_TYPE.TYPE_EXTERNAL && Keys.length > 0;\n    const primaryPinned =\n        isInternal || isExternalWithKeys ? await isPrimaryPinned(emailKeys, Keys, email, addresses) : true;\n    const pmKey = isInternal || isExternalWithKeys ? await getKeys(Keys[0].PublicKey) : [];\n    // In case the pgp packet list contains multiple keys, only the first one is taken.\n    const keyObjs = await Promise.all(\n        emailKeys\n            .map(decodeBase64)\n            .map(binaryStringToArray)\n            .map((a) => {\n                return getKeys(a).then(([k]: any) =>\n                    isExpiredKey(k).then((isExpired: boolean) => (isExpired ? null : [k]))\n                );\n            })\n    );\n    const keyObjects = keyObjs.filter((k) => k !== null);\n\n    const publickeys = keyObjects.length && primaryPinned ? keyObjects[0] : pmKey;\n    const warnings = Warnings;\n    let encrypt = isInternal || isExternalWithKeys || (encryptFlag && !!keyObjects.length);\n    let sign = isInternal || isExternalWithKeys || (signFlag === null ? !!globalSign : signFlag);\n    sign = sign || encryptFlag;\n\n    let scheme: PACKAGE_TYPE;\n    if (isInternal) {\n        scheme = PACKAGE_TYPE.SEND_PM;\n    } else {\n        scheme = sign || encrypt ? inputScheme : PACKAGE_TYPE.SEND_CLEAR;\n    }\n    scheme = scheme === null ? mailSettings.PGPScheme : scheme;\n\n    if (eoEnabled && !encrypt) {\n        sign = false;\n        encrypt = true;\n        scheme = PACKAGE_TYPE.SEND_EO;\n    }\n\n    const mimetype = mimetypeLogic(inputMimetype, defaultMimeType, scheme, sign, encrypt);\n    const pinned = keyObjects.length > 0;\n    const ownAddress = false;\n\n    return { publickeys, warnings, encrypt, sign, scheme, mimetype, primaryPinned, isVerified, pinned, ownAddress };\n};\n\n/**\n * Extracts the preferences from the contacts and stores it in the cache for reusage.\n * The logic is straightforward but we see for more info\n * https://docs.google.com/document/d/1lEBkG0DC5FOWlumInKtu4a9Cc1Eszp48ZhFy9UpPQso\n */\nconst getApiInfo = async (\n    email: string,\n    keyData: KeyData,\n    defaultMimeType: MIME_TYPES,\n    eoEnabled: boolean,\n    globalSign: boolean,\n    mailSettings: any,\n    addresses: Address[],\n    cache: ContactEmailCache\n) => {\n    const normalizedEmail = normalizeEmail(email);\n    // const isInternal = keyData.RecipientType === RECIPIENT_TYPE.TYPE_INTERNAL;\n    // const isExternalWithKeys = keyData.RecipientType === RECIPIENT_TYPE.TYPE_EXTERNAL && keyData.Keys.length > 0;\n\n    const contactEmail = findEmailInCache(cache, normalizedEmail);\n    if (usesDefaults(contactEmail)) {\n        const info = await getDefaultInfo(\n            email,\n            keyData,\n            defaultMimeType,\n            eoEnabled,\n            globalSign,\n            mailSettings,\n            addresses\n        );\n        return { [email]: info };\n    }\n\n    // TODO: Decrypt contacts\n    throw 'Unsupported';\n\n    // const { vCard, errors } = await Contact.get(contactEmail.ContactID);\n\n    // const keyList = toList(vCard.get('key'));\n    // const encryptFlagList = toList(vCard.get('x-pm-encrypt'));\n    // const signFlagList = toList(vCard.get('x-pm-sign'));\n    // const schemeList = toList(vCard.get('x-pm-scheme'));\n    // const mimeList = toList(vCard.get('x-pm-mimetype'));\n    // const emailList = toList(vCard.get('email'));\n\n    // const group = getGroup(emailList, normalizedEmail);\n    // if (!group) {\n    //     return { [email]: await getDefaultInfo(email, keyData, defaultMimeType, eoEnabled, globalSign) };\n    // }\n\n    // const matchesGroup = groupMatcher(group.toLowerCase());\n    // const emailKeys = _.filter(keyList, matchesGroup);\n    // const encryptFlag = _.find(encryptFlagList, matchesGroup);\n    // const signFlag = _.find(signFlagList, matchesGroup);\n    // const mimetypeProp = _.find(mimeList, matchesGroup);\n    // const mimetype = mimetypeProp ? mimetypeProp.valueOf() : null;\n    // const schemeProp = _.find(schemeList, matchesGroup);\n    // const scheme = schemeProp ? toSchemeConstant(schemeProp.valueOf()) : null;\n    // const base64Keys = await reorderKeys(\n    //     keyData,\n    //     (await Promise.all(_.map(emailKeys, (prop) => contactKey.getBase64Value(prop)))).filter(Boolean) // In case the key is expired or revoked we don't get the base 64 value but false\n    // );\n    // const data = {\n    //     encryptFlag:\n    //         isInternal ||\n    //         isExternalWithKeys ||\n    //         ((encryptFlag ? encryptFlag.valueOf().toLowerCase() !== 'false' : false) && emailKeys.length > 0),\n    //     signFlag:\n    //         isInternal ||\n    //         isExternalWithKeys ||\n    //         (signFlag ? signFlag.valueOf().toLowerCase() !== 'false' : !!globalSign),\n    //     emailKeys: base64Keys,\n    //     mimetype: mimetype !== 'text/plain' && mimetype !== 'text/html' ? null : mimetype,\n    //     scheme: isInternal ? PACKAGE_TYPE.SEND_PM : scheme,\n    //     isVerified: !errors.includes(CONTACT_ERROR.TYPE2_CONTACT_VERIFICATION)\n    // };\n\n    // // We don't support encryption without signing\n    // data.signFlag = data.signFlag || data.encryptFlag;\n\n    // CACHE.EXTRACTED_INFO[contactEmail.ContactID] = CACHE[contactEmail.ContactID] || {};\n    // CACHE.EXTRACTED_INFO[contactEmail.ContactID][normalizedEmail] = data;\n\n    // return { [email]: await extractInfo(data, keyData, defaultMimeType, eoEnabled, globalSign, email) };\n};\n\n/**\n * Extracts send preferences from the cache if available\n */\nconst getCacheInfo = async (\n    email: string,\n    keyData: KeyData,\n    defaultMimeType: MIME_TYPES,\n    eoEnabled: boolean,\n    globalSign: boolean,\n    mailSettings: any,\n    addresses: Address[],\n    cache: ContactEmailCache\n): Promise<MapPreference> => {\n    const normalizedEmail = normalizeEmail(email);\n    const contactEmail = findEmailInCache(cache, normalizedEmail);\n\n    if (usesDefaults(contactEmail)) {\n        return {\n            [email]: await getDefaultInfo(\n                email,\n                keyData,\n                defaultMimeType,\n                eoEnabled,\n                globalSign,\n                mailSettings,\n                addresses\n            )\n        };\n    }\n\n    if (!emailInExtrInfo(contactEmail)) {\n        // return { [email]: null };\n        return {};\n    }\n\n    return {\n        [email]: await extractInfo(\n            getInExtrInfo(contactEmail),\n            keyData,\n            defaultMimeType,\n            eoEnabled,\n            globalSign,\n            email,\n            mailSettings,\n            addresses\n        )\n    };\n};\n\nconst inExtractedInfoCache = (contactEmailList: ContactEmail[]) =>\n    contactEmailList.every((e) => usesDefaults(e) || emailInExtrInfo(e));\n\nconst inCache = (emails: string[], cache: ContactEmailCache) => {\n    const normalizedEmails = emails.map(normalizeEmail);\n    const contactEmailList = normalizedEmails.map((email) => findEmailInCache(cache, email));\n\n    return inExtractedInfoCache(contactEmailList);\n};\n\nconst getInfo = async (\n    email: string,\n    keyData: KeyData,\n    defaultMimeType: MIME_TYPES,\n    eoEnabled: boolean,\n    globalSign: boolean,\n    mailSettings: any,\n    addresses: Address[],\n    cache: ContactEmailCache\n): Promise<MapPreference> => {\n    const address = getByEmail(addresses, email);\n\n    if (isOwnAddress(address, keyData.Keys)) {\n        const info = await getDefaultInfo(\n            email,\n            keyData,\n            defaultMimeType,\n            eoEnabled,\n            globalSign,\n            mailSettings,\n            addresses\n        );\n        return { [email]: info };\n    }\n\n    if (inCache([email], cache)) {\n        return getCacheInfo(email, keyData, defaultMimeType, eoEnabled, globalSign, mailSettings, addresses, cache);\n    }\n\n    return getApiInfo(email, keyData, defaultMimeType, eoEnabled, globalSign, mailSettings, addresses, cache);\n};\n\n/**\n * The goal of this service is to provide all the encryption + encoding preferences for a recipient by parsing the\n * contact of the recipient, considering the general settings, inputs from the message that we want to send and API stuff\n *\n * For the general logic see:\n * https://docs.google.com/document/d/1lEBkG0DC5FOWlumInKtu4a9Cc1Eszp48ZhFy9UpPQso\n * This is the specification it should implement and should be the right way to do this\n *\n * primaryPinned basically just says if the primary key is available for sending (so either pinned or key pinning is disabled\n * It differs from pinned as pinned just says is key pinning is enabled.\n * primaryPinned is a flag that tells the FE that we first need to fix the sendPreference before sending.\n */\nexport const getSendPreferences = async (\n    emails: string[] = [],\n    message: Message,\n    mailSettings: any,\n    addresses: Address[],\n    cache: ContactEmailCache,\n    getPublicKeys: (email: string) => Promise<any>,\n    catchErrors = false\n): Promise<MapPreference> => {\n    const defaultMimeType: MIME_TYPES = message ? (message.MIMEType as MIME_TYPES) : MIME_TYPES.DEFAULT;\n    const eoEnabled = isEO(message);\n    const globalSign = message ? isSign(message) : mailSettings.Sign;\n    const normEmails: string[] = unique(emails.map(normalizeEmail));\n    const normInfos = await Promise.all(\n        normEmails.map(async (email) => {\n            try {\n                const keyData: KeyData = await getPublicKeys(email);\n                return getInfo(email, keyData, defaultMimeType, eoEnabled, globalSign, mailSettings, addresses, cache);\n            } catch (e) {\n                if (!catchErrors) {\n                    throw e;\n                }\n            }\n        })\n    );\n    const normMap = Object.assign({}, ...normInfos);\n\n    return emails.reduce((acc, cur) => {\n        const result = normMap[normalizeEmail(cur)];\n        if (!result) {\n            return acc;\n        }\n        acc[cur] = result;\n        return acc;\n    }, {} as MapPreference);\n};\n","import mimemessage from 'mimemessage';\n\nimport { MessageExtended } from '../../models/message';\nimport { getPlainText, getHTML } from '../message/messages';\nimport { Attachment } from '../../models/attachment';\n\n// Reference: Angular/src/app/composer/services/mimeMessageBuilder.js\n\n/**\n * Remove '; name=' and '; filename=' values\n */\n// const extractContentValue = (value = '') => {\n//     const semicolonIndex = value.indexOf(';');\n//     if (semicolonIndex === -1) {\n//         return value;\n//     }\n//     return value.substr(0, semicolonIndex);\n// };\n\n// const buildAttachments = (attachments) => {\n//     return _.map(attachments, ({ attachment, data }) => {\n//         const attachmentName = JSON.stringify(attachment.Name);\n//         const contentTypeValue =\n//             extractContentValue(attachment.Headers['content-type']) ||\n//             attachment.MIMEType ||\n//             'application/octet-stream';\n//         const contentDispositionValue = extractContentValue(attachment.Headers['content-disposition']) || 'attachment';\n//         const entity = mimemessage.factory({\n//             contentType: `${contentTypeValue}; filename=${attachmentName}; name=${attachmentName}`,\n//             contentTransferEncoding: 'base64',\n//             body: arrayToBinaryString(data)\n//         });\n\n//         entity.header(\n//             'content-disposition',\n//             `${contentDispositionValue}; filename=${attachmentName}; name=${attachmentName}`\n//         );\n\n//         if (attachment.Headers['content-id']) {\n//             entity.header('content-id', attachment.Headers['content-id']);\n//         }\n\n//         return entity;\n//     });\n// };\n\nconst buildEmbeddedHtml = (html?: string, attachments?: Attachment[]) => {\n    const htmlEntity = mimemessage.factory({\n        contentType: 'text/html;charset=utf-8',\n        contentTransferEncoding: 'base64',\n        body: html\n    });\n\n    if (attachments && attachments.length > 0) {\n        console.log('attachments in mime message ignored as not supported yet', attachments);\n    }\n    // TODO: Attachments\n    // const testDiv = embeddedUtils.getBodyParser(html);\n    // const inlineAttachments = embeddedUtils.extractEmbedded(attachments, testDiv);\n    // const attachmentEntities = buildAttachments(inlineAttachments);\n\n    // add the attachments\n    // const relatedBody = [htmlEntity].concat(attachmentEntities);\n    const relatedBody = [htmlEntity];\n\n    return mimemessage.factory({\n        contentType: 'multipart/related',\n        body: relatedBody\n    });\n};\n\n/**\n * Quoted printable for compatibility with old clients\n * Mimemessagefactory doesn't handle the empty string well.\n */\nconst buildPlaintextEntity = (plaintext?: string) =>\n    mimemessage.factory({\n        body: plaintext,\n        contentTransferEncoding: 'quoted-printable'\n    });\n\n/**\n * Build the multipart/alternate MIME entity containing both the HTML and plain text entities.\n */\nconst buildAlternateEntity = (plaintext?: string, html?: string, attachments?: Attachment[]) =>\n    mimemessage.factory({\n        contentType: 'multipart/alternative',\n        body: [buildPlaintextEntity(plaintext), buildEmbeddedHtml(html, attachments)]\n    });\n\n/**\n * Builds a mime body given the plaintext, html source and a list of attachments to fetch embedded images from\n */\nconst buildBodyEntity = (plaintext?: string, html?: string, attachments?: Attachment[]) => {\n    if (html !== undefined && plaintext !== undefined) {\n        return buildAlternateEntity(plaintext, html, attachments);\n    }\n    return html !== undefined ? buildEmbeddedHtml(html, attachments) : buildPlaintextEntity(plaintext);\n};\n\n/**\n * Extracts the non-inline attachments from the given html.\n */\n// const getNormalAttachments = (html?: string, attachments?: Attachment[]) => {\n//     if (html === undefined) {\n//         return attachments;\n//     }\n//     const testDiv = embeddedUtils.getBodyParser(html);\n//     const embeddedAttachments = embeddedUtils.extractEmbedded(attachments, testDiv);\n//     return _.difference(attachments, embeddedAttachments);\n// };\n\n/**\n * Builds a multipart message from the given plaintext, html bodies and attachments.\n * The html body is not necessary to create a valid mime body\n */\nconst build = (plaintext?: string, html?: string, attachments?: Attachment[]): string => {\n    const bodyEntity = buildBodyEntity(plaintext, html, attachments);\n\n    if (attachments && attachments.length > 0) {\n        console.log('attachments in mime message ignored as not supported yet', attachments);\n    }\n    // const normalAttachments = getNormalAttachments(html, attachments);\n    // const attachmentEntities = buildAttachments(normalAttachments);\n    // const body = [bodyEntity].concat(attachmentEntities);\n    const body = [bodyEntity];\n\n    const msgentity = mimemessage.factory({\n        contentType: 'multipart/mixed',\n        body\n    });\n    // this trailing line space is important: if it's not there outlook.com adds it and breaks pgp/mime signatures.\n    return msgentity.toString() + '\\r\\n';\n};\n\n// const fetchMimeDependencies = async (message: Message, downconvert: boolean) => {\n//     const attachments = await Promise.all(\n//         message.getAttachments().map(async (attachment) => ({\n//             attachment,\n//             data: await AttachmentLoader.get(attachment, message)\n//         }))\n//     );\n//     return [attachments, generatePlaintext(message, downconvert)];\n// };\n\nexport const constructMime = async (message: MessageExtended, downconvert = true) => {\n    // console.log('construct mime not implemented', message, downconvert);\n    // // TODO\n    // return 'not implemented';\n\n    // TODO: ?\n    // if (message.isMIME() && message.decryptedMIME) {\n    //     return message.decryptedMIME;\n    // }\n\n    // TODO: add attachments\n    // const [attachments, plaintext] = await fetchMimeDependencies(message, downconvert);\n\n    const plaintext = getPlainText(message, downconvert);\n    const html = getHTML(message);\n    return build(plaintext, html, []);\n};\n","import { MIME_TYPES, PACKAGE_TYPE } from 'proton-shared/lib/constants';\n\nimport { MessageExtended } from '../../models/message';\nimport { MapPreference } from './sendPreferences';\n\nimport { constructMime } from './sendMimeBuilder';\nimport { Key } from '../../models/key';\nimport { addReceived, getPlainText, getHTML } from '../message/messages';\n\n// Reference: Angular/src/app/composer/services/encryptMessage.js\n// Reference: Angular/src/app/composer/services/generateTopPackages.js\n\nconst { PLAINTEXT, DEFAULT, MIME } = MIME_TYPES;\n\ntype PackageStatus = {\n    [key in MIME_TYPES]?: boolean;\n};\n\nexport type Packages = {\n    [key in MIME_TYPES]?: Package;\n};\n\nexport interface Package {\n    Flags?: number;\n    Addresses?: { [email: string]: Package };\n    MIMEType?: MIME_TYPES;\n    Body?: string;\n    BodyKey?: any;\n    BodyKeyPacket?: string;\n    Type?: PACKAGE_TYPE;\n    PublicKey?: Key;\n}\n\n/**\n * Generates the mime top-level packages, which include all attachments in the body.\n * Build the multipart/alternate MIME entity containing both the HTML and plain text entities.\n */\nconst generateMimePackage = async (message: MessageExtended): Promise<Package> => ({\n    Flags: addReceived(message.data?.Flags),\n    Addresses: {},\n    MIMEType: MIME,\n    Body: await constructMime(message)\n});\n\nconst generatePlainTextPackage = async (message: MessageExtended): Promise<Package> => ({\n    Flags: addReceived(message.data?.Flags),\n    Addresses: {},\n    MIMEType: PLAINTEXT,\n    Body: getPlainText(message, true)\n});\n\nconst generateHTMLPackage = async (message: MessageExtended): Promise<Package> => ({\n    Flags: addReceived(message.data?.Flags),\n    Addresses: {},\n    MIMEType: DEFAULT,\n    Body: getHTML(message)\n});\n\n/**\n * Generates all top level packages. The top level packages have unencrypted bodies which are encrypted later on\n * once the sub level packages are attached, so we know with which keys we need to encrypt the bodies with.\n * Top level packages that are not needed are not generated.\n */\nexport const generateTopPackages = async (message: MessageExtended, sendPrefs: MapPreference): Promise<Packages> => {\n    const packagesStatus: PackageStatus = Object.values(sendPrefs).reduce(\n        (packages, info) => ({\n            [PLAINTEXT]: packages[PLAINTEXT] || info.mimetype === MIME_TYPES.PLAINTEXT,\n            [DEFAULT]:\n                packages[DEFAULT] ||\n                info.mimetype === DEFAULT ||\n                (info.scheme === PACKAGE_TYPE.SEND_PGP_MIME && !info.encrypt && !info.sign),\n            [MIME]: packages[MIME] || (info.scheme === PACKAGE_TYPE.SEND_PGP_MIME && (info.encrypt || info.sign))\n        }),\n        {\n            [PLAINTEXT]: false,\n            [DEFAULT]: false,\n            [MIME]: false\n        } as PackageStatus\n    );\n\n    const demandedPackages = Object.values(MIME_TYPES).filter((k) => packagesStatus[k]);\n\n    const packages: Packages = {};\n\n    await Promise.all(\n        demandedPackages.map(async (type) => {\n            switch (type) {\n                case MIME:\n                    packages[MIME] = await generateMimePackage(message);\n                    return;\n                case PLAINTEXT:\n                    packages[PLAINTEXT] = await generatePlainTextPackage(message);\n                    return;\n                case DEFAULT:\n                    packages[DEFAULT] = await generateHTMLPackage(message);\n                    return;\n                default:\n                    throw new Error(); // Should never happen.\n            }\n        })\n    );\n\n    return packages;\n};\n","import { MIME_TYPES, PACKAGE_TYPE } from 'proton-shared/lib/constants';\n\nimport { Package, Packages } from './sendTopPackages';\nimport { MessageExtended, Message } from '../../models/message';\nimport { MapPreference, SendPreference } from './sendPreferences';\nimport { isEO, getAttachments } from '../message/messages';\n\nconst { PLAINTEXT, DEFAULT, MIME } = MIME_TYPES;\nconst { SEND_PM, SEND_CLEAR, SEND_PGP_INLINE, SEND_PGP_MIME, SEND_EO } = PACKAGE_TYPE;\n\nexport const SEND_MIME = 32; // TODO update proton-shared constant\n\n/**\n * Package for a ProtonMail user.\n */\nconst sendPM = async ({ publickeys }: SendPreference, message: Message = {}) => ({\n    Type: SEND_PM,\n    PublicKey: publickeys.length ? publickeys[0] : undefined,\n    Signature: getAttachments(message).every(({ Signature }) => Signature)\n});\n\n/**\n * Package for a outside user using ProtonMail encryption\n */\nconst sendPMEncryptedOutside = async (message: Message = {}) => {\n    console.warn('Unsuported yet', message);\n\n    // TODO\n\n    return {};\n\n    // try {\n    //     const Token = await message.generateReplyToken();\n\n    //     const [{ data: EncToken }, { Auth }] = await Promise.all([\n    //         encryptMessage({ data: Token, publicKeys: [], passwords: [message.Password] }),\n    //         srp.getVerify({ Password: message.Password })\n    //     ]);\n\n    //     return {\n    //         Auth,\n    //         Type: SEND_TYPES.SEND_EO,\n    //         PasswordHint: message.PasswordHint,\n    //         Token,\n    //         EncToken,\n    //         Signature: +message.Attachments.every(({ Signature }) => Signature)\n    //     };\n    // } catch (err) {\n    //     message.encrypting = false;\n    //     dispatchMessageAction(message);\n    //     console.error(err);\n    //     throw err;\n    // }\n};\n\n/**\n * Package for a PGP/MIME user.\n */\nconst sendPGPMime = async ({ publickeys, sign, encrypt }: SendPreference) => {\n    if (encrypt) {\n        return {\n            Type: SEND_PGP_MIME,\n            PublicKey: publickeys.length ? publickeys[0] : undefined\n        };\n    }\n\n    // PGP/MIME signature only\n    return {\n        Type: SEND_MIME,\n        Signature: +sign\n    };\n};\n\n/**\n * Package for a PGP/Inline user.\n */\nconst sendPGPInline = async ({ publickeys, sign, encrypt }: SendPreference, message: Message = {}) => {\n    if (encrypt) {\n        return {\n            Type: SEND_PGP_INLINE,\n            PublicKey: publickeys.length ? publickeys[0] : undefined,\n            Signature: getAttachments(message).every(({ Signature }) => Signature)\n        };\n    }\n\n    // PGP/Inline signature only\n    return {\n        Type: SEND_CLEAR,\n        Signature: +sign\n    };\n};\n\n/**\n * Package for an unencrypted user\n */\nconst sendClear = async () => ({ Type: SEND_CLEAR, Signature: 0 });\n\n/**\n * Attach the subpackages for encryptMessage to the given top level packages. The packages need to be encrypted before\n * they can be send to the api. See encryptPackages for that.\n */\nexport const attachSubPackages = async (\n    packages: Packages,\n    message: MessageExtended,\n    emails: string[],\n    sendPrefs: MapPreference\n): Promise<Packages> => {\n    const bindPackageSet = async (promise: Promise<Package>, email: string, type: MIME_TYPES) => {\n        const pack = await promise;\n        const packageToUpdate = packages[type] as Package;\n\n        if (!packageToUpdate.Addresses) {\n            packageToUpdate.Addresses = {};\n        }\n        if (!packageToUpdate.Type) {\n            packageToUpdate.Type = 0;\n        }\n\n        packageToUpdate.Addresses[email] = pack;\n        packageToUpdate.Type |= pack.Type || 0;\n    };\n\n    const promises = emails.map((email: string) => {\n        const info = sendPrefs[email];\n\n        const mimeType = info.mimetype === null ? message.data?.MIMEType : info.mimetype;\n        const packageType = mimeType === 'text/html' ? DEFAULT : PLAINTEXT;\n\n        switch (info.scheme) {\n            case SEND_PM:\n                return bindPackageSet(sendPM(info, message.data), email, packageType);\n            case SEND_PGP_MIME:\n                if (!info.sign && !info.encrypt) {\n                    return bindPackageSet(sendClear(), email, DEFAULT);\n                }\n                return bindPackageSet(sendPGPMime(info), email, MIME);\n            case SEND_PGP_INLINE:\n                return bindPackageSet(sendPGPInline(info, message.data), email, PLAINTEXT);\n            case SEND_EO:\n            case SEND_CLEAR:\n                // Encrypted for outside (EO)\n                if (isEO(message.data)) {\n                    return bindPackageSet(sendPMEncryptedOutside(message.data), email, packageType);\n                }\n\n                return bindPackageSet(sendClear(), email, packageType);\n        }\n    });\n\n    await Promise.all(promises);\n    return packages;\n};\n","import {\n    encryptMessage,\n    splitMessage,\n    armorBytes,\n    concatArrays,\n    generateSessionKey,\n    encryptSessionKey\n} from 'pmcrypto';\n\nimport { MessageExtended, Message } from '../../models/message';\nimport { Packages, Package } from './sendTopPackages';\nimport { getAttachments } from '../message/messages';\nimport { getSessionKey } from '../attachment/attachmentLoader';\nimport { Key, AddressKeys } from '../../models/key';\nimport { SessionKey } from '../attachment/attachmentLoader';\nimport { arrayToBase64 } from '../base64';\nimport { PACKAGE_TYPE } from 'proton-shared/lib/constants';\nimport { AES256 } from '../../constants';\nimport { SEND_MIME } from './sendSubPackages';\nimport { identity } from 'proton-shared/lib/helpers/function';\nimport { splitKeys } from 'proton-shared/lib/keys/keys';\n\n// Reference: Angular/src/app/composer/services/encryptPackages.js\n\nconst { SEND_CLEAR, SEND_EO } = PACKAGE_TYPE;\n\nconst packToBase64 = ({ data, algorithm: Algorithm = AES256 }: SessionKey) => {\n    return { Key: arrayToBase64(data), Algorithm };\n};\n\nconst encryptKeyPacket = async ({\n    sessionKeys = [],\n    publicKeys = [],\n    passwords = []\n}: {\n    sessionKeys?: SessionKey[];\n    publicKeys?: Key[];\n    passwords?: string[];\n}) =>\n    Promise.all(\n        sessionKeys.map(async (sessionKey) => {\n            const { message } = await encryptSessionKey({\n                data: sessionKey.data,\n                algorithm: sessionKey.algorithm,\n                publicKeys: publicKeys.length > 0 ? publicKeys : undefined,\n                passwords\n            });\n            const data = message.packets.write();\n            return arrayToBase64(data);\n        })\n    );\n\n/**\n * Encrypt the attachment session keys and add them to the package\n */\nconst encryptAttachmentKeys = (pack: Package, message: MessageExtended, attachmentKeys: SessionKey[]) => {\n    console.log('encryptAttachmentKeys not implemented yet', pack, message, attachmentKeys);\n\n    // TODO\n\n    return;\n\n    //     // multipart/mixed bodies already include the attachments so we don't add them here\n    //     if (pack.MIMEType !== 'multipart/mixed') {\n    //         const promises = _.map(pack.Addresses, (address) => {\n    //             if (!(address.Type & SEND_TYPES.SEND_EO || address.PublicKey)) {\n    //                 return Promise.resolve();\n    //             }\n    //             address.AttachmentKeyPackets = [];\n    //             return encryptKeyPacket({\n    //                 sessionKeys: _.map(attachmentKeys, ({ sessionKey }) => sessionKey),\n    //                 passwords: address.Type & SEND_TYPES.SEND_EO ? [message.Password] : undefined,\n    //                 publicKeys: address.Type & SEND_TYPES.SEND_EO ? undefined : [address.PublicKey]\n    //             })\n    //                 .then((keys) =>\n    //                     _.zipObject(\n    //                         _.map(attachmentKeys, ({ AttachmentID, ID }) => AttachmentID || ID),\n    //                         keys\n    //                     )\n    //                 )\n    //                 .then((AttachmentKeyPackets) => {\n    //                     address.AttachmentKeyPackets = AttachmentKeyPackets;\n    //                 });\n    //         });\n    //         if (pack.Type & SEND_TYPES.SEND_CLEAR) {\n    //             pack.AttachmentKeys = _.extend(\n    //                 ..._.map(attachmentKeys, ({ sessionKey = {}, AttachmentID, ID } = {}) => ({\n    //                     [AttachmentID || ID]: packToBase64(sessionKey)\n    //                 }))\n    //             );\n    //         }\n    //         return Promise.all(promises);\n    //     }\n    //     return Promise.resolve();\n};\n\n/**\n * Generate random session key in the format openpgp creates them\n */\nconst generateSessionKeyHelper = async (): Promise<SessionKey> => ({\n    algorithm: AES256,\n    data: await generateSessionKey(AES256)\n});\n\n/**\n * Encrypt the body in the given package. Should only be used if the package body differs from message body\n * (i.e. the draft body)\n */\nconst encryptBodyPackage = async (pack: Package, ownKeys: AddressKeys[], publicKeys: Key[]) => {\n    const { privateKeys } = splitKeys(ownKeys) as any;\n    const cleanPublicKeys = publicKeys.filter(identity);\n\n    const { data, sessionKey } = await encryptMessage({\n        data: pack.Body,\n        publicKeys: cleanPublicKeys,\n        sessionKey: cleanPublicKeys.length ? undefined : await generateSessionKeyHelper(),\n        privateKeys,\n        returnSessionKey: true,\n        compression: true\n    });\n\n    const { asymmetric: keys, encrypted } = await splitMessage(data);\n    return { keys, encrypted, sessionKey };\n};\n\n/**\n * Encrypts the draft body. This is done separately from the other bodies so we can make sure that the send body\n * (the encrypted body in the message object) is the same as the other emails so we can use 1 blob for them in the api\n * (i.e. deduplication)\n */\nconst encryptDraftBodyPackage = async (\n    pack: Package,\n    ownKeys: AddressKeys[],\n    publicKeys: Key[],\n    message: MessageExtended\n) => {\n    // TODO: Do the change is equivalent?\n    // const ownPublicKeys = await getKeys(message.From.Keys[0].PublicKey);\n    // const publicKeys = ownPublicKeys.concat(_.filter(publicKeysList));\n\n    const { privateKeys, publicKeys: ownPublicKeys } = splitKeys(ownKeys) as any;\n    const cleanPublicKeys = [...ownPublicKeys, ...publicKeys].filter(identity);\n\n    const { data, sessionKey } = await encryptMessage({\n        data: pack.Body,\n        publicKeys: cleanPublicKeys,\n        privateKeys,\n        returnSessionKey: true,\n        compression: true\n    });\n\n    const packets = await splitMessage(data);\n\n    const { asymmetric, encrypted } = packets;\n\n    // rebuild the data without the send keypackets\n    packets.asymmetric = packets.asymmetric.slice(0, ownPublicKeys.length) as any;\n    // combine message\n    const value = concatArrays(Object.values(packets).flat());\n    // _.flowRight(concatArrays, _.flatten, _.values)(packets);\n\n    (message.data as Message).Body = await armorBytes(value);\n\n    return { keys: asymmetric.slice(ownPublicKeys.length), encrypted, sessionKey };\n};\n\n/**\n * Encrypts the body of the package and then overwrites the body in the package and adds the encrypted session keys\n * to the subpackages. If we send clear message the unencrypted session key is added to the (top-level) package too.\n */\nconst encryptBody = async (pack: Package, ownKeys: AddressKeys[], message: MessageExtended): Promise<void> => {\n    const addressKeys = Object.keys(pack.Addresses || {});\n    const addresses = Object.values(pack.Addresses || {});\n    const publicKeysList = addresses.map(({ PublicKey }) => PublicKey as Key);\n    /*\n     * Special case: reuse the encryption packet from the draft, this allows us to do deduplication on the back-end.\n     * In fact, this will be the most common case.\n     */\n    const encryptPack = message.data?.MIMEType === pack.MIMEType ? encryptDraftBodyPackage : encryptBodyPackage;\n\n    const { keys, encrypted, sessionKey } = await encryptPack(pack, ownKeys, publicKeysList, message);\n\n    let counter = 0;\n    publicKeysList.forEach((publicKey, index) => {\n        if (!publicKey) {\n            return;\n        }\n\n        const key = keys[counter++];\n        (pack.Addresses || {})[addressKeys[index]].BodyKeyPacket = arrayToBase64(key);\n    });\n\n    await Promise.all(\n        addresses.map(async (subPack) => {\n            if (subPack.Type !== SEND_EO) {\n                return;\n            }\n            const [BodyKeyPacket] = await encryptKeyPacket({\n                sessionKeys: [sessionKey],\n                passwords: [message.data?.Password || '']\n            });\n\n            // eslint-disable-next-line require-atomic-updates\n            subPack.BodyKeyPacket = BodyKeyPacket;\n        })\n    );\n\n    if ((pack.Type || 0) & (SEND_CLEAR | SEND_MIME)) {\n        // eslint-disable-next-line require-atomic-updates\n        pack.BodyKey = packToBase64(sessionKey);\n    }\n    // eslint-disable-next-line require-atomic-updates\n    pack.Body = arrayToBase64(encrypted[0]);\n};\n\nconst encryptPackage = async (\n    pack: Package,\n    message: MessageExtended,\n    ownKeys: AddressKeys[],\n    attachmentKeys: SessionKey[]\n): Promise<Package> => {\n    await Promise.all([encryptBody(pack, ownKeys, message), encryptAttachmentKeys(pack, message, attachmentKeys)]);\n\n    Object.values(pack.Addresses || {}).forEach((address: any) => delete address.PublicKey);\n\n    return pack;\n};\n\nconst getAttachmentKeys = async (message: MessageExtended) =>\n    Promise.all(getAttachments(message.data).map((attachment) => getSessionKey(message, attachment)));\n\n/**\n * Encrypts the packages and removes all temporary values that should not be send to the API\n */\nexport const encryptPackages = async (\n    message: MessageExtended,\n    packages: Packages,\n    getAddressKeys: (addressID?: string) => Promise<AddressKeys[]>\n): Promise<Packages> => {\n    const attachmentKeys = await getAttachmentKeys(message);\n    const ownKeys = await getAddressKeys(message.data?.AddressID); // Original code: message.From.ID, don't know of From property\n\n    const packageList = Object.values(packages) as Package[];\n    await Promise.all(packageList.map((pack) => encryptPackage(pack, message, ownKeys, attachmentKeys)));\n\n    return packages;\n};\n","import { useCallback } from 'react';\nimport { unique } from 'proton-shared/lib/helpers/array';\nimport { sendMessage } from 'proton-shared/lib/api/messages';\nimport { useMailSettings, useAddresses, useGetPublicKeys, useGetAddressKeys, useApi } from 'react-components';\n\nimport { MessageExtended } from '../models/message';\nimport { getRecipientsAddresses } from '../helpers/message/messages';\n\nimport { getSendPreferences } from '../helpers/send/sendPreferences';\nimport { generateTopPackages } from '../helpers/send/sendTopPackages';\nimport { attachSubPackages } from '../helpers/send/sendSubPackages';\nimport { encryptPackages } from '../helpers/send/sendEncrypt';\n\n// Reference: Angular/src/app/composer/services/sendMessage.js\n\nexport const useSendMessage = () => {\n    const [mailSettings] = useMailSettings();\n    const [addresses] = useAddresses();\n    const cache = new Map(); // TODO\n    const getPublicKeys = useGetPublicKeys();\n    const getAddressKeys = useGetAddressKeys();\n    const api = useApi();\n\n    return useCallback(\n        async (message: MessageExtended) => {\n            // TODO: Prepare embedded\n            const emails = getRecipientsAddresses(message.data);\n            // TODO: handleAttachmentSigs\n\n            const uniqueEmails = unique(emails);\n            // eslint-disable-next-line\n            const sendPrefs = await getSendPreferences(\n                uniqueEmails,\n                message.data || {},\n                mailSettings,\n                addresses,\n                cache,\n                getPublicKeys\n            );\n            // todo regression testing: https://github.com/ProtonMail/Angular/issues/5088\n\n            console.log('sendPrefs', sendPrefs);\n\n            let packages = await generateTopPackages(message, sendPrefs);\n            packages = await attachSubPackages(packages, message, emails, sendPrefs);\n            packages = await encryptPackages(message, packages, getAddressKeys);\n\n            console.log('packages', packages);\n\n            // Old code save the draft here\n            // New one should have saved it just before\n            // TODO: Do I miss something?\n            //\n            // /*\n            //  * we do not re-encrypt the draft body if the packages contain the draft body: the generatePackages call will have\n            //  * generated the body correctly (otherwise it breaks deduplication)\n            //  */\n            // const encrypt = !packages.map(({ MIMEType }) => MIMEType).includes(message.MIMEType);\n            // // save the draft with the re-encrypted body\n            // await postMessage(message, { loader: false, encrypt });\n\n            // TODO: Restore that with attachments management\n            // // wait on the signature promise after the encrypt, so it can be done in parallel with the encryption\n            // // which is better for performance.\n            // await attachmentUpdates;\n            // message.encrypting = false;\n            // dispatchMessageAction(message);\n\n            // TODO: Define if this risk exist in the new architecture\n            // // Avoid to have SAVE and SEND request in the same time\n            // // Make sure to keep that just before the send message API request\n            // await composerRequestModel.chain(message);\n\n            // TODO: Implement retry system\n            // const suppress = retry ? [API_CUSTOM_ERROR_CODES.MESSAGE_VALIDATE_KEY_ID_NOT_ASSOCIATED] : [];\n            // try {\n            const { Sent } = await api(sendMessage(message.data?.ID, { Packages: packages } as any));\n            console.log('Sent', Sent);\n            return { data: Sent };\n            // } catch (e) {\n            //     if (retry && e.data.Code === API_CUSTOM_ERROR_CODES.MESSAGE_VALIDATE_KEY_ID_NOT_ASSOCIATED) {\n            //         sendPreferences.clearCache();\n            //         keyCache.clearCache();\n            //         // retry if we used the wrong keys\n            //         return send(message, parameters, false);\n            //     }\n            //     throw e;\n            // }\n        },\n        [mailSettings, addresses, cache, getPublicKeys]\n    );\n};\n","import { encryptMessage } from 'pmcrypto';\nimport { MessageExtended } from '../../models/message';\nimport { Key } from '../../models/key';\n\n// Reference: Angular/src/app/message/factories/messageModel.js encryptBody\n\nexport const encryptBody = async (\n    message: MessageExtended,\n    privateKeys: Key[],\n    publicKeys: Key[]\n): Promise<MessageExtended> => {\n    const { data } = await encryptMessage({\n        data: message.content,\n        publicKeys: [publicKeys[0]],\n        privateKeys,\n        format: 'utf8',\n        compression: true\n    });\n\n    return { ...message, data: { ...message.data, Body: data } };\n};\n","import { useCallback } from 'react';\nimport { useGetPublicKeys, useGetAddressKeys } from 'react-components';\nimport { splitKeys } from 'proton-shared/lib/keys/keys';\n\nimport { encryptBody } from '../helpers/message/messageEncrypt';\nimport { MessageExtended } from '../models/message';\n\nexport const useEncryptMessage = () => {\n    const getPublicKeys = useGetPublicKeys();\n    const getAddressKeys = useGetAddressKeys();\n\n    // TODO: Cache result\n    return useCallback(\n        async (message: MessageExtended): Promise<MessageExtended> => {\n            const [{ publicKeys = [] }, addressKeys] = await Promise.all([\n                getPublicKeys(message.data?.Sender?.Address),\n                getAddressKeys(message.data?.AddressID)\n            ]);\n            const { privateKeys } = splitKeys(addressKeys) as any;\n\n            return encryptBody(message, privateKeys, publicKeys);\n        },\n        [getPublicKeys, getAddressKeys]\n    );\n};\n","import { useContext, useEffect, useCallback, useState, useMemo } from 'react';\nimport { useApi, useEventManager } from 'react-components';\nimport {\n    getMessage,\n    markMessageAsRead,\n    createDraft as createDraftApi,\n    updateDraft,\n    deleteMessages\n} from 'proton-shared/lib/api/messages';\nimport { wait } from 'proton-shared/lib/helpers/promise';\n\nimport { transformEscape } from '../helpers/transforms/transformEscape';\nimport { transformLinks } from '../helpers/transforms/transformLinks';\nimport { transformEmbedded } from '../helpers/transforms/transformEmbedded';\nimport { transformWelcome } from '../helpers/transforms/transformWelcome';\nimport { transformBlockquotes } from '../helpers/transforms/transformBlockquotes';\nimport { transformStylesheet } from '../helpers/transforms/transformStylesheet';\nimport { transformRemote } from '../helpers/transforms/transformRemote';\nimport { transformBase } from '../helpers/transforms/transformBase';\nimport { useDecryptMessage } from './useDecryptMessage';\nimport { AttachmentsCache, useAttachmentsCache } from './useAttachments';\nimport { MessageContext } from '../containers/MessageProvider';\nimport { Message, MessageExtended } from '../models/message';\nimport { useSendMessage } from './useSendMessage';\nimport { MailSettings, Api } from '../models/utils';\nimport { useEncryptMessage } from './useEncryptMessage';\nimport { MESSAGE_ACTIONS } from '../constants';\n\nexport interface ComputationOption {\n    cache: any;\n    mailSettings: MailSettings;\n    api: Api;\n    attachmentsCache: AttachmentsCache;\n}\n\nexport interface Computation {\n    (message: MessageExtended, options: ComputationOption):\n        | Promise<Partial<MessageExtended>>\n        | Partial<MessageExtended>;\n}\n\ninterface MessageActions {\n    initialize: () => Promise<void>;\n    loadRemoteImages: () => Promise<void>;\n    loadEmbeddedImages: () => Promise<void>;\n    createDraft: (message: MessageExtended) => Promise<void>;\n    saveDraft: (message: MessageExtended) => Promise<void>;\n    send: (message: MessageExtended) => Promise<void>;\n    deleteDraft: () => Promise<void>;\n}\n\n/**\n * Apply updates from the message model to the message in state\n */\nexport const mergeMessages = (messageState: MessageExtended, messageModel: MessageExtended) => {\n    if (messageState.document) {\n        messageState.document.innerHTML = messageModel.content || '';\n    }\n    const message = {\n        ...messageState,\n        content: messageModel.content,\n        data: { ...messageState.data, ...messageModel.data }\n    };\n    return message;\n};\n\nexport const useMessage = (inputMessage: Message = {}, mailSettings: any): [MessageExtended, MessageActions] => {\n    const api = useApi();\n    const { call } = useEventManager();\n    const cache = useContext(MessageContext);\n    const computeCache = useMemo(() => new Map(), []);\n    const attachmentsCache = useAttachmentsCache();\n\n    // messageID change ONLY when a draft is created\n    const [messageID, setMessageID] = useState(inputMessage.ID || '');\n    const [message, setMessage] = useState<MessageExtended>(\n        cache.has(messageID) ? cache.get(messageID) : { data: inputMessage }\n    );\n\n    const decrypt = useDecryptMessage();\n    const encrypt = useEncryptMessage();\n    const sendMessage = useSendMessage();\n\n    // Update messageID if component is reused for another message\n    useEffect(() => {\n        if (!!inputMessage.ID && inputMessage.ID !== messageID) {\n            setMessageID(inputMessage.ID);\n        }\n    }, [inputMessage]);\n\n    // Update message state and listen to cache for updates on the current message\n    useEffect(() => {\n        cache.has(messageID) ? setMessage(cache.get(messageID)) : setMessage({ data: inputMessage });\n\n        return cache.subscribe((changedMessageID) => {\n            // Prevent updates on message deltion from the cache to prevent undefined message in state.\n            if (changedMessageID === messageID && cache.has(messageID)) {\n                setMessage(cache.get(messageID));\n            }\n        });\n    }, [messageID, cache]);\n\n    const transforms = [\n        transformEscape,\n        transformBase,\n        transformLinks,\n        transformEmbedded,\n        transformWelcome,\n        transformBlockquotes,\n        transformStylesheet,\n        // transformAttachements,\n        transformRemote\n    ];\n\n    const loadData = useCallback(\n        async ({ data: message = {} }: MessageExtended) => {\n            // If the Body is already there, no need to send a request\n            if (!message.Body) {\n                const { Message } = await api(getMessage(message.ID));\n                return { data: Message as Message };\n            }\n            return {} as MessageExtended;\n        },\n        [api]\n    );\n\n    const markAsRead = useCallback(\n        async ({ data: message = {} }: MessageExtended) => {\n            const markAsRead = async () => {\n                await api(markMessageAsRead([message.ID || '']));\n                call();\n            };\n\n            if (message.Unread) {\n                markAsRead(); // No await to not slow down the UX\n                return { data: { ...message, Unread: 0 } } as MessageExtended;\n            }\n\n            return {} as MessageExtended;\n        },\n        [api]\n    );\n\n    const create = useCallback(\n        async (message: MessageExtended = {}) => {\n            const { Message } = await api(\n                createDraftApi({\n                    Action: message.action !== MESSAGE_ACTIONS.NEW ? message.action : undefined,\n                    Message: message.data\n                } as any)\n            );\n            call();\n            return { data: Message };\n        },\n        [api]\n    );\n\n    const update = useCallback(\n        async (message: MessageExtended = {}) => {\n            const { Message } = await api(updateDraft(message.data?.ID, message.data));\n            call();\n            return { data: Message };\n        },\n        [api]\n    );\n\n    const deleteRequest = useCallback(\n        async (message: MessageExtended = {}) => {\n            await api(deleteMessages([message.data?.ID]));\n            call();\n            return {};\n        },\n        [api]\n    );\n\n    /**\n     * Run a computation on a message, wait until it finish\n     * Return the message extanded with the result of the computation\n     */\n    const runSingle = useCallback(\n        async (message: MessageExtended, compute: Computation) => {\n            const result = (await compute(message, { cache: computeCache, mailSettings, api, attachmentsCache })) || {};\n\n            if (result.document) {\n                result.content = result.document.innerHTML;\n            }\n\n            return { ...message, ...result } as MessageExtended;\n        },\n        [cache]\n    );\n\n    /**\n     * Run a list of computation sequentially\n     */\n    const run = useCallback(\n        async (message: MessageExtended, computes: Computation[]) => {\n            return computes.reduce(async (messagePromise: Promise<MessageExtended>, compute: Computation) => {\n                return runSingle(await messagePromise, compute);\n            }, Promise.resolve(message));\n        },\n        [runSingle, cache]\n    );\n\n    const initialize = useCallback(async () => {\n        cache.set(messageID, { ...message, initialized: false });\n        const newMessage = await run(message, [loadData, decrypt, markAsRead, ...transforms] as Computation[]);\n        cache.set(messageID, { ...newMessage, initialized: true });\n    }, [messageID, message, run, cache]);\n\n    const loadRemoteImages = useCallback(async () => {\n        const newMessage = await run({ ...message, showRemoteImages: true }, [transformRemote as Computation]);\n        cache.set(messageID, newMessage);\n    }, [messageID, message, message, run, cache]);\n\n    const loadEmbeddedImages = useCallback(async () => {\n        const newMessage = await run({ ...message, showEmbeddedImages: true }, [transformEmbedded]);\n        cache.set(messageID, newMessage);\n    }, [messageID, message, run, cache]);\n\n    const createDraft = useCallback(\n        async (message: MessageExtended) => {\n            const newMessage = await run(message, [encrypt, create] as Computation[]);\n            cache.set(newMessage.data?.ID || '', newMessage);\n            setMessageID(newMessage.data?.ID || '');\n        },\n        [message, run, cache]\n    );\n\n    const saveDraft = useCallback(\n        async (messageModel: MessageExtended) => {\n            const messageToSave = mergeMessages(message, messageModel);\n            const newMessage = await run(messageToSave, [encrypt, update]);\n            cache.set(messageID, newMessage);\n            // Allow the cache update to be dispatched in React before resolving (simplify several race conditions)\n            await wait(0);\n        },\n        [message, run, cache]\n    );\n\n    const send = useCallback(\n        async (messageModel: MessageExtended) => {\n            const messageToSave = mergeMessages(message, messageModel);\n            const newMessage = await run(messageToSave, [encrypt, update, sendMessage]);\n            cache.set(messageID, newMessage);\n            // Allow the cache update to be dispatched in React before resolving (simplify several race conditions)\n            await wait(0);\n        },\n        [message, run, cache]\n    );\n\n    const deleteDraft = useCallback(async () => {\n        await run(message, [deleteRequest]);\n        cache.delete(messageID);\n        // Allow the cache update to be dispatched in React before resolving (simplify several race conditions)\n        await wait(0);\n    }, [message, run, cache]);\n\n    return [\n        message,\n        {\n            initialize,\n            loadRemoteImages,\n            loadEmbeddedImages,\n            createDraft,\n            saveDraft,\n            send,\n            deleteDraft\n        }\n    ];\n};\n","import React, { useEffect, useRef } from 'react';\nimport { useToggle, Loader, classnames } from 'react-components';\n\nimport { hasAttachments, isDraft } from '../../helpers/message/messages';\nimport { Label } from '../../models/label';\nimport MessageBody from './MessageBody';\nimport HeaderCollapsed from './header/HeaderCollapsed';\nimport HeaderExpanded from './header/HeaderExpanded';\nimport MessageFooter from './MessageFooter';\nimport { Message } from '../../models/message';\nimport { useMessage } from '../../hooks/useMessage';\nimport { OnCompose } from '../../containers/ComposerContainer';\n\ninterface Props {\n    labels: Label[];\n    message: Message;\n    mailSettings: any;\n    initialExpand?: boolean;\n    conversationIndex?: number;\n    onCompose: OnCompose;\n}\n\nconst MessageView = ({\n    labels = [],\n    message: inputMessage,\n    mailSettings,\n    initialExpand = true,\n    conversationIndex = 0,\n    onCompose\n}: Props) => {\n    const { state: expanded, set: setExpanded } = useToggle(initialExpand);\n    const elementRef = useRef<HTMLElement>(null);\n    const [message, { initialize, loadRemoteImages, loadEmbeddedImages }] = useMessage(inputMessage, mailSettings);\n\n    const loaded = !!message?.initialized;\n\n    const prepareMessage = async () => {\n        if (typeof message?.initialized === 'undefined') {\n            await initialize();\n        }\n        // Don't scroll if it's the first message of the conversation and only on the first automatic expand\n        if (conversationIndex !== 0 && initialExpand) {\n            elementRef.current && elementRef.current.scrollIntoView({ behavior: 'smooth', block: 'start' });\n        }\n    };\n\n    useEffect(() => {\n        if (!loaded && expanded) {\n            prepareMessage();\n        }\n\n        if (loaded && expanded && isDraft(message.data)) {\n            onCompose({ existingDraft: message });\n        }\n    }, [loaded, expanded]);\n\n    const handleLoadRemoteImages = async () => {\n        await loadRemoteImages();\n    };\n\n    const handleLoadEmbeddedImages = async () => {\n        await loadEmbeddedImages();\n    };\n\n    const handleExpand = (value: boolean) => () => {\n        setExpanded(value);\n    };\n\n    return (\n        <article ref={elementRef} className={classnames(['message-container mb2', expanded && 'is-opened'])}>\n            {expanded ? (\n                <>\n                    <HeaderExpanded\n                        message={message}\n                        messageLoaded={loaded}\n                        onLoadRemoteImages={handleLoadRemoteImages}\n                        onLoadEmbeddedImages={handleLoadEmbeddedImages}\n                        labels={labels}\n                        mailSettings={mailSettings}\n                        onCollapse={handleExpand(false)}\n                        onCompose={onCompose}\n                    />\n                    {loaded ? (\n                        <>\n                            <MessageBody message={message} />\n                            {hasAttachments(message.data) ? <MessageFooter message={message} /> : null}\n                        </>\n                    ) : (\n                        <Loader />\n                    )}\n                </>\n            ) : (\n                <HeaderCollapsed message={message} labels={labels} onExpand={handleExpand(true)} />\n            )}\n        </article>\n    );\n};\n\nexport default MessageView;\n","import { Message } from '../../models/message';\nimport { MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\nimport { isCustomLabel } from '../labels';\nimport { hasLabel } from '../elements';\nimport { isDraft, isSentAutoReply } from './messages';\n\n// Reference: Angular/src/app/message/services/findExpandableMessage.js\n\n/**\n * Filter the list of message to find the first readable message\n * - iterate backwards\n * - check if the previous item is read\n * - if the previous isRead === 1, break the iteration\n */\nconst getFirstMessageToRead = (messages: Message[]): Message => {\n    // Else we open the first message unread beginning to the end list\n    let index = messages.length;\n    let contains = false;\n\n    while (--index > 0) {\n        if (messages[index - 1].Unread === 0) {\n            // Is read\n            contains = true;\n            break;\n        }\n    }\n\n    const position = contains ? index : 0;\n    // A conversation can contains only one draft\n    return messages.length ? messages[position] : messages[0];\n};\n\nconst getLast = (messages: Message[]): Message => {\n    if (messages.length === 0) {\n        return {};\n    }\n    return messages[messages.length - 1];\n};\n\n/**\n * Find in the message to scroll and expand\n */\nexport const findMessageToExpand = (labelID = '', messages: Message[] = []): Message => {\n    if (labelID === MAILBOX_LABEL_IDS.STARRED || isCustomLabel(labelID)) {\n        return getFirstMessageToRead(messages.filter((message) => hasLabel(message, labelID) && !isDraft(message)));\n    }\n\n    if (labelID === MAILBOX_LABEL_IDS.DRAFTS || labelID === MAILBOX_LABEL_IDS.ALL_DRAFTS) {\n        return getLast(messages.filter(isDraft));\n    }\n\n    const realMessages = messages.filter((message) => !isDraft(message) && !isSentAutoReply(message));\n    const latest = getLast(realMessages);\n\n    if (latest && latest.Unread === 0) {\n        return latest;\n    }\n\n    return getFirstMessageToRead(realMessages);\n};\n","import React from 'react';\nimport { c } from 'ttag';\n\ninterface Props {\n    inTrash: boolean;\n    filter: boolean;\n    onToggle: () => void;\n}\n\nconst TrashWarning = ({ inTrash, filter, onToggle }: Props) => {\n    return (\n        <div className=\"containsMessage flex flex-column\">\n            <p className=\"bordered-container flex pt0-5 pb0-5 pl1 pr1\">\n                {inTrash\n                    ? c('Info').t`This conversation contains non-trashed messages.`\n                    : c('Info').t`This conversation contains trashed messages.`}\n                <a onClick={onToggle} className=\"ml0-5\">\n                    {inTrash\n                        ? filter\n                            ? c('Action').t`Show non-trashed messages`\n                            : c('Action').t`Hide non-trashed messages`\n                        : filter\n                        ? c('Action').t`Show trashed messages`\n                        : c('Action').t`Hide trashed messages`}\n                </a>\n            </p>\n        </div>\n    );\n};\n\nexport default TrashWarning;\n","import React from 'react';\nimport { Loader, useLabels, useToggle } from 'react-components';\n\nimport MessageView from '../message/MessageView';\nimport ItemStar from '../list/ItemStar';\nimport { ELEMENT_TYPES } from '../../constants';\nimport NumMessages from './NumMessages';\nimport ItemLabels from '../list/ItemLabels';\nimport { useConversation } from '../../hooks/useConversation';\nimport { findMessageToExpand } from '../../helpers/message/messageExpandable';\nimport TrashWarning from './TrashWarning';\nimport { MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\nimport { hasLabel } from '../../helpers/elements';\nimport { OnCompose } from '../../containers/ComposerContainer';\n\ninterface Props {\n    labelID: string;\n    conversationID: string;\n    messageID?: string;\n    mailSettings: any;\n    onCompose: OnCompose;\n}\n\nconst ConversationView = ({ labelID, conversationID, mailSettings, onCompose }: Props) => {\n    const [labels] = useLabels();\n    const [conversationData, loading] = useConversation(conversationID);\n    const { state: filter, toggle: toggleFilter } = useToggle(true);\n\n    if (loading) {\n        return <Loader />;\n    }\n\n    const { Conversation: conversation, Messages: messages = [] } = conversationData;\n\n    if (!conversation) {\n        return null;\n    }\n\n    const inTrash = labelID === MAILBOX_LABEL_IDS.TRASH;\n    const filteredMessages = messages.filter((message) => inTrash === hasLabel(message, MAILBOX_LABEL_IDS.TRASH));\n    const messagesToShow = filter ? filteredMessages : messages;\n    const showTrashWarning = filteredMessages.length !== messages.length;\n\n    const initialExpand = findMessageToExpand(labelID, messagesToShow).ID;\n\n    return (\n        <>\n            <header className=\"flex flex-column mb1\">\n                <div className=\"flex flex-nowrap flex-spacebetween flex-items-center mb1\">\n                    <h2 className=\"mb0\">\n                        <NumMessages className=\"mr0-25\" conversation={conversation} />\n                        {conversation.Subject}\n                    </h2>\n                    <div>\n                        <ItemLabels labels={labels} max={4} element={conversation} />\n                        <ItemStar element={conversation} type={ELEMENT_TYPES.CONVERSATION} />\n                    </div>\n                </div>\n                {showTrashWarning && <TrashWarning inTrash={inTrash} filter={filter} onToggle={toggleFilter} />}\n            </header>\n            {messagesToShow.map((message, index) => (\n                <MessageView\n                    key={message.ID}\n                    message={message}\n                    initialExpand={message.ID === initialExpand}\n                    labels={labels}\n                    mailSettings={mailSettings}\n                    conversationIndex={index}\n                    onCompose={onCompose}\n                />\n            ))}\n        </>\n    );\n};\n\nexport default ConversationView;\n","import { useContext, useCallback } from 'react';\nimport { getConversation } from 'proton-shared/lib/api/conversations';\nimport { useCachedModelResult, useApi } from 'react-components';\n\nimport { MessageContext, Cache } from '../containers/MessageProvider';\nimport { Conversation } from '../models/conversation';\nimport { Message } from '../models/message';\n\nexport type ConversationCache = Cache<string, Conversation>;\n\ninterface ConversationResult {\n    Conversation: Conversation;\n    Messages?: Message[];\n}\n\nconst getKey = (ID: string) => `Conversation-${ID}`;\n\nexport const useConversation = (conversationID: string): [ConversationResult, boolean, any] => {\n    // Pretty ugly \"reuse\" of the MessageCache\n    // TODO: either use a different cache or properly handle mix types\n    const cache = (useContext(MessageContext) as any) as ConversationCache;\n    const api = useApi();\n\n    const miss = useCallback(() => {\n        return api(getConversation(conversationID));\n    }, [conversationID, api, cache]);\n\n    return useCachedModelResult(cache as any, getKey(conversationID), miss);\n};\n","import React from 'react';\nimport { useUser, useModals, LinkButton, AuthenticatedBugModal } from 'react-components';\nimport { c, ngettext, msgid } from 'ttag';\nimport { capitalize } from 'proton-shared/lib/helpers/string';\n\nimport welcomeMessageSvg from 'design-system/assets/img/shared/welcome-message.svg';\nimport { LabelCount } from '../../models/label';\n\ninterface Props {\n    labelCount: LabelCount;\n}\n\nconst WelcomePane = ({ labelCount }: Props) => {\n    const [user] = useUser();\n    const { createModal } = useModals();\n\n    const Unread = labelCount.Unread || 0;\n\n    const unreadsLabel = (\n        <strong key=\"unreads-label\">\n            {ngettext(msgid`${Unread} unread email`, `${Unread} unread emails`, Unread)}\n        </strong>\n    );\n\n    const reportBugButton = (\n        <LinkButton key=\"report-bug-btn\" onClick={() => createModal(<AuthenticatedBugModal />)}>{c('Action')\n            .t`report a bug`}</LinkButton>\n    );\n\n    return (\n        <div className=\"flex-item-fluid aligncenter p3\">\n            <h1>\n                {user.DisplayName ? c('Title').t`Welcome, ${capitalize(user.DisplayName)}!` : c('Title').t`Welcome`}\n            </h1>\n            {Unread ? <p>{c('Info').jt`You have ${unreadsLabel} in this folder`}</p> : null}\n            {user.hasPaidMail ? (\n                <>\n                    <p className=\"mw40e center mb2\">\n                        {c('Info')\n                            .jt`Having trouble sending or receiving emails? Interested in helping us improve our service? Feel free to ${reportBugButton}.`}\n                    </p>\n                    <img src={welcomeMessageSvg} alt={c('Alternative text for welcome image').t`Welcome`} />\n                </>\n            ) : (\n                <>\n                    <p>{c('Info')\n                        .t`Upgrade to a paid plan starting from $4/month only and get additional storage capacity and more addresses with ProtonMail Plus.`}</p>\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default WelcomePane;\n","import React, { useMemo } from 'react';\nimport { Button, useLabels } from 'react-components';\nimport { c, ngettext, msgid } from 'ttag';\n\nimport conversationSingleSvg from 'design-system/assets/img/shared/selected-conversation-single.svg';\nimport conversationManySvg from 'design-system/assets/img/shared/selected-conversation-many.svg';\nimport { LabelCount } from '../../models/label';\nimport { getLabelName } from '../../helpers/labels';\n\ninterface Props {\n    labelCount: LabelCount;\n    checkedIDs?: string[];\n    onUncheckAll: () => void;\n}\n\nconst SelectionPane = ({ labelCount, checkedIDs = [], onUncheckAll }: Props) => {\n    const [labels] = useLabels();\n\n    const total = labelCount.Total || 0;\n    const checkeds = checkedIDs.length;\n\n    const labelName = useMemo(() => getLabelName(labelCount.LabelID || '', labels), [labels, labelCount]);\n\n    return (\n        <div className=\"flex-item-fluid aligncenter p3\">\n            {checkeds === 0 && labelName && <h3 className=\"bold\">{labelName}</h3>}\n            <p className=\"mb2\">\n                {checkeds === 0\n                    ? ngettext(\n                          msgid`You have ${total} stored in this folder`,\n                          `You have ${total} stored in this folder`,\n                          total\n                      )\n                    : ngettext(\n                          msgid`You selected ${checkeds} element from this folder`,\n                          `You selected ${checkeds} elements from this folder`,\n                          checkeds\n                      )}\n            </p>\n            <div className=\"mb2\">\n                <img\n                    src={checkeds > 1 ? conversationManySvg : conversationSingleSvg}\n                    alt={c('Alternative text for conversation image').t`Conversation`}\n                />\n            </div>\n            {checkeds > 0 && <Button onClick={onUncheckAll}>{c('Action').t`Deselect`}</Button>}\n        </div>\n    );\n};\n\nexport default SelectionPane;\n","import React, { useEffect, useMemo } from 'react';\n\nimport WelcomePane from './WelcomePane';\nimport SelectionPane from './SelectionPane';\nimport { ELEMENT_TYPES } from '../../constants';\nimport { useConversationCounts, useMessageCounts } from 'react-components';\nimport { getCurrentType } from '../../helpers/elements';\nimport { LabelCount } from '../../models/label';\n\ninterface Props {\n    labelID: string;\n    checkedIDs?: string[];\n    onUncheckAll: () => void;\n    welcomeRef: any;\n    mailSettings: any;\n}\n\nconst PlaceholderView = ({ labelID = '', checkedIDs = [], onUncheckAll, welcomeRef, mailSettings }: Props) => {\n    const [conversationCounts] = useConversationCounts();\n    const [messageCounts] = useMessageCounts();\n    const type = getCurrentType({ mailSettings, labelID });\n\n    useEffect(\n        () => () => {\n            welcomeRef.current = true;\n        },\n        []\n    );\n\n    const labelCount: LabelCount = useMemo(() => {\n        const counters = type === ELEMENT_TYPES.CONVERSATION ? conversationCounts : messageCounts;\n\n        if (!Array.isArray(counters)) {\n            return 0;\n        }\n\n        return counters.find((counter) => counter.LabelID === labelID) || { LabelID: '', Unread: 0, Total: 0 };\n    }, [conversationCounts, messageCounts]);\n\n    return welcomeRef.current || checkedIDs.length > 0 ? (\n        <SelectionPane labelCount={labelCount} checkedIDs={checkedIDs} onUncheckAll={onUncheckAll} />\n    ) : (\n        <WelcomePane labelCount={labelCount} />\n    );\n};\n\nexport default PlaceholderView;\n","import React from 'react';\nimport { useLabels } from 'react-components';\n\nimport MessageView from '../message/MessageView';\nimport ItemStar from '../list/ItemStar';\nimport { ELEMENT_TYPES } from '../../constants';\nimport ItemLabels from '../list/ItemLabels';\nimport { useMessage } from '../../hooks/useMessage';\nimport { OnCompose } from '../../containers/ComposerContainer';\n\ninterface Props {\n    messageID: string;\n    mailSettings: any;\n    onCompose: OnCompose;\n}\n\nconst MessageOnlyView = ({ messageID, mailSettings, onCompose }: Props) => {\n    const [labels] = useLabels();\n\n    // There is only reading on the message here, no actions\n    // MessageView will be in charge to trigger all messages actions\n    const [message] = useMessage({ ID: messageID }, mailSettings);\n\n    if (!message.data) {\n        return null;\n    }\n\n    return (\n        <>\n            <header className=\"flex flex-nowrap flex-spacebetween flex-items-center mb1\">\n                <h2 className=\"mb0\">{message.data?.Subject}</h2>\n                <div>\n                    <ItemLabels labels={labels} max={4} element={message.data} />\n                    <ItemStar element={message.data} type={ELEMENT_TYPES.MESSAGE} />\n                </div>\n            </header>\n            <MessageView\n                message={message.data}\n                initialExpand={true}\n                labels={labels}\n                mailSettings={mailSettings}\n                onCompose={onCompose}\n            />\n        </>\n    );\n};\n\nexport default MessageOnlyView;\n","import React, { useState, useMemo, useRef, useEffect } from 'react';\nimport { Loader, classnames } from 'react-components';\nimport { History, Location } from 'history';\n\nimport { Element } from '../models/element';\nimport { Sort, Filter, Page } from '../models/tools';\n\nimport { useMailboxPageTitle } from '../hooks/useMailboxPageTitle';\nimport { useElements } from '../hooks/useElements';\n\nimport { isColumnMode, isConversationMode } from '../helpers/mailSettings';\nimport { getSearchParams } from '../helpers/url';\nimport {\n    pageFromUrl,\n    sortFromUrl,\n    filterFromUrl,\n    setPageInUrl,\n    setSortInUrl,\n    setFilterInUrl,\n    setPathInUrl\n} from '../helpers/mailboxUrl';\n\nimport Toolbar from '../components/toolbar/Toolbar';\nimport List from '../components/list/List';\nimport ConversationView from '../components/conversation/ConversationView';\nimport PlaceholderView from '../components/view/PlaceholderView';\nimport MessageOnlyView from '../components/message/MessageOnlyView';\nimport { OnCompose } from './ComposerContainer';\nimport { PAGE_SIZE } from '../constants';\n\nimport './main-area.scss';\n\ninterface Props {\n    labelID: string;\n    mailSettings: any;\n    elementID?: string;\n    location: Location;\n    history: History;\n    onCompose: OnCompose;\n}\n\nconst MailboxContainer = ({\n    labelID: inputLabelID,\n    mailSettings,\n    elementID: inputElementID,\n    location,\n    history,\n    onCompose\n}: Props) => {\n    const columnMode = isColumnMode(mailSettings);\n    const conversationMode = isConversationMode(inputLabelID, mailSettings);\n\n    // Page state is hybrid: page number is handled by the url, total computed in useElements, size and limit are constants\n    // Yet, it is simpler to co-localize all these data in one object\n    const [page, setPage] = useState<Page>({\n        page: pageFromUrl(location),\n        total: 0,\n        size: PAGE_SIZE,\n        limit: PAGE_SIZE\n    });\n\n    const searchParams = getSearchParams(location);\n\n    const sort = useMemo<Sort>(() => sortFromUrl(location), [searchParams.sort]);\n    const filter = useMemo<Filter>(() => filterFromUrl(location), [searchParams.filter]);\n\n    const [checkedElements, setCheckedElements] = useState(Object.create(null));\n    const [checkAll, setCheckAll] = useState(false);\n    const welcomeRef = useRef(false);\n\n    const [labelID, elements, loading, total] = useElements({\n        conversationMode,\n        labelID: inputLabelID,\n        page,\n        sort,\n        filter\n    });\n\n    useEffect(() => setPage({ ...page, page: pageFromUrl(location) }), [searchParams.page]);\n    useEffect(() => setPage({ ...page, total }), [total]);\n\n    useMailboxPageTitle(labelID);\n\n    const checkedIDs = useMemo(() => {\n        return Object.entries(checkedElements).reduce((acc, [elementID, isChecked]) => {\n            if (!isChecked) {\n                return acc;\n            }\n            acc.push(elementID);\n            return acc;\n        }, [] as string[]);\n    }, [checkedElements]);\n\n    const elementID = useMemo(() => {\n        if (checkedIDs.length > 0) {\n            return undefined;\n        }\n        return inputElementID;\n    }, [inputElementID, checkedIDs]);\n\n    const selectedIDs = useMemo(() => {\n        if (checkedIDs.length) {\n            return checkedIDs;\n        }\n        if (elementID) {\n            return [elementID];\n        }\n        return [];\n    }, [checkedIDs, elementID]);\n\n    const handleElement = (element: Element) => history.push(setPathInUrl(location, labelID, element.ID));\n    const handleBack = () => history.push(setPathInUrl(location, labelID));\n    const handlePage = (pageNumber: number) => history.push(setPageInUrl(location, pageNumber));\n    const handleSort = (sort: Sort) => history.push(setSortInUrl(location, sort));\n    const handleFilter = (filter: Filter) => history.push(setFilterInUrl(location, filter));\n\n    const handleCheck = (IDs: string[] = [], checked = false) => {\n        const update = IDs.reduce((acc, contactID) => {\n            acc[contactID] = checked;\n            return acc;\n        }, Object.create(null));\n        setCheckedElements({ ...checkedElements, ...update });\n        setCheckAll(checked && IDs.length === elements.length);\n    };\n\n    const handleCheckAll = (checked = false) =>\n        handleCheck(\n            elements.map(({ ID = '' }: Element) => ID),\n            checked\n        );\n\n    const handleUncheckAll = () => handleCheckAll(false);\n\n    return (\n        <>\n            <Toolbar\n                labelID={labelID}\n                elementID={elementID}\n                selectedIDs={selectedIDs}\n                mailSettings={mailSettings}\n                checkAll={checkAll}\n                onCheckAll={handleCheckAll}\n                page={page}\n                onPage={handlePage}\n                sort={sort}\n                onSort={handleSort}\n                filter={filter}\n                onFilter={handleFilter}\n                onBack={handleBack}\n            />\n            <div\n                className={classnames([\n                    'main-area--withToolbar flex-item-fluid flex reset4print',\n                    !columnMode && 'main-area--rowMode'\n                ])}\n            >\n                {(columnMode || !elementID) && (\n                    <div className=\"items-column-list scroll-if-needed scroll-smooth-touch\">\n                        {loading ? (\n                            <div className=\"flex flex-justify-center h100\">\n                                <Loader />\n                            </div>\n                        ) : (\n                            <List\n                                labelID={labelID}\n                                mailSettings={mailSettings}\n                                elementID={elementID}\n                                elements={elements}\n                                checkedIDs={checkedIDs}\n                                onCheck={handleCheck}\n                                onClick={handleElement}\n                            />\n                        )}\n                    </div>\n                )}\n                {(columnMode || elementID) && (\n                    <section className=\"view-column-detail p2 flex-item-fluid scroll-if-needed\">\n                        {elementID ? (\n                            conversationMode ? (\n                                <ConversationView\n                                    labelID={labelID}\n                                    mailSettings={mailSettings}\n                                    conversationID={elementID}\n                                    onCompose={onCompose}\n                                />\n                            ) : (\n                                <MessageOnlyView\n                                    mailSettings={mailSettings}\n                                    messageID={elementID}\n                                    onCompose={onCompose}\n                                />\n                            )\n                        ) : (\n                            <PlaceholderView\n                                labelID={labelID}\n                                mailSettings={mailSettings}\n                                welcomeRef={welcomeRef}\n                                checkedIDs={checkedIDs}\n                                onUncheckAll={handleUncheckAll}\n                            />\n                        )}\n                    </section>\n                )}\n            </div>\n        </>\n    );\n};\n\nexport default MailboxContainer;\n","import { useEffect } from 'react';\nimport { useLabels, useUser, useConversationCounts, useMessageCounts, useMailSettings } from 'react-components';\nimport { getLabelName } from '../helpers/labels';\nimport { isConversationMode } from '../helpers/mailSettings';\nimport { toMap } from 'proton-shared/lib/helpers/object';\nimport { LabelCount } from '../models/label';\n\nexport const useMailboxPageTitle = (labelID: string) => {\n    const [mailSettings, loadingMailSettings] = useMailSettings();\n    const [labels, loadingLabels] = useLabels();\n    const [user, loadingUser] = useUser();\n    const [conversationCounts, loadingConversationCounts] = useConversationCounts() as [LabelCount[], boolean];\n    const [messageCounts, loadingMessageCounts] = useMessageCounts() as [LabelCount[], boolean];\n\n    const loadings = [loadingMailSettings, loadingLabels, loadingUser, loadingConversationCounts, loadingMessageCounts];\n\n    useEffect(() => {\n        if (loadings.every((loading) => !loading)) {\n            const conversationMode = isConversationMode(labelID, mailSettings);\n            const counters = conversationMode ? conversationCounts : messageCounts;\n            const countersMap = toMap(counters, 'LabelID') as { [labelID: string]: LabelCount };\n            const unreads = (countersMap[labelID] || {}).Unread || 0;\n            const unreadString = unreads > 0 ? `(${unreads}) ` : '';\n            const labelName = getLabelName(labelID, labels);\n            const address = user.Email;\n            document.title = `${unreadString}${labelName} | ${address} | ProtonMail`;\n        }\n    }, [labelID, ...loadings]);\n};\n","import React, { useLayoutEffect } from 'react';\nimport { ErrorBoundary, useMailSettings, Loader, useEventManager } from 'react-components';\n\nimport PrivateLayout from '../components/layout/PrivateLayout';\nimport MailboxContainer from './MailboxContainer';\nimport { HUMAN_TO_LABEL_IDS } from '../constants';\nimport { OnCompose } from './ComposerContainer';\nimport { RouteProps } from '../PrivateApp';\nimport { Event } from '../models/event';\nimport { EVENT_ACTIONS } from 'proton-shared/lib/constants';\nimport { setPathInUrl } from '../helpers/mailboxUrl';\n\ninterface Props extends RouteProps {\n    onCompose: OnCompose;\n}\n\nconst PageContainer = ({ match, location, history, onCompose }: Props) => {\n    const [mailSettings, loadingMailSettings] = useMailSettings();\n    const { subscribe } = useEventManager();\n\n    const { elementID, labelID: currentLabelID = '' } = (match || {}).params || {};\n    const labelID = HUMAN_TO_LABEL_IDS[currentLabelID] || currentLabelID;\n\n    // Detect if the element in URL has been deleted and come back to the label if so\n    useLayoutEffect(\n        () =>\n            subscribe(({ Messages }: Event) => {\n                const match = Messages?.find(({ ID, Action }) => Action === EVENT_ACTIONS.DELETE && ID === elementID);\n\n                if (match) {\n                    history.push(setPathInUrl(location, labelID));\n                }\n            }),\n        [elementID]\n    );\n\n    return (\n        <PrivateLayout labelID={labelID} location={location} history={history} onCompose={onCompose}>\n            <ErrorBoundary>\n                {loadingMailSettings ? (\n                    <Loader />\n                ) : (\n                    <MailboxContainer\n                        labelID={labelID}\n                        mailSettings={mailSettings}\n                        elementID={elementID}\n                        location={location}\n                        history={history}\n                        onCompose={onCompose}\n                    />\n                )}\n            </ErrorBoundary>\n        </PrivateLayout>\n    );\n};\n\nexport default PageContainer;\n","import React from 'react';\nimport { c } from 'ttag';\nimport { Icon, Button, classnames } from 'react-components';\n\nimport { MessageExtended } from '../../models/message';\n\ninterface ButtonProps {\n    onClick: () => void;\n    iconName: string;\n    className?: string;\n}\n\nconst TitleBarButton = ({ onClick, iconName, className = '' }: ButtonProps) => {\n    return (\n        <Button className={classnames(['composer-title-bar-button', className])} onClick={onClick}>\n            <Icon className=\"mauto\" name={iconName} color=\"currentColor\" />\n        </Button>\n    );\n};\n\ninterface Props {\n    message: MessageExtended;\n    minimized: boolean;\n    maximized: boolean;\n    toggleMinimized: () => void;\n    toggleMaximized: () => void;\n    onClose: () => void;\n}\n\nconst ComposerTitleBar = ({ message = {}, minimized, maximized, toggleMinimized, toggleMaximized, onClose }: Props) => {\n    const title = message.data?.Subject || c('Title').t`New message`;\n\n    return (\n        <header className=\"composer-title-bar flex flex-row\">\n            <span className=\"flex-self-vcenter flex-item-fluid pl0-5 pr1 ellipsis\">{title}</span>\n            <TitleBarButton\n                iconName=\"minimize\"\n                className={classnames([minimized && 'rotateX-180'])}\n                onClick={toggleMinimized}\n            />\n            <TitleBarButton iconName={maximized ? 'contract-window' : 'expand'} onClick={toggleMaximized} />\n            <TitleBarButton iconName=\"close\" onClick={onClose} />\n        </header>\n    );\n};\n\nexport default ComposerTitleBar;\n","import React, { SyntheticEvent, useState, useEffect, useRef } from 'react';\nimport { Icon, classnames } from 'react-components';\n\nimport { Recipient } from '../../../models/message';\nimport { validateAddress, recipientToInput, inputToRecipient } from '../../../helpers/addresses';\n\ninterface Props {\n    recipient: Recipient;\n    onChange: (value: Recipient) => void;\n    onRemove: () => void;\n}\n\nconst AddressesItem = ({ recipient, onChange, onRemove }: Props) => {\n    const [model, setModel] = useState(recipientToInput(recipient));\n    const editableRef = useRef<HTMLSpanElement>(null);\n\n    const validate = () => {\n        // TODO: Check server\n        const recipient = inputToRecipient(model);\n        return validateAddress(recipient.Address);\n    };\n\n    const [valid, setValid] = useState(validate());\n\n    useEffect(() => {\n        // TODO: Manage recipient names\n        const value = recipientToInput(recipient);\n\n        if (editableRef.current) {\n            editableRef.current.textContent = value;\n        }\n        setModel(value);\n    }, [recipient]);\n\n    const handleChange = (event: SyntheticEvent) => {\n        setModel((event.target as HTMLSpanElement).textContent || '');\n    };\n    const handleBlur = () => {\n        setValid(validate());\n        onChange(inputToRecipient(model));\n    };\n\n    return (\n        <div\n            className={classnames([\n                'composer-addresses-item bordered-container flex flex-items-center flex-nowrap flex-row mw80 stop-propagation',\n                !valid && 'invalid'\n            ])}\n        >\n            {/* TODO: Icon lock */}\n            <span\n                className=\"composer-addresses-item-label mtauto mbauto pl0-5 ellipsis pr0-5\"\n                contentEditable\n                onKeyUp={handleChange}\n                onPaste={handleChange}\n                onBlur={handleBlur}\n                ref={editableRef}\n            />\n            <button\n                className=\"composer-addresses-item-remove inline-flex pl0-5 pr0-5 no-pointer-events-children h100\"\n                onClick={onRemove}\n            >\n                <Icon name=\"off\" size={12} className=\"mauto\" />\n            </button>\n        </div>\n    );\n};\n\nexport default AddressesItem;\n","import React, { useState, useEffect, ChangeEvent, MutableRefObject, useRef, MouseEvent } from 'react';\nimport { Input } from 'react-components';\nimport { noop } from 'proton-shared/lib/helpers/function';\n\nimport { Recipient } from '../../../models/message';\nimport AddressesItem from './AddressesItem';\nimport { inputToRecipient } from '../../../helpers/addresses';\n\ninterface Props {\n    id: string;\n    addresses?: Recipient[];\n    onChange: (value: Recipient[]) => void;\n    addressesFocusRef?: MutableRefObject<() => void>;\n}\n\nconst AddressesInput = ({ id, addresses = [], onChange, addressesFocusRef }: Props) => {\n    const [inputModel, setInputModel] = useState('');\n    const inputRef = useRef<HTMLInputElement>();\n\n    useEffect(() => {\n        if (addressesFocusRef) {\n            addressesFocusRef.current = inputRef.current?.focus.bind(inputRef.current) || noop;\n        }\n    }, []);\n\n    const handleInputChange = (event: ChangeEvent) => {\n        const input = event.target as HTMLInputElement;\n        setInputModel(input.value);\n    };\n\n    const handleInputKey = (event: KeyboardEvent) => {\n        // Enter or Tab\n        if (event.keyCode === 13 || event.keyCode === 9) {\n            onChange([...addresses, inputToRecipient(inputModel)]);\n            setInputModel('');\n            event.preventDefault(); // Prevent tab to switch field\n        }\n    };\n\n    const handleClick = (event: MouseEvent) => {\n        if ((event.target as HTMLElement).closest('.stop-propagation')) {\n            event.stopPropagation();\n            return;\n        }\n\n        inputRef.current?.focus();\n    };\n\n    const handleExistingChange = (toChange: Recipient) => (value: Recipient) => {\n        console.log('handleExistingChange', toChange, value);\n        onChange(addresses.map((recipient) => (recipient === toChange ? value : recipient)));\n    };\n\n    const handleExistingRemove = (toRemove: Recipient) => () => {\n        onChange(addresses.filter((recipient) => recipient !== toRemove));\n    };\n\n    return (\n        <div className=\"composer-addresses-container flex-item-fluid bordered-container pl1-25\" onClick={handleClick}>\n            {addresses.map((recipient, i) => (\n                <AddressesItem\n                    key={i}\n                    recipient={recipient}\n                    onChange={handleExistingChange(recipient)}\n                    onRemove={handleExistingRemove(recipient)}\n                />\n            ))}\n            <div>\n                <Input\n                    id={id}\n                    value={inputModel}\n                    onChange={handleInputChange}\n                    onKeyDown={handleInputKey}\n                    ref={inputRef}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default AddressesInput;\n","import React, { useState, MutableRefObject } from 'react';\nimport { c } from 'ttag';\nimport { Label, generateUID, Button, Tooltip } from 'react-components';\n\nimport { MessageExtended, RecipientType, Recipient } from '../../../models/message';\nimport AddressesInput from './AddressesInput';\n\ninterface Props {\n    message: MessageExtended;\n    onChange: (message: MessageExtended) => void;\n    expanded: boolean;\n    toggleExpanded: () => void;\n    addressesFocusRef: MutableRefObject<() => void>;\n}\n\nconst AddressesEditor = ({ message, onChange, expanded, toggleExpanded, addressesFocusRef }: Props) => {\n    const [uid] = useState(generateUID('composer'));\n\n    const handleChange = (type: RecipientType) => (value: Recipient[]) => {\n        onChange({ data: { [type]: value } });\n    };\n\n    const handleContactModal = (type: RecipientType) => () => {\n        console.log('Open contact modal for', type);\n    };\n\n    return (\n        <div className=\"flex flex-row flex-nowrap flex-items-start pl0-5 mb0-5\">\n            <div className=\"flex flex-column flex-items-start flex-item-fluid\">\n                <div className=\"flex flex-row w100\">\n                    <Label htmlFor={`to-${uid}`} className=\"composer-meta-label\">\n                        <Tooltip title={c('Title').t`Add contacts`}>\n                            <a onClick={handleContactModal('ToList')}>{c('Title').t`To`}</a>\n                        </Tooltip>\n                    </Label>\n                    <AddressesInput\n                        id={`to-${uid}`}\n                        addresses={message.data?.ToList}\n                        onChange={handleChange('ToList')}\n                        addressesFocusRef={addressesFocusRef}\n                    />\n                </div>\n                {expanded && (\n                    <>\n                        <div className=\"flex flex-row w100 mt0-5\">\n                            <Label htmlFor={`cc-${uid}`} className=\"composer-meta-label\">\n                                <a onClick={handleContactModal('CCList')}>{c('Title').t`CC`}</a>\n                            </Label>\n                            <AddressesInput\n                                id={`cc-${uid}`}\n                                addresses={message.data?.CCList}\n                                onChange={handleChange('CCList')}\n                            />\n                        </div>\n                        <div className=\"flex flex-row w100 mt0-5\">\n                            <Label htmlFor={`bcc-${uid}`} className=\"composer-meta-label\">\n                                <a onClick={handleContactModal('BCCList')}>{c('Title').t`BCC`}</a>\n                            </Label>\n                            <AddressesInput\n                                id={`bcc-${uid}`}\n                                addresses={message.data?.BCCList}\n                                onChange={handleChange('BCCList')}\n                            />\n                        </div>\n                    </>\n                )}\n            </div>\n            <Button icon=\"caret\" className=\"pm-button--link ml0-5 mr0-5\" onClick={toggleExpanded} />\n        </div>\n    );\n};\n\nexport default AddressesEditor;\n","import React, { Fragment } from 'react';\nimport { c } from 'ttag';\nimport { Label, Button } from 'react-components';\n\nimport { MessageExtended } from '../../../models/message';\nimport { RecipientType } from '../../../models/message';\nimport { getRecipientLabel } from '../../../helpers/conversation';\n\ninterface Props {\n    message: MessageExtended;\n    onFocus: () => void;\n}\n\nconst AddressesSummary = ({ message: { data = {} }, onFocus }: Props) => {\n    const types: RecipientType[] = ['ToList', 'CCList', 'BCCList'];\n\n    return (\n        <div className=\"flex flex-row flex-nowrap flex-items-center pl0-5 mb0-5\" onClick={onFocus}>\n            <Label htmlFor={null} className=\"composer-meta-label color-pm-blue\">\n                {c('Title').t`To`}\n            </Label>\n            <div className=\"flex flex-row w100\">\n                <span className=\"flex-item-fluid bordered-container flex composer-addresses-fakefield\">\n                    <span className=\"ellipsis mw100\">\n                        {types.map((type) => {\n                            const list = data[type] || [];\n                            if (list.length === 0) {\n                                return null;\n                            }\n                            return (\n                                <Fragment key={type}>\n                                    {type === 'CCList' && (\n                                        <span className=\"mr0-5 color-pm-blue\">{c('Title').t`CC`}:</span>\n                                    )}\n                                    {type === 'BCCList' && (\n                                        <span className=\"mr0-5 color-pm-blue\">{c('Title').t`BCC`}:</span>\n                                    )}\n                                    {list.map((recipient, i) => (\n                                        <span key={i} className=\"mr0-5\">\n                                            {getRecipientLabel(recipient)}\n                                            {i !== list.length - 1 && ','}\n                                        </span>\n                                    ))}\n                                </Fragment>\n                            );\n                        })}\n                    </span>\n                </span>\n                <Button icon=\"caret\" className=\"pm-button--link ml0-5 mr0-5 \" />\n            </div>\n        </div>\n    );\n};\n\nexport default AddressesSummary;\n","import React, { MutableRefObject, useEffect } from 'react';\nimport { useToggle } from 'react-components';\nimport { MessageExtended } from '../../../models/message';\nimport AddressesEditor from './AddressesEditor';\nimport AddressesSummary from './AddressesSummary';\nimport { getRecipients } from '../../../helpers/message/messages';\n\ninterface Props {\n    message: MessageExtended;\n    onChange: (message: MessageExtended) => void;\n    addressesBlurRef: MutableRefObject<() => void>;\n    addressesFocusRef: MutableRefObject<() => void>;\n}\n\nconst Addresses = ({ message, onChange, addressesBlurRef, addressesFocusRef }: Props) => {\n    // Summary of selected addresses or addresses editor\n    const { state: editor, set: setEditor } = useToggle(true);\n\n    // CC and BCC visible in expanded mode\n    const { state: expanded, set: setExpanded, toggle: toggleExpanded } = useToggle(\n        getRecipients(message.data).length > 0\n    );\n\n    useEffect(() => {\n        const handleBlur = () => setEditor(false);\n        addressesBlurRef.current = handleBlur;\n    }, []);\n\n    const handleFocus = () => {\n        setEditor(true);\n        setExpanded(true);\n        setTimeout(() => {\n            addressesFocusRef.current();\n        });\n    };\n\n    return editor ? (\n        <AddressesEditor\n            message={message}\n            onChange={onChange}\n            expanded={expanded}\n            toggleExpanded={toggleExpanded}\n            addressesFocusRef={addressesFocusRef}\n        />\n    ) : (\n        <AddressesSummary message={message} onFocus={handleFocus} />\n    );\n};\n\nexport default Addresses;\n","import React, { useState, ChangeEvent, MutableRefObject } from 'react';\nimport { Label, Select, Input, generateUID } from 'react-components';\n\nimport { MessageExtended } from '../../models/message';\nimport { Address } from '../../models/address';\nimport ComposerAddresses from './addresses/Addresses';\n\ninterface Props {\n    message: MessageExtended;\n    addresses: Address[];\n    onChange: (message: MessageExtended) => void;\n    addressesBlurRef: MutableRefObject<() => void>;\n    addressesFocusRef: MutableRefObject<() => void>;\n}\n\nconst ComposerMeta = ({ message, addresses, onChange, addressesBlurRef, addressesFocusRef }: Props) => {\n    const [uid] = useState(generateUID('composer'));\n\n    // TODO: Implement logic on available addresses\n    // Reference: Angular/src/app/composer/factories/composerFromModel.js\n    const addressesOptions = addresses.map((address: Address) => ({ text: address.Email, value: address.ID }));\n\n    const handleFromChange = (event: ChangeEvent) => {\n        const select = event.target as HTMLSelectElement;\n        const AddressID = select.value;\n        const address = addresses.find((address: Address) => address.ID === AddressID);\n        const Sender = { Name: address?.DisplayName, Address: address?.Email };\n        onChange({ data: { AddressID, Sender } });\n    };\n\n    const handleSubjectChange = (event: ChangeEvent) => {\n        const input = event.target as HTMLInputElement;\n        onChange({ data: { Subject: input.value } });\n    };\n\n    // console.log('Meta', message);\n\n    return (\n        <div className=\"composer-meta w100\">\n            <div className=\"flex flex-row flex-nowrap flex-items-center pl0-5 mb0-5\">\n                <Label htmlFor={`from-${uid}`} className=\"composer-meta-label\">\n                    From\n                </Label>\n                <Select\n                    id={`from-${uid}`}\n                    options={addressesOptions}\n                    value={message.data?.AddressID}\n                    onChange={handleFromChange}\n                    onFocus={addressesBlurRef.current}\n                ></Select>\n            </div>\n            <ComposerAddresses\n                message={message}\n                onChange={onChange}\n                addressesBlurRef={addressesBlurRef}\n                addressesFocusRef={addressesFocusRef}\n            />\n            <div className=\"flex flex-row flex-nowrap flex-items-center pl0-5 mb0-5\">\n                <Label htmlFor={`subject-${uid}`} className=\"composer-meta-label\">\n                    Subject\n                </Label>\n                <Input\n                    id={`subject-${uid}`}\n                    value={message.data?.Subject}\n                    onChange={handleSubjectChange}\n                    onFocus={addressesBlurRef.current}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default ComposerMeta;\n","import React, { MutableRefObject, useRef, useEffect, RefObject } from 'react';\nimport ReactQuill from 'react-quill';\nimport Quill from 'quill';\nimport { noop } from 'proton-shared/lib/helpers/function';\nimport { MessageExtended } from '../../models/message';\n\nconst Block = Quill.import('blots/block');\nBlock.tagName = 'div';\nQuill.register(Block);\n\ninterface Props {\n    message: MessageExtended;\n    onChange: (message: MessageExtended) => void;\n    onFocus: () => void;\n    contentFocusRef: MutableRefObject<() => void>;\n}\n\nconst ComposerContent = ({ message, onChange, onFocus, contentFocusRef }: Props) => {\n    const inputRef: RefObject<ReactQuill> = useRef(null);\n\n    useEffect(() => {\n        contentFocusRef.current = inputRef.current?.focus || noop;\n    }, []);\n\n    const handleChange = (content: string) => {\n        onChange({ content });\n    };\n\n    return (\n        <section className=\"composer-content flex-item-fluid w100 mb1\">\n            <ReactQuill\n                className=\"composer-quill\"\n                value={message.content}\n                onChange={handleChange}\n                onFocus={onFocus}\n                ref={inputRef}\n            />\n        </section>\n    );\n};\n\nexport default ComposerContent;\n","import React from 'react';\nimport { c } from 'ttag';\nimport { Button, useLoading, useModals, ConfirmModal, Alert } from 'react-components';\nimport { noop } from 'proton-shared/lib/helpers/function';\n\nimport { formatSimpleDate } from '../../helpers/date';\nimport { MessageExtended } from '../../models/message';\nimport { getDate } from '../../helpers/elements';\n\ninterface Props {\n    message: MessageExtended;\n    onSave: () => Promise<void>;\n    onSend: () => Promise<void>;\n    onDelete: () => Promise<void>;\n}\n\nconst ComposerActions = ({ message, onSave, onSend, onDelete }: Props) => {\n    const [loading, withLoading] = useLoading(false);\n    const { createModal } = useModals();\n\n    const handleDelete = () => {\n        return createModal(\n            <ConfirmModal onConfirm={onDelete} onClose={noop} title={c('Title').t`Delete`}>\n                <Alert>{c('Info').t`Permanently delete this draft?`}</Alert>\n            </ConfirmModal>\n        );\n    };\n\n    return (\n        <footer className=\"composer-actions flex flex-row flex-spacebetween w100\">\n            <div>\n                <Button icon=\"attach\" /> <Button icon=\"expiration\" /> <Button icon=\"lock\" />\n            </div>\n            <div className=\"flex-self-vcenter\">\n                <span>Saved at {formatSimpleDate(getDate(message.data))}</span>\n                <Button className=\"ml1\" icon=\"trash\" onClick={handleDelete} /> <Button icon=\"save\" onClick={onSave} />{' '}\n                <Button className=\"pm-button-blue\" loading={loading} onClick={() => withLoading(onSend())}>\n                    Send\n                </Button>\n            </div>\n        </footer>\n    );\n};\n\nexport default ComposerActions;\n","import React, { useState, useEffect, CSSProperties, useRef } from 'react';\nimport { classnames, useToggle, useWindowSize, useLoading, Loader, useNotifications } from 'react-components';\nimport { c } from 'ttag';\n\nimport { MessageExtended } from '../../models/message';\nimport ComposerTitleBar from './ComposerTitleBar';\nimport ComposerMeta from './ComposerMeta';\nimport ComposerContent from './ComposerContent';\nimport ComposerActions from './ComposerActions';\nimport { useMessage } from '../../hooks/useMessage';\nimport { Address } from '../../models/address';\nimport {\n    COMPOSER_GUTTER,\n    COMPOSER_VERTICAL_GUTTER,\n    APP_BAR_WIDTH,\n    HEADER_HEIGHT,\n    COMPOSER_HEIGHT,\n    COMPOSER_SWITCH_MODE\n} from '../../containers/ComposerContainer';\nimport { noop } from 'proton-shared/lib/helpers/function';\nimport { getRecipients } from '../../helpers/message/messages';\n\n/**\n * Create a new MessageExtended with props from both m1 and m2\n * Almost a standard deep merge but simplified with specific needs\n * m2 props will override those from m1\n */\nconst mergeMessages = (m1: MessageExtended, m2: MessageExtended) => ({\n    ...m1,\n    ...m2,\n    data: { ...m1.data, ...m2.data }\n});\n\nconst computeStyle = (\n    inputStyle: CSSProperties,\n    minimized: boolean,\n    maximized: boolean,\n    width: number,\n    height: number\n): CSSProperties => {\n    if (minimized) {\n        return {\n            ...inputStyle,\n            height: 'auto'\n        };\n    }\n    if (maximized) {\n        return {\n            ...inputStyle,\n            right: COMPOSER_GUTTER,\n            width: width - COMPOSER_GUTTER - APP_BAR_WIDTH,\n            height: height - COMPOSER_VERTICAL_GUTTER * 2\n        };\n    }\n    return inputStyle;\n};\n\ninterface Props {\n    style?: CSSProperties;\n    focus: boolean;\n    message?: MessageExtended;\n    mailSettings: any;\n    addresses: Address[];\n    onFocus: () => void;\n    onChange: (message: MessageExtended) => void;\n    onClose: () => void;\n}\n\nconst Composer = ({\n    style: inputStyle = {},\n    focus,\n    message: inputMessage = {},\n    mailSettings,\n    addresses,\n    onFocus,\n    onChange,\n    onClose\n}: Props) => {\n    const { state: minimized, toggle: toggleMinimized } = useToggle(false);\n    const { state: maximized, toggle: toggleMaximized } = useToggle(false);\n    const [modelMessage, setModelMessage] = useState<MessageExtended>(inputMessage);\n    const [loading, withLoading] = useLoading(false);\n    const [syncedMessage, { initialize, createDraft, saveDraft, send, deleteDraft }] = useMessage(\n        inputMessage.data,\n        mailSettings\n    );\n    const [width, height] = useWindowSize();\n    const { createNotification } = useNotifications();\n\n    // Manage focus from the container yet keeping logic in each component\n    const addressesBlurRef = useRef<() => void>(noop);\n    const addressesFocusRef = useRef<() => void>(noop);\n    const contentFocusRef = useRef<() => void>(noop);\n\n    const showLoader = loading || !modelMessage.data?.ID || !modelMessage.content;\n\n    useEffect(() => {\n        if (!loading && !syncedMessage.data?.ID) {\n            withLoading(createDraft(inputMessage));\n        }\n\n        if (!loading && syncedMessage.data?.ID && typeof syncedMessage.initialized === 'undefined') {\n            withLoading(initialize());\n        }\n\n        setModelMessage(mergeMessages(modelMessage, syncedMessage));\n        onChange(syncedMessage);\n    }, [loading, syncedMessage]);\n\n    useEffect(() => {\n        if (!maximized && height - COMPOSER_VERTICAL_GUTTER - HEADER_HEIGHT < COMPOSER_HEIGHT - COMPOSER_SWITCH_MODE) {\n            toggleMaximized();\n        }\n        if (maximized && height - COMPOSER_VERTICAL_GUTTER - HEADER_HEIGHT > COMPOSER_HEIGHT + COMPOSER_SWITCH_MODE) {\n            toggleMaximized();\n        }\n    }, [height]);\n\n    // Manage focus at opening\n    useEffect(() => {\n        if (showLoader) {\n            return;\n        }\n\n        setTimeout(() => {\n            if (getRecipients(syncedMessage.data).length === 0) {\n                addressesFocusRef.current();\n            } else {\n                contentFocusRef.current();\n            }\n        });\n    }, [showLoader]);\n\n    const handleChange = (message: MessageExtended) => {\n        console.log('change', message);\n        setModelMessage(mergeMessages(modelMessage, message));\n    };\n    const save = async () => {\n        await saveDraft(modelMessage);\n        createNotification({ text: c('Info').t`Message saved` });\n    };\n    const handleSave = async () => {\n        await save();\n    };\n    const handleSend = async () => {\n        await send(modelMessage);\n        createNotification({ text: c('Success').t`Message sent` });\n        onClose();\n    };\n    const handleDelete = async () => {\n        await deleteDraft();\n        createNotification({ text: c('Info').t`Message discarded` });\n        onClose();\n    };\n    const handleClick = async () => {\n        if (minimized) {\n            toggleMinimized();\n        }\n        onFocus();\n    };\n    const handleClose = async () => {\n        await save();\n        onClose();\n    };\n\n    const style = computeStyle(inputStyle, minimized, maximized, width, height);\n\n    return (\n        <div\n            className={classnames([\n                'composer flex flex-column p0-5',\n                !focus && 'composer-blur',\n                minimized && 'composer-minimized pb0'\n            ])}\n            style={style}\n            onFocus={onFocus}\n            onClick={handleClick}\n        >\n            {showLoader ? (\n                <Loader />\n            ) : (\n                <>\n                    <ComposerTitleBar\n                        message={modelMessage}\n                        minimized={minimized}\n                        maximized={maximized}\n                        toggleMinimized={toggleMinimized}\n                        toggleMaximized={toggleMaximized}\n                        onClose={handleClose}\n                    />\n                    {!minimized && (\n                        <>\n                            <ComposerMeta\n                                message={modelMessage}\n                                addresses={addresses}\n                                onChange={handleChange}\n                                addressesBlurRef={addressesBlurRef}\n                                addressesFocusRef={addressesFocusRef}\n                            />\n                            <ComposerContent\n                                message={modelMessage}\n                                onChange={handleChange}\n                                onFocus={addressesBlurRef.current}\n                                contentFocusRef={contentFocusRef}\n                            />\n                            <ComposerActions\n                                message={modelMessage}\n                                onSave={handleSave}\n                                onSend={handleSend}\n                                onDelete={handleDelete}\n                            />\n                        </>\n                    )}\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default Composer;\n","/**\n * Clean template\n * @link {https://gist.github.com/dhoko/4b0c20e66c8a3f1aa431}\n */\nexport const dedentTpl = (callSite: TemplateStringsArray, ...args: string[]) => {\n    function format(str = '') {\n        let size = -1;\n        return str.replace(/\\n(\\s+)/g, (m, m1) => {\n            if (size < 0) {\n                size = m1.replace(/\\t/g, '    ').length;\n            }\n            return '\\n' + m1.slice(Math.min(m1.length, size));\n        });\n    }\n    // TODO: Could this append with TS?\n    // if (typeof callSite === 'string') {\n    //     return format(callSite);\n    // }\n    // if (typeof callSite === 'function') {\n    //     return (...args: string[]) => format(callSite(...args));\n    // }\n    const output = callSite\n        .slice(0, args.length + 1)\n        .map((text, i) => (i === 0 ? '' : args[i - 1]) + text)\n        .join('');\n    return format(output);\n};\n","import { PM_SIGNATURE } from 'proton-shared/lib/constants';\n\nimport { MESSAGE_ACTIONS } from '../../constants';\nimport { MailSettings } from '../../models/utils';\nimport { dedentTpl } from '../dedent';\nimport { replaceLineBreaks } from '../string';\nimport { message } from '../purify';\nimport { parseInDiv } from '../dom';\n\nexport const CLASSNAME_SIGNATURE_CONTAINER = 'protonmail_signature_block';\nexport const CLASSNAME_SIGNATURE_USER = 'protonmail_signature_block-user';\nexport const CLASSNAME_SIGNATURE_PROTON = 'protonmail_signature_block-proton';\nexport const CLASSNAME_SIGNATURE_EMPTY = 'protonmail_signature_block-empty';\n\n/**\n * Preformat the protonMail signature\n */\nconst getProtonSignature = (mailSettings: MailSettings) => (mailSettings.PMSignature === 0 ? '' : PM_SIGNATURE);\n\n/**\n * Check if the signature is empty for a user\n */\nconst isEmptyUserSignature = (signature: string) =>\n    !signature || signature === '<div><br /></div>' || signature === '<div><br></div>';\n\n/**\n * Generate a space tag, it can be hidden from the UX via a className\n */\nconst createSpace = (className = '') => {\n    const tagOpen = className ? `<div class=\"${className}\">` : '<div>';\n    return `${tagOpen}<br /></div>`;\n};\n\n/**\n * Generate spaces for the signature\n *     No signature: 1 space\n *     addressSignature: 2 spaces + addressSignature\n *     protonSignature: 2 spaces + protonSignature\n *     user + proton signature: 2 spaces + addressSignature + 1 space + protonSignature\n */\nconst getSpaces = (signature: string, protonSignature: string, isReply = false) => {\n    const isUserEmpty = isEmptyUserSignature(signature);\n    const isEmptySignature = isUserEmpty && !protonSignature;\n    return {\n        start: isEmptySignature ? createSpace() : createSpace() + createSpace(),\n        end: isReply ? createSpace() : '',\n        between: !isUserEmpty && protonSignature ? createSpace() : ''\n    };\n};\n\n/**\n * Generate a map of classNames used for the signature template\n */\nconst getClassNamesSignature = (signature: string, protonSignature: string) => {\n    const isUserEmpty = isEmptyUserSignature(signature);\n    const isProtonEmpty = !protonSignature;\n    return {\n        userClass: isUserEmpty ? CLASSNAME_SIGNATURE_EMPTY : '',\n        protonClass: isProtonEmpty ? CLASSNAME_SIGNATURE_EMPTY : '',\n        containerClass: isUserEmpty && isProtonEmpty ? CLASSNAME_SIGNATURE_EMPTY : ''\n    };\n};\n\n/**\n * Generate the template for a signature and clean it\n */\nconst templateBuilder = (signature = '', mailSettings: MailSettings, isReply = false, noSpace = false) => {\n    const protonSignature = getProtonSignature(mailSettings);\n    const { userClass, protonClass, containerClass } = getClassNamesSignature(signature, protonSignature);\n    const space = getSpaces(signature, protonSignature, isReply);\n\n    const template = dedentTpl`\n        <div class=\"${CLASSNAME_SIGNATURE_CONTAINER} ${containerClass}\">\n            <div class=\"${CLASSNAME_SIGNATURE_USER} ${userClass}\">\n                ${replaceLineBreaks(signature)}\n            </div>\n            ${space.between}\n            <div class=\"${CLASSNAME_SIGNATURE_PROTON} ${protonClass}\">\n                ${replaceLineBreaks(protonSignature)}\n            </div>\n        </div>\n    `;\n\n    if (!noSpace) {\n        return `${space.start}${message(template)}${space.end}`;\n    }\n\n    return message(template);\n};\n\n/**\n * Insert Signatures before the message\n *     - Always append a container signature with both user's and proton's\n *     - Theses signature can be empty but the dom remains\n */\nexport const insertSignature = (\n    content = '',\n    signature = '',\n    action: MESSAGE_ACTIONS,\n    mailSettings: MailSettings,\n    isAfter = false\n) => {\n    const position = isAfter ? 'beforeend' : 'afterbegin';\n    const template = templateBuilder(signature, mailSettings, action !== MESSAGE_ACTIONS.NEW);\n\n    // Parse the current message and append before it the signature\n    const element = parseInDiv(content);\n    element.insertAdjacentHTML(position, template);\n\n    return element.innerHTML;\n};\n","import { c } from 'ttag';\nimport { setBit } from 'proton-shared/lib/helpers/bitset';\n\nimport { Message, MessageExtended, Recipient } from '../../models/message';\nimport { Address } from '../../models/address';\nimport { MESSAGE_ACTIONS, MESSAGE_FLAGS } from '../../constants';\nimport { MailSettings } from '../../models/utils';\nimport { findSender } from '../addresses';\nimport { Attachment } from '../../models/attachment';\nimport { insertSignature } from './messageSignature';\nimport { formatFullDate } from '../date';\nimport { recipientToInput } from '../addresses';\nimport { isSent, isSentAndReceived } from './messages';\nimport { unique } from 'proton-shared/lib/helpers/array';\n\n// Reference: Angular/src/app/message/services/messageBuilder.js\n\nexport const RE_PREFIX = c('Message').t`Re:`;\nexport const FW_PREFIX = c('Message').t`Fw:`;\n\n/**\n * Format the subject to add the prefix only when the subject\n * doesn't start with it\n */\nexport const formatSubject = (subject = '', prefix = '') => {\n    const hasPrefix = new RegExp(`^${prefix}`, 'i');\n    return hasPrefix.test(subject) ? subject : `${prefix} ${subject}`;\n};\n\n/**\n * Format and build a new message\n * TODO: Define if referenceMessage could ever be defined\n */\nconst newCopy = (\n    {\n        data: { Subject = '', ToList = [], CCList = [], BCCList = [] } = {},\n        encryptedSubject = ''\n    }: MessageExtended = {},\n    useEncrypted = false\n): Message => {\n    return {\n        Subject: useEncrypted ? encryptedSubject : Subject,\n        ToList,\n        CCList,\n        BCCList\n    };\n};\n\n/**\n * Format and build a reply\n */\nconst reply = (referenceMessage: MessageExtended = {}, useEncrypted = false): Message => {\n    const Subject = formatSubject(\n        useEncrypted ? referenceMessage.encryptedSubject : referenceMessage.data?.Subject,\n        RE_PREFIX\n    );\n    const ToList =\n        isSent(referenceMessage.data) || isSentAndReceived(referenceMessage.data)\n            ? referenceMessage.data?.ToList\n            : referenceMessage.data?.ReplyTos;\n\n    return {\n        Subject,\n        ToList\n    };\n};\n\n/**\n * Format and build a replyAll\n */\nconst replyAll = (referenceMessage: MessageExtended = {}, useEncrypted = false, addresses: Address[]): Message => {\n    const { data = {}, encryptedSubject = '' } = referenceMessage;\n\n    const Subject = formatSubject(useEncrypted ? encryptedSubject : data.Subject, RE_PREFIX);\n\n    if (isSent(referenceMessage.data) || isSentAndReceived(referenceMessage.data)) {\n        return { Subject, ToList: data.ToList, CCList: data.CCList, BCCList: data.BCCList };\n    }\n\n    const ToList = data.ReplyTos;\n\n    // Remove user address in CCList and ToList\n    const userAddresses = addresses.map(({ Email = '' }) => Email.toLowerCase());\n    const CCListWithoutUserAddresses: Recipient[] = unique([...(data.ToList || []), ...(data.CCList || [])]);\n    const CCList = CCListWithoutUserAddresses.filter(\n        ({ Address = '' }) => !userAddresses.includes(Address.toLowerCase())\n    );\n\n    return { Subject, ToList, CCList };\n};\n\n/**\n * Format and build a forward\n */\nconst forward = ({ data = {}, encryptedSubject = '' }: MessageExtended = {}, useEncrypted = false): Message => {\n    const Subject = formatSubject(useEncrypted ? encryptedSubject : data.Subject, FW_PREFIX);\n\n    return { Subject, ToList: [] };\n};\n\nexport const handleActions = (\n    action: MESSAGE_ACTIONS,\n    referenceMessage: MessageExtended = {},\n    addresses: Address[] = []\n): Message => {\n    // TODO: I would prefere manage a confirm modal from elsewhere\n    // const useEncrypted = !!referenceMessage.encryptedSubject && (await promptEncryptedSubject(currentMsg));\n    const useEncrypted = !!referenceMessage.encryptedSubject;\n\n    switch (action) {\n        case MESSAGE_ACTIONS.NEW:\n            return newCopy(referenceMessage, useEncrypted);\n        case MESSAGE_ACTIONS.REPLY:\n            return reply(referenceMessage, useEncrypted);\n        case MESSAGE_ACTIONS.REPLY_ALL:\n            return replyAll(referenceMessage, useEncrypted, addresses);\n        case MESSAGE_ACTIONS.FORWARD:\n            return forward(referenceMessage, useEncrypted);\n        // No default needed as all enum values are addressed\n    }\n};\n\n/**\n * Generate blockquote of the referenced message to the content of the new mail\n */\nconst generateBlockquote = (referenceMessage: MessageExtended) => {\n    const date = formatFullDate(referenceMessage.data?.Time);\n    const sender = recipientToInput(referenceMessage.data?.Sender);\n    const previously = c('Message').t`On ${date}, ${sender} wrote:`;\n    // TODO\n    // const newContent =\n    //     referenceMessage.data?.MIMEType === MIME_TYPES.PLAINTEXT ? textToHtmlMail.parse(content) : content;\n    // TODO: To check... Should use transformations from useMessage\n    // newContent = prepareContent(content, referenceMessage, ['*'], action);\n    const newContent = referenceMessage.content;\n\n    return `‐‐‐‐‐‐‐ Original Message ‐‐‐‐‐‐‐<br>\n        ${previously}<br>\n        <blockquote class=\"protonmail_quote\" type=\"cite\">\n            ${newContent}\n        </blockquote><br>`;\n};\n\nexport const createNewDraft = (\n    action: MESSAGE_ACTIONS,\n    referenceMessage: MessageExtended = {},\n    mailSettings: MailSettings,\n    addresses: Address[]\n): MessageExtended => {\n    const MIMEType = referenceMessage.data?.MIMEType || mailSettings.DraftMIMEType;\n    const RightToLeft = mailSettings.RightToLeft;\n\n    let Flags = 0;\n    if (mailSettings.AttachPublicKey) {\n        Flags = setBit(Flags, MESSAGE_FLAGS.FLAG_PUBLIC_KEY);\n    }\n    if (mailSettings.Sign) {\n        Flags = setBit(Flags, MESSAGE_FLAGS.FLAG_SIGN);\n    }\n\n    const { Subject, ToList = [], CCList = [], BCCList = [] } = handleActions(action, referenceMessage, addresses);\n\n    const originalTo = referenceMessage.originalTo;\n\n    const senderAddress = findSender(addresses, referenceMessage.data) || {};\n\n    const AddressID = senderAddress.ID; // Set the AddressID from previous message to convert attachments on reply / replyAll / forward\n    const Sender = {\n        Name: senderAddress.DisplayName,\n        Address: senderAddress.Email\n    };\n\n    // TODO: Understand the purpose here\n    // newMsg.Body = currentMsg.Body; // We use the existing Body to speed up the draft request logic\n\n    // TODO: Handle attachments\n    // /* add inline images as attachments */\n    // const attachments = pickAttachements(currentMsg, action);\n    // newMsg.NumEmbedded = 0;\n\n    // newMsg.Attachments = pgpMimeAttachments.clean(attachments);\n    // newMsg.pgpMimeAttachments = pgpMimeAttachments.filter(attachments);\n\n    const Attachments: Attachment[] = [];\n\n    let content = action === MESSAGE_ACTIONS.NEW ? '' : generateBlockquote(referenceMessage);\n\n    const ParentID = action === MESSAGE_ACTIONS.NEW ? undefined : referenceMessage.data?.ID;\n\n    content = insertSignature(content, senderAddress.Signature, action, mailSettings);\n\n    return {\n        data: {\n            ToList,\n            CCList,\n            BCCList,\n            Subject,\n            PasswordHint: '',\n            ExpirationTime: 0,\n            ExpiresIn: 0,\n            Attachments,\n            MIMEType,\n            RightToLeft,\n            Flags,\n            Sender,\n            AddressID,\n            ParentID\n        },\n        content,\n        action,\n        originalTo\n    };\n};\n","import React, { ReactNode, useState, CSSProperties } from 'react';\nimport { c } from 'ttag';\nimport { useMailSettings, useAddresses, useWindowSize, useNotifications } from 'react-components';\nimport { range } from 'proton-shared/lib/helpers/array';\n\nimport { MessageExtended } from '../models/message';\nimport Composer from '../components/composer/Composer';\n\nimport '../components/composer/composer.scss';\nimport { MESSAGE_ACTIONS } from '../constants';\nimport { createNewDraft } from '../helpers/message/messageDraft';\n\nexport const COMPOSER_WIDTH = 600;\nexport const COMPOSER_HEIGHT = 520;\nexport const COMPOSER_GUTTER = 20;\nexport const COMPOSER_VERTICAL_GUTTER = 10;\nexport const COMPOSER_ZINDEX = 300;\nexport const COMPOSER_SWITCH_MODE = 20;\nexport const HEADER_HEIGHT = 80;\nexport const APP_BAR_WIDTH = 45;\n\nconst computeRightPositions = (count: number, width: number): number[] => {\n    const neededWidth = COMPOSER_WIDTH * count + COMPOSER_GUTTER * (count + 1);\n\n    if (neededWidth < width) {\n        return range(0, count).map((i) => COMPOSER_WIDTH * i + COMPOSER_GUTTER * (i + 1));\n    }\n\n    const widthToDivide = width - COMPOSER_GUTTER * 2 - COMPOSER_WIDTH;\n    const share = widthToDivide / (count - 1);\n    return range(0, count).map((i) => COMPOSER_GUTTER + share * i);\n};\n\nconst computeStyle = (index: number, hasFocus: boolean, rightPositions: number[], height: number): CSSProperties => {\n    const maxHeight = height - COMPOSER_VERTICAL_GUTTER - HEADER_HEIGHT;\n    return {\n        right: rightPositions[index],\n        zIndex: hasFocus ? COMPOSER_ZINDEX + 1 : COMPOSER_ZINDEX,\n        height: maxHeight > COMPOSER_HEIGHT ? COMPOSER_HEIGHT : maxHeight\n    };\n};\n\nexport interface ComposeExisting {\n    existingDraft: MessageExtended;\n}\n\nexport interface ComposeNew {\n    action: MESSAGE_ACTIONS;\n    referenceMessage?: MessageExtended;\n}\n\nexport type ComposeArgs = ComposeExisting | ComposeNew;\n\nexport const getComposeExisting = (composeArgs: ComposeArgs) =>\n    (composeArgs as ComposeExisting).existingDraft ? (composeArgs as ComposeExisting) : undefined;\n\nexport const getComposeNew = (composeArgs: ComposeArgs) =>\n    typeof (composeArgs as ComposeNew).action === 'number' ? (composeArgs as ComposeNew) : undefined;\n\nexport const getComposeArgs = (composeArgs: ComposeArgs) => ({\n    composeExisting: getComposeExisting(composeArgs),\n    composeNew: getComposeNew(composeArgs)\n});\n\nexport interface OnCompose {\n    (args: ComposeArgs): void;\n}\n\ninterface Props {\n    children: (props: { onCompose: OnCompose }) => ReactNode;\n}\n\nconst ComposerContainer = ({ children }: Props) => {\n    const [mailSettings, loadingSettings] = useMailSettings();\n    const [addresses, loadingAddresses] = useAddresses();\n\n    // Handling simple Message would have been simpler\n    // But in order to create new drafts from here, MessageExtended was mandatory\n    const [messages, setMessages] = useState<MessageExtended[]>([]);\n    const [focusedMessage, setFocusedMessage] = useState<MessageExtended | undefined>();\n    const [width, height] = useWindowSize();\n    const { createNotification } = useNotifications();\n\n    if (loadingSettings || loadingAddresses) {\n        return null;\n    }\n\n    const handleCompose = (composeArgs: ComposeArgs) => {\n        if (messages.length >= 3) {\n            createNotification({\n                type: 'error',\n                text: c('Error').t`Maximum composer reached`\n            });\n            return;\n        }\n\n        const { composeExisting, composeNew } = getComposeArgs(composeArgs);\n\n        console.log('compose', composeExisting, composeNew);\n\n        if (composeExisting) {\n            const { existingDraft } = composeExisting;\n\n            const existingMessage = messages.find((m) => m.data?.ID === existingDraft.data?.ID);\n            if (existingMessage) {\n                setFocusedMessage(existingMessage);\n                return;\n            }\n\n            setMessages([...messages, existingDraft]);\n            setFocusedMessage(existingDraft);\n            return;\n        }\n\n        if (composeNew) {\n            const { action, referenceMessage } = composeNew;\n            const newMessage = createNewDraft(action, referenceMessage, mailSettings, addresses);\n            setMessages([...messages, newMessage]);\n            setFocusedMessage(newMessage);\n        }\n    };\n    const handleChange = (oldMessage: MessageExtended) => (newMessage: MessageExtended) => {\n        const newMessages = [...messages];\n        newMessages[newMessages.indexOf(oldMessage)] = newMessage;\n        setMessages(newMessages);\n        if (oldMessage === focusedMessage) {\n            setFocusedMessage(newMessage);\n        }\n    };\n    const handleClose = (message: MessageExtended) => () => {\n        const newMessages = messages.filter((m) => m !== message);\n        setMessages(newMessages);\n        if (newMessages.length > 0) {\n            setFocusedMessage(newMessages[0]);\n        }\n    };\n    const handleFocus = (message: MessageExtended) => () => {\n        setFocusedMessage(message);\n    };\n\n    const rightPositions = computeRightPositions(messages.length, width);\n\n    return (\n        <>\n            {children({ onCompose: handleCompose })}\n            <div className=\"composer-container\">\n                {messages.map((message, i) => (\n                    <Composer\n                        key={message.data?.ID || i}\n                        style={computeStyle(i, message === focusedMessage, rightPositions, height)}\n                        message={message}\n                        focus={message === focusedMessage}\n                        mailSettings={mailSettings}\n                        addresses={addresses}\n                        onFocus={handleFocus(message)}\n                        onChange={handleChange(message)}\n                        onClose={handleClose(message)}\n                    />\n                ))}\n            </div>\n        </>\n    );\n};\n\nexport default ComposerContainer;\n","import React from 'react';\nimport { RouteChildrenProps } from 'react-router';\nimport { Route } from 'react-router-dom';\nimport { StandardPrivateApp } from 'react-components';\n\nimport {\n    UserModel,\n    MailSettingsModel,\n    UserSettingsModel,\n    SubscriptionModel,\n    OrganizationModel,\n    LabelsModel,\n    AddressesModel,\n    ConversationCountsModel,\n    MessageCountsModel\n} from 'proton-shared/lib/models';\n\nimport locales from './locales';\nimport PageContainer from './containers/PageContainer';\nimport MessageProvider from './containers/MessageProvider';\nimport ComposerContainer from './containers/ComposerContainer';\n\nexport type RouteProps = RouteChildrenProps<{ labelID: string; elementID?: string }>;\n\ninterface Props {\n    onLogout: () => void;\n}\n\nconst PrivateApp = ({ onLogout }: Props) => {\n    return (\n        <StandardPrivateApp\n            onLogout={onLogout}\n            locales={locales}\n            preloadModels={[UserModel, UserSettingsModel]}\n            eventModels={[\n                UserModel,\n                AddressesModel,\n                ConversationCountsModel,\n                MessageCountsModel,\n                MailSettingsModel,\n                UserSettingsModel,\n                LabelsModel,\n                SubscriptionModel,\n                OrganizationModel\n            ]}\n        >\n            <MessageProvider>\n                <ComposerContainer>\n                    {({ onCompose }) => (\n                        <Route\n                            path=\"/:labelID/:elementID?\"\n                            render={(routeProps: RouteProps) => <PageContainer {...routeProps} onCompose={onCompose} />}\n                        />\n                    )}\n                </ComposerContainer>\n            </MessageProvider>\n        </StandardPrivateApp>\n    );\n};\n\nexport default PrivateApp;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icons } from 'react-components';\n\nconst PublicLayout = ({ children }) => {\n    return (\n        <>\n            <main className=\"main-full flex flex-column flex-nowrap reset4print\">{children}</main>\n            <Icons />\n        </>\n    );\n};\n\nPublicLayout.propTypes = {\n    children: PropTypes.node.isRequired\n};\n\nexport default PublicLayout;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { c } from 'ttag';\nimport { LoginForm, Href, SimpleDropdown, DropdownMenu, SignInLayout } from 'react-components';\n\nconst LoginContainer = ({ stopRedirect, history, onLogin }) => {\n    const handleLogin = (...args) => {\n        stopRedirect();\n        history.push('/inbox');\n        onLogin(...args);\n    };\n    return (\n        <SignInLayout title={c('Title').t`Log in`}>\n            <h2>{c('Title').t`User log in`}</h2>\n            <LoginForm\n                onLogin={handleLogin}\n                needHelp={\n                    <SimpleDropdown content={c('Dropdown button').t`Need help?`} className=\"pm-button--link\">\n                        <DropdownMenu>\n                            <div className=\"inbl w100 pt0-5 pb0-5 ellipsis\">\n                                <Link to=\"/reset-password\">{c('Link').t`Reset password`}</Link>\n                            </div>\n                            <div className=\"inbl w100 pt0-5 pb0-5 ellipsis\">\n                                <Link to=\"/forgot-username\">{c('Link').t`Forgot username?`}</Link>\n                            </div>\n                            <div className=\"inbl w100 pt0-5 pb0-5 ellipsis\">\n                                <Href url=\"https://protonmail.com/support/knowledge-base/common-login-problems/\">{c(\n                                    'Link'\n                                ).t`Common login problems`}</Href>\n                            </div>\n                            <div className=\"inbl w100 pt0-5 pb0-5 ellipsis\">\n                                <Href url=\"https://protonmail.com/support/\">{c('Link').t`Contact support`}</Href>\n                            </div>\n                        </DropdownMenu>\n                    </SimpleDropdown>\n                }\n            />\n        </SignInLayout>\n    );\n};\n\nLoginContainer.propTypes = {\n    history: PropTypes.object.isRequired,\n    location: PropTypes.object.isRequired,\n    onLogin: PropTypes.func.isRequired,\n    stopRedirect: PropTypes.func.isRequired\n};\n\nexport default LoginContainer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// eslint-disable-next-line\nconst SignupContainer = ({ match, history, onLogin, stopRedirect }) => {\n    return <>SignupContainer</>;\n};\n\nSignupContainer.propTypes = {\n    stopRedirect: PropTypes.func.isRequired,\n    onLogin: PropTypes.func.isRequired,\n    match: PropTypes.shape({\n        params: PropTypes.shape({\n            step: PropTypes.string\n        })\n    }).isRequired,\n    history: PropTypes.shape({\n        push: PropTypes.func.isRequired,\n        location: PropTypes.shape({\n            search: PropTypes.string.isRequired,\n            state: PropTypes.oneOfType([\n                PropTypes.shape({\n                    selector: PropTypes.string.isRequired,\n                    token: PropTypes.string.isRequired\n                }),\n                PropTypes.shape({\n                    Coupon: PropTypes.shape({ Code: PropTypes.string })\n                })\n            ])\n        }).isRequired\n    }).isRequired\n};\n\nexport default SignupContainer;\n","import React, { useState, useRef, useLayoutEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Route, Switch } from 'react-router-dom';\nimport { Loader, ModalsChildren, ResetPasswordContainer, ForgotUsernameContainer } from 'react-components';\nimport { loadOpenPGP } from 'proton-shared/lib/openpgp';\n\nimport PublicLayout from './components/layout/PublicLayout';\nimport LoginContainer from './containers/LoginContainer';\nimport SignupContainer from './containers/SignupContainer';\nimport { Redirect } from 'react-router';\n\nconst PublicApp = ({ onLogin }) => {\n    const hasStopRedirect = useRef(false);\n    const stopRedirect = () => (hasStopRedirect.current = true);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(false);\n\n    useLayoutEffect(() => {\n        (async () => {\n            await Promise.all([loadOpenPGP()]);\n        })()\n            .then(() => setLoading(false))\n            .catch(() => setError(true));\n    }, []);\n\n    if (error) {\n        return 'OpenPGP failed to load. Handle better.';\n    }\n\n    if (loading) {\n        return <Loader />;\n    }\n\n    return (\n        <>\n            <ModalsChildren />\n            <PublicLayout>\n                <Switch>\n                    <Route path=\"/reset-password\" render={() => <ResetPasswordContainer onLogin={onLogin} />} />\n                    <Route path=\"/forgot-username\" component={ForgotUsernameContainer} />\n                    <Route\n                        path=\"/login\"\n                        render={({ history, location }) => (\n                            <LoginContainer\n                                stopRedirect={stopRedirect}\n                                history={history}\n                                location={location}\n                                onLogin={onLogin}\n                            />\n                        )}\n                    />\n                    <Route\n                        path=\"/signup/:step?\"\n                        render={({ history, match }) => (\n                            <SignupContainer\n                                stopRedirect={stopRedirect}\n                                history={history}\n                                match={match}\n                                onLogin={onLogin}\n                            />\n                        )}\n                    />\n                    <Route\n                        render={({ location }) => {\n                            /**\n                             * Needed due to the race condition between onLogin and history.push\n                             * A state on the location is not possible because the location is not changed when logging out.\n                             */\n                            if (hasStopRedirect.current) {\n                                return null;\n                            }\n                            return (\n                                <Redirect\n                                    to={{\n                                        pathname: '/login',\n                                        state: { from: location }\n                                    }}\n                                />\n                            );\n                        }}\n                    />\n                </Switch>\n            </PublicLayout>\n        </>\n    );\n};\n\nPublicApp.propTypes = {\n    onLogin: PropTypes.func.isRequired\n};\n\nexport default PublicApp;\n","import { hot } from 'react-hot-loader/root';\nimport React from 'react';\nimport { ProtonApp, useAuthentication } from 'react-components';\n\nimport * as config from './config';\nimport PrivateApp from './PrivateApp';\nimport PublicApp from './PublicApp';\n\nimport './app.scss';\n\nconst Setup = () => {\n    const { UID, login, logout } = useAuthentication();\n    if (UID) {\n        return <PrivateApp onLogout={logout} />;\n    }\n    return <PublicApp onLogin={login} />;\n};\n\nconst App = () => {\n    return (\n        <ProtonApp config={config}>\n            <Setup />\n        </ProtonApp>\n    );\n};\n\nexport default hot(App);\n","import ReactDOM from 'react-dom';\nimport React from 'react';\nimport 'core-js/stable';\nimport 'regenerator-runtime/runtime';\nimport 'yetch/polyfill';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.querySelector('.app-root'));\n","var map = {\n\t\"./3-d-secure.svg\": \"0gKn\",\n\t\"./american-express-safekey.svg\": \"Jui7\",\n\t\"./cc-american-express.svg\": \"/qD2\",\n\t\"./cc-dankort.svg\": \"0T0d\",\n\t\"./cc-diners-club.svg\": \"vuvo\",\n\t\"./cc-discover.svg\": \"AZZk\",\n\t\"./cc-forbrugs.svg\": \"k2eZ\",\n\t\"./cc-jcb.svg\": \"7Amw\",\n\t\"./cc-maestro.svg\": \"lXKh\",\n\t\"./cc-mastercard.svg\": \"ZUPP\",\n\t\"./cc-paypal.svg\": \"egYP\",\n\t\"./cc-unionpay.svg\": \"ma7A\",\n\t\"./cc-visa.svg\": \"vO2o\",\n\t\"./cc-visaelectron.svg\": \"RMFI\",\n\t\"./discover-protectbuy.svg\": \"qsy5\",\n\t\"./mastercard-securecode.svg\": \"6Bn0\",\n\t\"./verified-by-visa.svg\": \"Q7qE\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"5FMj\";","var map = {\n\t\"./af/index.js\": [\n\t\t\"IqAn\",\n\t\t11\n\t],\n\t\"./ar-DZ/index.js\": [\n\t\t\"JVC1\",\n\t\t12\n\t],\n\t\"./ar-SA/index.js\": [\n\t\t\"xMju\",\n\t\t13\n\t],\n\t\"./be/index.js\": [\n\t\t\"YEhR\",\n\t\t3\n\t],\n\t\"./bg/index.js\": [\n\t\t\"isx8\",\n\t\t4\n\t],\n\t\"./bn/index.js\": [\n\t\t\"+b7I\",\n\t\t14\n\t],\n\t\"./ca/index.js\": [\n\t\t\"Vwa+\",\n\t\t15\n\t],\n\t\"./cs/index.js\": [\n\t\t\"dvhP\",\n\t\t16\n\t],\n\t\"./cy/index.js\": [\n\t\t\"HQUR\",\n\t\t17\n\t],\n\t\"./da/index.js\": [\n\t\t\"7ur/\",\n\t\t18\n\t],\n\t\"./de/index.js\": [\n\t\t\"bgw5\",\n\t\t19\n\t],\n\t\"./el/index.js\": [\n\t\t\"dH0v\",\n\t\t20\n\t],\n\t\"./en-AU/index.js\": [\n\t\t\"VHew\",\n\t\t21\n\t],\n\t\"./en-CA/index.js\": [\n\t\t\"wXhn\",\n\t\t22\n\t],\n\t\"./en-GB/index.js\": [\n\t\t\"nwJ3\",\n\t\t23\n\t],\n\t\"./en-US/index.js\": [\n\t\t\"IogR\",\n\t\t24\n\t],\n\t\"./eo/index.js\": [\n\t\t\"UB7v\",\n\t\t25\n\t],\n\t\"./es/index.js\": [\n\t\t\"/S0t\",\n\t\t26\n\t],\n\t\"./et/index.js\": [\n\t\t\"Br0m\",\n\t\t27\n\t],\n\t\"./fa-IR/index.js\": [\n\t\t\"gEFy\",\n\t\t28\n\t],\n\t\"./fi/index.js\": [\n\t\t\"ndVD\",\n\t\t29\n\t],\n\t\"./fr-CA/index.js\": [\n\t\t\"KTij\",\n\t\t30\n\t],\n\t\"./fr/index.js\": [\n\t\t\"LKA2\",\n\t\t31\n\t],\n\t\"./gl/index.js\": [\n\t\t\"4bge\",\n\t\t32\n\t],\n\t\"./gu/index.js\": [\n\t\t\"3t4y\",\n\t\t33\n\t],\n\t\"./he/index.js\": [\n\t\t\"75M+\",\n\t\t34\n\t],\n\t\"./hi/index.js\": [\n\t\t\"CUe2\",\n\t\t35\n\t],\n\t\"./hr/index.js\": [\n\t\t\"L9Jq\",\n\t\t36\n\t],\n\t\"./hu/index.js\": [\n\t\t\"Nm+E\",\n\t\t37\n\t],\n\t\"./hy/index.js\": [\n\t\t\"netp\",\n\t\t38\n\t],\n\t\"./id/index.js\": [\n\t\t\"A6C3\",\n\t\t39\n\t],\n\t\"./is/index.js\": [\n\t\t\"N4bE\",\n\t\t40\n\t],\n\t\"./it/index.js\": [\n\t\t\"hmb4\",\n\t\t41\n\t],\n\t\"./ja/index.js\": [\n\t\t\"uAXs\",\n\t\t42\n\t],\n\t\"./ka/index.js\": [\n\t\t\"pwL5\",\n\t\t43\n\t],\n\t\"./kk/index.js\": [\n\t\t\"zGPi\",\n\t\t5\n\t],\n\t\"./ko/index.js\": [\n\t\t\"iW8+\",\n\t\t44\n\t],\n\t\"./lt/index.js\": [\n\t\t\"xj+b\",\n\t\t45\n\t],\n\t\"./lv/index.js\": [\n\t\t\"x5pY\",\n\t\t6\n\t],\n\t\"./ms/index.js\": [\n\t\t\"gUWk\",\n\t\t46\n\t],\n\t\"./nb/index.js\": [\n\t\t\"73vv\",\n\t\t47\n\t],\n\t\"./nl/index.js\": [\n\t\t\"hCQt\",\n\t\t48\n\t],\n\t\"./nn/index.js\": [\n\t\t\"vORL\",\n\t\t49\n\t],\n\t\"./pl/index.js\": [\n\t\t\"B6yL\",\n\t\t7\n\t],\n\t\"./pt-BR/index.js\": [\n\t\t\"2dYp\",\n\t\t50\n\t],\n\t\"./pt/index.js\": [\n\t\t\"gdks\",\n\t\t51\n\t],\n\t\"./ro/index.js\": [\n\t\t\"r2yp\",\n\t\t52\n\t],\n\t\"./ru/index.js\": [\n\t\t\"nz/o\",\n\t\t8\n\t],\n\t\"./sk/index.js\": [\n\t\t\"Wqan\",\n\t\t9\n\t],\n\t\"./sl/index.js\": [\n\t\t\"KYSo\",\n\t\t53\n\t],\n\t\"./sr/index.js\": [\n\t\t\"7mU3\",\n\t\t54\n\t],\n\t\"./sv/index.js\": [\n\t\t\"hxgj\",\n\t\t55\n\t],\n\t\"./ta/index.js\": [\n\t\t\"1ssA\",\n\t\t56\n\t],\n\t\"./te/index.js\": [\n\t\t\"SGoj\",\n\t\t57\n\t],\n\t\"./th/index.js\": [\n\t\t\"Pk+z\",\n\t\t58\n\t],\n\t\"./tr/index.js\": [\n\t\t\"3ZWG\",\n\t\t59\n\t],\n\t\"./ug/index.js\": [\n\t\t\"yT3n\",\n\t\t60\n\t],\n\t\"./uk/index.js\": [\n\t\t\"LCGg\",\n\t\t10\n\t],\n\t\"./vi/index.js\": [\n\t\t\"dGQT\",\n\t\t61\n\t],\n\t\"./zh-CN/index.js\": [\n\t\t\"UJqf\",\n\t\t62\n\t],\n\t\"./zh-TW/index.js\": [\n\t\t\"zn9v\",\n\t\t63\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"YO3j\";\nmodule.exports = webpackAsyncContext;","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"dTS7\";"],"sourceRoot":""}