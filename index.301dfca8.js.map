{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/app/config.js","webpack:///./src/app/locales.js","webpack:///./src/app/helpers/url.ts","webpack:///./src/app/constants.ts","webpack:///./src/app/helpers/labels.ts","webpack:///./src/app/helpers/contacts.ts","webpack:///./src/app/helpers/addresses.ts","webpack:///./src/app/components/composer/addresses/AddressesRecipientItem.tsx","webpack:///./src/app/hooks/useEventListener.ts","webpack:///./src/app/components/composer/addresses/AddressesAutocomplete.tsx","webpack:///./src/app/components/composer/addresses/AddressesGroupModal.tsx","webpack:///./src/app/components/composer/addresses/AddressesGroupItem.tsx","webpack:///./src/app/components/composer/addresses/AddressesInput.tsx","webpack:///./src/app/helpers/mailboxUrl.ts","webpack:///./src/app/components/header/AdvancedSearchDropdown.js","webpack:///./src/app/components/header/PrivateHeader.js","webpack:///./src/app/components/sidebar/LocationAside.tsx","webpack:///./src/app/helpers/mailSettings.ts","webpack:///./src/app/helpers/elements.ts","webpack:///./src/app/components/sidebar/PrivateSidebar.tsx","webpack:///./src/app/components/layout/PrivateLayout.tsx","webpack:///./src/app/helpers/paging.ts","webpack:///./src/app/hooks/useElements.ts","webpack:///./src/app/components/toolbar/ToolbarSeparator.tsx","webpack:///./src/app/components/toolbar/ToolbarButton.tsx","webpack:///./src/app/components/toolbar/ReadUnreadButtons.tsx","webpack:///./src/app/components/toolbar/ToolbarDropdown.tsx","webpack:///./src/app/components/toolbar/LayoutDropdown.tsx","webpack:///./src/app/components/toolbar/MoveButtons.tsx","webpack:///./src/app/components/toolbar/DeleteButton.tsx","webpack:///./src/app/components/toolbar/SortDropdown.tsx","webpack:///./src/app/components/toolbar/FilterDropdown.tsx","webpack:///./src/app/components/toolbar/SelectAll.tsx","webpack:///./src/app/components/dropdown/MoveDropdown.tsx","webpack:///./src/app/components/dropdown/LabelDropdown.tsx","webpack:///./src/app/components/toolbar/BackButton.tsx","webpack:///./src/app/components/toolbar/PagingControls.tsx","webpack:///./src/app/components/toolbar/Toolbar.tsx","webpack:///./src/app/components/list/ItemCheckbox.tsx","webpack:///./src/app/helpers/message/messages.ts","webpack:///./src/app/helpers/parserHtml.ts","webpack:///./src/app/components/list/ItemStar.tsx","webpack:///./src/app/components/list/ItemLabels.tsx","webpack:///./src/app/components/list/ItemAttachmentIcon.js","webpack:///./src/app/components/list/ItemLocation.js","webpack:///./src/app/helpers/date.js","webpack:///./src/app/components/list/ItemDate.js","webpack:///./src/app/components/conversation/NumMessages.tsx","webpack:///./src/app/components/list/ItemColumnLayout.tsx","webpack:///./src/app/components/list/ItemRowLayout.tsx","webpack:///./src/app/components/list/Item.tsx","webpack:///./src/app/helpers/conversation.ts","webpack:///./src/app/components/view/EmptyView.tsx","webpack:///./src/app/hooks/useContactGroups.ts","webpack:///./src/app/components/list/List.tsx","webpack:///./src/app/components/message/MessageBody.tsx","webpack:///./src/app/helpers/displaySignature.js","webpack:///./src/app/helpers/encryptionType.js","webpack:///./src/app/components/message/MessageLock.tsx","webpack:///./src/app/components/message/header/HeaderCollapsed.tsx","webpack:///./src/app/components/message/extras/ExtraImages.tsx","webpack:///./src/app/components/message/extras/ExtraUnsubscribe.tsx","webpack:///./src/app/components/message/header/HeaderExtra.tsx","webpack:///./src/app/components/message/header/HeaderRecipientsSimple.tsx","webpack:///./src/app/components/message/header/HeaderRecipientsDetails.tsx","webpack:///./src/app/components/message/header/HeaderDropdown.tsx","webpack:///./src/app/components/message/header/HeaderExpanded.tsx","webpack:///./src/app/helpers/attachment/attachments.ts","webpack:///./src/app/api/attachments.ts","webpack:///./src/app/helpers/attachment/attachmentLoader.ts","webpack:///./src/app/helpers/attachment/attachmentDownloader.ts","webpack:///./src/app/hooks/useAttachments.ts","webpack:///./src/app/components/message/MessageAttachment.tsx","webpack:///./src/app/components/message/MessageFooter.tsx","webpack:///./src/app/helpers/string.ts","webpack:///./src/app/helpers/purify.ts","webpack:///./src/app/helpers/dom.ts","webpack:///./src/app/helpers/transforms/transformEscape.js","webpack:///./src/app/helpers/transforms/transformLinks.js","webpack:///./src/app/helpers/embedded/embeddedUtils.ts","webpack:///./src/app/helpers/embedded/embeddedStoreCids.ts","webpack:///./src/app/helpers/embedded/embeddedFinder.ts","webpack:///./src/app/helpers/embedded/embeddedStoreBlobs.ts","webpack:///./src/app/helpers/image.ts","webpack:///./src/app/helpers/embedded/embeddedParser.ts","webpack:///./src/app/helpers/transforms/transformEmbedded.ts","webpack:///./src/app/helpers/transforms/transformWelcome.js","webpack:///./src/app/helpers/transforms/transformBlockquotes.js","webpack:///./src/app/helpers/transforms/transformRemote.js","webpack:///./src/app/helpers/transforms/transformStylesheet.js","webpack:///./src/app/helpers/transforms/transformBase.js","webpack:///./src/app/helpers/attachment/attachmentConverter.ts","webpack:///./src/app/helpers/message/messageDecrypt.ts","webpack:///./src/app/hooks/useDecryptMessage.ts","webpack:///./src/app/containers/MessageProvider.tsx","webpack:///./src/app/helpers/base64.ts","webpack:///./src/app/helpers/send/sendPreferences.ts","webpack:///./src/app/helpers/send/sendMimeBuilder.ts","webpack:///./src/app/helpers/send/sendTopPackages.ts","webpack:///./src/app/helpers/send/sendSubPackages.ts","webpack:///./src/app/helpers/send/sendEncrypt.ts","webpack:///./src/app/hooks/useSendMessage.ts","webpack:///./src/app/helpers/message/messageEncrypt.ts","webpack:///./src/app/hooks/useEncryptMessage.ts","webpack:///./src/app/hooks/useMessage.ts","webpack:///./src/app/components/message/MessageView.tsx","webpack:///./src/app/helpers/message/messageExpandable.ts","webpack:///./src/app/components/conversation/TrashWarning.tsx","webpack:///./src/app/components/conversation/ConversationView.tsx","webpack:///./src/app/hooks/useConversation.ts","webpack:///./src/app/components/view/WelcomePane.tsx","webpack:///./src/app/components/view/SelectionPane.tsx","webpack:///./src/app/components/view/PlaceholderView.tsx","webpack:///./src/app/components/message/MessageOnlyView.tsx","webpack:///./src/app/containers/MailboxContainer.tsx","webpack:///./src/app/hooks/useMailboxPageTitle.ts","webpack:///./src/app/containers/PageContainer.tsx","webpack:///./src/app/components/composer/ComposerTitleBar.tsx","webpack:///./src/app/components/composer/addresses/AddressesContactsModal.tsx","webpack:///./src/app/components/composer/addresses/AddressesEditor.tsx","webpack:///./src/app/models/address.ts","webpack:///./src/app/components/composer/addresses/AddressesSummary.tsx","webpack:///./src/app/components/composer/addresses/Addresses.tsx","webpack:///./src/app/components/composer/ComposerMeta.tsx","webpack:///./src/app/components/composer/attachments/AttachmensList.tsx","webpack:///./src/app/components/composer/ComposerContent.tsx","webpack:///./src/app/components/composer/attachments/AttachmentsButton.tsx","webpack:///./src/app/components/composer/ComposerActions.tsx","webpack:///./src/app/helpers/attachment/attachmentUploader.ts","webpack:///./src/app/hooks/useSlowChanges.ts","webpack:///./src/app/helpers/file.ts","webpack:///./src/app/components/composer/Composer.tsx","webpack:///./src/app/helpers/dedent.ts","webpack:///./src/app/helpers/message/messageSignature.ts","webpack:///./src/app/helpers/message/messageDraft.ts","webpack:///./src/app/containers/ComposerContainer.tsx","webpack:///./src/app/hooks/useDraft.ts","webpack:///./src/app/PrivateApp.tsx","webpack:///./src/app/components/layout/PublicLayout.js","webpack:///./src/app/containers/LoginContainer.js","webpack:///./src/app/containers/SignupContainer.js","webpack:///./src/app/PublicApp.js","webpack:///./src/app/App.js","webpack:///./src/app/index.js","webpack:///./node_modules/design-system/assets/img/shared/bank-icons sync .svg$","webpack:///./node_modules/date-fns/locale lazy ^\\.\\/[a-z]{2}(-([A-Z]{2}))","webpack:///./src/i18n lazy .json$"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","sriHashes","exports","module","l","e","promises","installedChunkData","promise","Promise","resolve","reject","onScriptComplete","script","document","createElement","charset","timeout","nc","setAttribute","src","p","jsonpScriptSrc","indexOf","window","location","origin","crossOrigin","error","Error","event","onerror","onload","clearTimeout","chunk","errorType","type","realSrc","target","message","name","request","undefined","setTimeout","integrity","head","appendChild","all","m","c","d","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","oe","err","console","jsonpArray","oldJsonpFunction","slice","CLIENT_ID","CLIENT_TYPE","CLIENT_SECRET","APP_VERSION","APP_NAME","API_URL","SECURE_URL","API_VERSION","DATE_VERSION","CHANGELOG_PATH","VERSION_PATH","SENTRY_RELEASE","SENTRY_DSN","locales","require","keys","reduce","acc","getSearchParams","params","URLSearchParams","search","forEach","changeSearchParams","newParams","delete","set","queryString","toString","urlFragment","pathname","ENCRYPTED_STATUS","ELEMENT_TYPES","LABEL_IDS_TO_HUMAN","MAILBOX_LABEL_IDS","INBOX","ALL_DRAFTS","ALL_SENT","TRASH","SPAM","ALL_MAIL","ARCHIVE","SENT","DRAFTS","STARRED","HUMAN_TO_LABEL_IDS","entries","LABEL_IDS_TO_I18N","VERIFICATION_STATUS","MESSAGE_FLAGS","MESSAGE_ACTIONS","getHumanLabelID","labelID","getLabelName","labels","getI18nLabelID","labelsMap","toMap","Name","isCustomLabel","values","includes","findEmailInCache","cache","email","find","Email","normalizeEmail","getContactsOfGroup","contacts","groupID","filter","contact","LabelIDs","REGEX_RECIPIENT","validateAddress","address","REGEX_EMAIL","test","toLowerCase","removeEmailAlias","replace","addPlusAlias","plus","atIndex","plusIndex","substring","domain","getByEmail","addresses","cleanEmail","isFallbackAddress","Receive","isOwnAddress","inputToRecipient","input","match","exec","Address","recipientToInput","recipient","contactToRecipient","groupPath","Group","contactToInput","recipientsWithoutGroup","recipients","getRecipientLabel","getRecipientGroupLabel","recipientGroup","contactsInGroup","count","members","group","getRecipientOrGroupLabel","allContacts","ID","recipientsToRecipientOrGroup","groups","existingGroup","recipientsOrGroup","Path","getAddressFromPlusAlias","Status","Send","plusPart","findSender","AddressID","enabledAddresses","sort","a1","a2","Order","originalAddress","AddressesRecipientItem","onChange","noop","onRemove","useState","model","setModel","editableRef","useRef","validate","valid","setValid","useEffect","current","textContent","handleChange","className","classnames","contentEditable","onKeyUp","onPaste","onBlur","ref","onClick","Icon","size","useEventListener","eventName","handler","addEventListener","removeEventListener","AddressesAutocomplete","inputRef","contactGroups","onSelect","currentValue","children","awesomplete","setAwesomplete","containerRef","awesompleteInstance","Awesomplete","container","minChars","autoFirst","destroy","contactList","map","label","groupList","list","item","text","itemId","ITEM","close","contactID","open","AddressesGroupModal","onSubmit","onClose","rest","generateUID","uid","isChecked","newValue","checked","title","FormModal","submit","id","Checkbox","Label","htmlFor","AddressesGroupItem","createModal","useModals","handleGroupModal","a","newRecipientGroup","AddressesInput","addressesFocusRef","placeholder","inputModel","setInputModel","recipientsOrGroups","confirmInput","focus","handleRecipientRemove","toRemove","handleGroupChange","toChange","handleGroupRemove","groupContacts","closest","stopPropagation","Input","onKeyDown","keyCode","preventDefault","last","trim","setPathInUrl","elementID","stringToInt","string","isNumber","parseInt","sortToString","desc","filterToString","Unread","keywordToString","keyword","trimmed","pageFromUrl","pageNumber","isNaN","stringToPage","page","extractSearchParameters","from","to","begin","end","attachments","wildcard","setKeywordInUrl","ALL_ADDRESSES","DEFAULT_MODEL","getRecipients","split","isEmail","formatRecipients","join","AdvancedSearchDropdown","fullInput","history","useMailSettings","mailSettings","loadingMailSettings","usePopperAnchor","anchorRef","isOpen","toggle","useLabels","loadingLabels","useContactEmails","contactEmails","loadingContactEmails","useAddresses","loadingAddresses","updateModel","start","fromUnixTime","Loader","labelIDOptions","hasBit","ShowMoved","SHOW_MOVED","concat","Exclusive","LABEL_EXCLUSIVE","FOLDER","LABEL","addressOptions","DropdownButton","buttonRef","hasCaret","Dropdown","originalPlacement","autoClose","getUnixTime","onReset","Toggle","Href","url","Select","options","DateInput","isBefore","isAfter","Radio","Button","disabled","PrimaryButton","PrivateHeader","expanded","onToggleExpand","onSearch","useUser","hasPaidMail","updateValue","MainLogo","Hamburger","onToggle","Searchbox","delay","advanced","TopNavbar","UpgradeButton","external","TopNavbarLink","icon","aria-current","SupportDropdown","LocationAside","counterMap","currentLabelID","refreshLabelID","unread","fill","isColumnMode","ViewLayout","VIEW_LAYOUT","COLUMN","isConversationMode","ViewMode","VIEW_MODE","GROUP","searchParams","alwaysMessageLabels","getCurrentType","isMessage","element","ConversationID","getDate","Time","ContextTime","Date","getLabelIds","Labels","hasLabel","some","getTime","getLabel","getSize","Size","elements","getValue","e1","e2","b","valueA","valueB","PrivateSidebar","onCompose","refresh","setRefresh","useConversationCounts","conversationCounts","loadingConversationCounts","useMessageCounts","messageCounts","loadingMessageCounts","useEventManager","useMemo","conversationCounters","messageCounters","labelIDs","conversationCountersMap","messageCountersMap","countersMap","getCounterMap","getItemParams","link","ariaCurrent","aside","redirectTo","Color","color","data-expanded","action","NEW","NavMenu","PrivateLayout","mainAreaRef","setExpand","AppsSidebar","items","StorageSpaceStatus","upgradeButton","Provider","pageCount","Math","ceil","total","emptyCache","pages","useElements","conversationMode","api","useApi","subscribe","loading","setLoading","localCache","setLocalCache","minPage","startIndex","endIndex","filtered","sortElements","isExpectedLength","expectedPageLength","shouldResetCache","shouldSendRequest","queryElement","query","getConversation","getMessage","Conversation","Message","queryElements","queryConversations","queryMessageMetadata","Page","PageSize","Limit","limit","LabelID","Sort","Desc","Begin","End","Keyword","To","From","Attachments","AutoWildcard","Total","Elements","Conversations","Messages","load","ConversationCounts","MessageCounts","Action","Element","EVENT_ACTIONS","DELETE","toDelete","UPDATE_DRAFT","UPDATE_FLAGS","toUpdate","CREATE","toCreate","existingElement","toUpdateCompleted","newReplacements","newElements","ToolbarSeparator","ToolbarButton","ReadUnreadButtons","selectedIDs","MessageButtons","MESSAGE_BUTTONS","READ_UNREAD","useLoading","withLoading","markAs","status","isUnread","markConversationsAsUnread","markConversationsAsRead","markMessageAsUnread","markMessageAsRead","buttons","UNREAD_READ","reverse","ToolbarDropdown","content","caretClassName","LayoutDropdown","currentLayoutIcon","updateLayout","viewLayout","updateViewLayout","DropdownMenu","DropdownMenuButton","ROW","MoveButtons","createNotification","useNotifications","handleMove","labelConversations","labelMessages","IDs","displayTrash","displayInbox","displayArchive","displaySpam","DeleteButton","displayDelete","displayEmpty","handleDelete","Confirm","ngettext","msgid","confirm","ErrorButton","onConfirm","Alert","deleteConversations","deleteMessages","handleEmpty","emptyLabel","TIME","SIZE","ICONS","SortDropdown","onSort","FilterDropdown","onFilter","SelectAll","onCheck","SearchInput","UntypedSearchInput","MoveDropdown","updateSearch","normSearch","normalize","folders","Boolean","folder","Tooltip","autoFocus","index","LabelDropdown","lastChecked","setLastChecked","alsoArchive","updateAlsoArchive","selectedLabelIDs","updateSelectedLabelIDs","handleApply","labelAction","unlabelAction","unlabelMessages","unlabelConversations","handleCheck","shiftKey","nativeEvent","findIndex","min","max","update","log","lineId","BackButton","PagingControls","onPage","setPage","String","Array","_","newPage","Toolbar","checkAll","onCheckAll","onBack","columnMode","ItemCheckbox","FLAG_RECEIVED","FLAG_SENT","FLAG_RECEIPT_REQUEST","FLAG_IMPORTED","FLAG_REPLIED","FLAG_REPLIEDALL","FLAG_FORWARDED","FLAG_INTERNAL","FLAG_AUTO","FLAG_E2E","FLAG_SIGN","FLAG_PUBLIC_KEY","PLAINTEXT","MIME_TYPES","hasMimeType","MIMEType","isMIME","MIME","isPlainText","isHTML","DEFAULT","hasFlag","flag","Flags","isImported","isInternal","isExternal","isAuto","isReceived","isSent","isSentAndReceived","isDraft","isE2E","isSentEncrypted","isInternalEncrypted","isSign","isPGPEncrypted","inSigningPeriod","isEO","Password","addReceived","setBit","getSender","Sender","ToList","CCList","BCCList","getRecipientsAddresses","identity","getParsedHeaders","parameter","ParsedHeaders","getAttachments","hasAttachments","attachmentsSize","isSentAutoReply","h","k","v","getHTML","exportPlainText","html","appendLines","convertImages","turndownService","TurndownService","bulletListMarker","hr","protonSignature","node","classList","contains","replacement","replaceBreakLine","parentElement","nodeName","childElementCount","lastElementChild","replaceImg","image","attribute","alt","replaceAnchor","replaceDiv","use","addRule","escape","output","turndown","startsWith","toText","getPlainText","downconvert","ItemStar","isConversation","isStarred","iconName","handleClick","ItemLabels","onUnlabel","orderBy","style","backgroundColor","borderColor","Link","ItemAttachmentIcon","ContextNumAttachments","ItemLocation","formatSimpleDate","date","format","isToday","locale","dateLocale","formatFullDate","FORMATERS","simple","full","distance","dateFnsFormatDistanceToNow","addSuffix","ItemDate","formater","NumMessages","conversation","ItemColumnLayout","senders","Subject","ItemRowLayout","humanSize","Item","displayRecipients","Senders","getSenders","sendersLabels","recipientsLabels","recipientOrGroup","ItemLayout","NumUnread","getInitial","EmptyView","isInbox","isFolder","noResultSearchSvg","noResultInboxSvg","data-if","useContactGroups","useCache","useCachedModelResult","useCallback","getContactGroupsModel","List","checkedIDs","loadingContacts","loadingGroups","elementIDs","MessageBody","plain","dangerouslySetInnerHTML","__html","SIGNED_AND_INVALID","SIGNED_AND_VALID","I18N","pm","pgp","clear","sentEncrypted","auto","sentClear","draft","getFromType","isExternalEncrypted","MessageLock","inputClassName","displaySignature","verified","displaySignatureStatus","pgpEncrypted","tooltip","encType","getEncryptionType","href","internal","HeaderCollapsed","onExpand","inOutClass","ExtraImages","showRemoteImages","showEmbeddedImages","onLoadImages","ExtraUnsubscribe","getListUnsubscribe","HeaderExtra","onLoadRemoteImages","onLoadEmbeddedImages","HeaderRecipientsSimple","RecipientsList","HeaderRecipientsDetails","HeaderDropdown","HeaderExpanded","messageLoaded","onCollapse","useToggle","showDetails","state","toggleDetails","handleCompose","referenceMessage","ButtonGroup","REPLY","REPLY_ALL","FORWARD","embeddableTypes","isEmbeddable","fileType","getAttachment","attachmentID","method","uploadAttachment","decrypt","encryptedBinaryBuffer","sessionKey","encryptedBinary","Uint8Array","decryptMessage","sessionKeys","getRequest","getSessionKey","attachment","keyPackets","binaryStringToArray","decodeBase64","KeyPackets","privateKeys","decryptSessionKey","getDecryptedAttachment","blob","concatArrays","binary","getAndVerify","Preview","filename","signatures","has","attachmentdata","reverify","formatDownload","isError","generateDownload","download","downloadFile","Blob","formatDownloadAll","att","splitExtension","fileName","ext","newName","getZipAttachmentName","downloadAll","zip","JSZip","file","generateAsync","useAttachmentsCache","globalCache","Map","blobs","cids","OUTER_MAP_CLASSNAME","mp3","javascript","vcard","xls","mov","pdf","power","word","INNER_MAP_CLASSNAME","MessageAttachment","showLoader","setShowLoader","showInstant","setShowInstant","humanAttachmentSize","outerIcon","single","getInnerFileIconType","isEmbedded","Headers","disposition","embedded","Number","isEmbeddedLocal","classNames","clickHandler","showInner","aria-busy","MessageFooter","humanAttachmentsSize","numAttachments","numEmbedded","numPureAttachments","handleDownloadAll","OPEN_TAG_AUTOCOMPLETE","CLOSE_TAG_AUTOCOMPLETE","OPEN_TAG_AUTOCOMPLETE_RAW","CLOSE_TAG_AUTOCOMPLETE_RAW","ucFirst","charAt","toUpperCase","replaceLineBreaks","REGEXP_URL_ATTR","RegExp","attr","LIST_PROTON_ATTR","MAP_PROTON_ATTR","CONFIG","default","ALLOWED_URI_REGEXP","ADD_TAGS","ADD_ATTR","FORBID_TAGS","FORBID_ATTR","raw","WHOLE_DOCUMENT","RETURN_DOM","protonizer","ALLOW_UNKNOWN_PROTOCOLS","RETURN_DOM_FRAGMENT","escapeURLinStyle","handleEscape","unescapedEncoding","radix","ignored","val","fromCodePoint","char","escapeFlag","escapedStyle","beforeSanitizeElements","nodeType","attributes","getAttribute","removeAttribute","escaped","purifyHTMLHooks","active","DOMPurify","addHook","removeHook","getConfig","clean","config","clearConfig","sanitize","attachHooks","process","matches","selector","msMatchesSelector","parseInDiv","div","innerHTML","FORBIDDEN_SVG","HTML_STRING","VERIFY_ELEMENT_END","REGEXP_SVG_BREAK","removeBase64","activeCache","hash","random","now","put","escapeSVG","transformEscape","activeHooks","purifyHTML","PROTOCOLS","ALL_PROTOCOLS","MAP","getNormalizedHref","sanitizeRelativeHttpLinks","proto","linkUsesProtocols","disableAnchors","isEmptyAnchor","pointerEvents","transformLinks","querySelectorAll","hasHTTP","isRelative","httpInNewTab","noReferrerInfo","REGEXP_CID_START","getBodyParser","isDocument","trimQuotes","substr","readCID","findEmbedded","cid","extractEmbedded","convertMimeHeaders","headers","formatted","mimemessage","factory","CIDList","getMessageCIDs","embeddedAttachments","addMessageCID","listInlineAttachments","MAP_CID","contentId","contentName","contentDisposition","getAttachementName","urlCreator","URL","webkitURL","Blobs","MAP_BLOBS","getHashKey","msg","store","imageUrl","createObjectURL","isContentLocation","getBlob","hasBlob","isInlineEmbedded","wrapImage","img","wrapper","firstChild","outerHTML","parentNode","insertBefore","remove","wrap","getUrl","srcToCID","prepareImages","show","isReplyForward","isOutside","showEmbedded","add","removeChild","triggerSigVerification","wait","actionDirection","nodes","mutateHTML","direction","escapeSrc","unescapeSrc","Encrypted","PGP_MIME","storeAttachement","buffer","transformEmbedded","attachmentsCache","ShowImages","SHOW_IMAGES","EMBEDDED","transformWelcome","images","str","quotes","transformBlockquotes","doc","blockquotes","parent","found","blockquote","child","before","after","button","transformStylesheet","firstElement","firstElementChild","position","WHITELIST","ATTRIBUTES","REGEXP_FIXER","prepareInjection","hasAttribute","mapAttributes","transformRemote","inputShowImages","regex","showImages","REMOTE","hasImages","$1","ELEMENTS","transformBase","base","querySelector","BASE_URL","baseUrl","getBaseURL","bindAttribute","el","keyproton","ptValue","convert","number","parsedAttachment","generatedFileName","transferEncoding","contentType","filenameOption","checksum","getId","JSON","stringify","Signature","attachmentData","convertSingle","getVerifiedStatus","pmcryptoVerified","publicKeys","signedInvalid","signedPubkey","decryptMimeMessage","headerFilename","sender","decryptMIMEMessage","Body","messageDate","getBody","body","mimetype","verify","getEncryptedSubject","encryptedSubject","decryptLegacyMessage","decryptMessageLegacy","useDecryptMessage","getPublicKeys","useGetPublicKeys","getAddressKeys","useGetAddressKeys","addressKeys","splitKeys","MessageContext","createContext","MessageProvider","useInstance","createCache","createLRU","useLayoutEffect","isArray","arrayToBase64","encodeBase64","arrayToBinaryString","emailInExtrInfo","contactEmail","ContactID","getInExtrInfo","usesDefaults","Defaults","encryptionEnabled","KEY_FLAGS","ENABLE_ENCRYPTION","getDefaultInfo","defaultMimeType","eoEnabled","globalSign","RecipientType","Keys","Warnings","warnings","RECIPIENT_TYPE","TYPE_INTERNAL","TYPE_EXTERNAL","settingsScheme","PGPScheme","settingsMime","PACKAGE_TYPE","SEND_PGP_MIME","ownAddress","fallbackAddress","getKeys","PublicKey","SEND_PM","encrypt","sign","publickeys","primaryPinned","scheme","pinned","isVerified","SEND_EO","SEND_CLEAR","mimetypeLogic","defaultMimetype","SEND_PGP_INLINE","isPrimaryPinned","base64Keys","sendKeys","sendKeyObjects","pinnedKey","pinnedFingerprint","getFingerprint","extractInfo","keyData","encryptFlag","signFlag","inputMimetype","emailKeys","inputScheme","isExternalWithKeys","pmKey","then","isExpiredKey","isExpired","keyObjs","keyObjects","getApiInfo","normalizedEmail","info","getCacheInfo","inCache","emails","contactEmailList","every","inExtractedInfoCache","getInfo","getSendPreferences","catchErrors","Sign","normEmails","unique","normInfos","normMap","assign","cur","extractContentValue","semicolonIndex","buildEmbeddedHtml","htmlEntity","contentTransferEncoding","relatedBody","buildPlaintextEntity","plaintext","buildBodyEntity","buildAlternateEntity","build","bodyEntity","attachmentEntities","attachmentName","contentTypeValue","contentDispositionValue","entity","header","buildAttachments","testDiv","getNormalAttachments","fetchMimeDependencies","constructMime","generateMimePackage","Addresses","generatePlainTextPackage","generateHTMLPackage","generateTopPackages","sendPrefs","packagesStatus","packages","demandedPackages","sendPM","Type","sendPMEncryptedOutside","warn","sendPGPMime","sendPGPInline","sendClear","attachSubPackages","bindPackageSet","pack","packageToUpdate","packageType","packToBase64","algorithm","Algorithm","Key","encryptKeyPacket","passwords","encryptSessionKey","packets","write","encryptAttachmentKeys","attachmentKeys","isEo","SessionKey","AttachmentKeyPackets","Attachment","AttachmentKeys","generateSessionKeyHelper","generateSessionKey","encryptBodyPackage","ownKeys","cleanPublicKeys","encryptMessage","returnSessionKey","compression","splitMessage","asymmetric","encrypted","encryptDraftBodyPackage","ownPublicKeys","flat","armorBytes","encryptBody","publicKeysList","encryptPack","counter","publicKey","BodyKeyPacket","subPack","BodyKey","encryptPackage","getAttachmentKeys","encryptPackages","packageList","useSendMessage","uniqueEmails","sendMessage","Packages","Sent","useEncryptMessage","mergeMessages","messageState","messageModel","mergeSavedMessage","messageSaved","messageReturned","ParentID","useMessage","inputMessage","useContext","computeCache","messageID","setMessageID","setMessage","lock","messageActivity","setMessageActivity","changedMessageID","transforms","loadData","markAsRead","createDraftApi","updateDraft","deleteRequest","activities","transform","runSingle","compute","simpleUpdateCache","newMessage","run","computes","updateCacheCallback","messagePromise","initialize","initialized","loadRemoteImages","loadEmbeddedImages","createDraft","saveDraft","send","deleteDraft","MessageView","initialExpand","conversationIndex","setExpanded","elementRef","loaded","prepareMessage","scrollIntoView","behavior","block","handleLoadRemoteImages","handleLoadEmbeddedImages","handleExpand","existingDraft","getFirstMessageToRead","messages","getLast","TrashWarning","inTrash","ConversationView","conversationID","miss","useConversation","conversationData","toggleFilter","filteredMessages","messagesToShow","showTrashWarning","realMessages","latest","findMessageToExpand","WelcomePane","labelCount","user","unreadsLabel","reportBugButton","LinkButton","AuthenticatedBugModal","DisplayName","capitalize","jt","unreadEmailsSvg","SelectionPane","onUncheckAll","checkeds","labelName","conversationManySvg","conversationSingleSvg","PlaceholderView","welcomeRef","counters","MessageOnlyView","MailboxContainer","inputLabelID","inputElementID","searchParameters","stringToSort","sortFromUrl","stringToFilter","filterFromUrl","checkedElements","setCheckedElements","setCheckAll","loadingUser","loadings","unreads","unreadString","useMailboxPageTitle","handleCheckAll","setPageInUrl","setSortInUrl","setFilterInUrl","PageContainer","ErrorBoundary","TitleBarButton","ComposerTitleBar","minimized","maximized","toggleMinimized","toggleMaximized","SearchInputUntyped","AddressesContactsModal","inputValue","setValue","setContacts","handleChangeCheckbox","searchInput","Table","TableHeader","cells","TableBody","colSpan","TableRow","AddressesEditor","toggleExpanded","handleContactModal","recipientTypes","AddressesSummary","onFocus","recipientOrGroups","addressesBlurRef","loadingContactGroups","editor","setEditor","ComposerMeta","addressesOptions","originalTo","plusAddress","unshift","getFromAdresses","AttachmentsList","Block","Quill","import","tagName","register","ComposerContent","onRemoveAttachment","contentFocusRef","readOnly","delta","source","AttachmentsButton","onAddAttachments","multiple","files","ATTACHMENT_ACTION","ComposerActions","activityInput","activity","onSave","onSend","onDelete","time","stack","setStack","setTimeoutState","runTimeout","first","useSlowChanges","dateMessage","dateString","readFileAsBuffer","reader","FileReader","onabort","readAsArrayBuffer","inline","armor","detached","signature","Filename","FileSize","Inline","encryptFile","pubKeys","privKey","TypeError","uploadFile","titleImage","tempPacket","uploading","ContentID","MessageID","DataPacket","upload","ATTACHMENT","INLINE","uploads","m1","m2","Composer","inputStyle","opening","setOpening","modelMessage","setModelMessage","syncedMessage","syncLock","syncActivity","useWindowSize","width","height","COMPOSER_VERTICAL_GUTTER","HEADER_HEIGHT","COMPOSER_HEIGHT","COMPOSER_SWITCH_MODE","autoSave","debounce","newModelMessage","save","messageToSave","handleAddAttachments","handleSave","handleSend","handleClose","right","COMPOSER_GUTTER","APP_BAR_WIDTH","computeStyle","dedentTpl","callSite","args","getProtonSignature","PMSignature","PM_SIGNATURE","isEmptyUserSignature","createSpace","tagOpen","getSpaces","isReply","isUserEmpty","isEmptySignature","between","getClassNamesSignature","isProtonEmpty","userClass","protonClass","containerClass","templateBuilder","noSpace","space","template","insertSignature","insertAdjacentHTML","RE_PREFIX","FW_PREFIX","formatSubject","subject","prefix","hasPrefix","newCopy","useEncrypted","reply","ReplyTos","replyAll","userAddresses","CCListWithoutUserAddresses","forward","handleActions","generateBlockquote","previously","newContent","createNewDraft","DraftMIMEType","RightToLeft","AttachPublicKey","senderAddress","PasswordHint","ExpirationTime","ExpiresIn","hasFocus","rightPositions","maxHeight","zIndex","COMPOSER_ZINDEX","getComposeExisting","composeArgs","getComposeNew","ComposerContainer","loadingSettings","setMessages","focusedMessage","setFocusedMessage","useDraft","newMessages","handleFocus","range","share","computeRightPositions","composeExisting","composeNew","getComposeArgs","existingMessage","oldMessage","PrivateApp","onLogout","StandardPrivateApp","preloadModels","UserModel","UserSettingsModel","eventModels","AddressesModel","ConversationCountsModel","MessageCountsModel","MailSettingsModel","LabelsModel","SubscriptionModel","OrganizationModel","Route","path","render","routeProps","PublicLayout","Icons","LoginContainer","stopRedirect","onLogin","SignInLayout","LoginForm","needHelp","SimpleDropdown","SignupContainer","propTypes","PropTypes","func","isRequired","shape","step","oneOfType","token","Coupon","Code","PublicApp","hasStopRedirect","setError","loadOpenPGP","catch","Switch","ResetPasswordContainer","component","ForgotUsernameContainer","Redirect","Setup","useAuthentication","UID","login","logout","hot","ProtonApp","ReactDOM","webpackContext","req","webpackContextResolve","code","webpackAsyncContext","ids","webpackEmptyAsyncContext"],"mappings":"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AChB,OACA,IAED,mBAAoB,CACnB,OACA,IAED,mBAAoB,CACnB,OACA,IAED,mBAAoB,CACnB,OACA,IAED,mBAAoB,CACnB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,mBAAoB,CACnB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,mBAAoB,CACnB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,GAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,GAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,GAED,mBAAoB,CACnB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,GAED,gBAAiB,CAChB,OACA,GAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,mBAAoB,CACnB,OACA,IAED,mBAAoB,CACnB,OACA,KAGF,SAASw/C,EAAoBH,GAC5B,IAAIzvD,EAAoBuD,EAAE6M,EAAKq/C,GAC9B,OAAO7uD,QAAQC,UAAUiwC,MAAK,WAC7B,IAAItwC,EAAI,IAAIwB,MAAM,uBAAyBytD,EAAM,KAEjD,MADAjvD,EAAEmvD,KAAO,mBACHnvD,KAIR,IAAIqvD,EAAMz/C,EAAIq/C,GAAM99C,EAAKk+C,EAAI,GAC7B,OAAO7vD,EAAoBQ,EAAEqvD,EAAI,IAAI/e,MAAK,WACzC,OAAO9wC,EAAoB2R,MAG7Bi+C,EAAoB9pD,KAAO,WAC1B,OAAOhH,OAAOgH,KAAKsK,IAEpBw/C,EAAoBj+C,GAAK,OACzBrR,EAAOD,QAAUuvD,G,mEChRjB,SAASE,EAAyBL,GAGjC,OAAO7uD,QAAQC,UAAUiwC,MAAK,WAC7B,IAAItwC,EAAI,IAAIwB,MAAM,uBAAyBytD,EAAM,KAEjD,MADAjvD,EAAEmvD,KAAO,mBACHnvD,KAGRsvD,EAAyBhqD,KAAO,WAAa,MAAO,IACpDgqD,EAAyBjvD,QAAUivD,EACnCxvD,EAAOD,QAAUyvD,EACjBA,EAAyBn+C,GAAK,Q","file":"index.301dfca8.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// script path function\n \tfunction jsonpScriptSrc(chunkId) {\n \t\treturn __webpack_require__.p + \"\" + ({}[chunkId]||chunkId) + \".\" + {\"3\":\"c4110b0e\",\"4\":\"5748a625\",\"5\":\"d002b3b8\",\"6\":\"07acf1a8\",\"7\":\"7ad516d7\",\"8\":\"33928503\",\"9\":\"ae19bd00\",\"10\":\"8a208c96\",\"11\":\"877e3a7c\",\"12\":\"ff1aceda\",\"13\":\"25cb02e2\",\"14\":\"1a1e5032\",\"15\":\"14e81f6b\",\"16\":\"a9f7ed5b\",\"17\":\"b8a42e45\",\"18\":\"f1fc393a\",\"19\":\"f85e0da2\",\"20\":\"0eca0fa2\",\"21\":\"c710fa30\",\"22\":\"be043dcc\",\"23\":\"21a633e0\",\"24\":\"fe9d2c12\",\"25\":\"afe5354a\",\"26\":\"180da2c2\",\"27\":\"a583cf43\",\"28\":\"35eb7050\",\"29\":\"dd5d965c\",\"30\":\"9f5e9f6f\",\"31\":\"8ac4cff8\",\"32\":\"ecd51f02\",\"33\":\"f8bc733f\",\"34\":\"d08f2f2d\",\"35\":\"07a524d4\",\"36\":\"bd767790\",\"37\":\"0472a548\",\"38\":\"313ea7bb\",\"39\":\"ecd2b080\",\"40\":\"1d96dbee\",\"41\":\"9f7ce9e7\",\"42\":\"d7847233\",\"43\":\"a1e44c77\",\"44\":\"d4dd47a4\",\"45\":\"b8cdd3d2\",\"46\":\"118c5c6c\",\"47\":\"d21a0563\",\"48\":\"3456478a\",\"49\":\"448429bf\",\"50\":\"6c69c91b\",\"51\":\"7372a16e\",\"52\":\"6aaafc7a\",\"53\":\"5821bf6b\",\"54\":\"002e92c5\",\"55\":\"c1890cd2\",\"56\":\"72f9ea33\",\"57\":\"45fe19e8\",\"58\":\"f8968b27\",\"59\":\"c974f643\",\"60\":\"22b8c74c\",\"61\":\"8abf3a45\",\"62\":\"a72fc9e8\",\"63\":\"d8ceb1c9\",\"64\":\"02a35823\",\"65\":\"691e1fd1\",\"66\":\"eaefa986\"}[chunkId] + \".chunk.js\"\n \t}\n \tvar sriHashes = {\"3\":\"sha384-9934ABN6uqPEPFosQLqxuVhvYUV4okLUNbM0wPFOjE32xxR0586aPIAfPwsnK0aM\",\"4\":\"sha384-c8lzpMfT7HLNH/GninvVmldA6MAz78U7S67XgZ0sL1zC/XsvbAc1sk/8WCbo5DRm\",\"5\":\"sha384-lv7AR2bqV8OenkumNTiZZdadAbQfO2XuJbYqEt9AzFdGlC10pFrN3Cs+aZUgjPcD\",\"6\":\"sha384-zGs+rCNJ2ybc4gZG6rllZSyRoPEPzHKQsQdmg5Ct1obpLbhfrgY0Eh8xKnaVYAWQ\",\"7\":\"sha384-pYGHH3VUsYMwA4BAKILHXmvGjpaxZlX7K4Of8Vf0TpR1zS6KDsgHFNzDpzirDyBf\",\"8\":\"sha384-ACeUJuCEJ59IYImLrUenrF6deSrpeWezxLcOsBAQyORKzdpa17wYYLC3/lu9FXfx\",\"9\":\"sha384-i0T45goKd5FtPV6EQM7mrJpda8H8zPWOz5tjU9ymETt7xBC6jUjwNqHloDdlm24u\",\"10\":\"sha384-8jUnc1d4TZkeepUWsacU28Ba3xjVZQC+DhOPOUgsOujkW4AH00aKevnp3eALoF96\",\"11\":\"sha384-DArCUJcqJmVbAYO1HmaQBxRDAd1LhtMG3EtURSQnKJtwDiZ1YwnP2rwfkK69PMf4\",\"12\":\"sha384-XS0QUhEY75QdhPe6i1rnrb4KAI4vmxXrsCsUmdIWSbx+ZzXXqOOWQouR+Hua6ukg\",\"13\":\"sha384-m+5HhZASMNDlwdTS4rbCfY+uMTLoDEBuHkgo2eRz1U72aRnXBRtcFNIpYN8UcOw0\",\"14\":\"sha384-lRW/huJoiN9BopHCZ2RcPCpNHFtWg3585yWFpWhv+DHGLlUB9fgLWMA1V/Roj1+b\",\"15\":\"sha384-irOAQuzwBISkvtz8hzaB0WP9TNhpfAYByjaJsV8JxgV+2F+3umYIZtxCJDfclqux\",\"16\":\"sha384-BRfHejCiWsn28LbRHzgaPHBmWBeqhz+loh+/rXH2QTedcz0OMFYxD7pvQch4Maq8\",\"17\":\"sha384-UP9yAZvoLx3uOKiaRwDd8CnL+TG6XnvmCQ/dqZUmuxDfNZimQYs6mhtwaDm1mC/E\",\"18\":\"sha384-ES8l1C4+eGYE3gz5iokugFlvGNUc3Jkl+RqsyPcNNYjnbugjT4OPnWttCcelmjC/\",\"19\":\"sha384-zuIZQSzznBcH/aeP6dj/cfl9tnmBnFZ5OvQWlFuj6zTniPXSJ825U++zKvplDaFc\",\"20\":\"sha384-jKcgQSWZyXXAHZ7g5WNU6glCJtd1tVX4BAcyO+Qo4PJMWFI7EIYYfbb1ieSu4Eob\",\"21\":\"sha384-8kzw/z8VFEI4cFXKzDPIhxdSEz3rcKu7VL7Hb8dm/1jP9WDy3G/6Pq1sk0DwdlUQ\",\"22\":\"sha384-vQaEGDUlI+f05Zln/tyPRJX7Q+EH6KpzX5B+1Ksqeq6smzvDMRw/VcuU7WO/9UWo\",\"23\":\"sha384-AoehfZkceTHXRM5ePhp5CSnOVH2PoqIeL8gzUpv5R1Vw2lZJrXIDuzUsxp4KZgq3\",\"24\":\"sha384-hMnh3w0w1iPOFlEhpEHjBAlGJVlowHPzeZ0M2IgBRwTD2htzyWAa5MRvVPkTzdJA\",\"25\":\"sha384-W/vYvDOgjWSw6gxJmVjoKKQmMwfR9dWhEORiTWcPGpDRuwQORazeQfeyxzfjoXdW\",\"26\":\"sha384-l0G9EBxQrDdTWOPdCuYSNETCg5O6AtKYekF47wIyiTjGwE04QYa8SLMSFxd8o71d\",\"27\":\"sha384-6OO7XYx9E3QXkIhdIlHQVH8Ue44DVJp6nrwTvFmrbXg9Nli+uRZgKGomg8WeiR5q\",\"28\":\"sha384-kf5ojG+WPoIphDkrlnR3D8popMDAnND5JLIltB7TQ3ye6zb8uOGYlF9AbKB08a9+\",\"29\":\"sha384-tnX0KN/cE5IZdJclcW7QcVbgrkg9mJrThT3/qxojXwCgrikX9kQaSLV7HtGWEp0J\",\"30\":\"sha384-WkkBR/2HPdRYZvC42rOkNplMBjlRLXlN6PHAN44T7C/py4oriEnv33Ze51S6Rd82\",\"31\":\"sha384-UNRa2ZGZ41ii/29/KnlYViDgvnb2hA6l3XuLrgDQLwLazM8VuaURvhQ02mJeICwL\",\"32\":\"sha384-AsuQU0y81OeHG6H/atJuFNibNJ5XjvuskJjC8MqHRThMTaVPAmIOVriCK+2vvchr\",\"33\":\"sha384-LgLJ3EvoZtIH0CDV7fGICHlQSeplOQ91vtIYNNJDdA0ENr/Q8yHfcxRMibTRv2lT\",\"34\":\"sha384-hb/lMcKNyJvXHCaXxXXmGClN2mW6KRgbY+U2PjU1kOm93RG9Om+r8pX3Kpdnnqh4\",\"35\":\"sha384-z+Zv2ZTMH6JCh48NoXvxPueez9w8XAHZlpPDMY1Y7I/pt1eJSgxgxDwf0PK0JIOR\",\"36\":\"sha384-XSYUc6dvyA7SajIlM8GwH5oqi7VeUAjVBcc+vQzlmJa7ttnN2oEJLsCphFHkS5C0\",\"37\":\"sha384-5h0AJiBbQmnmdLoIV6T3+wDDvPlyPQt8iwni+MkRZDnYXO26pMsmc4d/l9zZV3N3\",\"38\":\"sha384-W8sU1K3akH3iR1b2CgC0NjRHd2navx73bLUlbH/kxAxjm80AEJ9+GkNHEwiGvtS8\",\"39\":\"sha384-VzYMHzEL3iG47djGZ8oFdSxk2k88lejaAAXa9j9sP8JFkQ9KO6juZrjnv0Qt+Qhv\",\"40\":\"sha384-T4PpKTsD9/LYiH7irzAx7ZNGJbC/5RGjEpsq+i/Sov/Ok3YDK/L6soiemAuLjJIN\",\"41\":\"sha384-PPuiSgLVtm9dKVr7s5Yf2+MmSsnBNsQizBIyR1tTgVclLmyp8M/+LaANz/QaZl4w\",\"42\":\"sha384-fjyvCz3D+xT+Y1DiQ1DXBeYM/yVCjVhkIMJIK7Hmj2KRnh/JgCmUS9Y3BchRLHKE\",\"43\":\"sha384-9cRxEJRfWCr3NJOWD5RWORkImWu7NhRUbdWmKRL4O30QZt5YHGWqGAHdu3nm6iJN\",\"44\":\"sha384-ojzmhdPobWffn3uS7YlXq8nUjrFSKnIEo5igI9VmsV0hf5sML1vuqo3WNQ8cVTd0\",\"45\":\"sha384-zx8A2SLhiOzCrp0YsZI3L67f601RtYZkG+T8Ypn7cEIxMb/5kfyjlu0AncxNsqRl\",\"46\":\"sha384-orcgeC+mhWxY99KH2JApmjOshTEcJ8ndZzOdUKfttrMZQPDlTULjWPOarYsXRrbC\",\"47\":\"sha384-nJ0DaYc5GWnwssOIfk5YahTBrNISX+r0xmSvJ0bF4pAIQejpnw1KPc2LOAKkK5x3\",\"48\":\"sha384-jzEKNGMf5XBJm1srqq8UZsYGD+XNEsV5YBMeGRWR0udJC4N3pC8R8pttnubZVHtk\",\"49\":\"sha384-WahoBLbM74PGDr/7/fXrnbvs2TwiYihLfkiAnqvHOqFsnZNmEasRBasd43J3F4X7\",\"50\":\"sha384-C4bS4nSOgnJlFMdjHgoFhiVjA+XiFeet6Tqtfgg7zRxg/kBVdibpD/2as6vLDNrA\",\"51\":\"sha384-wRNAFACmiKh7qvcPXQkjdrU2MwDDvwci1sZepkaQDh9RAPWI7RNjPoHAZGV5FYlW\",\"52\":\"sha384-a0b3xhuXCCBxCKwbP5wjNQc9ZCzDHmH+TTVVkdrpNKO4OwbDLA5UyJTJ90l9nGv8\",\"53\":\"sha384-XP0rQY7SqZIC5f/uxurYuYi0a8MNVdxarSV8Vb6nscMsXpLRjrUREf2siCZ6KvBM\",\"54\":\"sha384-VQiGyLj12mnQv4Gbq262pqG3ClZUAWoI4cOiClzNf9fqBd66eAI+Jp+I149+8Qe5\",\"55\":\"sha384-rV6u8eshKm1ESH0MK6LYeqyY5+8C2Nt/qVn8ooBr+GcZSUnFi2c9aXdddVrU/wIp\",\"56\":\"sha384-zaGeszS8oQHGzgMlYL0/wQkNyuEvpbswRtityiuS4y0GzxCjy+d+NIL3CNRSg4cn\",\"57\":\"sha384-hS/5RVkIw66sQdEqjl66X/YjLX3eBqWBSce7sbXdSbLGiEpb8nGbrj9SNx8hRqwy\",\"58\":\"sha384-s763XtDuYj/NBS8L6/uXd3TCBhjsztgBv2SZPbX/QtpaDiv0LgKLxIx2astqjLY5\",\"59\":\"sha384-TzW2aFz9aLA54S/yPUzTlCBuh1+hJ2iPVNdgtZIAP1LzEfKwF8ZvBhzWTpmz8CPr\",\"60\":\"sha384-skCRYdZpBI4T0RUlwriRgXKe5LNXomfke5BxGWyCbQJw5i3xUe3AFrEM/7F63s/0\",\"61\":\"sha384-Q4E0teznn7Aj66mYA9mT7JRn+zOhBcDvsEjxSOoAoV52jtiBsKJh7Tlh0MejtUB/\",\"62\":\"sha384-GZV2VNVAzNi975g0cLQQ/DKnCiLUkNI7Ooc00P42VLsnwOdxRt0e8DaO754mBJ6K\",\"63\":\"sha384-eU8Nu5+9hDL+VCxDT9Kl2XnXb08gLe5740xMLlDmOcE06oBYmO3l9Lwv0EelIyDy\",\"64\":\"sha384-XoiKA1IU2zJPo8CPBM/oQVuTJcij0q5Xr5oQMtlJLP4ArWl/A05zMuLZ03LCVVsy\",\"65\":\"sha384-kXB35rsIAZeMHgTP/xXQrOmSFKNEQDSBKGtmjjlmqhBXUgF+PKa+pxl6qci6xDuj\",\"66\":\"sha384-s7PoTREiuCZ+KKMKA3+C0mTUZc1eud5YmvkraUbSV6GUMSQVytJbp3jz0sro9HnC\"};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n\n\n \t\t// JSONP chunk loading for javascript\n\n \t\tvar installedChunkData = installedChunks[chunkId];\n \t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n \t\t\t// a Promise means \"currently loading\".\n \t\t\tif(installedChunkData) {\n \t\t\t\tpromises.push(installedChunkData[2]);\n \t\t\t} else {\n \t\t\t\t// setup Promise in chunk cache\n \t\t\t\tvar promise = new Promise(function(resolve, reject) {\n \t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n \t\t\t\t});\n \t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n \t\t\t\t// start chunk loading\n \t\t\t\tvar script = document.createElement('script');\n \t\t\t\tvar onScriptComplete;\n\n \t\t\t\tscript.charset = 'utf-8';\n \t\t\t\tscript.timeout = 120;\n \t\t\t\tif (__webpack_require__.nc) {\n \t\t\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n \t\t\t\t}\n \t\t\t\tscript.src = jsonpScriptSrc(chunkId);\n \t\t\t\tif (script.src.indexOf(window.location.origin + '/') !== 0) {\n \t\t\t\t\tscript.crossOrigin = \"anonymous\";\n \t\t\t\t}\n \t\t\t\t// create error before stack unwound to get useful stacktrace later\n \t\t\t\tvar error = new Error();\n \t\t\t\tonScriptComplete = function (event) {\n \t\t\t\t\t// avoid mem leaks in IE.\n \t\t\t\t\tscript.onerror = script.onload = null;\n \t\t\t\t\tclearTimeout(timeout);\n \t\t\t\t\tvar chunk = installedChunks[chunkId];\n \t\t\t\t\tif(chunk !== 0) {\n \t\t\t\t\t\tif(chunk) {\n \t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n \t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n \t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n \t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n \t\t\t\t\t\t\terror.type = errorType;\n \t\t\t\t\t\t\terror.request = realSrc;\n \t\t\t\t\t\t\tchunk[1](error);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tinstalledChunks[chunkId] = undefined;\n \t\t\t\t\t}\n \t\t\t\t};\n \t\t\t\tvar timeout = setTimeout(function(){\n \t\t\t\t\tonScriptComplete({ type: 'timeout', target: script });\n \t\t\t\t}, 120000);\n \t\t\t\tscript.onerror = script.onload = onScriptComplete;\n \t\t\t\tscript.integrity = sriHashes[chunkId];\n \t\t\t\tscript.crossOrigin = \"anonymous\";\n \t\t\t\tdocument.head.appendChild(script);\n \t\t\t}\n \t\t}\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// on error function for async loading\n \t__webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,2]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","export const CLIENT_ID = 'WebMail';\nexport const CLIENT_TYPE = 1;\nexport const CLIENT_SECRET = '';\nexport const APP_VERSION = '1.0.0';\nexport const APP_NAME = 'proton-mail';\nexport const API_URL = 'https://mail.protonmail.com/api';\nexport const SECURE_URL = 'undefined';\nexport const API_VERSION = '3';\nexport const DATE_VERSION = 'Fri, 11 Oct 2019 16:54:23 GMT';\nexport const CHANGELOG_PATH = 'assets/changelog.tpl.html';\nexport const VERSION_PATH = 'assets/version.json';\nexport const SENTRY_RELEASE = '';\nexport const SENTRY_DSN = '';","const locales = require.context('../i18n', true, /.json$/, 'lazy');\n\nexport default locales.keys().reduce((acc, key) => {\n    acc[key.slice(2, key.length - 5)] = () => locales(key);\n    return acc;\n}, {});\n","import { Location } from 'history';\n\nexport const getSearchParams = (location: Location): { [key: string]: string } => {\n    const params = new URLSearchParams(location.search);\n\n    const result: { [key: string]: string } = {};\n\n    params.forEach((value, key) => {\n        result[key] = value;\n    });\n\n    return result;\n};\n\nexport const changeSearchParams = (location: Location, newParams: { [key: string]: string | undefined }) => {\n    const params = new URLSearchParams(location.search);\n\n    for (const key in newParams) {\n        if (newParams[key] === undefined) {\n            params.delete(key);\n        } else {\n            params.set(key, newParams[key] as string);\n        }\n    }\n\n    const queryString = params.toString();\n    const urlFragment = (queryString === '' ? '' : '?') + queryString;\n\n    return location.pathname + urlFragment;\n};\n","import { c } from 'ttag';\nimport { MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\n\nexport const PAGE_SIZE = 50;\n\nexport const ELEMENT_TYPES = {\n    MESSAGE: 'message',\n    CONVERSATION: 'conversation'\n};\n\nexport const LABEL_IDS_TO_HUMAN = {\n    [MAILBOX_LABEL_IDS.INBOX]: 'inbox',\n    [MAILBOX_LABEL_IDS.ALL_DRAFTS]: 'all-drafts',\n    [MAILBOX_LABEL_IDS.ALL_SENT]: 'all-sent',\n    [MAILBOX_LABEL_IDS.TRASH]: 'trash',\n    [MAILBOX_LABEL_IDS.SPAM]: 'spam',\n    [MAILBOX_LABEL_IDS.ALL_MAIL]: 'all-mail',\n    [MAILBOX_LABEL_IDS.ARCHIVE]: 'archive',\n    [MAILBOX_LABEL_IDS.SENT]: 'sent',\n    [MAILBOX_LABEL_IDS.DRAFTS]: 'drafts',\n    [MAILBOX_LABEL_IDS.STARRED]: 'starred'\n};\n\nexport const HUMAN_TO_LABEL_IDS = Object.entries(LABEL_IDS_TO_HUMAN).reduce((acc, [key, value]) => {\n    acc[value] = key;\n    return acc;\n}, Object.create(null));\n\nexport const LABEL_IDS_TO_I18N = {\n    [MAILBOX_LABEL_IDS.INBOX]: c('Link').t`Inbox`,\n    [MAILBOX_LABEL_IDS.ALL_DRAFTS]: c('Link').t`Drafts`,\n    [MAILBOX_LABEL_IDS.ALL_SENT]: c('Link').t`Sent`,\n    [MAILBOX_LABEL_IDS.TRASH]: c('Link').t`Trash`,\n    [MAILBOX_LABEL_IDS.SPAM]: c('Link').t`Spam`,\n    [MAILBOX_LABEL_IDS.ALL_MAIL]: c('Link').t`All mail`,\n    [MAILBOX_LABEL_IDS.ARCHIVE]: c('Link').t`Archive`,\n    [MAILBOX_LABEL_IDS.SENT]: c('Link').t`Sent`,\n    [MAILBOX_LABEL_IDS.DRAFTS]: c('Link').t`Drafts`,\n    [MAILBOX_LABEL_IDS.STARRED]: c('Link').t`Starred`\n};\n\nexport const SIGNATURE_START = 1546300800; // January 1, 2019\n\nexport const VERIFICATION_STATUS = {\n    NOT_VERIFIED: -1,\n    NOT_SIGNED: 0,\n    SIGNED_AND_VALID: 1,\n    SIGNED_AND_INVALID: 2,\n    SIGNED_NO_PUB_KEY: 3\n};\n\nexport const MESSAGE_FLAGS = {\n    FLAG_RECEIVED: 1, // whether a message is received\n    FLAG_SENT: 2, // whether a message is sent\n    FLAG_INTERNAL: 4, // whether the message is between ProtonMail recipients\n    FLAG_E2E: 8, // whether the message is end-to-end encrypted\n    FLAG_AUTO: 16, // whether the message is an autoresponse\n    FLAG_REPLIED: 32, // whether the message is replied to\n    FLAG_REPLIEDALL: 64, // whether the message is replied all to\n    FLAG_FORWARDED: 128, // whether the message is forwarded\n    FLAG_AUTOREPLIED: 256, // whether the message has been responded to with an autoresponse\n    FLAG_IMPORTED: 512, // whether the message is an import\n    FLAG_OPENED: 1024, // whether the message has ever been opened by the user\n    FLAG_RECEIPT_SENT: 2048, // whether a read receipt has been sent in response to the message\n    // For drafts only\n    FLAG_RECEIPT_REQUEST: 65536, // whether to request a read receipt for the message\n    FLAG_PUBLIC_KEY: 131072, // whether to attach the public key\n    FLAG_SIGN: 262144 // whether to sign the message\n};\n\nexport enum ENCRYPTED_STATUS {\n    PGP_MIME = 8 // Used for attachment\n}\n\nexport const AES256 = 'aes256';\n\nexport enum MESSAGE_ACTIONS {\n    NEW = -1,\n    REPLY = 0,\n    REPLY_ALL = 1,\n    FORWARD = 2\n}\n","import { LABEL_IDS_TO_HUMAN, LABEL_IDS_TO_I18N } from '../constants';\nimport { MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\nimport { Label } from '../models/label';\nimport { toMap } from 'proton-shared/lib/helpers/object';\n\nexport const getHumanLabelID = (labelID: string) => LABEL_IDS_TO_HUMAN[labelID as MAILBOX_LABEL_IDS] || labelID;\n\nexport const getI18nLabelID = (labelID: string) => LABEL_IDS_TO_I18N[labelID as MAILBOX_LABEL_IDS] || labelID;\n\nexport const getLabelName = (labelID: string, labels: Label[]): string => {\n    if (labelID in LABEL_IDS_TO_HUMAN) {\n        return getI18nLabelID(labelID);\n    }\n\n    const labelsMap: { [key: string]: Label } = toMap(labels) as any;\n    if (labelID in labelsMap) {\n        return labelsMap[labelID].Name || labelID;\n    }\n\n    return labelID;\n};\n\nexport const isCustomLabel = (labelID: string) =>\n    !Object.values(MAILBOX_LABEL_IDS).includes(labelID as MAILBOX_LABEL_IDS);\n","import { ContactEmailCache, ContactEmail } from '../models/contact';\nimport { normalizeEmail } from './addresses';\n\nexport const findEmailInCache = (cache: ContactEmailCache, email: string): ContactEmail =>\n    [...cache.values()].find(({ Email }) => {\n        return email === normalizeEmail(Email);\n    }) || {};\n\nexport const getContactsOfGroup = (contacts: ContactEmail[] = [], groupID = ''): ContactEmail[] =>\n    contacts.filter((contact) => contact.LabelIDs?.includes(groupID));\n","import { c } from 'ttag';\nimport { REGEX_EMAIL } from 'proton-shared/lib/constants';\n\nimport { Address, Recipient, RecipientGroup, RecipientOrGroup } from '../models/address';\nimport { Key } from '../models/key';\nimport { Message } from '../models/message';\nimport { ContactEmail, ContactGroup } from '../models/contact';\nimport { getContactsOfGroup } from './contacts';\n\nexport const REGEX_RECIPIENT = /(.*)\\s*<([^>]*)>/;\n\nexport const validateAddress = (address = '') => REGEX_EMAIL.test(address);\n\nexport const validateAddresses = (addresses: string[]) => addresses.every(validateAddress);\n\n/**\n * Transform value to be normalized (lowercase)\n */\nexport const normalizeEmail = (email = '') => email.toLowerCase();\n\n/**\n * Remove plus alias part present in the email value\n */\nexport const removeEmailAlias = (email = '') => {\n    return normalizeEmail(email)\n        .replace(/(\\+[^@]*)@/, '@')\n        .replace(/[._-](?=[^@]*@)/g, '');\n};\n\n/**\n * Add plus alias part for an email\n */\nexport const addPlusAlias = (email = '', plus = '') => {\n    const atIndex = email.indexOf('@');\n    const plusIndex = email.indexOf('+');\n\n    if (atIndex === -1 || plusIndex > -1) {\n        return email;\n    }\n\n    const name = email.substring(0, atIndex);\n    const domain = email.substring(atIndex, email.length);\n\n    return `${name}+${plus}${domain}`;\n};\n\n/**\n * Get address from email\n * Remove + alias and transform to lower case\n */\nexport const getByEmail = (addresses: Address[], email = '') => {\n    const cleanEmail = removeEmailAlias(email);\n    return addresses.find(({ Email }) => removeEmailAlias(Email) === cleanEmail);\n};\n\n/**\n * Check if the address is fallback (Can't receive but has keys)\n */\nexport const isFallbackAddress = (address?: Address, keys: Key[] = []) =>\n    !!address && !address.Receive && !!keys.length;\n\nexport const isOwnAddress = (address?: Address, keys: Key[] = []) => !!address && !isFallbackAddress(address, keys);\n\nexport const inputToRecipient = (input: string): Recipient => {\n    const match = REGEX_RECIPIENT.exec(input);\n\n    if (match !== null) {\n        return {\n            Name: match[1],\n            Address: match[2]\n        };\n    }\n    return {\n        Name: input,\n        Address: input\n    };\n};\n\nexport const recipientToInput = (recipient: Recipient = {}): string => {\n    if (recipient.Address && recipient.Name && recipient.Address !== recipient.Name) {\n        return `${recipient.Name} <${recipient.Address}>`;\n    }\n\n    if (recipient.Address === recipient.Name) {\n        return recipient.Address || '';\n    }\n\n    return `${recipient.Name} ${recipient.Address}`;\n};\n\nexport const contactToRecipient = (contact: ContactEmail = {}, groupPath?: string): Recipient => ({\n    Name: contact.Name,\n    Address: contact.Email,\n    Group: groupPath\n});\n\nexport const contactToInput = (contact: ContactEmail = {}): string => recipientToInput(contactToRecipient(contact));\n\nexport const recipientsWithoutGroup = (recipients: Recipient[], groupPath?: string) =>\n    recipients.filter((recipient) => recipient.Group !== groupPath);\n\nexport const getRecipientLabel = ({ Address, Name }: Recipient) => Name || Address || '';\n\nexport const getRecipientGroupLabel = (recipientGroup?: RecipientGroup, contactsInGroup = 0) => {\n    const count = recipientGroup?.recipients.length;\n    const members = c('Info').t`Members`;\n    return `${recipientGroup?.group?.Name} (${count}/${contactsInGroup} ${members})`;\n};\n\nexport const getRecipientOrGroupLabel = ({ recipient, group }: RecipientOrGroup, allContacts: ContactEmail[]) =>\n    recipient\n        ? getRecipientLabel(recipient)\n        : getRecipientGroupLabel(group, getContactsOfGroup(allContacts, group?.group?.ID).length);\n\nexport const recipientsToRecipientOrGroup = (recipients: Recipient[], groups: ContactGroup[]) =>\n    recipients.reduce((acc, value) => {\n        if (value.Group) {\n            const existingGroup = acc.find((recipientsOrGroup) => recipientsOrGroup.group?.group?.Path === value.Group);\n            if (existingGroup) {\n                existingGroup.group?.recipients.push(value);\n            } else {\n                const group = groups.find((group) => group.Path === value.Group);\n                if (group) {\n                    acc.push({ group: { group, recipients: [value] } });\n                } else {\n                    acc.push({ recipient: value });\n                }\n            }\n        } else {\n            acc.push({ recipient: value });\n        }\n        return acc;\n    }, [] as RecipientOrGroup[]);\n\n/**\n * Detect if the email address is a valid plus alias and returns the address model appropriate\n */\nexport const getAddressFromPlusAlias = (addresses: Address[], email = ''): Address | undefined => {\n    const plusIndex = email.indexOf('+');\n    const atIndex = email.indexOf('@');\n\n    if (plusIndex === -1 || atIndex === -1) {\n        return;\n    }\n\n    // Remove the plus alias part to find a match with existing addresses\n    const address = getByEmail(addresses, removeEmailAlias(email));\n    const { Status, Receive, Send } = address || {};\n\n    if (!Status || !Receive || !Send) {\n        // pm.me addresses on free accounts (Send = 0)\n        return;\n    }\n\n    const plusPart = email.substring(plusIndex + 1, atIndex);\n\n    // Returns an address where the Email is build to respect the exising capitalization and add the plus part\n    return { ...address, Email: addPlusAlias(address?.Email, plusPart) };\n};\n\n/**\n * Return list of addresses available in the FROM select\n * Reference: Angular/src/app/composer/factories/composerFromModel.js\n */\nexport const getFromAdresses = (addresses: Address[], originalTo = '') => {\n    const result = addresses\n        .filter(({ Status, Receive }) => Status === 1 && Receive === 1)\n        .sort((a1, a2) => (a1.Order || 0) - (a2.Order || 0));\n\n    const plusAddress = getAddressFromPlusAlias(addresses, originalTo);\n\n    if (plusAddress) {\n        // It's important to unshift the plus address to be found first with find()\n        result.unshift(plusAddress);\n    }\n\n    return result;\n};\n\n/**\n * Find the current sender for a message\n */\nexport const findSender = (addresses: Address[] = [], { AddressID = '' }: Message = {}): Address | undefined => {\n    const enabledAddresses = addresses\n        .filter((address) => address.Status === 1)\n        .sort((a1, a2) => (a1.Order || 0) - (a2.Order || 0));\n\n    if (AddressID) {\n        const originalAddress = enabledAddresses.find((address) => address.ID === AddressID);\n        if (originalAddress) {\n            return originalAddress;\n        }\n    }\n\n    return enabledAddresses[0];\n};\n","import React, { SyntheticEvent, useState, useEffect, useRef } from 'react';\nimport { Icon, classnames } from 'react-components';\nimport { noop } from 'proton-shared/lib/helpers/function';\n\nimport { validateAddress, recipientToInput, inputToRecipient } from '../../../helpers/addresses';\nimport { Recipient } from '../../../models/address';\n\ninterface Props {\n    recipient: Recipient;\n    onChange?: (value: Recipient) => void;\n    onRemove: () => void;\n}\n\nconst AddressesRecipientItem = ({ recipient, onChange = noop, onRemove }: Props) => {\n    const [model, setModel] = useState(recipientToInput(recipient));\n    const editableRef = useRef<HTMLSpanElement>(null);\n\n    const validate = () => {\n        // TODO: Check server\n        const recipient = inputToRecipient(model);\n        return validateAddress(recipient.Address);\n    };\n\n    const [valid, setValid] = useState(validate());\n\n    useEffect(() => {\n        // TODO: Manage recipient names\n        const value = recipientToInput(recipient);\n\n        if (editableRef.current) {\n            editableRef.current.textContent = value;\n        }\n        setModel(value);\n    }, [recipient]);\n\n    const handleChange = (event: SyntheticEvent) => {\n        setModel((event.target as HTMLSpanElement).textContent || '');\n    };\n    const handleBlur = () => {\n        setValid(validate());\n        onChange(inputToRecipient(model));\n    };\n\n    return (\n        <div\n            className={classnames([\n                'composer-addresses-item bordered-container flex flex-items-center flex-nowrap flex-row mw80 stop-propagation',\n                !valid && 'invalid'\n            ])}\n        >\n            {/* TODO: Icon lock */}\n            <span\n                className=\"composer-addresses-item-label mtauto mbauto pl0-5 ellipsis pr0-5\"\n                contentEditable={onChange !== noop}\n                onKeyUp={handleChange}\n                onPaste={handleChange}\n                onBlur={handleBlur}\n                ref={editableRef}\n            />\n            <button\n                type=\"button\"\n                className=\"composer-addresses-item-remove inline-flex pl0-5 pr0-5 no-pointer-events-children h100\"\n                onClick={onRemove}\n            >\n                <Icon name=\"off\" size={12} className=\"mauto\" />\n            </button>\n        </div>\n    );\n};\n\nexport default AddressesRecipientItem;\n","import { useEffect, MutableRefObject } from 'react';\n\nconst useEventListener = (\n    ref: MutableRefObject<Element | null | undefined>,\n    eventName: string,\n    handler: EventListenerOrEventListenerObject\n) => {\n    useEffect(() => {\n        ref.current?.addEventListener(eventName, handler);\n        return () => ref.current?.removeEventListener(eventName, handler);\n    }, [ref.current, handler]);\n};\n\nexport default useEventListener;\n","import React, { useState, useEffect, MutableRefObject, useRef, ReactNode } from 'react';\nimport Awesomplete from 'awesomplete';\n\nimport { contactToInput } from '../../../helpers/addresses';\nimport { ContactEmail, ContactGroup, ContactOrGroup } from '../../../models/contact';\nimport useEventListener from '../../../hooks/useEventListener';\nimport { Recipient } from '../../../models/address';\n\ninterface Props {\n    inputRef: MutableRefObject<HTMLInputElement | undefined>;\n    contacts: ContactEmail[];\n    contactGroups: ContactGroup[];\n    children: ReactNode;\n    onSelect: (value: ContactOrGroup) => void;\n    currentValue: Recipient[];\n}\n\nconst AddressesAutocomplete = ({ inputRef, contacts, contactGroups, onSelect, currentValue, children }: Props) => {\n    const [awesomplete, setAwesomplete] = useState<Awesomplete>();\n    const containerRef = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        const awesompleteInstance = new Awesomplete(\n            inputRef.current as HTMLElement,\n            {\n                container: () => containerRef.current as HTMLElement,\n                minChars: 0,\n                autoFirst: true\n            } as Awesomplete.Options\n        );\n        setAwesomplete(awesompleteInstance);\n\n        return () => awesompleteInstance.destroy();\n    }, []);\n\n    useEffect(() => {\n        if (awesomplete) {\n            const contactList = contacts\n                .filter((contact) => !currentValue.find((recipient) => recipient.Address === contact.Email))\n                .map((contact) => ({\n                    label: contactToInput(contact),\n                    value: `Contact:${contact.ID}`\n                }));\n\n            const groupList = contactGroups\n                .filter((group) => !currentValue.find((recipient) => recipient.Group === group.Path))\n                .map((group) => ({\n                    label: group.Name,\n                    value: `Group:${group.ID}`\n                }));\n\n            awesomplete.list = [...contactList, ...groupList];\n\n            (awesomplete as any).item = (text: string, input: string, itemId: string) =>\n                (Awesomplete.ITEM as any)(text.replace('<', '&lt;'), input, itemId);\n\n            // Prevent Awesomplete to open immediately\n            awesomplete.close();\n        }\n    }, [awesomplete, contacts, contactGroups, currentValue]);\n\n    const handleSelect = (event: any) => {\n        const value = event.text.value;\n        const contactID = /Contact:(.*)/.exec(value)?.[1];\n        const contact = contacts.find((contact) => contact.ID === contactID);\n        const groupID = /Group:(.*)/.exec(value)?.[1];\n        const group = contactGroups.find((group) => group.ID === groupID);\n        if (contact || group) {\n            onSelect({ contact, group });\n        }\n        awesomplete?.close();\n    };\n\n    useEventListener(inputRef, 'awesomplete-selectcomplete', handleSelect);\n\n    useEventListener(inputRef, 'click', () => {\n        if (awesomplete) {\n            awesomplete.open();\n        }\n    });\n\n    return (\n        <div className=\"composer-addresses-autocomplete flex-item-fluid relative\" ref={containerRef}>\n            {children}\n        </div>\n    );\n};\n\nexport default AddressesAutocomplete;\n","import React, { useState, ChangeEvent } from 'react';\nimport { c } from 'ttag';\nimport { Checkbox, FormModal, generateUID, Label } from 'react-components';\n\nimport { ContactEmail } from '../../../models/contact';\nimport { contactToInput } from '../../../helpers/addresses';\nimport { RecipientGroup } from '../../../models/address';\n\ninterface Props {\n    recipientGroup?: RecipientGroup;\n    contacts: ContactEmail[];\n    onClose?: () => void;\n    onSubmit: (recipientGroup: RecipientGroup) => void;\n}\n\nconst AddressesGroupModal = ({ onSubmit, onClose, recipientGroup, contacts, ...rest }: Props) => {\n    const [uid] = useState(generateUID('addresses-group-modal'));\n    const [model, setModel] = useState(recipientGroup as RecipientGroup);\n\n    const isChecked = (contact: ContactEmail) =>\n        !!model?.recipients.find((recipient) => contact.Email === recipient.Address);\n\n    const handleChange = (contact: ContactEmail) => (event: ChangeEvent<HTMLInputElement>) => {\n        const checked = event.target.checked;\n        const recipients = model.recipients || [];\n        let newValue;\n        if (checked) {\n            newValue = [\n                ...recipients,\n                { Name: contact.Name, Address: contact.Email, Group: recipientGroup?.group?.Path }\n            ];\n        } else {\n            newValue = recipients.filter((recipient) => recipient.Address !== contact.Email);\n        }\n        setModel({ group: model?.group, recipients: newValue });\n    };\n\n    const handleSubmit = () => {\n        onSubmit(model);\n        onClose?.();\n    };\n\n    const members = c('Info').t`Members`;\n    const title = `${recipientGroup?.group?.Name} (${contacts.length} ${members})`;\n\n    return (\n        <FormModal submit={c('Action').t`Save`} title={title} onSubmit={handleSubmit} onClose={onClose} {...rest}>\n            <ul className=\"unstyled\">\n                {contacts.map((contact) => {\n                    const id = `${uid}-${contact.ID}`;\n                    return (\n                        <li key={contact.ID} className=\"mb0-5\">\n                            <Checkbox id={id} checked={isChecked(contact)} onChange={handleChange(contact)} />\n                            <Label htmlFor={id} className=\"pt0 pl0-5\">\n                                {contactToInput(contact)}\n                            </Label>\n                        </li>\n                    );\n                })}\n            </ul>\n        </FormModal>\n    );\n};\n\nexport default AddressesGroupModal;\n","import React from 'react';\nimport { Icon, useModals } from 'react-components';\n\nimport { ContactEmail } from '../../../models/contact';\nimport AddressesGroupModal from './AddressesGroupModal';\nimport { getRecipientGroupLabel } from '../../../helpers/addresses';\nimport { RecipientGroup } from '../../../models/address';\nimport { getContactsOfGroup } from '../../../helpers/contacts';\n\ninterface Props {\n    recipientGroup?: RecipientGroup;\n    contacts: ContactEmail[];\n    onChange: (value: RecipientGroup) => void;\n    onRemove: () => void;\n}\n\nconst AddressesGroupItem = ({ recipientGroup, contacts, onChange, onRemove }: Props) => {\n    const { createModal } = useModals();\n\n    const contactsInGroup = getContactsOfGroup(contacts, recipientGroup?.group?.ID);\n    const label = getRecipientGroupLabel(recipientGroup, contactsInGroup.length);\n\n    const handleGroupModal = async () => {\n        const newRecipientGroup = (await new Promise((resolve) => {\n            createModal(\n                <AddressesGroupModal recipientGroup={recipientGroup} contacts={contactsInGroup} onSubmit={resolve} />\n            );\n        })) as RecipientGroup;\n\n        onChange(newRecipientGroup);\n    };\n\n    return (\n        <div className=\"composer-addresses-item bordered-container flex flex-items-center flex-nowrap flex-row mw80 stop-propagation\">\n            <span className=\"inline-flex pl0-5 pr0-5 no-pointer-events-children h100\">\n                <Icon name=\"contacts-groups\" size={12} className=\"mauto\" />\n            </span>\n            <span\n                className=\"composer-addresses-item-label mtauto mbauto pl0-5 ellipsis pr0-5\"\n                onClick={handleGroupModal}\n            >\n                {label}\n            </span>\n            <button\n                type=\"button\"\n                className=\"composer-addresses-item-remove inline-flex pl0-5 pr0-5 no-pointer-events-children h100\"\n                onClick={onRemove}\n            >\n                <Icon name=\"off\" size={12} className=\"mauto\" />\n            </button>\n        </div>\n    );\n};\n\nexport default AddressesGroupItem;\n","import React, { useState, useEffect, ChangeEvent, MutableRefObject, useRef, MouseEvent } from 'react';\nimport { Input } from 'react-components';\nimport { noop } from 'proton-shared/lib/helpers/function';\n\nimport AddressesRecipientItem from './AddressesRecipientItem';\nimport {\n    inputToRecipient,\n    contactToRecipient,\n    recipientsWithoutGroup,\n    recipientsToRecipientOrGroup\n} from '../../../helpers/addresses';\nimport { ContactEmail, ContactGroup, ContactOrGroup } from '../../../models/contact';\nimport AddressesAutocomplete from './AddressesAutocomplete';\nimport AddressesGroupItem from './AddressesGroupItem';\nimport { RecipientGroup, Recipient } from '../../../models/address';\n\ninterface Props {\n    id: string;\n    recipients?: Recipient[];\n    onChange: (value: Recipient[]) => void;\n    addressesFocusRef?: MutableRefObject<() => void>;\n    contacts: ContactEmail[];\n    contactGroups: ContactGroup[];\n    placeholder?: string;\n}\n\nconst AddressesInput = ({\n    id,\n    recipients = [],\n    onChange,\n    addressesFocusRef,\n    contacts,\n    contactGroups,\n    placeholder\n}: Props) => {\n    const [inputModel, setInputModel] = useState('');\n    const inputRef = useRef<HTMLInputElement>();\n\n    const recipientsOrGroups = recipientsToRecipientOrGroup(recipients, contactGroups);\n\n    const confirmInput = () => {\n        onChange([...recipients, inputToRecipient(inputModel)]);\n        setInputModel('');\n    };\n\n    useEffect(() => {\n        if (addressesFocusRef) {\n            addressesFocusRef.current = inputRef.current?.focus.bind(inputRef.current) || noop;\n        }\n    }, []);\n\n    const handleInputChange = (event: ChangeEvent) => {\n        const input = event.target as HTMLInputElement;\n        setInputModel(input.value);\n    };\n\n    const handleBlur = () => {\n        if (inputModel.trim().length > 0) {\n            confirmInput();\n        }\n    };\n\n    const handleClick = (event: MouseEvent) => {\n        if ((event.target as HTMLElement).closest('.stop-propagation')) {\n            event.stopPropagation();\n            return;\n        }\n\n        inputRef.current?.focus();\n    };\n\n    const handleRecipientChange = (toChange: Recipient) => (value: Recipient) => {\n        onChange(recipients.map((recipient) => (recipient === toChange ? value : recipient)));\n    };\n\n    const handleRecipientRemove = (toRemove: Recipient) => () => {\n        onChange(recipients.filter((recipient) => recipient !== toRemove));\n    };\n\n    const handleGroupChange = (toChange?: RecipientGroup) => (value: RecipientGroup) => {\n        onChange([...recipientsWithoutGroup(recipients, toChange?.group?.Path), ...value.recipients]);\n    };\n\n    const handleGroupRemove = (toRemove?: RecipientGroup) => () => {\n        onChange(recipientsWithoutGroup(recipients, toRemove?.group?.Path));\n    };\n\n    const handleInputKey = (event: KeyboardEvent) => {\n        // Enter or Tab\n        if ((event.keyCode === 13 || event.keyCode === 9) && inputModel.length !== 0) {\n            confirmInput();\n            event.preventDefault(); // Prevent tab to switch field\n        }\n        // Backspace\n        if (event.keyCode === 8 && inputModel.length === 0 && recipientsOrGroups.length > 0) {\n            const last = recipientsOrGroups[recipientsOrGroups.length - 1];\n            if (last.recipient) {\n                handleRecipientRemove(last.recipient)();\n            } else {\n                handleGroupRemove(last.group)();\n            }\n        }\n    };\n\n    const handleAutocompleteSelect = ({ contact, group }: ContactOrGroup) => {\n        if (contact) {\n            onChange([...recipients, contactToRecipient(contact)]);\n        }\n        if (group) {\n            const groupContacts = contacts\n                .filter((contact) => contact.LabelIDs?.includes(group.ID || ''))\n                .map((contact) => contactToRecipient(contact, group.Path));\n            onChange([...recipients, ...groupContacts]);\n        }\n        setInputModel('');\n    };\n\n    return (\n        <AddressesAutocomplete\n            inputRef={inputRef}\n            contacts={contacts}\n            contactGroups={contactGroups}\n            onSelect={handleAutocompleteSelect}\n            currentValue={recipients}\n        >\n            <div\n                className=\"composer-addresses-container flex-item-fluid bordered-container pl1-25 pr1-25\"\n                onClick={handleClick}\n            >\n                {recipientsOrGroups.map((recipientsOrGroup, i) =>\n                    recipientsOrGroup.recipient ? (\n                        <AddressesRecipientItem\n                            key={i}\n                            recipient={recipientsOrGroup.recipient}\n                            onChange={handleRecipientChange(recipientsOrGroup.recipient)}\n                            onRemove={handleRecipientRemove(recipientsOrGroup.recipient)}\n                        />\n                    ) : (\n                        <AddressesGroupItem\n                            key={i}\n                            recipientGroup={recipientsOrGroup.group}\n                            contacts={contacts}\n                            onChange={handleGroupChange(recipientsOrGroup.group)}\n                            onRemove={handleGroupRemove(recipientsOrGroup.group)}\n                        />\n                    )\n                )}\n                <div className=\"flex-item-fluid\">\n                    <Input\n                        id={id}\n                        value={inputModel}\n                        onChange={handleInputChange}\n                        onKeyDown={handleInputKey}\n                        onBlur={handleBlur}\n                        ref={inputRef}\n                        placeholder={placeholder}\n                    />\n                </div>\n            </div>\n        </AddressesAutocomplete>\n    );\n};\n\nexport default AddressesInput;\n","import { Sort, Filter, SearchParameters } from '../models/tools';\nimport { getSearchParams, changeSearchParams } from './url';\nimport { Location } from 'history';\nimport { getHumanLabelID } from './labels';\nimport { isNumber } from 'proton-shared/lib/helpers/validators';\n\nexport const setPathInUrl = (location: Location, labelID: string, elementID?: string): Location => {\n    const urlFragment = elementID === undefined ? '' : `/${elementID}`;\n    return {\n        ...location,\n        pathname: `/${getHumanLabelID(labelID)}${urlFragment}`\n    };\n};\n\nconst stringToPage = (string: string | undefined): number => {\n    if (string === undefined) {\n        return 0;\n    }\n    const pageNumber = parseInt(string, 10);\n    if (!isNaN(pageNumber)) {\n        return pageNumber - 1;\n    }\n    return 0;\n};\n\nconst stringToSort = (string: string | undefined): Sort => {\n    switch (string) {\n        case '-size':\n            return { sort: 'Size', desc: true };\n        case 'size':\n            return { sort: 'Size', desc: false };\n        case 'date':\n            return { sort: 'Time', desc: false };\n        default:\n            return { sort: 'Time', desc: true };\n    }\n};\n\nconst stringToInt = (string: string | undefined): number | undefined => {\n    if (string === undefined) {\n        return undefined;\n    }\n    return isNumber(string) ? parseInt(string, 10) : undefined;\n};\n\nconst sortToString = (sort: Sort): string | undefined =>\n    sort.sort === 'Time' ? (sort.desc ? undefined : 'date') : sort.desc ? '-size' : 'size';\n\nconst stringToFilter = (string: string | undefined): Filter => {\n    switch (string) {\n        case 'read':\n            return { Unread: 0 };\n        case 'unread':\n            return { Unread: 1 };\n        default:\n            return {};\n    }\n};\n\nconst filterToString = (filter: Filter): string | undefined =>\n    filter.Unread === undefined ? undefined : filter.Unread === 0 ? 'read' : 'unread';\n\nexport const keywordToString = (keyword: string): string | undefined => {\n    const trimmed = keyword.trim();\n    return trimmed ? trimmed : undefined;\n};\n\nexport const pageFromUrl = (location: Location) => stringToPage(getSearchParams(location).page);\n\nexport const sortFromUrl = (location: Location) => stringToSort(getSearchParams(location).sort);\n\nexport const filterFromUrl = (location: Location) => stringToFilter(getSearchParams(location).filter);\n\nexport const extractSearchParameters = (location: Location): SearchParameters => {\n    const { address, from, to, keyword, begin, end, attachments, wildcard } = getSearchParams(location);\n    return {\n        address,\n        from,\n        to,\n        keyword,\n        begin: stringToInt(begin),\n        end: stringToInt(end),\n        attachments: stringToInt(attachments),\n        wildcard: stringToInt(wildcard)\n    };\n};\n\nexport const setPageInUrl = (location: Location, page: number) =>\n    changeSearchParams(location, { page: page === 0 ? undefined : String(page + 1) });\n\nexport const setSortInUrl = (location: Location, sort: Sort) =>\n    changeSearchParams(location, { sort: sortToString(sort) });\n\nexport const setFilterInUrl = (location: Location, filter: Filter) =>\n    changeSearchParams(location, { filter: filterToString(filter) });\n\nexport const setKeywordInUrl = (location: Location, keyword: string) =>\n    changeSearchParams(location, { keyword: keywordToString(keyword) });\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    classnames,\n    generateUID,\n    usePopperAnchor,\n    DropdownButton,\n    Dropdown,\n    Icon,\n    Href,\n    DateInput,\n    Radio,\n    Toggle,\n    Button,\n    PrimaryButton,\n    Label,\n    Select,\n    useLabels,\n    useAddresses,\n    useContactEmails,\n    useMailSettings,\n    Loader\n} from 'react-components';\nimport { MAILBOX_LABEL_IDS, LABEL_EXCLUSIVE, SHOW_MOVED } from 'proton-shared/lib/constants';\nimport { c } from 'ttag';\nimport { getUnixTime, fromUnixTime, isBefore, isAfter } from 'date-fns';\nimport { isEmail } from 'proton-shared/lib/helpers/validators';\nimport { hasBit } from 'proton-shared/lib/helpers/bitset';\n\nimport { changeSearchParams } from '../../helpers/url';\nimport { getHumanLabelID } from '../../helpers/labels';\nimport AddressesInput from '../composer/addresses/AddressesInput';\n\nimport './AdvancedSearchDropdown.scss';\nimport { extractSearchParameters, keywordToString } from '../../helpers/mailboxUrl';\n\nconst UNDEFINED = undefined;\nconst AUTO_WILDCARD = undefined;\nconst ALL_ADDRESSES = 'all';\nconst NO_WILDCARD = 0;\nconst NO_ATTACHMENTS = 0;\nconst WITH_ATTACHMENTS = 1;\nconst { INBOX, TRASH, SPAM, ARCHIVE, ALL_MAIL, ALL_SENT, SENT, ALL_DRAFTS, DRAFTS } = MAILBOX_LABEL_IDS;\nconst DEFAULT_MODEL = {\n    from: [],\n    to: [],\n    labelID: ALL_MAIL,\n    address: ALL_ADDRESSES,\n    attachments: UNDEFINED,\n    wildcard: AUTO_WILDCARD\n};\n\nconst getRecipients = (value = '') =>\n    value\n        .split(',')\n        .filter(isEmail)\n        .map((Address) => ({ Address }));\nconst formatRecipients = (recipients = []) => recipients.map(({ Address }) => Address).join(',');\n\nconst AdvancedSearchDropdown = ({ labelID, keyword: fullInput = '', location, history }) => {\n    const [uid] = useState(generateUID('advanced-search-dropdown'));\n    const [mailSettings, loadingMailSettings] = useMailSettings();\n    const { anchorRef, isOpen, toggle, close } = usePopperAnchor();\n    const [labels, loadingLabels] = useLabels();\n    const [contactEmails, loadingContactEmails] = useContactEmails();\n    const [addresses, loadingAddresses] = useAddresses();\n    const [model, updateModel] = useState(DEFAULT_MODEL);\n\n    const handleSubmit = (event) => {\n        event.preventDefault(); // necessary to not run a basic submission\n        event.stopPropagation(); // necessary to not submit normal search from header\n\n        const { labelID, address, start, end, wildcard, from, to, attachments } = model;\n\n        history.push(\n            changeSearchParams(\n                {\n                    ...location,\n                    pathname: `/${getHumanLabelID(labelID)}`\n                },\n                {\n                    keyword: keywordToString(fullInput),\n                    address: address === ALL_ADDRESSES ? UNDEFINED : address,\n                    from: from.length ? formatRecipients(from) : UNDEFINED,\n                    to: to.length ? formatRecipients(to) : UNDEFINED,\n                    start: start ? getUnixTime(start) : UNDEFINED,\n                    end: end ? getUnixTime(end) : UNDEFINED,\n                    attachments,\n                    wildcard\n                }\n            )\n        );\n\n        close();\n    };\n\n    const handleReset = (event) => {\n        event.preventDefault();\n        close();\n    };\n\n    useEffect(() => {\n        if (isOpen) {\n            updateModel(() => {\n                if (!fullInput) {\n                    return {\n                        ...DEFAULT_MODEL,\n                        labelID\n                    };\n                }\n\n                const { address, attachments, wildcard, from, to, start, end } = extractSearchParameters(location);\n\n                return {\n                    ...DEFAULT_MODEL,\n                    labelID,\n                    address,\n                    attachments,\n                    wildcard,\n                    from: getRecipients(from),\n                    to: getRecipients(to),\n                    start: start ? fromUnixTime(start) : UNDEFINED,\n                    end: end ? fromUnixTime(end) : UNDEFINED\n                };\n            });\n        }\n    }, [isOpen]);\n\n    if (loadingLabels || loadingAddresses || loadingContactEmails || loadingMailSettings) {\n        return <Loader />;\n    }\n\n    const labelIDOptions = [\n        { value: ALL_MAIL, text: c('Mailbox').t`All` },\n        { value: INBOX, text: c('Mailbox').t`Inbox` },\n        {\n            value: hasBit(mailSettings.ShowMoved, SHOW_MOVED.DRAFTS) ? ALL_DRAFTS : DRAFTS,\n            text: c('Mailbox').t`Drafts`\n        },\n        { value: hasBit(mailSettings.ShowMoved, SHOW_MOVED.SENT) ? ALL_SENT : SENT, text: c('Mailbox').t`Sent` },\n        { value: ARCHIVE, text: c('Mailbox').t`Archive` },\n        { value: SPAM, text: c('Mailbox').t`Spam` },\n        { value: TRASH, text: c('Mailbox').t`Trash` }\n    ]\n        .concat(\n            labels\n                .filter(({ Exclusive }) => Exclusive === LABEL_EXCLUSIVE.FOLDER)\n                .map(({ ID: value, Name: text }) => ({ value, text }))\n        )\n        .concat(\n            labels\n                .filter(({ Exclusive }) => Exclusive === LABEL_EXCLUSIVE.LABEL)\n                .map(({ ID: value, Name: text }) => ({ value, text }))\n        );\n\n    const addressOptions = [{ value: ALL_ADDRESSES, text: c('Option').t`All` }].concat(\n        addresses.map(({ ID: value, Email: text }) => ({ value, text }))\n    );\n\n    return (\n        <>\n            <DropdownButton\n                className=\"searchbox-advanced-search-button\"\n                buttonRef={anchorRef}\n                isOpen={isOpen}\n                onClick={toggle}\n                hasCaret={false}\n            >\n                <Icon\n                    name=\"caret\"\n                    className={classnames(['fill-white searchbox-advanced-search-icon', isOpen && 'rotateX-180'])}\n                />\n            </DropdownButton>\n            <Dropdown\n                id={uid}\n                originalPlacement=\"bottom-right\"\n                size=\"wide\"\n                autoClose={false}\n                isOpen={isOpen}\n                anchorRef={anchorRef}\n                onClose={close}\n            >\n                <form name=\"advanced-search\" className=\"p1\" onSubmit={handleSubmit} onReset={handleReset}>\n                    <div className=\"mb1 flex flex-nowrap onmobile-flex-column\">\n                        <Label className=\"advancedSearch-label\" htmlFor=\"exact-match\">{c('Label')\n                            .t`Exact match`}</Label>\n                        <div className=\"flex-item-fluid flex flex-items-center flex-spacebetween\">\n                            <Toggle\n                                id=\"exact-match\"\n                                checked={model.wildcard === AUTO_WILDCARD}\n                                onChange={({ target }) =>\n                                    updateModel({ ...model, wildcard: target.checked ? AUTO_WILDCARD : NO_WILDCARD })\n                                }\n                            />\n                            <Href url=\"https://protonmail.com/support/knowledge-base/search/\">{c('Link')\n                                .t`Learn more`}</Href>\n                        </div>\n                    </div>\n                    <div className=\"mb1 flex flex-nowrap onmobile-flex-column\">\n                        <Label className=\"advancedSearch-label\" htmlFor=\"labelID\">{c('Label').t`Location`}</Label>\n                        <Select\n                            id=\"labelID\"\n                            value={model.labelID}\n                            options={labelIDOptions}\n                            onChange={({ target }) => updateModel({ ...model, labelID: target.value })}\n                        />\n                    </div>\n                    <div className=\"mb1 flex flex-nowrap onmobile-flex-column\">\n                        <Label className=\"advancedSearch-label\" htmlFor=\"address\">{c('Label').t`Address`}</Label>\n                        <Select\n                            id=\"address\"\n                            value={model.address}\n                            options={addressOptions}\n                            onChange={({ target }) => updateModel({ ...model, address: target.value })}\n                        />\n                    </div>\n                    <div className=\"mb1 flex flex-nowrap onmobile-flex-column\">\n                        <Label title={c('Label').t`Sender`} className=\"advancedSearch-label\" htmlFor=\"from\">{c('Label')\n                            .t`From`}</Label>\n                        <div className=\"flex-item-fluid\">\n                            <AddressesInput\n                                contacts={contactEmails}\n                                contactGroups={[]}\n                                id=\"from\"\n                                recipients={model.from}\n                                onChange={(from) => updateModel({ ...model, from })}\n                                placeholder={c('Placeholder').t`Name or email address`}\n                            />\n                        </div>\n                    </div>\n                    <div className=\"mb1 flex flex-nowrap onmobile-flex-column\">\n                        <Label title={c('Label').t`Recipient`} className=\"advancedSearch-label\" htmlFor=\"to\">{c('Label')\n                            .t`To`}</Label>\n                        <div className=\"flex-item-fluid\">\n                            <AddressesInput\n                                contacts={contactEmails}\n                                contactGroups={[]}\n                                id=\"to\"\n                                recipients={model.to}\n                                onChange={(to) => updateModel({ ...model, to })}\n                                placeholder={c('Placeholder').t`Name or email address`}\n                            />\n                        </div>\n                    </div>\n                    <div className=\"mb1 flex flex-nowrap onmobile-flex-column\">\n                        <Label className=\"advancedSearch-label\" htmlFor=\"start-date\">{c('Label').t`Between`}</Label>\n                        <div className=\"flex-item-fluid\">\n                            <DateInput\n                                placeholder={c('Placeholder').t`Start date`}\n                                id=\"start-date\"\n                                value={model.start}\n                                onChange={(start) =>\n                                    (!model.end || isBefore(start, model.end)) && updateModel({ ...model, start })\n                                }\n                            />\n                        </div>\n                    </div>\n                    <div className=\"mb1 flex flex-nowrap onmobile-flex-column\">\n                        <Label className=\"advancedSearch-label\" htmlFor=\"end-date\">{c('Label').t`And`}</Label>\n                        <div className=\"flex-item-fluid\">\n                            <DateInput\n                                placeholder={c('Placeholder').t`End date`}\n                                id=\"end-date\"\n                                value={model.end}\n                                onChange={(end) =>\n                                    (!model.start || isAfter(end, model.start)) && updateModel({ ...model, end })\n                                }\n                            />\n                        </div>\n                    </div>\n                    <div className=\"mb2 flex flex-nowrap onmobile-flex-column\">\n                        <Label className=\"advancedSearch-label\">{c('Label').t`Attachments`}</Label>\n                        <div className=\"flex-item-fluid\">\n                            <Radio\n                                onChange={() => updateModel({ ...model, attachments: UNDEFINED })}\n                                checked={model.attachments === UNDEFINED}\n                                className=\"mr1\"\n                            >{c('Attachment radio advanced search').t`All`}</Radio>\n                            <Radio\n                                onChange={() => updateModel({ ...model, attachments: WITH_ATTACHMENTS })}\n                                checked={model.attachments === WITH_ATTACHMENTS}\n                                className=\"mr1\"\n                            >{c('Attachment radio advanced search').t`Yes`}</Radio>\n                            <Radio\n                                onChange={() => updateModel({ ...model, attachments: NO_ATTACHMENTS })}\n                                checked={model.attachments === NO_ATTACHMENTS}\n                            >{c('Attachment radio advanced search').t`No`}</Radio>\n                        </div>\n                    </div>\n                    <div className=\"flex flex-spacebetween\">\n                        <Button disabled={!Object.keys(model).length} type=\"reset\">{c('Action').t`Clear`}</Button>\n                        <PrimaryButton type=\"submit\">{c('Action').t`Search`}</PrimaryButton>\n                    </div>\n                </form>\n            </Dropdown>\n        </>\n    );\n};\n\nAdvancedSearchDropdown.propTypes = {\n    labelID: PropTypes.string.isRequired,\n    keyword: PropTypes.string,\n    history: PropTypes.object.isRequired,\n    location: PropTypes.object.isRequired\n};\n\nexport default AdvancedSearchDropdown;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    MainLogo,\n    SupportDropdown,\n    Hamburger,\n    TopNavbar,\n    TopNavbarLink,\n    UpgradeButton,\n    Searchbox,\n    useUser\n} from 'react-components';\nimport { c } from 'ttag';\n\nimport AdvancedSearchDropdown from './AdvancedSearchDropdown';\nimport { extractSearchParameters } from '../../helpers/mailboxUrl';\n\nconst PrivateHeader = ({ labelID, location, history, expanded, onToggleExpand, onSearch }) => {\n    const [{ hasPaidMail }] = useUser();\n    const { keyword = '' } = extractSearchParameters(location);\n    const [value, updateValue] = useState(keyword);\n\n    return (\n        <header className=\"header flex flex-nowrap reset4print\">\n            <MainLogo url=\"/inbox\" className=\"nomobile\" />\n            <Hamburger expanded={expanded} onToggle={onToggleExpand} />\n            <Searchbox\n                delay={0}\n                placeholder={c('Placeholder').t`Search messages`}\n                onSearch={onSearch}\n                onChange={updateValue}\n                value={value}\n                advanced={\n                    <AdvancedSearchDropdown labelID={labelID} keyword={value} location={location} history={history} />\n                }\n            />\n            <TopNavbar>\n                {hasPaidMail ? null : <UpgradeButton external={true} />}\n                <TopNavbarLink to=\"/inbox\" icon=\"mailbox\" text={c('Title').t`Mailbox`} aria-current={true} />\n                <TopNavbarLink external={true} to=\"/settings\" icon=\"settings-master\" text={c('Title').t`Settings`} />\n                <SupportDropdown />\n            </TopNavbar>\n        </header>\n    );\n};\n\nPrivateHeader.propTypes = {\n    labelID: PropTypes.string.isRequired,\n    location: PropTypes.object.isRequired,\n    history: PropTypes.object.isRequired,\n    onSearch: PropTypes.func.isRequired,\n    expanded: PropTypes.bool,\n    onToggleExpand: PropTypes.func.isRequired\n};\n\nexport default PrivateHeader;\n","import React from 'react';\nimport { LabelCount } from '../../models/label';\nimport { Icon, classnames } from 'react-components';\n\nimport './RefreshRotation.scss';\n\ninterface Props {\n    labelID: string;\n    counterMap: { [labelID: string]: LabelCount | undefined };\n    currentLabelID: string;\n    refreshLabelID?: string;\n}\n\nconst LocationAside = ({ labelID, counterMap, currentLabelID, refreshLabelID }: Props) => {\n    const unread = counterMap[labelID]?.Unread;\n\n    return (\n        <>\n            {labelID === currentLabelID && (\n                <Icon\n                    className={classnames(['mr0-5', labelID === refreshLabelID && 'location-refresh-rotate'])}\n                    fill=\"light\"\n                    name=\"reload\"\n                />\n            )}\n            {unread ? <span className=\"navigation__counterItem flex-item-noshrink rounded\">{unread}</span> : null}\n        </>\n    );\n};\n\nexport default LocationAside;\n","import { VIEW_LAYOUT, VIEW_MODE, MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\n\nimport { SearchParameters } from '../models/tools';\n\ninterface MailSettings {\n    ViewLayout?: number;\n    ViewMode?: number;\n}\n\nexport const isColumnMode = ({ ViewLayout = VIEW_LAYOUT.COLUMN }: MailSettings = {}) =>\n    ViewLayout === VIEW_LAYOUT.COLUMN;\n\nexport const isConversationMode = (\n    labelID = '',\n    { ViewMode = VIEW_MODE.GROUP }: MailSettings = {},\n    searchParams: SearchParameters = {}\n) => {\n    const alwaysMessageLabels = [\n        MAILBOX_LABEL_IDS.DRAFTS,\n        MAILBOX_LABEL_IDS.ALL_DRAFTS,\n        MAILBOX_LABEL_IDS.SENT,\n        MAILBOX_LABEL_IDS.ALL_SENT\n    ];\n\n    return (\n        !alwaysMessageLabels.includes(labelID as MAILBOX_LABEL_IDS) &&\n        ViewMode === VIEW_MODE.GROUP &&\n        !Object.keys(searchParams).length\n    );\n};\n","import { formatRelative, format } from 'date-fns';\nimport { toMap } from 'proton-shared/lib/helpers/object';\n\nimport { ELEMENT_TYPES } from '../constants';\nimport { Element } from '../models/element';\nimport { Sort } from '../models/tools';\nimport { Message } from '../models/message';\nimport { isConversationMode } from './mailSettings';\nimport { LabelCount, Label } from '../models/label';\nimport { MailSettings } from '../models/utils';\nimport { MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\n\nexport interface TypeParams {\n    labelID?: string;\n    mailSettings?: any;\n}\n\nexport const getCurrentType = ({ labelID, mailSettings }: TypeParams) =>\n    isConversationMode(labelID, mailSettings) ? ELEMENT_TYPES.CONVERSATION : ELEMENT_TYPES.MESSAGE;\n\nexport const isMessage = (element: Element): boolean => typeof (element as Message).ConversationID === 'string';\nexport const isConversation = (element: Element): boolean => !isMessage(element);\n\nexport const getDate = ({ Time = 0, ContextTime = 0 }: Element = {}) => new Date((ContextTime || Time) * 1000);\n\n/**\n * Get readable time to display from message / conversation\n * @param {Integer} element.Time\n * @return {String} Jan 17, 2016\n */\nexport const getReadableTime = ({ Time = 0, ContextTime = 0 }: Element = {}) => {\n    const date = new Date((ContextTime || Time) * 1000);\n    const now = new Date();\n    return formatRelative(date, now);\n};\n\nexport const getReadableFullTime = ({ Time = 0, ContextTime = 0 }: Element = {}) => {\n    const date = new Date((ContextTime || Time) * 1000);\n    return format(date, 'Ppp');\n};\n\nexport const isUnread = (element: Element) => {\n    if ('NumUnread' in element) {\n        return element.NumUnread !== 0;\n    }\n    if ('Unread' in element) {\n        return element.Unread !== 0;\n    }\n    return false;\n};\n\nexport const getLabel = ({ Labels = [] }: Element, labelID: string) => Labels.find(({ ID = '' }) => ID === labelID);\n\nexport const getLabelIds = ({ Labels, LabelIDs }: Element) =>\n    Labels ? Labels.map(({ ID }) => ID || '') : LabelIDs || [];\n\nexport const hasLabel = (element: Element, labelID: string) => {\n    return getLabelIds(element).some((ID) => labelID === ID);\n};\n\nexport const getTime = (element: Element, labelID: string) =>\n    element.ContextTime || element.Time || (getLabel(element, labelID) || {}).ContextTime || 0;\n\nexport const getSize = ({ Size = 0 }: Element) => Size;\n\nexport const sort = (elements: Element[], sort: Sort, labelID: string) => {\n    const getValue = {\n        Time: getTime,\n        Size: getSize\n    }[sort.sort];\n    const compare = (a: Element, b: Element) => {\n        const valueA = getValue(a, labelID);\n        const valueB = getValue(b, labelID);\n        if (valueA === valueB) {\n            return (a.Order || 0) - (b.Order || 0);\n        }\n        return sort.desc ? valueB - valueA : valueA - valueB;\n    };\n    return [...elements].sort((e1, e2) => compare(e1, e2));\n};\n\nexport const getCounterMap = (\n    labels: Label[],\n    conversationCounters: LabelCount[],\n    messageCounters: LabelCount[],\n    mailSettings: MailSettings\n) => {\n    const labelIDs = [...Object.values(MAILBOX_LABEL_IDS), ...labels.map((label) => label.ID || '')];\n    const conversationCountersMap = toMap(conversationCounters, 'LabelID') as { [labelID: string]: LabelCount };\n    const messageCountersMap = toMap(messageCounters, 'LabelID') as { [labelID: string]: LabelCount };\n\n    return labelIDs.reduce((acc, labelID) => {\n        const conversationMode = isConversationMode(labelID, mailSettings);\n        const countersMap = conversationMode ? conversationCountersMap : messageCountersMap;\n        acc[labelID] = countersMap[labelID];\n        return acc;\n    }, {} as { [labelID: string]: LabelCount | undefined });\n};\n","import React, { useMemo, useState } from 'react';\nimport { c } from 'ttag';\nimport { Location } from 'history';\nimport {\n    NavMenu,\n    MainLogo,\n    Loader,\n    useMailSettings,\n    useLabels,\n    useConversationCounts,\n    useMessageCounts,\n    PrimaryButton,\n    useEventManager\n} from 'react-components';\nimport { SHOW_MOVED, LABEL_EXCLUSIVE, MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\nimport { redirectTo } from 'proton-shared/lib/helpers/browser';\n\nimport LocationAside from './LocationAside';\nimport { LABEL_IDS_TO_HUMAN, MESSAGE_ACTIONS } from '../../constants';\nimport { Label } from '../../models/label';\nimport { OnCompose } from '../../containers/ComposerContainer';\nimport { getCounterMap } from '../../helpers/elements';\n\ninterface Props {\n    labelID: string;\n    expanded?: boolean;\n    location: Location;\n    onCompose: OnCompose;\n}\n\nconst PrivateSidebar = ({ labelID: currentLabelID, expanded = false, location, onCompose }: Props) => {\n    const [refresh, setRefresh] = useState<string>();\n    const [conversationCounts, loadingConversationCounts] = useConversationCounts();\n    const [messageCounts, loadingMessageCounts] = useMessageCounts();\n    const [mailSettings, loadingMailSettings] = useMailSettings();\n    const [labels, loadingLabels]: [Label[], boolean] = useLabels();\n    const { call } = useEventManager();\n    const { ShowMoved } = mailSettings || {};\n\n    const counterMap = useMemo(() => {\n        if (!mailSettings || !labels || !conversationCounts || !messageCounts) {\n            return {};\n        }\n\n        return getCounterMap(labels, conversationCounts, messageCounts, mailSettings);\n    }, [mailSettings, labels, conversationCounts, messageCounts]);\n\n    if (loadingMailSettings || loadingLabels || loadingConversationCounts || loadingMessageCounts) {\n        return <Loader />;\n    }\n\n    const getItemParams = (labelID: MAILBOX_LABEL_IDS | string) => {\n        const humanID = LABEL_IDS_TO_HUMAN[labelID as MAILBOX_LABEL_IDS]\n            ? LABEL_IDS_TO_HUMAN[labelID as MAILBOX_LABEL_IDS]\n            : labelID;\n        const link = `/${humanID}`;\n        return {\n            type: 'link',\n            link,\n            ariaCurrent: labelID === currentLabelID ? 'page' : undefined,\n            aside: (\n                <LocationAside\n                    labelID={labelID}\n                    counterMap={counterMap}\n                    currentLabelID={currentLabelID}\n                    refreshLabelID={refresh}\n                />\n            ),\n            onClick: async () => {\n                if (link === location.pathname) {\n                    setRefresh(labelID);\n                    await call();\n                    setRefresh(undefined);\n                }\n            }\n        };\n    };\n\n    const list = [\n        {\n            icon: 'inbox',\n            text: c('Link').t`Inbox`,\n            ...getItemParams(MAILBOX_LABEL_IDS.INBOX)\n        },\n        {\n            icon: 'drafts',\n            text: c('Link').t`Drafts`,\n            ...getItemParams(ShowMoved & SHOW_MOVED.DRAFTS ? MAILBOX_LABEL_IDS.ALL_DRAFTS : MAILBOX_LABEL_IDS.DRAFTS)\n        },\n        {\n            icon: 'sent',\n            text: c('Link').t`Sent`,\n            ...getItemParams(ShowMoved & SHOW_MOVED.SENT ? MAILBOX_LABEL_IDS.ALL_SENT : MAILBOX_LABEL_IDS.SENT)\n        },\n        {\n            icon: 'star',\n            text: c('Link').t`Starred`,\n            ...getItemParams(MAILBOX_LABEL_IDS.STARRED)\n        },\n        {\n            icon: 'archive',\n            text: c('Link').t`Archive`,\n            ...getItemParams(MAILBOX_LABEL_IDS.STARRED)\n        },\n        {\n            icon: 'spam',\n            text: c('Link').t`Spam`,\n            ...getItemParams(MAILBOX_LABEL_IDS.SPAM)\n        },\n        {\n            icon: 'trash',\n            text: c('Link').t`Trash`,\n            ...getItemParams(MAILBOX_LABEL_IDS.TRASH)\n        },\n        {\n            icon: 'all-emails',\n            text: c('Link').t`All mail`,\n            ...getItemParams(MAILBOX_LABEL_IDS.ALL_MAIL)\n        },\n        {\n            icon: 'folder-label',\n            text: c('Link').t`Folders/labels`,\n            className: 'alignleft',\n            type: 'button',\n            onClick() {\n                redirectTo('/settings/labels');\n            }\n        },\n        ...labels.map(({ ID = '', Name, Exclusive, Color }) => ({\n            icon: Exclusive === LABEL_EXCLUSIVE.LABEL ? 'label' : 'folder',\n            text: Name,\n            color: Color,\n            ...getItemParams(ID)\n        }))\n    ];\n\n    const handleCompose = () => {\n        onCompose({ action: MESSAGE_ACTIONS.NEW });\n    };\n\n    return (\n        <div className=\"sidebar flex flex-column noprint\" data-expanded={expanded}>\n            <div className=\"nodesktop notablet\">\n                <MainLogo url=\"/inbox\" />\n            </div>\n            <div className=\"pl1 pr1 mb1\">\n                <PrimaryButton className=\"w100 bold\" onClick={handleCompose}>{c('Action').t`Compose`}</PrimaryButton>\n            </div>\n            <nav className=\"navigation mw100 flex-item-fluid scroll-if-needed\">\n                <NavMenu list={list} className=\"mt0\" />\n            </nav>\n        </div>\n    );\n};\n\nexport default PrivateSidebar;\n","import React, { useRef, useState, useEffect, ReactNode } from 'react';\nimport { c } from 'ttag';\nimport { AppsSidebar, StorageSpaceStatus, MainAreaContext, Href } from 'react-components';\nimport { MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\n\nimport PrivateHeader from '../header/PrivateHeader';\nimport PrivateSidebar from '../sidebar/PrivateSidebar';\nimport { Location, History } from 'history';\nimport { OnCompose } from '../../containers/ComposerContainer';\nimport { getHumanLabelID } from '../../helpers/labels';\nimport { setKeywordInUrl } from '../../helpers/mailboxUrl';\n\ninterface Props {\n    children: ReactNode;\n    location: Location;\n    history: History;\n    labelID: string;\n    onCompose: OnCompose;\n}\n\nconst PrivateLayout = ({ children, location, history, labelID, onCompose }: Props) => {\n    const mainAreaRef = useRef<HTMLDivElement>(null);\n    const [expanded, setExpand] = useState(false);\n\n    const handleSearch = (keyword = '', labelID = MAILBOX_LABEL_IDS.ALL_MAIL) => {\n        history.push(setKeywordInUrl({ ...location, pathname: `/${getHumanLabelID(labelID)}` }, keyword));\n    };\n\n    useEffect(() => {\n        setExpand(false);\n    }, [location.pathname]);\n\n    return (\n        <div className=\"flex flex-nowrap no-scroll\">\n            <AppsSidebar\n                items={[\n                    <StorageSpaceStatus\n                        key=\"storage\"\n                        upgradeButton={\n                            <Href\n                                url=\"/settings/subscription\"\n                                target=\"_self\"\n                                className=\"pm-button pm-button--primary pm-button--small\"\n                            >\n                                {c('Action').t`Upgrade`}\n                            </Href>\n                        }\n                    ></StorageSpaceStatus>\n                ]}\n            />\n            <div className=\"content flex-item-fluid reset4print\">\n                <PrivateHeader\n                    labelID={labelID}\n                    location={location}\n                    history={history}\n                    expanded={expanded}\n                    onToggleExpand={() => setExpand(!expanded)}\n                    onSearch={handleSearch}\n                />\n                <div className=\"flex flex-nowrap\">\n                    <PrivateSidebar labelID={labelID} expanded={expanded} location={location} onCompose={onCompose} />\n                    <div className=\"main flex-item-fluid scroll-smooth-touch\" ref={mainAreaRef}>\n                        <div className=\"flex-item-fluid\">\n                            <MainAreaContext.Provider value={mainAreaRef}>{children}</MainAreaContext.Provider>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default PrivateLayout;\n","import { Page } from '../models/tools';\n\nexport const pageCount = (page: Page) => Math.ceil(page.total / page.size);\n\nexport const expectedPageLength = (page: Page) => {\n    if (page.total === 0) {\n        return 0;\n    }\n    if (page.total % page.size === 0) {\n        return page.size;\n    }\n    if (pageCount(page) - 1 === page.page) {\n        return page.total % page.size;\n    }\n    return page.size;\n};\n","import { useState, useEffect, useMemo } from 'react';\nimport { useApi, useEventManager } from 'react-components';\nimport { queryConversations, getConversation } from 'proton-shared/lib/api/conversations';\nimport { queryMessageMetadata, getMessage } from 'proton-shared/lib/api/messages';\nimport { EVENT_ACTIONS } from 'proton-shared/lib/constants';\nimport { toMap } from 'proton-shared/lib/helpers/object';\n\nimport { Conversation } from '../models/conversation';\nimport { sort as sortElements, hasLabel } from '../helpers/elements';\nimport { Element } from '../models/element';\nimport { Page, Filter, Sort, SearchParameters } from '../models/tools';\nimport { expectedPageLength } from '../helpers/paging';\nimport { ElementEvent, Event, ElementCountEvent, ConversationEvent, MessageEvent } from '../models/event';\n\ninterface Options {\n    conversationMode: boolean;\n    labelID: string;\n    page: Page;\n    sort: Sort;\n    filter: Filter;\n    search: SearchParameters;\n}\n\ninterface CacheParams {\n    labelID: string;\n    sort: Sort;\n    filter: Filter;\n    address?: string;\n    from?: string;\n    to?: string;\n    keyword?: string;\n    begin?: number;\n    end?: number;\n    attachments?: number;\n    wildcard?: number;\n}\n\ninterface Cache {\n    params: CacheParams;\n    page: Page;\n    pages: number[];\n    elements: { [ID: string]: Element };\n}\n\nconst emptyCache = (page: Page, params: CacheParams): Cache => ({ params, page, elements: {}, pages: [] });\n\nexport const useElements = ({\n    conversationMode,\n    labelID,\n    search,\n    page,\n    sort,\n    filter\n}: Options): [string, Conversation[], boolean, number] => {\n    const api = useApi();\n    const { subscribe } = useEventManager();\n    const [loading, setLoading] = useState(false);\n    const [localCache, setLocalCache] = useState<Cache>(\n        emptyCache(page, {\n            labelID,\n            sort,\n            filter,\n            ...search\n        })\n    );\n\n    // Compute the conversations list from the cache\n    const elements = useMemo(() => {\n        // Getting all params from the cache and not from scoped params\n        // To prevent any desynchronization between cache and the output of the memo\n        const {\n            params: { labelID, sort },\n            page\n        } = localCache;\n        const minPage = localCache.pages.reduce((acc, page) => (page < acc ? page : acc), localCache.pages[0]);\n        const startIndex = (page.page - minPage) * page.size;\n        const endIndex = startIndex + page.size;\n        const elementsArray = Object.values(localCache.elements);\n        const filtered = elementsArray.filter((element) => hasLabel(element, labelID));\n        const sorted = sortElements(filtered, sort, labelID);\n        return sorted.slice(startIndex, endIndex);\n    }, [localCache]);\n\n    const total = useMemo(() => localCache.page.total, [localCache.page.total]);\n\n    const paramsChanged = () =>\n        labelID !== localCache.params.labelID ||\n        sort !== localCache.params.sort ||\n        filter !== localCache.params.filter ||\n        search.address !== localCache.params.address ||\n        search.from !== localCache.params.from ||\n        search.to !== localCache.params.to ||\n        search.keyword !== localCache.params.keyword ||\n        search.begin !== localCache.params.begin ||\n        search.end !== localCache.params.end ||\n        search.attachments !== localCache.params.attachments ||\n        search.wildcard !== localCache.params.wildcard;\n\n    const pageCached = () => localCache.pages.includes(page.page);\n\n    const pageIsConsecutive = () =>\n        localCache.pages.some((p) => p === page.page || p === page.page - 1 || p === page.page + 1);\n\n    const isExpectedLength = () => elements.length === expectedPageLength({ ...page, total });\n\n    const shouldResetCache = () => !loading && (paramsChanged() || !pageIsConsecutive());\n\n    const shouldSendRequest = () => !loading && (shouldResetCache() || !pageCached() || !isExpectedLength());\n\n    const queryElement = async (elementID: string): Promise<Element> => {\n        const query = conversationMode ? getConversation : getMessage;\n        const result = await api(query(elementID));\n        return conversationMode ? result.Conversation : result.Message;\n    };\n\n    const queryElements = async (): Promise<{ Total: number; Elements: Element[] }> => {\n        const query = conversationMode ? queryConversations : queryMessageMetadata;\n        const result = await api(\n            query({\n                Page: page.page,\n                PageSize: page.size,\n                Limit: page.limit,\n                LabelID: labelID,\n                Sort: sort.sort,\n                Desc: sort.desc ? 1 : 0,\n                Begin: search.begin,\n                End: search.end,\n                // BeginID,\n                // EndID,\n                Keyword: search.keyword,\n                To: search.to,\n                From: search.from,\n                // Subject,\n                Attachments: search.attachments,\n                Unread: filter.Unread,\n                AddressID: search.address,\n                // ID,\n                AutoWildcard: search.wildcard\n            } as any)\n        );\n        return {\n            Total: result.Total,\n            Elements: conversationMode ? result.Conversations : result.Messages\n        };\n    };\n\n    const resetCache = () =>\n        setLocalCache(\n            emptyCache(page, {\n                labelID,\n                sort,\n                filter,\n                ...search\n            })\n        );\n\n    const load = async () => {\n        setLoading(true);\n        try {\n            const { Total, Elements } = await queryElements();\n            setLocalCache(\n                (localCache: Cache): Cache => {\n                    return {\n                        ...localCache,\n                        page: {\n                            ...localCache.page,\n                            page: page.page,\n                            total: Total\n                        },\n                        pages: [...localCache.pages, page.page],\n                        elements: {\n                            ...localCache.elements,\n                            ...(toMap(Elements, 'ID') as { [ID: string]: Element })\n                        }\n                    };\n                }\n            );\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    // Main effect watching all inputs and responsible to trigger actions on the cache\n    useEffect(() => {\n        shouldResetCache() && resetCache();\n        shouldSendRequest() && load();\n    }, [\n        labelID,\n        page,\n        sort,\n        filter,\n        search.address,\n        search.from,\n        search.to,\n        search.keyword,\n        search.begin,\n        search.end,\n        search.attachments,\n        search.wildcard\n    ]);\n\n    // Listen to event manager and update de cache\n    useEffect(\n        () => {\n            return subscribe(\n                async ({ Conversations = [], Messages = [], ConversationCounts = [], MessageCounts = [] }: Event) => {\n                    const Elements: ElementEvent[] = conversationMode ? Conversations : Messages;\n                    const Counts: ElementCountEvent[] = conversationMode ? ConversationCounts : MessageCounts;\n\n                    const count = Counts.find((count) => count.LabelID === labelID);\n\n                    const { toDelete, toUpdate, toCreate } = Elements.reduce(\n                        (acc, event) => {\n                            const { ID, Action } = event;\n                            const Element = conversationMode\n                                ? (event as ConversationEvent).Conversation\n                                : (event as MessageEvent).Message;\n                            switch (Action) {\n                                case EVENT_ACTIONS.DELETE:\n                                    acc.toDelete.push(ID);\n                                    break;\n                                case EVENT_ACTIONS.UPDATE_DRAFT:\n                                case EVENT_ACTIONS.UPDATE_FLAGS:\n                                    acc.toUpdate.push({ ID, ...Element });\n                                    break;\n                                case EVENT_ACTIONS.CREATE:\n                                    acc.toCreate.push(Element);\n                                    break;\n                            }\n                            return acc;\n                        },\n                        { toDelete: [] as string[], toUpdate: [] as Element[], toCreate: [] as Element[] }\n                    );\n\n                    const toUpdateCompleted = await Promise.all(\n                        toUpdate.map(async (element) => {\n                            const elementID = element.ID || '';\n                            const existingElement = localCache.elements[elementID];\n\n                            return existingElement ? { ...existingElement, ...element } : queryElement(elementID);\n                        })\n                    );\n\n                    setLocalCache((localCache) => {\n                        const newReplacements: { [ID: string]: Element } = {};\n\n                        [...toCreate, ...toUpdateCompleted].forEach((element) => {\n                            newReplacements[element.ID || ''] = element;\n                        });\n                        const newElements = {\n                            ...localCache.elements,\n                            ...newReplacements\n                        };\n                        toDelete.forEach((elementID) => {\n                            delete newElements[elementID];\n                        });\n\n                        return {\n                            ...localCache,\n                            elements: newElements,\n                            page: {\n                                ...localCache.page,\n                                total: count ? count.Total : localCache.page.total\n                            }\n                        };\n                    });\n                }\n            );\n        },\n        // Having the cache in dependency will subscribe / unsubscribe to the eventmanager many times\n        // But it's mandatory for the function to have the reference of the current localCache\n        [localCache]\n    );\n\n    return [localCache.params.labelID, elements, loading, localCache.page.total];\n};\n","import React from 'react';\n\nconst ToolbarSeparator = () => <span className=\"toolbar-separator\" />;\n\nexport default ToolbarSeparator;\n","import React, { ReactNode } from 'react';\nimport { classnames } from 'react-components';\n\ninterface Props {\n    disabled?: boolean;\n    loading?: boolean;\n    children: ReactNode;\n    className?: string;\n    title?: string;\n    [rest: string]: any;\n}\n\nconst ToolbarButton = ({ children, loading = false, disabled = false, className = '', ...rest }: Props) => {\n    return (\n        <button\n            type=\"button\"\n            disabled={disabled || loading}\n            className={classnames(['toolbar-button', className])}\n            {...rest}\n        >\n            {children}\n        </button>\n    );\n};\n\nexport default ToolbarButton;\n","import React from 'react';\nimport { MESSAGE_BUTTONS } from 'proton-shared/lib/constants';\nimport { Icon, useApi, useEventManager, useLoading } from 'react-components';\nimport { markMessageAsRead, markMessageAsUnread } from 'proton-shared/lib/api/messages';\nimport { markConversationsAsRead, markConversationsAsUnread } from 'proton-shared/lib/api/conversations';\nimport { c } from 'ttag';\n\nimport ToolbarButton from './ToolbarButton';\nimport { getCurrentType } from '../../helpers/elements';\nimport { ELEMENT_TYPES } from '../../constants';\n\nconst UNREAD = 0;\nconst READ = 1;\n\ninterface Props {\n    mailSettings: any;\n    selectedIDs: string[];\n    labelID: string;\n}\n\nconst ReadUnreadButtons = ({ mailSettings, labelID, selectedIDs = [] }: Props) => {\n    const api = useApi();\n    const { call } = useEventManager();\n    const { MessageButtons = MESSAGE_BUTTONS.READ_UNREAD } = mailSettings;\n    const type = getCurrentType({ mailSettings, labelID });\n    const [loading, withLoading] = useLoading();\n\n    const markAs = async (status = UNREAD) => {\n        const isUnread = status === UNREAD;\n        const action =\n            type === ELEMENT_TYPES.CONVERSATION\n                ? isUnread\n                    ? markConversationsAsUnread\n                    : markConversationsAsRead\n                : isUnread\n                ? markMessageAsUnread\n                : markMessageAsRead;\n        await api(action(selectedIDs));\n        await call();\n    };\n\n    const buttons = [\n        <ToolbarButton\n            key=\"read\"\n            title={c('Action').t`Mark as read`}\n            loading={loading}\n            disabled={!selectedIDs.length}\n            onClick={() => withLoading(markAs(READ))}\n        >\n            <Icon className=\"toolbar-icon mauto\" name=\"read\" />\n        </ToolbarButton>,\n        <ToolbarButton\n            key=\"unread\"\n            title={c('Action').t`Mark as unread`}\n            loading={loading}\n            disabled={!selectedIDs.length}\n            onClick={() => withLoading(markAs(UNREAD))}\n        >\n            <Icon className=\"toolbar-icon mauto\" name=\"unread\" />\n        </ToolbarButton>\n    ];\n\n    if (MessageButtons === MESSAGE_BUTTONS.UNREAD_READ) {\n        buttons.reverse();\n    }\n\n    // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/20356\n    return <>{buttons}</>;\n};\n\nexport default ReadUnreadButtons;\n","import React, { ReactNode, useState } from 'react';\nimport { classnames, usePopperAnchor, DropdownButton, Dropdown, generateUID } from 'react-components';\n\ninterface Props {\n    autoClose?: boolean;\n    title?: string;\n    className?: string;\n    content?: ReactNode;\n    children: ({ onClose }: { onClose: () => void }) => ReactNode;\n    disabled?: boolean;\n    size?: string;\n    [rest: string]: any;\n}\n\nconst ToolbarDropdown = ({\n    title,\n    content,\n    className,\n    children,\n    autoClose = true,\n    disabled = false,\n    size = 'normal',\n    ...rest\n}: Props) => {\n    const [uid] = useState(generateUID('dropdown'));\n\n    const { anchorRef, isOpen, toggle, close } = usePopperAnchor();\n\n    return (\n        <>\n            <DropdownButton\n                title={title}\n                buttonRef={anchorRef}\n                isOpen={isOpen}\n                onClick={toggle}\n                hasCaret={true}\n                disabled={disabled}\n                caretClassName=\"toolbar-icon\"\n                className={classnames(['flex-item-noshrink toolbar-button toolbar-button--dropdown', className])}\n                {...rest}\n            >\n                {content}\n            </DropdownButton>\n            <Dropdown\n                id={uid}\n                size={size}\n                autoClose={autoClose}\n                isOpen={isOpen}\n                anchorRef={anchorRef}\n                onClose={close}\n                className=\"toolbar-dropdown\"\n            >\n                {children({ onClose: close })}\n            </Dropdown>\n        </>\n    );\n};\n\nexport default ToolbarDropdown;\n","import React from 'react';\nimport { Icon, DropdownMenu, DropdownMenuButton, useApi, useEventManager, useLoading } from 'react-components';\nimport { VIEW_LAYOUT } from 'proton-shared/lib/constants';\nimport { updateViewLayout } from 'proton-shared/lib/api/mailSettings';\nimport { c } from 'ttag';\n\nimport ToolbarDropdown from './ToolbarDropdown';\n\ninterface Props {\n    mailSettings: any;\n}\n\nconst LayoutDropdown = ({ mailSettings = {} }: Props) => {\n    const { ViewLayout = VIEW_LAYOUT.COLUMN } = mailSettings;\n\n    const api = useApi();\n    const { call } = useEventManager();\n    const [loading, withLoading] = useLoading();\n    const currentLayoutIcon = ViewLayout === VIEW_LAYOUT.COLUMN ? 'layout-columns' : 'layout-rows';\n\n    const updateLayout = async (viewLayout: number) => {\n        await api(updateViewLayout(viewLayout));\n        await call();\n    };\n\n    return (\n        <ToolbarDropdown\n            title={c('Action').t`Change layout`}\n            content={<Icon className=\"toolbar-icon\" name={currentLayoutIcon} />}\n        >\n            {() => (\n                <DropdownMenu>\n                    <DropdownMenuButton\n                        disabled={ViewLayout === VIEW_LAYOUT.COLUMN}\n                        loading={loading}\n                        className=\"alignleft\"\n                        onClick={() => withLoading(updateLayout(VIEW_LAYOUT.COLUMN))}\n                    >\n                        <Icon name=\"layout-columns\" className=\"mr0-5\" />\n                        {c('Action').t`Column layout`}\n                    </DropdownMenuButton>\n                    <DropdownMenuButton\n                        disabled={ViewLayout === VIEW_LAYOUT.ROW}\n                        loading={loading}\n                        className=\"alignleft\"\n                        onClick={() => withLoading(updateLayout(VIEW_LAYOUT.ROW))}\n                    >\n                        <Icon name=\"layout-rows\" className=\"mr0-5\" />\n                        {c('Action').t`Row layout`}\n                    </DropdownMenuButton>\n                </DropdownMenu>\n            )}\n        </ToolbarDropdown>\n    );\n};\n\nexport default LayoutDropdown;\n","import React from 'react';\nimport { Icon, useLoading, useNotifications, useEventManager, useApi } from 'react-components';\nimport { MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\nimport { labelMessages } from 'proton-shared/lib/api/messages';\nimport { labelConversations } from 'proton-shared/lib/api/conversations';\nimport { c } from 'ttag';\n\nimport ToolbarButton from './ToolbarButton';\nimport { getCurrentType } from '../../helpers/elements';\nimport { ELEMENT_TYPES } from '../../constants';\n\nconst { TRASH, SPAM, DRAFTS, ARCHIVE, SENT, INBOX, ALL_DRAFTS, ALL_SENT } = MAILBOX_LABEL_IDS;\n\ninterface Props {\n    labelID: string;\n    mailSettings: any;\n    selectedIDs: string[];\n}\n\nconst MoveButtons = ({ labelID = '', mailSettings = {}, selectedIDs = [] }: Props) => {\n    const { createNotification } = useNotifications();\n    const { call } = useEventManager();\n    const api = useApi();\n    const [loading, withLoading] = useLoading();\n    const type = getCurrentType({ mailSettings, labelID });\n\n    const handleMove = async (LabelID: string) => {\n        const action = type === ELEMENT_TYPES.CONVERSATION ? labelConversations : labelMessages;\n        await api(action({ LabelID, IDs: selectedIDs }));\n        await call();\n        createNotification({ text: c('Success').t`Elements moved` });\n    };\n\n    const displayTrash = ![DRAFTS, ALL_DRAFTS, TRASH].includes(labelID as MAILBOX_LABEL_IDS);\n    const displayInbox = ![SENT, ALL_SENT, DRAFTS, ALL_DRAFTS].includes(labelID as MAILBOX_LABEL_IDS);\n    const displayArchive = ![DRAFTS, ALL_DRAFTS, ARCHIVE].includes(labelID as MAILBOX_LABEL_IDS);\n    const displaySpam = ![SENT, ALL_SENT, SPAM].includes(labelID as MAILBOX_LABEL_IDS);\n\n    return (\n        <>\n            {displayTrash ? (\n                <ToolbarButton\n                    loading={loading}\n                    title={c('Action').t`Move to trash`}\n                    onClick={() => withLoading(handleMove(TRASH))}\n                >\n                    <Icon className=\"toolbar-icon mauto\" name=\"trash\" />\n                </ToolbarButton>\n            ) : null}\n            {displayInbox ? (\n                <ToolbarButton\n                    loading={loading}\n                    title={c('Action').t`Move to inbox`}\n                    onClick={() => withLoading(handleMove(INBOX))}\n                >\n                    <Icon className=\"toolbar-icon mauto\" name=\"inbox\" />\n                </ToolbarButton>\n            ) : null}\n            {displayArchive ? (\n                <ToolbarButton\n                    loading={loading}\n                    title={c('Action').t`Move to archive`}\n                    onClick={() => withLoading(handleMove(ARCHIVE))}\n                >\n                    <Icon className=\"toolbar-icon mauto\" name=\"archive\" />\n                </ToolbarButton>\n            ) : null}\n            {displaySpam ? (\n                <ToolbarButton\n                    loading={loading}\n                    title={c('Action').t`Move to spam`}\n                    onClick={() => withLoading(handleMove(SPAM))}\n                >\n                    <Icon className=\"toolbar-icon mauto\" name=\"spam\" />\n                </ToolbarButton>\n            ) : null}\n        </>\n    );\n};\n\nexport default MoveButtons;\n","import React from 'react';\nimport {\n    Icon,\n    useLoading,\n    useNotifications,\n    useEventManager,\n    useApi,\n    ConfirmModal,\n    ErrorButton,\n    useModals,\n    Alert\n} from 'react-components';\nimport { MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\nimport { deleteMessages, emptyLabel } from 'proton-shared/lib/api/messages';\nimport { deleteConversations } from 'proton-shared/lib/api/conversations';\nimport { c, msgid } from 'ttag';\n\nimport ToolbarButton from './ToolbarButton';\nimport { getCurrentType } from '../../helpers/elements';\nimport { ELEMENT_TYPES } from '../../constants';\n\nconst { TRASH, SPAM, DRAFTS, ALL_DRAFTS, ALL_MAIL, INBOX, SENT, ALL_SENT, ARCHIVE } = MAILBOX_LABEL_IDS;\n\ninterface Props {\n    labelID: string;\n    mailSettings: any;\n    selectedIDs: string[];\n}\n\nconst DeleteButton = ({ labelID = '', mailSettings = {}, selectedIDs = [] }: Props) => {\n    const { createNotification } = useNotifications();\n    const { createModal } = useModals();\n    const { call } = useEventManager();\n    const api = useApi();\n    const [loading, withLoading] = useLoading();\n    const displayDelete = [TRASH, SPAM, DRAFTS, ALL_DRAFTS, SENT, ALL_SENT].includes(labelID as MAILBOX_LABEL_IDS);\n    const displayEmpty = ![INBOX, SENT, ALL_SENT, ARCHIVE, ALL_MAIL].includes(labelID as MAILBOX_LABEL_IDS);\n    const type = getCurrentType({ mailSettings, labelID });\n\n    const handleDelete = async () => {\n        await new Promise((resolve, reject) => {\n            createModal(\n                <ConfirmModal\n                    title={c('Title').ngettext(msgid`Delete email`, `Delete emails`, selectedIDs.length)}\n                    confirm={(<ErrorButton type=\"submit\" icon={null}>{c('Action').t`Delete`}</ErrorButton>) as any}\n                    onConfirm={resolve}\n                    onClose={reject}\n                >\n                    <Alert type=\"warning\">\n                        {c('Info').ngettext(\n                            msgid`This action will permanently delete the selected email. Are you sure you want to delete this email?`,\n                            `This action will permanently delete the selected emails. Are you sure you want to delete these emails?`,\n                            selectedIDs.length\n                        )}\n                    </Alert>\n                </ConfirmModal>\n            );\n        });\n        const action = type === ELEMENT_TYPES.CONVERSATION ? deleteConversations : deleteMessages;\n        await api(action(selectedIDs));\n        await call();\n        createNotification({ text: c('Success').t`Elements deleted` });\n    };\n\n    const handleEmpty = async () => {\n        await new Promise((resolve, reject) => {\n            createModal(\n                <ConfirmModal\n                    title={c('Title').t`Empty folder`}\n                    confirm={(<ErrorButton type=\"submit\" icon={null}>{c('Action').t`Empty`}</ErrorButton>) as any}\n                    onConfirm={resolve}\n                    onClose={reject}\n                >\n                    <Alert type=\"warning\">{c('Info')\n                        .t`This action will permanently delete your emails. Are you sure you want to empty this folder?`}</Alert>\n                </ConfirmModal>\n            );\n        });\n        c;\n        await api(emptyLabel({ LabelID: labelID, AddressID: undefined }));\n        await call();\n        createNotification({ text: c('Success').t`Folder cleared` });\n    };\n\n    return (\n        <>\n            {displayDelete ? (\n                <ToolbarButton\n                    loading={loading}\n                    title={c('Action').t`Delete`}\n                    onClick={() => withLoading(handleDelete())}\n                >\n                    <Icon className=\"toolbar-icon mauto\" name=\"delete\" />\n                </ToolbarButton>\n            ) : null}\n            {displayEmpty ? (\n                <ToolbarButton\n                    loading={loading}\n                    title={c('Action').t`Empty folder`}\n                    onClick={() => withLoading(handleEmpty())}\n                >\n                    <Icon className=\"toolbar-icon mauto\" name=\"empty-folder\" />\n                </ToolbarButton>\n            ) : null}\n        </>\n    );\n};\n\nexport default DeleteButton;\n","import React from 'react';\nimport { DropdownMenu, DropdownMenuButton, Icon } from 'react-components';\nimport { c } from 'ttag';\n\nimport ToolbarDropdown from './ToolbarDropdown';\nimport { Sort } from '../../models/tools';\n\nconst ASC = 0;\nconst DESC = 1;\nconst TIME = 'Time';\nconst SIZE = 'Size';\n\nconst ICONS = {\n    [SIZE]: {\n        [ASC]: 'sort-small-large',\n        [DESC]: 'sort-large-small'\n    },\n    [TIME]: {\n        [ASC]: 'sort-old-new',\n        [DESC]: 'sort-new-old'\n    }\n};\n\ninterface Props {\n    loading?: boolean;\n    sort: Sort;\n    onSort: (sort: Sort) => void;\n}\n\nconst SortDropdown = ({ loading, sort: { sort, desc }, onSort }: Props) => {\n    return (\n        <ToolbarDropdown content={<Icon className=\"toolbar-icon\" name={ICONS[sort][desc ? DESC : ASC]} />}>\n            {() => (\n                <DropdownMenu>\n                    <DropdownMenuButton\n                        disabled={sort === SIZE && !desc}\n                        className=\"alignleft\"\n                        loading={loading}\n                        onClick={() => onSort({ sort: SIZE, desc: false })}\n                    >\n                        <Icon name={ICONS[SIZE][ASC]} className=\"mr0-5\" />\n                        {c('Action').t`Size: small to large`}\n                    </DropdownMenuButton>\n                    <DropdownMenuButton\n                        disabled={sort === SIZE && desc}\n                        className=\"alignleft\"\n                        loading={loading}\n                        onClick={() => onSort({ sort: SIZE, desc: true })}\n                    >\n                        <Icon name={ICONS[SIZE][DESC]} className=\"mr0-5\" />\n                        {c('Action').t`Size: large to small`}\n                    </DropdownMenuButton>\n                    <DropdownMenuButton\n                        disabled={sort === TIME && desc}\n                        className=\"alignleft\"\n                        loading={loading}\n                        onClick={() => onSort({ sort: TIME, desc: true })}\n                    >\n                        <Icon name={ICONS[TIME][DESC]} className=\"mr0-5\" />\n                        {c('Action').t`Date: new to old`}\n                    </DropdownMenuButton>\n                    <DropdownMenuButton\n                        disabled={sort === TIME && !desc}\n                        className=\"alignleft\"\n                        loading={loading}\n                        onClick={() => onSort({ sort: TIME, desc: false })}\n                    >\n                        <Icon name={ICONS[TIME][ASC]} className=\"mr0-5\" />\n                        {c('Action').t`Date: old to new`}\n                    </DropdownMenuButton>\n                </DropdownMenu>\n            )}\n        </ToolbarDropdown>\n    );\n};\n\nexport default SortDropdown;\n","import React from 'react';\nimport { DropdownMenu, DropdownMenuButton, Icon } from 'react-components';\nimport { c } from 'ttag';\n\nimport ToolbarDropdown from './ToolbarDropdown';\nimport { Filter } from '../../models/tools';\n\ninterface Props {\n    loading?: boolean;\n    filter: Filter;\n    onFilter: (filter: Filter) => void;\n}\n\nconst FilterDropdown = ({ loading, filter = {}, onFilter }: Props) => {\n    return (\n        <ToolbarDropdown content={<Icon className=\"toolbar-icon\" name=\"bullet-points\" />}>\n            {() => (\n                <DropdownMenu>\n                    <DropdownMenuButton\n                        disabled={Object.values(filter).length === 0}\n                        className=\"alignleft\"\n                        loading={loading}\n                        onClick={() => onFilter({})}\n                    >\n                        <Icon name=\"bullet-points\" className=\"mr0-5\" />\n                        {c('Action').t`Show all`}\n                    </DropdownMenuButton>\n                    <DropdownMenuButton\n                        disabled={filter.Unread === 1}\n                        className=\"alignleft\"\n                        loading={loading}\n                        onClick={() => onFilter({ Unread: 1 })}\n                    >\n                        <Icon name=\"unread\" className=\"mr0-5\" />\n                        {c('Action').t`Show unread`}\n                    </DropdownMenuButton>\n                    <DropdownMenuButton\n                        disabled={filter.Unread === 0}\n                        className=\"alignleft\"\n                        loading={loading}\n                        onClick={() => onFilter({ Unread: 0 })}\n                    >\n                        <Icon name=\"read\" className=\"mr0-5\" />\n                        {c('Action').t`Show read`}\n                    </DropdownMenuButton>\n                </DropdownMenu>\n            )}\n        </ToolbarDropdown>\n    );\n};\n\nexport default FilterDropdown;\n","import React from 'react';\nimport { Checkbox, DropdownMenu, DropdownMenuButton, Icon } from 'react-components';\nimport { c } from 'ttag';\n\nimport ToolbarDropdown from './ToolbarDropdown';\n\ninterface Props {\n    loading?: boolean;\n    disabled?: boolean;\n    checked: boolean;\n    onCheck: (checked?: boolean) => void;\n}\n\nconst SelectAll = ({ loading, disabled, checked, onCheck }: Props) => {\n    return (\n        <>\n            <Checkbox\n                className=\"flex pl1\"\n                checked={checked}\n                disabled={disabled}\n                loading={loading}\n                onChange={({ target }) => onCheck(target.checked)}\n            />\n            <ToolbarDropdown\n                disabled={disabled}\n                loading={loading}\n                title={c('Title').t`Open actions dropdown`}\n                content=\"\"\n            >\n                {() => (\n                    <DropdownMenu>\n                        <DropdownMenuButton className=\"alignleft\" onClick={() => onCheck()}>\n                            <Icon name=\"show-all-emails\" className=\"mr0-5\" />\n                            {c('Action').t`Select all`}\n                        </DropdownMenuButton>\n                        <DropdownMenuButton className=\"alignleft\" onClick={() => onCheck()}>\n                            <Icon name=\"unread\" className=\"mr0-5\" />\n                            {c('Action').t`All unread`}\n                        </DropdownMenuButton>\n                        <DropdownMenuButton className=\"alignleft\" onClick={() => onCheck()}>\n                            <Icon name=\"read\" className=\"mr0-5\" />\n                            {c('Action').t`All read`}\n                        </DropdownMenuButton>\n                        <DropdownMenuButton className=\"alignleft\" onClick={() => onCheck()}>\n                            <Icon name=\"star\" className=\"mr0-5\" />\n                            {c('Action').t`All unstarred`}\n                        </DropdownMenuButton>\n                        <DropdownMenuButton className=\"alignleft\" onClick={() => onCheck()}>\n                            <Icon name=\"starfull\" className=\"mr0-5\" />\n                            {c('Action').t`All starred`}\n                        </DropdownMenuButton>\n                    </DropdownMenu>\n                )}\n            </ToolbarDropdown>\n        </>\n    );\n};\n\nexport default SelectAll;\n","import React, { useState } from 'react';\nimport {\n    LabelModal,\n    SearchInput as UntypedSearchInput,\n    Icon,\n    useLabels,\n    useModals,\n    PrimaryButton,\n    classnames,\n    Tooltip,\n    useLoading,\n    useApi,\n    useNotifications,\n    useEventManager\n} from 'react-components';\nimport { LABEL_EXCLUSIVE, MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\nimport { c } from 'ttag';\nimport { normalize } from 'proton-shared/lib/helpers/string';\nimport { labelMessages } from 'proton-shared/lib/api/messages';\nimport { labelConversations } from 'proton-shared/lib/api/conversations';\n\nimport { ELEMENT_TYPES } from '../../constants';\nimport { Label } from '../../models/label';\n\nimport './MoveDropdown.scss';\n\nconst SearchInput = UntypedSearchInput as any;\n\nconst { INBOX, TRASH, SPAM, ARCHIVE } = MAILBOX_LABEL_IDS;\n\ninterface Props {\n    selectedIDs: string[];\n    type: string;\n    onClose: () => void;\n}\n\nconst MoveDropdown = ({ selectedIDs = [], type, onClose }: Props) => {\n    const { createNotification } = useNotifications();\n    const [loading, withLoading] = useLoading();\n    const api = useApi();\n    const { call } = useEventManager();\n    const { createModal } = useModals();\n    const [labels = []]: [Label[]] = useLabels();\n    const [search, updateSearch] = useState('');\n    const normSearch = normalize(search);\n    const folders = labels\n        .filter(({ Exclusive }) => Exclusive === LABEL_EXCLUSIVE.FOLDER)\n        .concat(\n            [\n                { ID: INBOX, Name: c('Mailbox').t`Inbox`, icon: 'inbox' },\n                { ID: ARCHIVE, Name: c('Mailbox').t`Archive`, icon: 'archive' },\n                { ID: SPAM, Name: c('Mailbox').t`Spam`, icon: 'spam' },\n                { ID: TRASH, Name: c('Mailbox').t`Trash`, icon: 'trash' }\n            ].filter(Boolean)\n        )\n        .filter(({ Name = '' }) => {\n            if (!search) {\n                return true;\n            }\n            const normName = normalize(Name);\n            return normName.includes(normSearch);\n        });\n\n    const handleMove = async (folder: Label) => {\n        const action = type === ELEMENT_TYPES.CONVERSATION ? labelConversations : labelMessages;\n        await api(action({ LabelID: folder.ID, IDs: selectedIDs }));\n        await call();\n        onClose();\n        createNotification({ text: c('Success').t`Elements moved to ${folder.Name}` });\n    };\n\n    return (\n        <div className=\"p1\">\n            <div className=\"flex flex-spacebetween flex-items-center mb1\">\n                <label htmlFor=\"filter-folders\" className=\"bold\">{c('Label').t`Move to`}</label>\n                <Tooltip title={c('Title').t`Create folder`}>\n                    <PrimaryButton\n                        className=\"pm-button--small pm-button--for-smallicon\"\n                        onClick={() => {\n                            createModal(<LabelModal type=\"folder\" label={null} />);\n                        }}\n                    >\n                        <Icon name=\"folder\" fill=\"light\" className=\"flex-item-noshrink mr0-25\" />+\n                    </PrimaryButton>\n                </Tooltip>\n            </div>\n            <div className=\"mb1\">\n                <SearchInput\n                    autoFocus={true}\n                    value={search}\n                    onChange={updateSearch}\n                    id=\"filter-folders\"\n                    placeholder={c('Placeholder').t`Filter folders`}\n                />\n            </div>\n            <div className=\"scroll-if-needed scroll-smooth-touch moveDropdown-list-container\">\n                <ul className=\"unstyled mt0 mb0\">\n                    {folders.map((folder, index) => {\n                        return (\n                            <li key={folder.ID} className={classnames([index < folders.length - 1 && 'border-bottom'])}>\n                                <button\n                                    type=\"button\"\n                                    disabled={loading}\n                                    className=\"w100 flex flex-nowrap flex-items-center pt0-5 pb0-5\"\n                                    onClick={() => withLoading(handleMove(folder))}\n                                >\n                                    <Icon name=\"folder\" color={folder.Color} className=\"flex-item-noshrink mr0-5\" />\n                                    <span className=\"ellipsis\" title={folder.Name}>\n                                        {folder.Name}\n                                    </span>\n                                </button>\n                            </li>\n                        );\n                    })}\n                </ul>\n            </div>\n        </div>\n    );\n};\n\nexport default MoveDropdown;\n","import React, { useState, ChangeEvent } from 'react';\nimport { c } from 'ttag';\nimport {\n    SearchInput as UntypedSearchInput,\n    Icon,\n    useLabels,\n    useModals,\n    PrimaryButton,\n    LabelModal,\n    classnames,\n    Tooltip,\n    useLoading,\n    useApi,\n    useNotifications,\n    Checkbox,\n    useEventManager,\n    generateUID\n} from 'react-components';\nimport { LABEL_EXCLUSIVE } from 'proton-shared/lib/constants';\nimport { labelMessages, unlabelMessages } from 'proton-shared/lib/api/messages';\nimport { labelConversations, unlabelConversations } from 'proton-shared/lib/api/conversations';\nimport { normalize } from 'proton-shared/lib/helpers/string';\n\nimport { ELEMENT_TYPES } from '../../constants';\nimport { Label } from '../../models/label';\n\nimport './LabelDropdown.scss';\n\nconst SearchInput = UntypedSearchInput as any;\n\ninterface Props {\n    selectedIDs: string[];\n    type: string;\n    onClose: () => void;\n}\n\nconst LabelDropdown = ({ selectedIDs = [], type, onClose }: Props) => {\n    const [uid] = useState(generateUID('label-dropdown'));\n    const { createNotification } = useNotifications();\n    const [loading, withLoading] = useLoading();\n    const api = useApi();\n    const { call } = useEventManager();\n    const { createModal } = useModals();\n    const [labels = []]: [Label[]] = useLabels();\n    const [search, updateSearch] = useState('');\n    const [lastChecked, setLastChecked] = useState(''); // Store ID of the last label ID checked\n    const [alsoArchive, updateAlsoArchive] = useState(false);\n    const [selectedLabelIDs, updateSelectedLabelIDs] = useState<{ [labelID: string]: boolean }>({}); // TODO\n\n    const normSearch = normalize(search);\n    const list = labels\n        .filter(({ Exclusive }) => Exclusive === LABEL_EXCLUSIVE.LABEL)\n        .filter(({ Name = '' }) => {\n            if (!search) {\n                return true;\n            }\n            const normName = normalize(Name);\n            return normName.includes(normSearch);\n        });\n\n    const handleApply = async () => {\n        const labelAction = type === ELEMENT_TYPES.MESSAGE ? labelMessages : labelConversations;\n        const unlabelAction = type === ELEMENT_TYPES.MESSAGE ? unlabelMessages : unlabelConversations;\n        // TODO to improve: we call label / unlabel too much\n        const promises = list.map(({ ID: LabelID = '' }) => {\n            if (selectedLabelIDs[LabelID]) {\n                return api(labelAction({ LabelID, IDs: selectedIDs }));\n            } else {\n                return api(unlabelAction({ LabelID, IDs: selectedIDs }));\n            }\n        });\n        await Promise.all(promises);\n        await call();\n        onClose();\n        createNotification({ text: c('Success').t`Labels applied` });\n    };\n\n    const handleCheck = (labelID: string) => ({ target, nativeEvent }: ChangeEvent) => {\n        const { shiftKey } = nativeEvent as any;\n        const labelIDs = [labelID];\n\n        if (lastChecked && shiftKey) {\n            const start = list.findIndex(({ ID }) => ID === labelID);\n            const end = list.findIndex(({ ID }) => ID === lastChecked);\n            labelIDs.push(...list.slice(Math.min(start, end), Math.max(start, end) + 1).map(({ ID = '' }) => ID));\n        }\n\n        setLastChecked(labelID);\n        const update = labelIDs.reduce((acc, ID) => {\n            acc[ID] = (target as HTMLInputElement).checked;\n            return acc;\n        }, Object.create(null));\n\n        console.log('handleCheck', selectedLabelIDs, update);\n\n        updateSelectedLabelIDs({ ...selectedLabelIDs, ...update });\n    };\n\n    return (\n        <div className=\"p1\">\n            <div className=\"flex flex-spacebetween flex-items-center mb1\">\n                <label htmlFor=\"filter-labels\" className=\"bold\">{c('Label').t`Label as`}</label>\n                <Tooltip title={c('Title').t`Create label`}>\n                    <PrimaryButton\n                        className=\"pm-button--small pm-button--for-smallicon\"\n                        onClick={() => {\n                            createModal(<LabelModal type=\"label\" label={null} />);\n                        }}\n                    >\n                        <Icon name=\"label\" fill=\"light\" className=\"flex-item-noshrink mr0-25\" />+\n                    </PrimaryButton>\n                </Tooltip>\n            </div>\n            <div className=\"mb1\">\n                <SearchInput\n                    autoFocus={true}\n                    value={search}\n                    onChange={updateSearch}\n                    id=\"filter-labels\"\n                    placeholder={c('Placeholder').t`Filter labels`}\n                />\n            </div>\n            <div className=\"scroll-if-needed scroll-smooth-touch mb1 labelDropdown-list-container\">\n                <ul className=\"unstyled mt0 mb0\">\n                    {list.map(({ ID = '', Name = '', Color = '' }, index) => {\n                        // The dropdown is several times in the view, native html ids has to be different each time\n                        const lineId = `${uid}-${ID}`;\n                        return (\n                            <li\n                                key={lineId}\n                                className={classnames([\n                                    'w100 flex flex-nowrap flex-spacebetween flex-items-center pt0-5 pb0-5',\n                                    index < list.length - 1 && 'border-bottom'\n                                ])}\n                            >\n                                <div className=\"flex flex-nowrap flex-spacebetween flex-items-center\">\n                                    <Icon name=\"label\" color={Color} className=\"flex-item-noshrink mr0-5\" />\n                                    <label htmlFor={lineId} title={Name} className=\"ellipsis\">\n                                        {Name}\n                                    </label>\n                                </div>\n                                <Checkbox\n                                    className=\"flex-item-noshrink\"\n                                    id={lineId}\n                                    checked={selectedLabelIDs[ID] || false}\n                                    onChange={handleCheck(ID)}\n                                />\n                            </li>\n                        );\n                    })}\n                </ul>\n            </div>\n            <div className=\"mb1 flex flex-spacebetween\">\n                <label htmlFor=\"alsoArchive\">{c('Label').t`Also archive`}</label>\n                <Checkbox\n                    id=\"alsoArchive\"\n                    checked={alsoArchive}\n                    onChange={({ target }) => updateAlsoArchive(target.checked)}\n                />\n            </div>\n            <div>\n                <PrimaryButton className=\"w100\" loading={loading} onClick={() => withLoading(handleApply())}>\n                    {c('Action').t`Apply`}\n                </PrimaryButton>\n            </div>\n        </div>\n    );\n};\n\nexport default LabelDropdown;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon } from 'react-components';\n\nimport ToolbarButton from './ToolbarButton';\n\ninterface Props {\n    onClick: () => void;\n}\n\nconst BackButton = ({ onClick }: Props) => {\n    return (\n        <ToolbarButton onClick={onClick}>\n            <Icon className=\"toolbar-icon mauto\" name=\"arrow-left\" />\n        </ToolbarButton>\n    );\n};\n\nBackButton.propTypes = {\n    onClick: PropTypes.func.isRequired\n};\n\nexport default BackButton;\n","import React from 'react';\nimport { Icon, DropdownMenu, DropdownMenuButton } from 'react-components';\nimport { c } from 'ttag';\n\nimport ToolbarButton from './ToolbarButton';\nimport ToolbarDropdown from './ToolbarDropdown';\n\nimport { Page } from '../../models/tools';\nimport { pageCount } from '../../helpers/paging';\n\ninterface Props {\n    loading: boolean;\n    page: Page;\n    onPage: (page: number) => void;\n}\n\nconst PagingControls = ({ loading, page, onPage }: Props) => {\n    const setPage = (pageNumber: number) => onPage(pageNumber);\n    const handleNext = () => setPage(page.page + 1);\n    const handlePrevious = () => setPage(page.page - 1);\n    const handlePage = (newPage: number) => () => setPage(newPage);\n    const count = pageCount(page);\n\n    return (\n        <>\n            <ToolbarButton\n                loading={loading}\n                disabled={page.page <= 0}\n                title={c('Action').t`Previous`}\n                onClick={handlePrevious}\n            >\n                <Icon className=\"toolbar-icon rotateZ-90 mauto\" name=\"caret\" />\n            </ToolbarButton>\n            <ToolbarDropdown\n                title={c('Action').t`Change layout`}\n                content={String(page.page + 1)}\n                disabled={count <= 1}\n                size=\"narrow\"\n            >\n                {() => (\n                    <DropdownMenu>\n                        {[...Array(count)].map((_, i) => (\n                            <DropdownMenuButton\n                                key={i}\n                                loading={loading}\n                                disabled={page.page === i}\n                                onClick={handlePage(i)}\n                            >\n                                {i + 1}\n                            </DropdownMenuButton>\n                        ))}\n                    </DropdownMenu>\n                )}\n            </ToolbarDropdown>\n            <ToolbarButton\n                loading={loading}\n                disabled={page.page >= count - 1}\n                title={c('Action').t`Next`}\n                onClick={handleNext}\n            >\n                <Icon className=\"toolbar-icon rotateZ-270 mauto\" name=\"caret\" />\n            </ToolbarButton>\n        </>\n    );\n};\n\nexport default PagingControls;\n","import React from 'react';\nimport { Icon } from 'react-components';\n\nimport ToolbarSeparator from './ToolbarSeparator';\nimport ReadUnreadButtons from './ReadUnreadButtons';\nimport ToolbarDropdown from './ToolbarDropdown';\nimport LayoutDropdown from './LayoutDropdown';\nimport MoveButtons from './MoveButtons';\nimport DeleteButton from './DeleteButton';\nimport SortDropdown from './SortDropdown';\nimport FilterDropdown from './FilterDropdown';\nimport SelectAll from './SelectAll';\nimport MoveDropdown from '../dropdown/MoveDropdown';\nimport LabelDropdown from '../dropdown/LabelDropdown';\nimport BackButton from './BackButton';\nimport PagingControls from './PagingControls';\nimport { getCurrentType } from '../../helpers/elements';\nimport { isColumnMode } from '../../helpers/mailSettings';\nimport { Page, Sort, Filter } from '../../models/tools';\n\nimport './Toolbar.scss';\n\ninterface Props {\n    loading?: boolean;\n    checkAll: boolean;\n    onCheckAll: () => void;\n    labelID: string;\n    elementID?: string;\n    selectedIDs: string[];\n    mailSettings: any;\n    page: Page;\n    onPage: (page: number) => void;\n    sort: Sort;\n    onSort: (sort: Sort) => void;\n    filter: Filter;\n    onFilter: (filter: Filter) => void;\n    onBack: () => void;\n}\n\nconst Toolbar = ({\n    labelID = '',\n    elementID,\n    checkAll,\n    onCheckAll,\n    mailSettings = {},\n    selectedIDs = [],\n    loading = false,\n    onSort,\n    sort,\n    onFilter,\n    filter,\n    onBack,\n    page,\n    onPage\n}: Props) => {\n    const type = getCurrentType({ mailSettings, labelID });\n\n    const columnMode = isColumnMode(mailSettings);\n\n    return (\n        <nav className=\"toolbar flex noprint flex-spacebetween\">\n            <div className=\"flex\">\n                {columnMode || !elementID ? (\n                    <SelectAll checked={checkAll} onCheck={onCheckAll} loading={loading} />\n                ) : (\n                    <BackButton onClick={onBack} />\n                )}\n                <ToolbarSeparator />\n                <ReadUnreadButtons labelID={labelID} mailSettings={mailSettings} selectedIDs={selectedIDs} />\n                <ToolbarSeparator />\n                <MoveButtons labelID={labelID} mailSettings={mailSettings} selectedIDs={selectedIDs} />\n                <DeleteButton labelID={labelID} mailSettings={mailSettings} selectedIDs={selectedIDs} />\n                <ToolbarSeparator />\n                <ToolbarDropdown autoClose={false} content={<Icon className=\"toolbar-icon\" name=\"folder\" />}>\n                    {({ onClose }) => <MoveDropdown selectedIDs={selectedIDs} type={type} onClose={onClose} />}\n                </ToolbarDropdown>\n                <ToolbarDropdown autoClose={false} content={<Icon className=\"toolbar-icon\" name=\"label\" />}>\n                    {({ onClose }) => <LabelDropdown selectedIDs={selectedIDs} type={type} onClose={onClose} />}\n                </ToolbarDropdown>\n            </div>\n            <div className=\"flex\">\n                <FilterDropdown loading={loading} filter={filter} onFilter={onFilter} />\n                <SortDropdown loading={loading} sort={sort} onSort={onSort} />\n                <LayoutDropdown mailSettings={mailSettings} />\n                <ToolbarSeparator />\n                <PagingControls loading={loading} page={page} onPage={onPage} />\n            </div>\n        </nav>\n    );\n};\n\nexport default Toolbar;\n","import React, { ReactElement, ChangeEvent } from 'react';\nimport { Icon, classnames } from 'react-components';\n\ninterface Props {\n    children: ReactElement | string;\n    className: string;\n    checked: boolean;\n    onChange: (event: ChangeEvent) => void;\n}\n\nconst ItemCheckbox = ({ children, className, ...rest }: Props) => {\n    return (\n        <label className={classnames(['relative', className])}>\n            <input type=\"checkbox\" className=\"item-checkbox inner-ratio-container cursor-pointer m0\" {...rest} />\n            <span className=\"item-icon flex-item-noshrink rounded50 bg-white inline-flex\">\n                <span className=\"mauto item-abbr\">{children}</span>\n                <span className=\"item-icon-fakecheck mauto\">\n                    <Icon name=\"on\" className=\"fill-white\" />\n                </span>\n            </span>\n        </label>\n    );\n};\n\nexport default ItemCheckbox;\n","import { MIME_TYPES } from 'proton-shared/lib/constants';\nimport { hasBit, setBit } from 'proton-shared/lib/helpers/bitset';\nimport { identity } from 'proton-shared/lib/helpers/function';\n\nimport { MESSAGE_FLAGS, SIGNATURE_START } from '../../constants';\nimport { Message, MessageExtended } from '../../models/message';\nimport { toText } from '../parserHtml';\n\nconst {\n    FLAG_RECEIVED,\n    FLAG_SENT,\n    FLAG_RECEIPT_REQUEST,\n    FLAG_IMPORTED,\n    FLAG_REPLIED,\n    FLAG_REPLIEDALL,\n    FLAG_FORWARDED,\n    FLAG_INTERNAL,\n    FLAG_AUTO,\n    FLAG_E2E,\n    FLAG_SIGN,\n    FLAG_PUBLIC_KEY\n} = MESSAGE_FLAGS;\n\nconst { PLAINTEXT, MIME } = MIME_TYPES;\n\n/**\n * Check if a message has a mime type\n */\nconst hasMimeType = (type: MIME_TYPES) => ({ MIMEType }: Message = {}) => MIMEType === type;\n\nexport const isMIME = hasMimeType(MIME);\nexport const isPlainText = hasMimeType(PLAINTEXT);\nexport const isHTML = hasMimeType(MIME_TYPES.DEFAULT);\n\n/**\n * Check if a message has a flag in the flags bitmap\n */\nexport const hasFlag = (flag: number) => ({ Flags = 0 }: Message = {}) => hasBit(Flags, flag);\n\nexport const isRequestReadReceipt = hasFlag(FLAG_RECEIPT_REQUEST);\nexport const isImported = hasFlag(FLAG_IMPORTED);\nexport const isInternal = hasFlag(FLAG_INTERNAL);\nexport const isExternal = (message: Message) => !isInternal(message);\nexport const isAuto = hasFlag(FLAG_AUTO);\nexport const isReceived = hasFlag(FLAG_RECEIVED);\nexport const isSent = hasFlag(FLAG_SENT);\nexport const isReplied = hasFlag(FLAG_REPLIED);\nexport const isRepliedAll = hasFlag(FLAG_REPLIEDALL);\nexport const isForwarded = hasFlag(FLAG_FORWARDED);\nexport const isSentAndReceived = hasFlag(FLAG_SENT | FLAG_RECEIVED);\nexport const isDraft = (message: Message = {}) => !isSent(message) && !isReceived(message);\nexport const isE2E = hasFlag(FLAG_E2E);\nexport const isSentEncrypted = hasFlag(FLAG_E2E | FLAG_SENT);\nexport const isInternalEncrypted = hasFlag(FLAG_E2E | FLAG_INTERNAL);\nexport const isSign = hasFlag(FLAG_SIGN);\nexport const isAttachPublicKey = hasFlag(FLAG_PUBLIC_KEY);\nexport const isExternalEncrypted = (message: Message) => isE2E(message) && !isInternal(message);\nexport const isPGPEncrypted = (message: Message = {}) => isExternal(message) && isReceived(message) && isE2E(message);\nexport const inSigningPeriod = ({ Time = 0 }: Message) => Time >= SIGNATURE_START;\n\nexport const isPGPInline = (message: Message) => isPGPEncrypted(message) && !isMIME(message);\n\nexport const isEO = (message: Message = {}) => !!message.Password;\n\nexport const addReceived = (Flags = 0) => setBit(Flags, MESSAGE_FLAGS.FLAG_RECEIVED);\n\nexport const getSender = ({ Sender = {} }: Message = {}) => Sender;\nexport const getRecipients = ({ ToList = [], CCList = [], BCCList = [] }: Message = {}) => [\n    ...ToList,\n    ...CCList,\n    ...BCCList\n];\n// export const getRecipientsLabels = (message: Message = {}) => getRecipients(message).map(getRecipientLabel);\nexport const getRecipientsAddresses = (message: Message = {}) =>\n    getRecipients(message)\n        .map(({ Address }) => Address || '')\n        .filter(identity);\n\n/**\n * Extract and normalize recipients\n * @param {Object} message\n * @return {Array<String>}\n */\n// export const normalizeRecipients = (message = {}) => {\n//     return getRecipients(message).map(({ Address }) => normalizeEmail(Address));\n// };\n\n/**\n * Decrypt simple message body with password\n * @param {String} message.Body\n * @param {String} password\n * @return {String} body\n */\n// export async function decrypt({ Body = '' } = {}, password) {\n//     const message = await getMessage(Body);\n//     const { data: body } = await decryptMessage({\n//         message,\n//         passwords: [password]\n//     });\n//     return body;\n// }\n\n/**\n * Get the label ids to add for a message that has moved.\n *\n * Types definition\n *   - 1: a draft\n * if you move it to trash and back to inbox, it will go to draft instead\n *   - 2: is sent\n *  if you move it to trash and back, it will go back to sent\n *   - 3: is inbox and sent (a message sent to yourself)\n * if you move it from trash to inbox, it will acquire both the inbox and sent labels ( 0 and 2 ).\n *\n * @param {Message} message\n * @param {String} labelID label id to which it is moved\n * @returns {Array}\n */\n// export const getLabelIDsMoved = (message, labelID) => {\n//     const toInbox = labelID === MAILBOX_IDENTIFIERS.inbox;\n\n//     if (toInbox) {\n//         // This message is a draft, if you move it to trash and back to inbox, it will go to draft instead\n//         if (message.isDraft()) {\n//             return [MAILBOX_IDENTIFIERS.allDrafts, MAILBOX_IDENTIFIERS.drafts];\n//         }\n\n//         // If you move it from trash to inbox, it will acquire both the inbox and sent labels ( 0 and 2 ).\n//         if (message.isSentAndReceived()) {\n//             return [MAILBOX_IDENTIFIERS.inbox, MAILBOX_IDENTIFIERS.allSent, MAILBOX_IDENTIFIERS.sent];\n//         }\n\n//         // This message is sent, if you move it to trash and back, it will go back to sent\n//         if (message.isSent()) {\n//             return [MAILBOX_IDENTIFIERS.allSent, MAILBOX_IDENTIFIERS.sent];\n//         }\n//     }\n\n//     return [labelID];\n// };\n\n/**\n * Get date from message\n */\nexport const getDate = ({ Time = 0 }: Message = {}) => new Date(Time * 1000);\n\n/**\n * Check if these all messages shared the same sender (by email address)\n * @param {Array<message>} messages\n * @return {Boolean}\n */\n// export const sameSender = (messages = []) => {\n//     if (!messages.length) {\n//         return false;\n//     }\n\n//     const [{ Sender: firstSender } = {}] = messages;\n//     const firstAddress = normalizeEmail(firstSender.Address);\n\n//     return (\n//         messages.length ===\n//         messages.filter(({ Sender = {} }) => {\n//             return normalizeEmail(Sender.Address) === firstAddress;\n//         }).length\n//     );\n// };\n\nexport const getParsedHeaders = (message: Message, parameter: string) => {\n    const { ParsedHeaders = {} } = message;\n\n    if (parameter) {\n        return ParsedHeaders[parameter];\n    }\n\n    return ParsedHeaders;\n};\n\nexport const getListUnsubscribe = (message: Message) => {\n    return getParsedHeaders(message, 'List-Unsubscribe') || '';\n};\n\nexport const getListUnsubscribePost = (message: Message) => {\n    return getParsedHeaders(message, 'List-Unsubscribe-Post') || '';\n};\n\nexport const getAttachments = (message: Message = {}) => message.Attachments || [];\nexport const hasAttachments = (message: Message = {}) => getAttachments(message).length > 0;\nexport const attachmentsSize = (message: Message = {}) =>\n    getAttachments(message).reduce((acc, { Size = 0 } = {}) => acc + +Size, 0);\n\nexport const isSentAutoReply = ({ Flags, ParsedHeaders = {} }: Message) => {\n    if (!isSent({ Flags })) {\n        return false;\n    }\n\n    if (isAuto({ Flags })) {\n        return true;\n    }\n\n    const autoReplyHeaders = ['X-Autoreply', 'X-Autorespond', 'X-Autoreply-From', 'X-Mail-Autoreply'];\n    const autoReplyHeaderValues = [\n        ['Auto-Submitted', 'auto-replied'],\n        ['Precedence', 'auto_reply'],\n        ['X-Precedence', 'auto_reply'],\n        ['Delivered-To', 'autoresponder']\n    ];\n    // These headers are not always available. But we should check them to support\n    // outlook / mail autoresponses.\n    return (\n        autoReplyHeaders.some((h) => h in ParsedHeaders) ||\n        autoReplyHeaderValues.some(([k, v]) => k in ParsedHeaders && ParsedHeaders[k].toLowerCase() === v)\n    );\n};\n\n/**\n * We NEVER upconvert, if the user wants html: plaintext is actually fine as well\n */\nexport const getHTML = (message: MessageExtended) => (isHTML(message.data) ? message.content : undefined);\n\nexport const exportPlainText = (message: MessageExtended) => {\n    /*\n     * The replace removes any characters that are produced by the copying process (like zero width characters)\n     * See: http://www.berklix.org/help/majordomo/#quoted we want to avoid sending unnecessary quoted printable encodings\n     */\n    if (message.data?.MIMEType !== MIME_TYPES.DEFAULT) {\n        return message.content?.replace(/\\u200B/g, '');\n    }\n    return toText(message.content || '', true, true).replace(/\\u200B/g, '');\n};\n\n/**\n * Generates/Gets the plaintext body from the message. If the message is not composed in plaintext, it will downconvert\n * the html body to plaintext if downconvert is set. If downconvert is disabled it will return false.\n */\nexport const getPlainText = (message: MessageExtended, downconvert: boolean) => {\n    if (!isPlainText(message.data) && !downconvert) {\n        return undefined;\n    }\n    return exportPlainText(message);\n};\n","import TurndownService from 'turndown';\n\nimport { identity } from 'proton-shared/lib/helpers/function';\n\n/**\n * Transform HTML to text\n * Append lines before the content if it starts with a Signature\n */\nexport const toText = (html: string, appendLines = true, convertImages = false) => {\n    const turndownService = new TurndownService({\n        bulletListMarker: '-',\n        // strongDelimiter: '',\n        // emDelimiter: '',\n        hr: ''\n    });\n\n    const protonSignature = {\n        filter: (node: HTMLElement) => node.classList.contains('protonmail_signature_block'),\n        replacement(content: string) {\n            return `\\u200B${content.trim()}\\u200B`;\n        }\n    };\n\n    const replaceBreakLine = {\n        filter: 'br',\n        replacement(content: string, node: HTMLElement) {\n            // It matches the new line of a signature\n            if (node.parentElement?.nodeName === 'DIV' && node.parentElement.childElementCount === 1) {\n                return !node.parentElement.textContent ? '\\n\\n' : '\\n';\n            }\n\n            // ex <li>monique<br></li>\n            if (node.parentElement?.lastElementChild?.nodeName === 'BR' && node.parentElement.textContent) {\n                return node.parentElement.nodeName !== 'LI' ? '\\n' : '';\n            }\n\n            return '\\n\\n';\n        }\n    } as TurndownService.Rule;\n\n    const replaceImg = {\n        filter: 'img',\n        replacement(content: string, element: HTMLElement) {\n            if (!convertImages) {\n                return '';\n            }\n\n            const image = element as HTMLImageElement;\n\n            // needed for the automatic conversion done by pgp/inline, otherwise the conversion happens and people forget that they have selected this for some contacts\n            const attribute = image.alt || image.src;\n            return attribute ? `[${attribute}]` : '';\n        }\n    } as TurndownService.Rule;\n\n    const replaceAnchor = {\n        filter: 'a',\n        replacement(content: string, node: HTMLElement) {\n            return node.textContent;\n        }\n    } as TurndownService.Rule;\n\n    const replaceDiv = {\n        filter: ['div'],\n        replacement(content: string) {\n            return content;\n        }\n    } as TurndownService.Rule;\n\n    turndownService.use([\n        () => turndownService.addRule('replaceAnchor', replaceAnchor),\n        () => turndownService.addRule('replaceDiv', replaceDiv),\n        () => turndownService.addRule('replaceImg', replaceImg),\n        () => turndownService.addRule('replaceBreakLine', replaceBreakLine),\n        () => turndownService.addRule('protonSignature', protonSignature)\n    ]);\n\n    /**\n     * Override turndown to NOT escape any HTML. For example MONO_TLS_PROVIDER -> MONO\\_TLS\\_PROVIDER.\n     * Just return the value that is passed in.\n     * Fixes https://github.com/ProtonMail/Angular/issues/6556\n     */\n    turndownService.escape = identity;\n\n    const output = turndownService.turndown(html);\n\n    // It's the signature, we need some space\n    if (output.startsWith('\\u200B') && appendLines) {\n        return `\\n\\n\\n${output}\\n\\n`;\n    }\n\n    return output;\n};\n","import React from 'react';\nimport { Icon, useLoading, useApi, useEventManager, classnames } from 'react-components';\nimport { MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\nimport { labelMessages, unlabelMessages } from 'proton-shared/lib/api/messages';\nimport { labelConversations, unlabelConversations } from 'proton-shared/lib/api/conversations';\n\nimport { ELEMENT_TYPES } from '../../constants';\nimport { Element } from '../../models/element';\nimport { getLabelIds } from '../../helpers/elements';\n\ninterface Props {\n    element?: Element;\n    type: string;\n}\n\nconst ItemStar = ({ element = {}, type }: Props) => {\n    const api = useApi();\n    const isConversation = type === ELEMENT_TYPES.CONVERSATION;\n    const { call } = useEventManager();\n    const [loading, withLoading] = useLoading();\n    const labelIDs = getLabelIds(element);\n    const isStarred = labelIDs.includes(MAILBOX_LABEL_IDS.STARRED);\n    const iconName = isStarred ? 'starfull' : 'star';\n\n    const handleClick = async () => {\n        const action = isConversation\n            ? isStarred\n                ? unlabelConversations\n                : labelConversations\n            : isStarred\n            ? unlabelMessages\n            : labelMessages;\n        await api(action({ LabelID: MAILBOX_LABEL_IDS.STARRED, IDs: [element.ID] }));\n        await call();\n    };\n\n    return (\n        <button\n            disabled={loading}\n            type=\"button\"\n            className={classnames(['starbutton item-star inline-flex', isStarred && 'starbutton--is-starred'])}\n            onClick={() => withLoading(handleClick())}\n        >\n            <Icon name={iconName} fill=\"\" />\n        </button>\n    );\n};\n\nexport default ItemStar;\n","import React from 'react';\nimport { toMap } from 'proton-shared/lib/helpers/object';\nimport { orderBy } from 'proton-shared/lib/helpers/array';\nimport { Link } from 'react-router-dom';\nimport { Icon, classnames } from 'react-components';\n\nimport { Label } from '../../models/label';\nimport { getLabelIds } from '../../helpers/elements';\nimport { Element } from '../../models/element';\n\ninterface Props {\n    element: Element;\n    labels?: Label[];\n    max?: number;\n    onUnlabel?: (labelID: string) => void;\n    className?: string;\n}\n\nconst ItemLabels = ({ element, onUnlabel, max = 99, labels = [], className = '' }: Props) => {\n    const labelIDs = getLabelIds(element);\n    const labelsMap: { [labelID: string]: Label } = toMap(labels) as any;\n\n    return (\n        <div className={classnames(['inbl', className])}>\n            {orderBy(labelIDs.map((ID) => labelsMap[ID]).filter(Boolean), 'Order')\n                .slice(0, max)\n                .map(({ ID = '', Name = '', Color = '' }) => {\n                    const style = {\n                        backgroundColor: Color,\n                        borderColor: Color\n                    };\n                    const to = `/${ID}`;\n                    return (\n                        <span className=\"badgeLabel\" style={style} key={ID}>\n                            <Link to={to}>{Name}</Link>\n                            {onUnlabel ? (\n                                <button type=\"button\" onClick={() => onUnlabel(ID)}>\n                                    <Icon name=\"off\" />\n                                </button>\n                            ) : null}\n                        </span>\n                    );\n                })}\n        </div>\n    );\n};\n\nexport default ItemLabels;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon, classnames } from 'react-components';\n\nimport { ELEMENT_TYPES } from '../../constants';\nimport { hasAttachments } from '../../helpers/message/messages';\n\nconst ItemAttachmentIcon = ({ element = {}, type = ELEMENT_TYPES.CONVERSATION, className }) => {\n    const isConversation = type === ELEMENT_TYPES.CONVERSATION;\n    const hasAttachment = isConversation ? element.ContextNumAttachments : hasAttachments(element);\n\n    if (!hasAttachment) {\n        return null;\n    }\n\n    return <Icon name=\"attach\" fill=\"\" className={classnames(['fill-global-success', className])} />;\n};\n\nItemAttachmentIcon.propTypes = {\n    element: PropTypes.object,\n    type: PropTypes.oneOf([ELEMENT_TYPES.CONVERSATION, ELEMENT_TYPES.MESSAGE]).isRequired,\n    className: PropTypes.string\n};\n\nexport default ItemAttachmentIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { Icon } from 'react-components';\nimport { MAILBOX_LABEL_IDS, SHOW_MOVED } from 'proton-shared/lib/constants';\nimport { c } from 'ttag';\n\nimport { LABEL_IDS_TO_HUMAN } from '../../constants';\n\nconst { INBOX, TRASH, SPAM, ARCHIVE, SENT, DRAFTS } = MAILBOX_LABEL_IDS;\n\nconst getFolders = ({ ShowMoved }) => ({\n    [INBOX]: {\n        icon: 'inbox',\n        name: c('Mailbox').t`Inbox`,\n        to: '/inbox'\n    },\n    [TRASH]: {\n        icon: 'trash',\n        name: c('Mailbox').t`Trash`,\n        to: '/trash'\n    },\n    [SPAM]: {\n        icon: 'spam',\n        name: c('Mailbox').t`Spam`,\n        to: '/spam'\n    },\n    [ARCHIVE]: {\n        icon: 'archive',\n        name: c('Mailbox').t`Archive`,\n        to: '/archive'\n    },\n    [SENT]: {\n        icon: 'sent',\n        name: c('Mailbox').t`Sent`,\n        to:\n            ShowMoved & SHOW_MOVED.SENT\n                ? `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.ALL_SENT]}`\n                : `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.SENT]}`\n    },\n    [DRAFTS]: {\n        icon: 'drafts',\n        name: c('Mailbox').t`Drafts`,\n        to:\n            ShowMoved & SHOW_MOVED.DRAFTS\n                ? `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.ALL_DRAFTS]}`\n                : `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.DRAFTS]}`\n    }\n});\n\nconst ItemLocation = ({ message, mailSettings }) => {\n    const { LabelIDs = [] } = message;\n    const folders = getFolders(mailSettings);\n\n    return (\n        <>\n            {LabelIDs.filter((labelID) => folders[labelID]).map((labelID) => {\n                const { icon, name, to } = folders[labelID];\n                return (\n                    <Link to={to} className=\"mr0-25 flex-item-noshrink\" key={labelID} title={name}>\n                        <Icon name={icon} />\n                    </Link>\n                );\n            })}\n        </>\n    );\n};\n\nItemLocation.propTypes = {\n    message: PropTypes.object.isRequired,\n    mailSettings: PropTypes.object.isRequired\n};\n\nexport default ItemLocation;\n","import { format, formatDistanceToNow as dateFnsFormatDistanceToNow, isToday } from 'date-fns';\nimport { dateLocale } from 'proton-shared/lib/i18n';\n\nexport const formatSimpleDate = (date) => format(date, isToday(date) ? 'p' : 'PP', { locale: dateLocale });\n\nexport const formatFullDate = (date) => format(date, 'PPPPp', { locale: dateLocale });\n\nexport const formatDistanceToNow = (date) => dateFnsFormatDistanceToNow(date, { locale: dateLocale, addSuffix: true });\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { classnames } from 'react-components';\n\nimport { getDate } from '../../helpers/elements';\nimport { formatSimpleDate, formatFullDate, formatDistanceToNow } from '../../helpers/date';\n\nconst FORMATERS = {\n    simple: formatSimpleDate,\n    full: formatFullDate,\n    distance: formatDistanceToNow\n};\n\n// TODO: Update with a setInterval?\n\nconst ItemDate = ({ element, className, mode = 'simple' }) => {\n    const formater = FORMATERS[mode] || FORMATERS.distance;\n    return <span className={classnames(['item-date', className])}>{formater(getDate(element))}</span>;\n};\n\nItemDate.propTypes = {\n    element: PropTypes.object.isRequired,\n    className: PropTypes.string,\n    mode: PropTypes.string\n};\n\nexport default ItemDate;\n","import React from 'react';\nimport { Conversation } from '../../models/conversation';\n\ninterface Props {\n    conversation: Conversation;\n    className?: string;\n}\n\nconst NumMessages = ({ conversation, className }: Props) => {\n    // ContextNumMessages shoud not be used\n    const { NumMessages = 0 } = conversation;\n\n    if (NumMessages <= 1) {\n        return null;\n    }\n\n    return <span className={className}>({NumMessages})</span>;\n};\n\nexport default NumMessages;\n","import React from 'react';\nimport { classnames } from 'react-components';\n\nimport ItemStar from './ItemStar';\nimport { ELEMENT_TYPES } from '../../constants';\nimport ItemLabels from './ItemLabels';\nimport ItemAttachmentIcon from './ItemAttachmentIcon';\nimport ItemLocation from './ItemLocation';\nimport ItemDate from './ItemDate';\nimport NumMessages from '../conversation/NumMessages';\nimport { Label } from '../../models/label';\nimport { Element } from '../../models/element';\n\ninterface Props {\n    labels?: Label[];\n    element: Element;\n    mailSettings: any;\n    type: string;\n    senders: string;\n    unread: boolean;\n}\n\nconst ItemColumnLayout = ({ labels, element, mailSettings = {}, type, senders, unread }: Props) => {\n    const { Subject } = element;\n    const isConversation = type === ELEMENT_TYPES.CONVERSATION;\n\n    return (\n        <div className=\"flex-item-fluid flex flex-nowrap flex-column flex-spacebetween item-titlesender\">\n            <div className=\"flex\">\n                <div className=\"flex-item-fluid flex w0 pr1\">\n                    {isConversation ? (\n                        <NumMessages className={classnames(['mr0-25', unread && 'bold'])} conversation={element} />\n                    ) : (\n                        <ItemLocation message={element} mailSettings={mailSettings} />\n                    )}\n                    <span className={classnames(['inbl mw100 ellipsis', unread && 'bold'])}>{Subject}</span>\n                </div>\n                <ItemDate element={element} className={unread ? 'bold' : undefined} />\n            </div>\n            <div className=\"flex\">\n                <div className=\"flex-item-fluid flex pr1\">\n                    <span className={classnames(['inbl mw100 ellipsis', unread && 'bold'])}>{senders}</span>\n                </div>\n                <div className=\"item-icons\">\n                    <ItemLabels max={4} labels={labels} element={element} />\n                    {' ' /* This space is important to keep a small space between elements */}\n                    <ItemAttachmentIcon element={element} type={type} />\n                    {' ' /* This space is important to keep a small space between elements */}\n                    <ItemStar element={element} type={type} />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ItemColumnLayout;\n","import React from 'react';\nimport { classnames } from 'react-components';\n\nimport ItemStar from './ItemStar';\nimport { ELEMENT_TYPES } from '../../constants';\nimport ItemLabels from './ItemLabels';\nimport ItemAttachmentIcon from './ItemAttachmentIcon';\nimport ItemLocation from './ItemLocation';\nimport ItemDate from './ItemDate';\nimport NumMessages from '../conversation/NumMessages';\nimport humanSize from 'proton-shared/lib/helpers/humanSize';\nimport { Label } from '../../models/label';\nimport { Element } from '../../models/element';\n\ninterface Props {\n    labels?: Label[];\n    element: Element;\n    mailSettings: any;\n    type: string;\n    senders: string;\n    unread: boolean;\n}\n\nconst ItemRowLayout = ({ labels, element, mailSettings = {}, type, senders, unread }: Props) => {\n    const { Subject, Size } = element;\n    const isConversation = type === ELEMENT_TYPES.CONVERSATION;\n    const size = humanSize(Size);\n\n    return (\n        <div className=\"flex-item-fluid flex flex-nowrap flex-row flex-spacebetween item-titlesender\">\n            <div className={classnames(['w20 flex mauto pr1', unread && 'bold'])}>{senders}</div>\n            <div className=\"flex-item-fluid flex mauto\">\n                {isConversation ? (\n                    <NumMessages className={classnames(['mr0-25', unread && 'bold'])} conversation={element} />\n                ) : (\n                    <ItemLocation message={element} mailSettings={mailSettings} />\n                )}\n                <span className={classnames(['inbl mw100 ellipsis', unread && 'bold'])}>{Subject}</span>\n                <ItemLabels max={4} labels={labels} element={element} />\n                <ItemAttachmentIcon element={element} type={type} className=\"ml0-5\" />\n            </div>\n            <span className=\"mtauto mbauto mr1 ml1 ng-binding\">{size}</span>\n            <span className=\"mauto\">\n                <ItemDate element={element} className={unread ? 'bold' : undefined} />\n            </span>\n            <div className=\"mtauto mbauto ml0-5\">\n                <ItemStar element={element} type={type} />\n            </div>\n        </div>\n    );\n};\n\nexport default ItemRowLayout;\n","import React, { ChangeEvent } from 'react';\nimport { classnames } from 'react-components';\nimport { getInitial } from 'proton-shared/lib/helpers/string';\nimport { MAILBOX_LABEL_IDS, VIEW_LAYOUT } from 'proton-shared/lib/constants';\n\nimport ItemCheckbox from './ItemCheckbox';\nimport { getRecipients as getMessageRecipients, getSender, getRecipients } from '../../helpers/message/messages';\nimport { getCurrentType, isUnread } from '../../helpers/elements';\nimport ItemColumnLayout from './ItemColumnLayout';\nimport ItemRowLayout from './ItemRowLayout';\nimport { Label } from '../../models/label';\nimport { Element } from '../../models/element';\nimport { ELEMENT_TYPES } from '../../constants';\nimport { getSenders } from '../../helpers/conversation';\nimport { getRecipientLabel, recipientsToRecipientOrGroup, getRecipientOrGroupLabel } from '../../helpers/addresses';\nimport { ContactEmail, ContactGroup } from '../../models/contact';\n\nconst { SENT, ALL_SENT, DRAFTS, ALL_DRAFTS } = MAILBOX_LABEL_IDS;\n\ninterface Props {\n    labels?: Label[];\n    labelID: string;\n    elementID?: string;\n    mailSettings: any;\n    element: Element;\n    checked?: boolean;\n    contacts: ContactEmail[];\n    contactGroups: ContactGroup[];\n    onCheck: (event: ChangeEvent) => void;\n    onClick: (element: Element) => void;\n}\n\nconst Item = ({\n    labelID,\n    labels,\n    element,\n    elementID,\n    mailSettings = {},\n    checked = false,\n    contacts,\n    contactGroups,\n    onCheck,\n    onClick\n}: Props) => {\n    const { ID = '' } = element;\n    const displayRecipients = [SENT, ALL_SENT, DRAFTS, ALL_DRAFTS].includes(labelID as MAILBOX_LABEL_IDS);\n    const type = getCurrentType({ mailSettings, labelID });\n    const isConversation = type === ELEMENT_TYPES.CONVERSATION;\n    const senders = isConversation ? getSenders(element) : [getSender(element)];\n    const recipients = isConversation ? getRecipients(element) : getMessageRecipients(element);\n    const sendersLabels = senders.map(getRecipientLabel);\n    const recipientsOrGroup = recipientsToRecipientOrGroup(recipients, contactGroups);\n    const recipientsLabels = recipientsOrGroup.map((recipientOrGroup) =>\n        getRecipientOrGroupLabel(recipientOrGroup, contacts)\n    );\n\n    const { ViewLayout = VIEW_LAYOUT.COLUMN } = mailSettings;\n    const isColumnMode = ViewLayout === VIEW_LAYOUT.COLUMN;\n    const ItemLayout = isColumnMode ? ItemColumnLayout : ItemRowLayout;\n    const unread = isUnread(element);\n\n    const clickHandler = (event: React.MouseEvent) => {\n        const target = event.target as HTMLElement;\n        if (target.classList.contains('item-checkbox') || target.closest('.item-checkbox')) {\n            event.stopPropagation();\n            return;\n        }\n        onClick(element);\n    };\n\n    return (\n        <div\n            onClick={clickHandler}\n            className={classnames([\n                'flex flex-nowrap cursor-pointer',\n                isColumnMode ? 'item-container' : 'item-container-row',\n                elementID === ID && 'item-is-selected',\n                !unread && 'read'\n            ])}\n        >\n            <ItemCheckbox className=\"mr1 item-checkbox\" checked={checked} onChange={onCheck}>\n                {getInitial(displayRecipients ? recipientsLabels[0] : sendersLabels[0])}\n            </ItemCheckbox>\n            <ItemLayout\n                labels={labels}\n                element={element}\n                mailSettings={mailSettings}\n                type={type}\n                senders={(displayRecipients ? recipientsLabels : sendersLabels).join(', ')}\n                unread={unread}\n            />\n        </div>\n    );\n};\n\nexport default Item;\n","import { Conversation } from '../models/conversation';\n\nexport const getSenders = ({ Senders = [] }: Conversation = {}) => Senders;\n\nexport const getRecipients = ({ Recipients = [] }: Conversation) => Recipients;\n","import React from 'react';\nimport { c } from 'ttag';\n\nimport { MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\nimport noResultSearchSvg from 'design-system/assets/img/shared/no-result-search.svg';\nimport noResultInboxSvg from 'design-system/assets/img/shared/no-result-inbox.svg';\n\ninterface Props {\n    labelID: string;\n}\n\nconst EmptyView = ({ labelID }: Props) => {\n    const isInbox = labelID === MAILBOX_LABEL_IDS.INBOX;\n    const isFolder = !isInbox;\n    const isSearch = false; // TODO: when the search will be implemented\n\n    return (\n        <div className=\"m2\">\n            <figure className=\"flex-item-fluid aligncenter p3\">\n                {isSearch && <img src={noResultSearchSvg} alt={c('Search - no results').t`No results found`} />}\n                {isFolder && <img src={noResultSearchSvg} alt={c('Search - no results').t`No messages found`} />}\n                {isInbox && <img src={noResultInboxSvg} alt={c('Search - no results').t`No messages found`} />}\n\n                <figcaption className=\"mt2\">\n                    <h3 className=\"bold\">\n                        {isSearch\n                            ? c('Search - no results').t`No results found`\n                            : isFolder\n                            ? c('Search - no results').t`No messages found`\n                            : c('Search - no results').t`No messages found`}\n                    </h3>\n                    <p data-if=\"folder\">\n                        {isSearch\n                            ? // TODO: Add a link on clear it when search will work\n                              c('Info').t`Search - no results: You can either update your search query or clear it`\n                            : isFolder\n                            ? c('Info').t`You do not have any messages here`\n                            : c('Info').t`Seems like you are all caught up for now`}\n                    </p>\n                </figcaption>\n            </figure>\n        </div>\n    );\n};\n\nexport default EmptyView;\n","import { useCallback } from 'react';\nimport { useApi, useCache, useCachedModelResult } from 'react-components';\nimport { getContactGroupsModel } from 'proton-shared/lib/models/contactGroupsModel';\nimport { ContactGroup } from '../models/contact';\n\n/**\n * Temporary hook waiting for a solution about cache overriding in proton-shared\n * https://github.com/ProtonMail/proton-shared/pull/107\n * Workaround: manual use of the cache\n */\nexport const useContactGroups = () => {\n    const api = useApi();\n    const cache = useCache();\n\n    return useCachedModelResult(\n        cache,\n        'ContactGroups',\n        useCallback(() => getContactGroupsModel(api), [api])\n    ) as [ContactGroup[], boolean, any];\n};\n","import React, { useState, ChangeEvent } from 'react';\nimport { useLabels, useContactEmails } from 'react-components';\n\nimport Item from './Item';\nimport { Element } from '../../models/element';\nimport EmptyView from '../view/EmptyView';\nimport { ContactEmail } from '../../models/contact';\nimport { useContactGroups } from '../../hooks/useContactGroups';\n\ninterface Props {\n    labelID: string;\n    elementID?: string;\n    mailSettings: any;\n    elements?: Element[];\n    checkedIDs?: string[];\n    onCheck: (IDs?: string[], checked?: boolean) => void;\n    onClick: (element: Element) => void;\n}\n\nconst List = ({ labelID, elementID, mailSettings = {}, elements = [], checkedIDs = [], onCheck, onClick }: Props) => {\n    const [contacts, loadingContacts]: [ContactEmail[], boolean] = useContactEmails();\n    const [contactGroups, loadingGroups] = useContactGroups();\n    const [labels] = useLabels();\n    const [lastChecked, setLastChecked] = useState(); // Store ID of the last element ID checked\n\n    if (loadingContacts || loadingGroups) {\n        return null;\n    }\n\n    const handleCheck = (elementID: string) => (event: ChangeEvent) => {\n        const target = event.target as HTMLInputElement;\n        const { shiftKey } = event.nativeEvent as any;\n        const elementIDs = [elementID];\n\n        if (lastChecked && shiftKey) {\n            const start = elements.findIndex(({ ID }) => ID === elementID);\n            const end = elements.findIndex(({ ID }) => ID === lastChecked);\n            elementIDs.push(\n                ...elements.slice(Math.min(start, end), Math.max(start, end) + 1).map(({ ID }) => ID || '')\n            );\n        }\n\n        setLastChecked(elementID);\n        onCheck(elementIDs, target.checked);\n    };\n\n    return elements.length === 0 ? (\n        <EmptyView labelID={labelID} />\n    ) : (\n        <>\n            {elements.map((element) => {\n                return (\n                    <Item\n                        labels={labels}\n                        labelID={labelID}\n                        key={element.ID}\n                        elementID={elementID}\n                        element={element}\n                        checked={checkedIDs.includes(element.ID || '')}\n                        contacts={contacts}\n                        contactGroups={contactGroups}\n                        onCheck={handleCheck(element.ID || '')}\n                        onClick={onClick}\n                        mailSettings={mailSettings}\n                    />\n                );\n            })}\n        </>\n    );\n};\n\nexport default List;\n","import React from 'react';\nimport { classnames } from 'react-components';\n\nimport { isPlainText } from '../../helpers/message/messages';\nimport { MessageExtended } from '../../models/message';\n\nimport './MessageBody.scss';\n\ninterface Props {\n    message: MessageExtended;\n}\n\nconst MessageBody = ({ message: { content = '', data: message = {} } }: Props) => {\n    const plain = isPlainText(message);\n    return (\n        <div\n            className={classnames(['message-content bodyDecrypted', plain && 'plain'])}\n            dangerouslySetInnerHTML={{ __html: content }}\n        />\n    );\n};\n\nexport default MessageBody;\n","import { VERIFICATION_STATUS } from '../constants';\n\nimport { isAuto, isImported, inSigningPeriod } from './message/messages';\n\nconst { SIGNED_AND_INVALID, SIGNED_AND_VALID, NOT_SIGNED } = VERIFICATION_STATUS;\n\n/**\n * Some complicated logic after internal discussions.\n * This function returns whether we should display a lock with check / warning (indicating the signature status)\n * or we just display a lock.\n * The following logic is applied:\n *  1. Old SENT messages (not imported, not autoresponse) are not signed\n *  2. If a SENT message has been correctly verified, a lonesome lock is displayed, unaccompanied by its check\n *      (because we don't consciously do key pinning here)\n *  3. If a SENT message doesn't have a signature, but should have, we display a warning. A SENT message should have a signature if:\n *      - it is not an autoreply AND\n *      - it is not an import AND\n *      - it is send after the time when we started signing all messages\n *  4. If a message fails the signature check, we display a warning\n *  5. If a (non-sent) message has been correctly verified, we display a check.\n *  6. Else we just display the appropriate lock.\n *      - this happens when there is no signature or it hasn't been verified (meaning unverified SENT message fall in this case).\n *  This logic is caused by sent message's signatures always being verified without requiring the user to enable key pinning\n *  (key pinning for your own keys happens as a consequence of our authentication method).\n *  Thus we don't want to display this check for people that don't understand key pinning, but still keep the\n *  same security.\n *  @return {() => boolean} whether to display the signature status\n */\nexport const displaySignatureStatus = ({ data: message = {}, verified = 0 }) => {\n    // TODO: const isSentByMe = message.isSentByMe();\n    const isSentByMe = false;\n\n    // Rule 4 + 5 + 6 for non-SENT messages\n    if (!isSentByMe) {\n        return verified === SIGNED_AND_INVALID || verified === SIGNED_AND_VALID;\n    }\n    // SENT messages\n    const imported = isImported(message.data);\n    const auto = isAuto(message.data);\n    const period = inSigningPeriod(message.data.Time);\n    // Rule 1:\n    if (!auto && !imported && !period) {\n        return false;\n    }\n    // Rule 2:\n    if (verified === SIGNED_AND_VALID) {\n        return false;\n    }\n    // Rule 3:\n    if (verified === NOT_SIGNED && !auto && !imported && period) {\n        // warning\n        return true;\n    }\n    // Rule 4 + 6:\n    return verified === SIGNED_AND_INVALID;\n};\n","import { c } from 'ttag';\n\nimport {\n    isSentEncrypted,\n    isAuto,\n    isSent,\n    isDraft,\n    isInternalEncrypted,\n    isExternalEncrypted,\n    inSigningPeriod,\n    isImported\n} from './message/messages';\n\nconst I18N = {\n    pm: [\n        c('Message encryption status').t`End-to-end encrypted message`,\n        // gettextCatalog.getString('End-to-end encrypted message', null, 'Message encryption status'),\n        c('Message encryption status').t`End-to-end encrypted message from verified address`,\n        // gettextCatalog.getString(\n        //     'End-to-end encrypted message from verified address',\n        //     null,\n        //     'Message encryption status'\n        // ),\n        c('Message encryption status').t`Sender verification failed`\n        // gettextCatalog.getString('Sender verification failed', null, 'Message encryption status')\n    ],\n    pgp: [\n        c('Message encryption status').t`PGP-encrypted message`,\n        // gettextCatalog.getString('PGP-encrypted message', null, 'Message encryption status'),\n        c('Message encryption status').t`PGP-encrypted message from verified address`,\n        // gettextCatalog.getString('PGP-encrypted message from verified address', null, 'Message encryption status'),\n        c('Message encryption status').t`Sender verification failed`\n        // gettextCatalog.getString('Sender verification failed', null, 'Message encryption status')\n    ],\n    clear: [\n        c('Message encryption status').t`Stored with zero access encryption`,\n        // gettextCatalog.getString('Stored with zero access encryption', null, 'Message encryption status'),\n        c('Message encryption status').t`PGP-signed message from verified address`,\n        // gettextCatalog.getString('PGP-signed message from verified address', null, 'Message encryption status'),\n        c('Message encryption status').t`Sender verification failed`\n        // gettextCatalog.getString('Sender verification failed', null, 'Message encryption status')\n    ],\n    sentEncrypted: [\n        c('Message encryption status').t`Sent by you with end-to-end encryption`,\n        // gettextCatalog.getString('Sent by you with end-to-end encryption', null, 'Message encryption status'),\n        c('Message encryption status').t`Sent by you with end-to-end encryption`,\n        // gettextCatalog.getString('Sent by you with end-to-end encryption', null, 'Message encryption status'),\n        c('Message encryption status').t`Sender verification failed`\n        // gettextCatalog.getString('Sender verification failed', null, 'Message encryption status')\n    ],\n    auto: [\n        c('Message encryption status').t`Sent by ProtonMail with zero access encryption`\n        // gettextCatalog.getString('Sent by ProtonMail with zero access encryption', null, 'Message encryption status')\n    ],\n    sentClear: [\n        c('Message encryption status').t`Stored with zero access encryption`,\n        // gettextCatalog.getString('Stored with zero access encryption', null, 'Message encryption status'),\n        c('Message encryption status').t`Stored with zero access encryption`,\n        // gettextCatalog.getString('Stored with zero access encryption', null, 'Message encryption status'),\n        c('Message encryption status').t`Sender verification failed`\n        // gettextCatalog.getString('Sender verification failed', null, 'Message encryption status')\n    ],\n    draft: [\n        c('Message encryption status').t`Encrypted message`\n        //gettextCatalog.getString('Encrypted message', null, 'Message encryption status')\n    ]\n};\n\nconst getFromType = (message) => {\n    if (isSentEncrypted(message)) {\n        return I18N.sentEncrypted;\n    }\n\n    if (isAuto(message)) {\n        return I18N.auto;\n    }\n\n    if (isSent(message)) {\n        return I18N.sentClear;\n    }\n\n    if (isDraft(message)) {\n        return I18N.draft;\n    }\n\n    if (isInternalEncrypted(message)) {\n        return I18N.pm;\n    }\n\n    if (isExternalEncrypted(message)) {\n        return I18N.pgp;\n    }\n\n    return I18N.clear;\n};\n\nexport const getEncryptionType = ({ data: message = {}, verified = 0 }) => {\n    const encType = getFromType(message);\n\n    if (encType.length > verified) {\n        // Old messages are not signed, so missing sender signatures should be treated like external missing signatures, no warning\n        if (!inSigningPeriod(message) && isSentEncrypted(message) && !isImported(message)) {\n            return encType[0];\n        }\n\n        return encType[verified];\n    }\n\n    return encType[0];\n};\n","import React from 'react';\nimport { Icon, Tooltip, Href, classnames } from 'react-components';\nimport { displaySignatureStatus } from '../../helpers/displaySignature';\nimport { isPGPEncrypted, isInternal, isSentEncrypted, isDraft, isAuto } from '../../helpers/message/messages';\nimport { getEncryptionType } from '../../helpers/encryptionType';\nimport { MessageExtended } from '../../models/message';\n\n// Reference: Angular/src/templates/message/encryptionStatus.tpl.html\n\ninterface Props {\n    message: MessageExtended;\n    className?: string;\n}\n\nconst MessageLock = ({ message, className: inputClassName }: Props) => {\n    const displaySignature = displaySignatureStatus(message);\n    const pgpEncrypted = isPGPEncrypted(message.data);\n\n    const tooltip = getEncryptionType(message);\n    const href = displaySignature\n        ? 'https://protonmail.com/support/knowledge-base/digital-signature/'\n        : pgpEncrypted\n        ? 'https://protonmail.com/support/knowledge-base/how-to-use-pgp'\n        : 'https://protonmail.com/support/knowledge-base/what-is-encrypted/';\n    // TODO: add lock-signed lock-warning in design system\n    // const icon = displaySignature ? (message.verified ? 'lock-signed' : 'lock-warning') : 'lock';\n    const icon = 'lock';\n    const internal =\n        isInternal(message.data) || isSentEncrypted(message.data) || isDraft(message.data) || isAuto(message.data);\n    const className = classnames([\n        inputClassName,\n        'no-pointer-events-children',\n        ...(displaySignature\n            ? [\n                  message.verified === 1 && 'valid-sig',\n                  message.verified !== 1 && 'invalid-sig',\n                  internal && 'color-pm-blue', // 'internal',\n                  pgpEncrypted && 'pgp'\n              ]\n            : ['nodecoration color-global-grey flex', internal && 'color-pm-blue'])\n    ]);\n\n    return (\n        <Tooltip title={tooltip} className=\"inbl\">\n            <Href className={className} href={href}>\n                <Icon name={icon} className=\"fill-currentColor\" />\n            </Href>\n        </Tooltip>\n    );\n};\n\nexport default MessageLock;\n","import React, { MouseEvent } from 'react';\nimport { c } from 'ttag';\n\nimport ItemStar from '../../list/ItemStar';\nimport ItemDate from '../../list/ItemDate';\nimport { ELEMENT_TYPES } from '../../../constants';\nimport MessageLock from '../MessageLock';\nimport { isSent, isDraft } from '../../../helpers/message/messages';\nimport ItemLabels from '../../list/ItemLabels';\nimport ItemAttachmentIcon from '../../list/ItemAttachmentIcon';\nimport { MessageExtended } from '../../../models/message';\nimport { Label } from '../../../models/label';\n\ninterface Props {\n    message: MessageExtended;\n    labels: Label[];\n    onExpand: () => void;\n}\n\nconst HeaderCollapsed = ({ message, labels, onExpand }: Props) => {\n    const { Name, Address } = (message.data || {}).Sender || {};\n\n    const handleClick = (event: MouseEvent) => {\n        const target = event.target as HTMLElement;\n        if (target.classList.contains('item-star') || target.closest('.item-star')) {\n            event.stopPropagation();\n            return;\n        }\n\n        onExpand();\n    };\n\n    const inOutClass = isSent(message.data) ? 'is-outbound' : 'is-inbound';\n\n    return (\n        <div\n            className={`message-header message-header-collapsed flex flex-nowrap flex-items-center flex-spacebetween cursor-pointer ${inOutClass}`}\n            onClick={handleClick}\n        >\n            <div>\n                <span className=\"mr0-5\">{c('Label').t`From:`}</span>\n                <span className=\"bold mr0-5\" title={Name}>\n                    {Name}\n                </span>\n                <i title={Address}>&lt;{Address}&gt;</i>\n                <MessageLock message={message} />\n            </div>\n            <div>\n                {isDraft(message.data) && <span className=\"badgeLabel-success\">{c('Info').t`Draft`}</span>}\n                <ItemAttachmentIcon element={message.data} type={ELEMENT_TYPES.MESSAGE} />\n                <ItemLabels element={message.data || {}} labels={labels} className=\"mr1\" />\n                <ItemDate className=\"mr1\" element={message.data || {}} mode=\"distance\" />\n                <ItemStar element={message.data} type={ELEMENT_TYPES.MESSAGE} />\n            </div>\n        </div>\n    );\n};\n\nexport default HeaderCollapsed;\n","import React from 'react';\nimport { Icon } from 'react-components';\nimport { c } from 'ttag';\nimport { MessageExtended } from '../../../models/message';\n\ninterface Props {\n    message: MessageExtended;\n    type: string;\n    onLoadImages: () => void;\n}\n\nconst ExtraImages = ({\n    message: { showRemoteImages = true, showEmbeddedImages = true },\n    type,\n    onLoadImages\n}: Props) => {\n    // Flags will not be setted if there is no images\n    if ((type === 'remote' && showRemoteImages !== false) || (type === 'embedded' && showEmbeddedImages !== false)) {\n        return null;\n    }\n\n    return (\n        <div className=\"bg-white rounded bordered-container p0-5 mb0-5 flex flex-nowrap\">\n            <Icon name=\"insert-image\" className=\"fill-global-grey mtauto mbauto\" />\n            <span className=\"pl0-5 pr0-5 flex-item-fluid\">\n                {type === 'remote'\n                    ? c('Action').t`This message contains remote content`\n                    : c('Action').t`This message contains embedded images`}\n            </span>\n            <a onClick={onLoadImages} className=\"bold\">\n                {c('Action').t`Load`}\n            </a>\n        </div>\n    );\n};\n\nexport default ExtraImages;\n","import React from 'react';\nimport { Icon, Href } from 'react-components';\nimport { c } from 'ttag';\nimport { getListUnsubscribe } from '../../../helpers/message/messages';\nimport { MessageExtended } from '../../../models/message';\n\ninterface Props {\n    message: MessageExtended;\n}\n\nconst ExtraUnsubscribe = ({ message: { data: message = {} } }: Props) => {\n    if (/*unsubscribed || */ !getListUnsubscribe(message)) {\n        return null;\n    }\n\n    return (\n        <div className=\"bg-white rounded bordered-container p0-5 mb0-5 flex flex-nowrap\">\n            <Icon name=\"email\" className=\"flex-item-noshrink fill-global-grey mtauto mbauto\" />\n            <span className=\"pl0-5 pr0-5 flex-item-fluid\">{c('Info').t`This message is from a mailing list`}</span>\n            <span className=\"flex-item-noshrink flex\">\n                <Href\n                    className=\"bold mr1 pl0-5 pr0-5\"\n                    href=\"https://protonmail.com/support/knowledge-base/auto-unsubscribe\"\n                >\n                    {c('Info').t`Learn more`}\n                </Href>\n                <a className=\"bold\">{c('Action').t`Unsubscribe`}</a>\n            </span>\n        </div>\n    );\n};\n\nexport default ExtraUnsubscribe;\n","import React from 'react';\nimport ExtraImages from '../extras/ExtraImages';\nimport ExtraUnsubscribe from '../extras/ExtraUnsubscribe';\nimport { MessageExtended } from '../../../models/message';\n\ninterface Props {\n    message: MessageExtended;\n    onLoadRemoteImages: () => void;\n    onLoadEmbeddedImages: () => void;\n}\n\nconst HeaderExtra = ({ message, onLoadRemoteImages, onLoadEmbeddedImages }: Props) => {\n    return (\n        <section className=\"ml1 mr1 mt0-5\">\n            {/* TODO: ExpirationTime */}\n            {/* TODO: SpamScore */}\n            {/* TODO: MIMEParsingFailed */}\n            {/* TODO: hasError */}\n            <ExtraUnsubscribe message={message} />\n            {/* TODO: requireReadReceiptConfirmation */}\n            {/* TODO: isAutoReply */}\n            {/* TODO: attachedPublicKey */}\n            {/* TODO: promptKeyPinning */}\n            {/* TODO: askResign */}\n            <ExtraImages message={message} type=\"remote\" onLoadImages={onLoadRemoteImages} />\n            <ExtraImages message={message} type=\"embedded\" onLoadImages={onLoadEmbeddedImages} />\n        </section>\n    );\n};\n\nexport default HeaderExtra;\n","import React from 'react';\nimport { c } from 'ttag';\nimport { Message } from '../../../models/message';\nimport { getRecipients } from '../../../helpers/message/messages';\nimport { recipientsToRecipientOrGroup, getRecipientOrGroupLabel } from '../../../helpers/addresses';\nimport { ContactGroup, ContactEmail } from '../../../models/contact';\n\ninterface Props {\n    message?: Message;\n    contacts: ContactEmail[];\n    contactGroups: ContactGroup[];\n}\n\nconst HeaderRecipientsSimple = ({ message = {}, contacts, contactGroups }: Props) => {\n    const recipients = getRecipients(message);\n    const recipientsOrGroup = recipientsToRecipientOrGroup(recipients, contactGroups);\n\n    return (\n        <div className=\"flex\">\n            <span className=\"opacity-50 flex-self-vcenter container-to\">{c('Label').t`To:`}</span>\n            <span className=\"flex-self-vcenter mr1\">\n                {recipientsOrGroup.map((recipientOrGroup, index) => {\n                    const label = getRecipientOrGroupLabel(recipientOrGroup, contacts);\n                    return (\n                        <span key={index} className=\"mr0-5\" title={label}>\n                            {label}\n                            {index < recipientsOrGroup.length - 1 && ','}\n                        </span>\n                    );\n                })}\n            </span>\n        </div>\n    );\n};\n\nexport default HeaderRecipientsSimple;\n","import React from 'react';\nimport { c } from 'ttag';\nimport { Message } from '../../../models/message';\nimport { Recipient } from '../../../models/address';\nimport { ContactEmail, ContactGroup } from '../../../models/contact';\nimport { recipientsToRecipientOrGroup, getRecipientLabel, getRecipientGroupLabel } from '../../../helpers/addresses';\nimport { getContactsOfGroup } from '../../../helpers/contacts';\n\ninterface Props {\n    message?: Message;\n    contacts: ContactEmail[];\n    contactGroups: ContactGroup[];\n}\n\ninterface ListProps {\n    list: Recipient[];\n    contacts: ContactEmail[];\n    contactGroups: ContactGroup[];\n}\n\nconst RecipientsList = ({ list, contacts, contactGroups }: ListProps) => {\n    const recipientsOrGroup = recipientsToRecipientOrGroup(list, contactGroups);\n\n    return (\n        <span className=\"flex-self-vcenter flex flex-column\">\n            {recipientsOrGroup.map((recipientOrGroup, index) =>\n                recipientOrGroup.recipient ? (\n                    <span key={index}>\n                        {getRecipientLabel(recipientOrGroup.recipient)}{' '}\n                        <span className=\"opacity-50\">&lt;{recipientOrGroup.recipient.Address}&gt;</span>{' '}\n                    </span>\n                ) : (\n                    <span key={index}>\n                        {getRecipientGroupLabel(\n                            recipientOrGroup?.group,\n                            getContactsOfGroup(contacts, recipientOrGroup?.group?.group?.ID).length\n                        )}\n                    </span>\n                )\n            )}\n        </span>\n    );\n};\n\nconst HeaderRecipientsDetails = ({ message = {}, contacts, contactGroups }: Props) => {\n    const { ToList = [], CCList = [], BCCList = [] } = message;\n\n    return (\n        <div className=\"flex flex-column\">\n            {ToList.length > 0 && (\n                <span className=\"flex\">\n                    <span className=\"opacity-50 container-to\">{c('Label').t`To:`}</span>\n                    <span className=\"flex-self-vcenter mr1\">\n                        <RecipientsList list={ToList} contacts={contacts} contactGroups={contactGroups} />\n                    </span>\n                </span>\n            )}\n            {CCList.length > 0 && (\n                <span className=\"flex\">\n                    <span className=\"opacity-50 container-to\">{c('Label').t`CC:`}</span>\n                    <span className=\"flex-self-vcenter mr1\">\n                        <RecipientsList list={CCList} contacts={contacts} contactGroups={contactGroups} />\n                    </span>\n                </span>\n            )}\n            {BCCList.length > 0 && (\n                <span className=\"flex\">\n                    <span className=\"opacity-50 container-to\">{c('Label').t`BCC:`}</span>\n                    <span className=\"flex-self-vcenter mr1\">\n                        <RecipientsList list={BCCList} contacts={contacts} contactGroups={contactGroups} />\n                    </span>\n                </span>\n            )}\n        </div>\n    );\n};\n\nexport default HeaderRecipientsDetails;\n","import React, { useState, ReactNode } from 'react';\nimport { generateUID, usePopperAnchor, DropdownButton, Dropdown } from 'react-components';\n\ninterface Props {\n    content?: ReactNode;\n    children: ({ onClose }: { onClose: () => void }) => ReactNode;\n    autoClose?: boolean;\n    [rest: string]: any;\n}\n\nconst HeaderDropdown = ({ content, children, autoClose, ...rest }: Props) => {\n    const [uid] = useState(generateUID('dropdown'));\n\n    const { anchorRef, isOpen, toggle, close } = usePopperAnchor();\n\n    return (\n        <>\n            <DropdownButton {...rest} buttonRef={anchorRef} isOpen={isOpen} onClick={toggle} caretClassName={null}>\n                {content}\n            </DropdownButton>\n            <Dropdown id={uid} autoClose={autoClose} isOpen={isOpen} anchorRef={anchorRef} onClose={close}>\n                {children({ onClose: close })}\n            </Dropdown>\n        </>\n    );\n};\n\nexport default HeaderDropdown;\n","import React, { MouseEvent } from 'react';\nimport { c } from 'ttag';\nimport { Icon, Group, ButtonGroup, useToggle, useContactEmails } from 'react-components';\nimport humanSize from 'proton-shared/lib/helpers/humanSize';\n\nimport ItemStar from '../../list/ItemStar';\nimport ItemDate from '../../list/ItemDate';\nimport { ELEMENT_TYPES, MESSAGE_ACTIONS } from '../../../constants';\nimport ItemLabels from '../../list/ItemLabels';\nimport ItemLocation from '../../list/ItemLocation';\nimport MoveDropdown from '../../dropdown/MoveDropdown';\nimport LabelDropdown from '../../dropdown/LabelDropdown';\nimport HeaderExtra from './HeaderExtra';\nimport MessageLock from '../MessageLock';\nimport { isSent } from '../../../helpers/message/messages';\nimport HeaderRecipientsSimple from './HeaderRecipientsSimple';\nimport HeaderRecipientsDetails from './HeaderRecipientsDetails';\nimport ItemAttachmentIcon from '../../list/ItemAttachmentIcon';\nimport { MessageExtended } from '../../../models/message';\nimport { Label } from '../../../models/label';\nimport HeaderDropdown from './HeaderDropdown';\nimport { OnCompose } from '../../../containers/ComposerContainer';\n\nimport './MessageHeader.scss';\nimport { ContactEmail } from '../../../models/contact';\nimport { useContactGroups } from '../../../hooks/useContactGroups';\n\ninterface Props {\n    labels?: Label[];\n    mailSettings: any;\n    message: MessageExtended;\n    messageLoaded: boolean;\n    onLoadRemoteImages: () => void;\n    onLoadEmbeddedImages: () => void;\n    onCollapse: () => void;\n    onCompose: OnCompose;\n}\n\nconst HeaderExpanded = ({\n    labels,\n    message,\n    messageLoaded,\n    onLoadRemoteImages,\n    onLoadEmbeddedImages,\n    mailSettings,\n    onCollapse,\n    onCompose\n}: Props) => {\n    const [contacts]: [ContactEmail[]] = useContactEmails();\n    const [contactGroups] = useContactGroups();\n    const { state: showDetails, toggle: toggleDetails } = useToggle();\n\n    const { Name, Address } = (message.data || {}).Sender || {};\n    const inOutClass = isSent(message.data) ? 'is-outbound' : 'is-inbound';\n\n    const handleClick = (event: MouseEvent) => {\n        if ((event.target as HTMLElement).closest('.stop-propagation')) {\n            event.stopPropagation();\n            return;\n        }\n\n        onCollapse();\n    };\n    const handleCompose = (action: MESSAGE_ACTIONS) => () => {\n        onCompose({\n            action,\n            referenceMessage: message\n        });\n    };\n\n    return (\n        <div className={`message-header message-header-expanded ${inOutClass}`}>\n            <div\n                className=\"flex flex-nowrap flex-items-center flex-spacebetween pt1 pl1 pr1 pb0-5 cursor-pointer\"\n                onClick={handleClick}\n            >\n                <div>\n                    <span className=\"mr0-5\">{c('Label').t`From:`}</span>\n                    <span className=\"bold mr0-5\" title={Name}>\n                        {Name}\n                    </span>\n                    <i title={Address}>&lt;{Address}&gt;</i>\n                    <MessageLock message={message} className=\"stop-propagation\" />\n                </div>\n                <div>\n                    <ItemDate element={message.data || {}} mode=\"distance\" />\n                </div>\n            </div>\n            <div className=\"flex flex-nowrap flex-items-start flex-spacebetween ml1 mr1 mb0-5\">\n                {showDetails ? (\n                    <HeaderRecipientsDetails message={message.data} contacts={contacts} contactGroups={contactGroups} />\n                ) : (\n                    <HeaderRecipientsSimple message={message.data} contacts={contacts} contactGroups={contactGroups} />\n                )}\n                <div>\n                    <ItemAttachmentIcon element={message.data || {}} type={ELEMENT_TYPES.MESSAGE} />\n                    {' ' /* This space is important to keep a small space between elements */}\n                    <ItemLabels max={4} element={message.data || {}} labels={labels} />\n                    {' ' /* This space is important to keep a small space between elements */}\n                    <ItemLocation message={message.data || {}} mailSettings={mailSettings} />\n                    {' ' /* This space is important to keep a small space between elements */}\n                    <ItemStar element={message.data || {}} type={ELEMENT_TYPES.MESSAGE} />\n                </div>\n            </div>\n            {showDetails ? (\n                <>\n                    <div className=\"ml1 mr1 mb0-5\">\n                        <span className=\"mr0-5\">{c('Label').t`Size:`}</span>\n                        <span>{humanSize((message.data || {}).Size || 0)}</span>\n                    </div>\n                    <div className=\"ml1 mr1 mb0-5\">\n                        <ItemDate element={message.data || {}} mode=\"full\" />\n                    </div>\n                </>\n            ) : null}\n            <div className=\"flex flex-spacebetween ml1 mr1 mb1 flex-nowrap\">\n                <a onClick={toggleDetails} className=\"bold flex-self-vcenter\">\n                    {showDetails ? c('Action').t`Hide details` : c('Action').t`Show details`}\n                </a>\n                <div>\n                    <Group className=\"mr1\">\n                        <HeaderDropdown autoClose={false} content={<Icon name=\"folder\" />}>\n                            {({ onClose }) => (\n                                <MoveDropdown\n                                    selectedIDs={[(message.data || {}).ID || '']}\n                                    type={ELEMENT_TYPES.MESSAGE}\n                                    onClose={onClose}\n                                />\n                            )}\n                        </HeaderDropdown>\n                        <HeaderDropdown autoClose={false} content={<Icon name=\"label\" />}>\n                            {({ onClose }) => (\n                                <LabelDropdown\n                                    selectedIDs={[(message.data || {}).ID || '']}\n                                    type={ELEMENT_TYPES.MESSAGE}\n                                    onClose={onClose}\n                                />\n                            )}\n                        </HeaderDropdown>\n                    </Group>\n\n                    <Group>\n                        <ButtonGroup disabled={!messageLoaded} onClick={handleCompose(MESSAGE_ACTIONS.REPLY)}>\n                            <Icon name=\"reply\" />\n                        </ButtonGroup>\n                        <ButtonGroup disabled={!messageLoaded} onClick={handleCompose(MESSAGE_ACTIONS.REPLY_ALL)}>\n                            <Icon name=\"reply-all\" />\n                        </ButtonGroup>\n                        <ButtonGroup disabled={!messageLoaded} onClick={handleCompose(MESSAGE_ACTIONS.FORWARD)}>\n                            <Icon name=\"forward\" />\n                        </ButtonGroup>\n                    </Group>\n                </div>\n            </div>\n            <HeaderExtra\n                message={message}\n                onLoadRemoteImages={onLoadRemoteImages}\n                onLoadEmbeddedImages={onLoadEmbeddedImages}\n            />\n        </div>\n    );\n};\n\nexport default HeaderExpanded;\n","import { Attachment } from '../../models/attachment';\n\nexport const embeddableTypes = ['image/gif', 'image/jpeg', 'image/png', 'image/bmp'];\n\nexport const isEmbeddedLocal = ({\n    Headers: { 'content-disposition': disposition, embedded } = {}\n}: Attachment = {}) => {\n    return disposition === 'inline' || Number(embedded) === 1;\n};\n\nexport const isEmbeddable = (fileType: string) => embeddableTypes.includes(fileType);\n","export const getAttachment = (attachmentID: string) => ({\n    method: 'get',\n    url: `attachments/${attachmentID}`,\n    output: 'arrayBuffer'\n});\n\nexport const uploadAttachment = (data: {\n    Filename: string;\n    MessageID: string;\n    ContentID: string;\n    MIMEType: string;\n    KeyPackets: Blob;\n    DataPacket: Blob;\n    Signature?: Blob;\n}) => ({\n    method: 'post',\n    url: 'attachments',\n    input: 'form',\n    data\n});\n\nexport const removeAttachment = (attachmentID: string, messageID: string) => ({\n    method: 'delete',\n    url: `attachments/${attachmentID}`,\n    params: { MessageID: messageID }\n});\n","import {\n    binaryStringToArray,\n    concatArrays,\n    decodeBase64,\n    decryptMessage,\n    decryptSessionKey,\n    getMessage,\n    SessionKey,\n    BinaryResult\n} from 'pmcrypto';\n\nimport { getAttachment } from '../../api/attachments';\nimport { MessageExtended } from '../../models/message';\nimport { Attachment } from '../../models/attachment';\nimport { AttachmentsDataCache } from '../../hooks/useAttachments';\nimport { Api } from '../../models/utils';\n\n// Reference: Angular/src/app/attachments/services/AttachmentLoader.js\n\n// TODO: Handle isOutside()\n\nexport const decrypt = async (encryptedBinaryBuffer: ArrayBuffer, sessionKey: SessionKey): Promise<BinaryResult> => {\n    const encryptedBinary = new Uint8Array(encryptedBinaryBuffer);\n\n    try {\n        return decryptMessage({\n            message: await getMessage(encryptedBinary),\n            sessionKeys: [sessionKey],\n            format: 'binary'\n        }) as BinaryResult;\n    } catch (err) {\n        console.error(err);\n        throw err;\n    }\n};\n\nexport const getRequest = ({ ID = '' }: Attachment = {}, api: Api): Promise<ArrayBuffer> => {\n    // if (isOutside()) {\n    //     const decryptedToken = eoStore.getToken();\n    //     const token = $stateParams.tag;\n    //     return Eo.attachment(decryptedToken, token, ID);\n    // }\n\n    return api(getAttachment(ID));\n};\n\nexport const getSessionKey = async (attachment: Attachment, message: MessageExtended): Promise<SessionKey> => {\n    // if (attachment.sessionKey) {\n    //     return attachment;\n    // }\n\n    const keyPackets = binaryStringToArray(decodeBase64(attachment.KeyPackets) || '');\n    const options = { message: await getMessage(keyPackets), privateKeys: message.privateKeys as any };\n\n    // if (isOutside()) {\n    //     options.passwords = [eoStore.getPassword()];\n    // } else {\n    //     options.privateKeys = keysModel.getPrivateKeys(message.AddressID);\n    // }\n\n    const sessionKey = await decryptSessionKey(options);\n\n    if (sessionKey === undefined) {\n        throw new Error('Error while decrypting session keys');\n    }\n\n    return sessionKey;\n};\n\nexport const getDecryptedAttachment = async (\n    attachment: Attachment,\n    message: MessageExtended,\n    api: Api\n): Promise<BinaryResult> => {\n    const encryptedBinary = await getRequest(attachment, api);\n    try {\n        const sessionKey = await getSessionKey(attachment, message);\n        return await decrypt(encryptedBinary, sessionKey);\n    } catch (error) {\n        const blob = concatArrays([\n            binaryStringToArray(decodeBase64(attachment.KeyPackets) || ''),\n            new Uint8Array(encryptedBinary)\n        ]);\n        // Fallback download raw attachment\n        throw { data: attachment, binary: blob, error };\n    }\n};\n\nexport const getAndVerify = async (\n    attachment: Attachment = {},\n    message: MessageExtended = {},\n    reverify = false,\n    cache: AttachmentsDataCache,\n    api: Api\n): Promise<BinaryResult> => {\n    let attachmentdata: BinaryResult;\n\n    const attachmentID = attachment.ID || '';\n\n    if (attachment.Preview) {\n        return { data: attachment.Preview, filename: 'preview', signatures: [] };\n    }\n\n    if (cache.has(attachmentID)) {\n        attachmentdata = cache.get(attachmentID) as BinaryResult;\n    } else {\n        attachmentdata = await getDecryptedAttachment(attachment, message, api);\n\n        if (reverify) {\n            // await verify(attachment, newAttachment, message, signatures, signatureCache));\n        }\n    }\n\n    cache.set(attachmentID, attachmentdata);\n\n    return attachmentdata;\n};\n\nexport const get = (\n    attachment: Attachment = {},\n    message: MessageExtended = {},\n    cache: AttachmentsDataCache,\n    api: Api\n): Promise<BinaryResult> => {\n    const reverify = false;\n    return getAndVerify(attachment, message, reverify, cache, api);\n};\n\nexport const reverify = (\n    attachment: Attachment = {},\n    message: MessageExtended = {},\n    cache: AttachmentsDataCache,\n    api: Api\n): Promise<BinaryResult> => {\n    const reverify = true;\n    return getAndVerify(attachment, message, reverify, cache, api);\n};\n","import JSZip from 'jszip';\nimport downloadFile from 'proton-shared/lib/helpers/downloadFile';\nimport { splitExtension } from 'proton-shared/lib/helpers/file';\n\nimport { MessageExtended, Message } from '../../models/message';\nimport { Attachment } from '../../models/attachment';\nimport { getAndVerify } from './attachmentLoader';\nimport { AttachmentsDataCache } from '../../hooks/useAttachments';\nimport { Api, Binary } from '../../models/utils';\n\ninterface Download {\n    attachment: Attachment;\n    data: Binary;\n    isError?: boolean;\n}\n\n/**\n * Format attachment for the download\n */\nconst formatDownload = async (\n    attachment: Attachment,\n    message: MessageExtended,\n    cache: AttachmentsDataCache,\n    api: Api\n): Promise<Download> => {\n    try {\n        const { data } = await getAndVerify(attachment, message, false, cache, api);\n        return {\n            attachment,\n            data: data as Binary\n        };\n    } catch (e) {\n        // If the decryption fails we download the encrypted version\n        if (e.data) {\n            return {\n                attachment: {\n                    Name: `${attachment.Name}.pgp`,\n                    MIMEType: 'application/pgp',\n                    ID: attachment.ID\n                },\n                data: e.data,\n                isError: true\n            };\n        }\n        throw e;\n    }\n};\n\n/**\n * Generate a download for an attachment\n */\nconst generateDownload = async (download: Download /*, message: MessageExtended*/) => {\n    // TODO: uncomment\n    // try {\n    //     await checkAllSignatures(message, [attachment]);\n    // } catch (e) {\n    //     // swallow as the user is informed already by a confirmation and actually caused this error\n    //     return;\n    // }\n\n    downloadFile(new Blob([download.data], { type: download.attachment.MIMEType }), download.attachment.Name);\n};\n\n/**\n * Download an attachment\n */\nexport const download = async (\n    attachment: Attachment,\n    message: MessageExtended,\n    cache: AttachmentsDataCache,\n    api: Api\n): Promise<void> => {\n    const download = await formatDownload(attachment, message, cache, api);\n\n    // TODO: uncomment\n    // if (download.isError) {\n    //     if (!(await allowDownloadBrokenAtt())) {\n    //         return; // We don't want to download it\n    //     }\n    // }\n\n    return generateDownload(download);\n};\n\n/**\n * The attachment's Name is not unique we need a unique name in order to make the zip.\n * The lib doesn't allow duplicates\n */\nconst formatDownloadAll = async (\n    message: MessageExtended,\n    cache: AttachmentsDataCache,\n    api: Api\n): Promise<Download[]> => {\n    const { Attachments = [] } = message.data || {};\n    const { list }: { list: Attachment[] } = Attachments.reduce(\n        (acc: any, att) => {\n            const name = att.Name || '';\n            if (!acc.map[name]) {\n                acc.map[name] = { index: 0 };\n            } else {\n                acc.map[name].index++;\n                const [fileName, ext] = splitExtension(name);\n                const newName = `${fileName} (${acc.map[name].index}).${ext}`;\n                att.Name = newName;\n            }\n            acc.list.push(att);\n            return acc;\n        },\n        { list: [], map: {} }\n    );\n\n    return Promise.all(list.map((att) => formatDownload(att, message, cache, api)));\n};\n\nconst getZipAttachmentName = (message: Message = {}) => `Attachments-${message.Subject}.zip`;\n\n/**\n * Download all attachments as a zipfile\n */\nexport const downloadAll = async (\n    message: MessageExtended = {},\n    cache: AttachmentsDataCache,\n    api: Api\n): Promise<void> => {\n    const list = await formatDownloadAll(message, cache, api);\n\n    // TODO: uncomment\n    // try {\n    //     await checkAllSignatures(message, list);\n    // } catch (e) {\n    //     // swallow as the user is informed already by a confirmation and actually caused this error\n    //     return;\n    // }\n\n    // TODO: uncomment\n    // // Detect if we have at least one error\n    // if (list.some(({ isError }) => isError)) {\n    //     if (!(await allowDownloadBrokenAtt())) {\n    //         return; // We don't want to download it\n    //     }\n    // }\n\n    const zip = new JSZip();\n    list.forEach(({ attachment: { Name = '' }, data }) => zip.file(Name, data));\n    const content = await zip.generateAsync({ type: 'blob' });\n    downloadFile(content, getZipAttachmentName(message.data));\n};\n","import { useCache } from 'react-components';\nimport { BinaryResult } from 'pmcrypto';\nimport { Attachment } from '../models/attachment';\n\nconst CACHE_KEY = 'Attachments';\n\nexport interface BlobInfo {\n    url: string;\n    isContentLocation: boolean;\n}\n\nexport type AttachmentsDataCache = Map<string, BinaryResult>;\nexport type AttachmentsBlobsCache = Map<string, BlobInfo>;\nexport type AttachmentsCidsCache = Map<string, Map<string, Attachment>>;\n// export type AttachmentsUploadQueue = Map<string, File[]>;\n\nexport interface AttachmentsCache {\n    data: AttachmentsDataCache;\n    blobs: AttachmentsBlobsCache;\n    cids: AttachmentsCidsCache;\n    // uploads: AttachmentsUploadQueue;\n}\n\nexport const useAttachmentsCache = (): AttachmentsCache => {\n    const globalCache = useCache();\n\n    if (!globalCache.has(CACHE_KEY)) {\n        globalCache.set(CACHE_KEY, {\n            data: new Map(),\n            blobs: new Map(),\n            cids: new Map()\n            // uploads: []\n        });\n    }\n\n    return globalCache.get(CACHE_KEY);\n};\n","import React, { useState } from 'react';\nimport humanSize from 'proton-shared/lib/helpers/humanSize';\nimport { Icon, classnames, useApi } from 'react-components';\nimport { MessageExtended } from '../../models/message';\nimport { isEmbeddedLocal } from '../../helpers/attachment/attachments';\nimport { Attachment } from '../../models/attachment';\nimport { download } from '../../helpers/attachment/attachmentDownloader';\nimport { useAttachmentsCache } from '../../hooks/useAttachments';\n\n// Reference: Angular/src/templates/attachments/attachmentElement.tpl.html\n\nconst OUTER_MAP_CLASSNAME: { [key: string]: string } = {\n    zip: 'file-rar-zip',\n    mp3: 'file-video',\n    javascript: 'file-unknown',\n    vcard: 'file-unknown',\n    xls: 'file-xls',\n    mov: 'file-video',\n    pdf: 'file-pdf',\n    power: 'file-ppt',\n    word: 'file-doc'\n};\n\nconst INNER_MAP_CLASSNAME: { [key: string]: string } = {\n    'pgp-keys': 'fa-key'\n};\n\nconst getFileIconType = ({ MIMEType = '' }: Attachment) => {\n    const key = Object.keys(OUTER_MAP_CLASSNAME).find((key) => MIMEType.includes(key));\n    return OUTER_MAP_CLASSNAME[key || ''] || '';\n};\n\nconst getInnerFileIconType = ({ MIMEType = '' }: Attachment) => {\n    const key = Object.keys(INNER_MAP_CLASSNAME).find((key) => MIMEType.includes(key));\n    return INNER_MAP_CLASSNAME[key || ''] || '';\n};\n\ninterface Props {\n    attachment: Attachment;\n    message: MessageExtended;\n}\n\nconst MessageAttachment = ({ attachment, message }: Props) => {\n    const cache = useAttachmentsCache();\n    const api = useApi();\n    const [showLoader, setShowLoader] = useState(false);\n    const [showInstant, setShowInstant] = useState(false);\n\n    const humanAttachmentSize = humanSize(attachment.Size);\n\n    const outerIcon = getFileIconType(attachment) || 'file-image';\n    const single = !getInnerFileIconType(attachment);\n    const isEmbedded = isEmbeddedLocal(attachment);\n\n    const classNames = classnames([\n        'listAttachments-icon listAttachments-signature-icon mauto file-outer-icon',\n        single && 'single',\n        isEmbedded && 'is-embedded'\n    ]);\n\n    const clickHandler = async () => {\n        setShowLoader(true);\n        await download(attachment, message, cache.data, api);\n        setShowLoader(false);\n        setShowInstant(true);\n    };\n\n    const icon = showLoader ? '' : showInstant ? 'download' : outerIcon;\n    const showInner = !single && !showLoader && !showInstant;\n\n    return (\n        <li className=\"mr1 mb1\">\n            <a\n                className=\"message-attachment inline-flex flex-nowrap mw100 pm-button listAttachments-item relative no-pointer-events-children\"\n                title={`${attachment.Name} ${humanAttachmentSize}`}\n                onClick={clickHandler}\n            >\n                <span className=\"flex flex-item-noshrink message-attachmentIcon relative flex\">\n                    <Icon name={icon} size={20} className={classNames} aria-busy={showLoader} />\n                    {showInner && <Icon name=\"key\" className=\"file-inner-icon mauto\" />}\n                </span>\n                <span className=\"inbl ellipsis flex flex-column message-attachmentInfo\">\n                    <span className=\"bl ellipsis mw100\">{attachment.Name}</span>\n                    <span className=\"bl message-attachmentSize\">{humanAttachmentSize}</span>\n                </span>\n            </a>\n        </li>\n    );\n};\n\nexport default MessageAttachment;\n","import React, { useState } from 'react';\nimport { c, msgid } from 'ttag';\nimport { Icon, useApi } from 'react-components';\nimport humanSize from 'proton-shared/lib/helpers/humanSize';\n\nimport { attachmentsSize, getAttachments } from '../../helpers/message/messages';\nimport MessageAttachment from './MessageAttachment';\nimport { MessageExtended } from '../../models/message';\nimport { useAttachmentsCache } from '../../hooks/useAttachments';\nimport { downloadAll } from '../../helpers/attachment/attachmentDownloader';\n\ninterface Props {\n    message: MessageExtended;\n}\n\nconst MessageFooter = ({ message }: Props) => {\n    const cache = useAttachmentsCache();\n    const api = useApi();\n    const [showLoader, setShowLoader] = useState(false);\n    const [showInstant, setShowInstant] = useState(false);\n\n    const humanAttachmentsSize = humanSize(attachmentsSize(message.data));\n    const attachments = getAttachments(message.data);\n    const numAttachments = attachments.length;\n    const numEmbedded = message.numEmbedded || 0;\n    const numPureAttachments = numAttachments - numEmbedded;\n\n    const handleDownloadAll = async () => {\n        setShowLoader(true);\n        await downloadAll(message, cache.data, api);\n        setShowLoader(false);\n        setShowInstant(true);\n    };\n\n    return (\n        <div className=\"message-attachments\">\n            <div className=\"flex flex-spacebetween mb1\">\n                <span className=\"title\">\n                    <strong className=\"listAttachments-title-size mr0-5\">{humanAttachmentsSize}</strong>\n                    {numPureAttachments > 0 && (\n                        <span className=\"listAttachments-title-files mr0-5\">\n                            <Icon name=\"attach\" className=\"mr0-5\" />\n                            {c('Info').ngettext(\n                                msgid`${numPureAttachments} file attached`,\n                                `${numPureAttachments} files attached`,\n                                numPureAttachments\n                            )}\n                        </span>\n                    )}\n                    {numEmbedded > 0 && (\n                        <span className=\"listAttachments-title-embedded mr0-5\">\n                            {/* TODO: color=\"pm-blue\" */}\n                            <Icon name=\"file-image\" className=\"mr0-5\" />\n                            {c('Info').ngettext(\n                                msgid`${numEmbedded} embedded image`,\n                                `${numEmbedded} embedded images`,\n                                numEmbedded\n                            )}\n                        </span>\n                    )}\n                </span>\n                {numAttachments > 0 && (\n                    <div>\n                        <button type=\"button\" onClick={handleDownloadAll} className=\"link strong mr0-5\">\n                            {c('Download attachments').t`Download all`}\n                        </button>\n                        {(showInstant || showLoader) && (\n                            <Icon name={showInstant ? 'download' : ''} aria-busy={showLoader} />\n                        )}\n                    </div>\n                )}\n            </div>\n\n            <ul className=\"listAttachments-list unstyled flex mb0\">\n                {attachments.map((attachment) => (\n                    <MessageAttachment key={attachment.ID} attachment={attachment} message={message} />\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default MessageFooter;\n","// import getRandomValues from 'get-random-values';\n\n// import { EMAIL_FORMATING } from '../app/constants';\n\nexport const EMAIL_FORMATING = {\n    OPEN_TAG_AUTOCOMPLETE: '‹',\n    CLOSE_TAG_AUTOCOMPLETE: '›',\n    OPEN_TAG_AUTOCOMPLETE_RAW: '<',\n    CLOSE_TAG_AUTOCOMPLETE_RAW: '>'\n};\n\nconst {\n    OPEN_TAG_AUTOCOMPLETE,\n    CLOSE_TAG_AUTOCOMPLETE,\n    OPEN_TAG_AUTOCOMPLETE_RAW,\n    CLOSE_TAG_AUTOCOMPLETE_RAW\n} = EMAIL_FORMATING;\n\nexport const MAP_TAGS = {\n    [OPEN_TAG_AUTOCOMPLETE_RAW]: OPEN_TAG_AUTOCOMPLETE,\n    [CLOSE_TAG_AUTOCOMPLETE_RAW]: CLOSE_TAG_AUTOCOMPLETE,\n    [OPEN_TAG_AUTOCOMPLETE]: OPEN_TAG_AUTOCOMPLETE_RAW,\n    [CLOSE_TAG_AUTOCOMPLETE]: CLOSE_TAG_AUTOCOMPLETE_RAW\n};\n\nexport const escape = (string: string) => {\n    const UNESCAPE_HTML_REGEX = /[&<>\"']/g;\n    const HTML_ESCAPES = {\n        '&': '&amp;',\n        '<': '&lt;',\n        '>': '&gt;',\n        '\"': '&quot;',\n        \"'\": '&#39;'\n    };\n\n    return string.replace(UNESCAPE_HTML_REGEX, HTML_ESCAPES as any);\n};\n\nexport const unescape = (string: string) => {\n    const ESCAPED_HTML_REGEX = /&(?:amp|lt|gt|quot|#39);/g;\n    const HTML_UNESCAPES = {\n        '&amp;': '&',\n        '&lt;': '<',\n        '&gt;': '>',\n        '&quot;': '\"',\n        '&#39;': \"'\"\n    };\n\n    return string.replace(ESCAPED_HTML_REGEX, HTML_UNESCAPES as any);\n};\n\n/**\n * Replace custom unicode escape for chevrons by default\n * Replace <> (for a tag) via unicode or reverse it\n * mode undefined for toUnicode, reverse for unicode -> <|>\n */\nexport function unicodeTag(input = '', mode: 'reverse' | undefined) {\n    if (mode === 'reverse') {\n        const matchTagUnicodeOpenClose = () => new RegExp(`${OPEN_TAG_AUTOCOMPLETE}|${CLOSE_TAG_AUTOCOMPLETE}`, 'ig');\n\n        return input.replace(matchTagUnicodeOpenClose(), (match) => MAP_TAGS[match] || '');\n    }\n\n    const matchTagOpenClose = () => new RegExp(`${OPEN_TAG_AUTOCOMPLETE_RAW}|${CLOSE_TAG_AUTOCOMPLETE_RAW}`, 'ig');\n    return input.replace(matchTagOpenClose(), (match) => MAP_TAGS[match] || '');\n}\n\n/**\n * Converts the integer to a 32-bit base encoded string in 2s complement format, so that it doesn't contain a sign \"-\"\n * @param val The integer to be encoded\n * @param bits The amount of bits per character\n */\nexport const toUnsignedString = (val: number, bits: number) => {\n    const base = 1 << bits;\n    const wordCount = Math.ceil(32 / bits);\n    const bottomBits = (wordCount - 1) * bits;\n\n    const bottom = val & ((1 << bottomBits) - 1);\n    const top = val >>> bottomBits;\n    if (top === 0) {\n        return bottom.toString(base);\n    }\n    const topString = top.toString(base);\n    const bottomString = bottom.toString(base);\n    const padLength = wordCount - topString.length - bottomString.length;\n    const middleString = '0'.repeat(padLength);\n    return topString + middleString + bottomString;\n};\n\n/**\n * Unescape a string in hex or octal encoding.\n * See https://www.w3.org/International/questions/qa-escapes#css_other for all possible cases.\n */\nexport const unescapeCSSEncoding = (str: string) => {\n    // Regexp declared inside the function to reset its state (because of the global flag).\n    // cf https://stackoverflow.com/questions/1520800/why-does-a-regexp-with-global-flag-give-wrong-results\n    const UNESCAPE_CSS_ESCAPES_REGEX = /\\\\([0-9A-Fa-f]{1,6}) ?/g;\n    const UNESCAPE_HTML_DEC_REGEX = /&#(\\d+)(;|(?=[^\\d;]))/g;\n    const UNESCAPE_HTML_HEX_REGEX = /&#x([0-9A-Fa-f]+)(;|(?=[^\\d;]))/g;\n    const OTHER_ESC = /\\\\(.)/g;\n\n    const handleEscape = (radix: number) => (ignored: any, val: string) =>\n        String.fromCodePoint(Number.parseInt(val, radix));\n    /*\n     * basic unescaped named sequences: &amp; etcetera, lodash does not support a lot, but that is not a problem for our case.\n     * Actually handling all escaped sequences would mean keeping track of a very large and ever growing amount of named sequences\n     */\n    const namedUnescaped = unescape(str);\n    // lodash doesn't unescape &#160; or &#xA0; sequences, we have to do this manually:\n    const decUnescaped = namedUnescaped.replace(UNESCAPE_HTML_DEC_REGEX, handleEscape(10));\n    const hexUnescaped = decUnescaped.replace(UNESCAPE_HTML_HEX_REGEX, handleEscape(16));\n    // unescape css backslash sequences\n    const strUnescapedHex = hexUnescaped.replace(UNESCAPE_CSS_ESCAPES_REGEX, handleEscape(16));\n\n    return strUnescapedHex.replace(OTHER_ESC, (_, char) => char);\n};\n\nexport const ucFirst = (input = '') => {\n    return input.charAt(0).toUpperCase() + input.slice(1);\n};\n\n/**\n * Extract value between chevrons\n * @param str ex: Andy <andy@pm.me>\n * @return ex: andy@pm.me\n */\nexport const extractChevrons = (str = '') => {\n    const CHEVRONS_REGEX = /<([^>]+)>/g;\n    const [, match = ''] = CHEVRONS_REGEX.exec(str) || [];\n    return match;\n};\n\n/**\n * @{link https://css-tricks.com/snippets/javascript/htmlentities-for-javascript/}\n */\nexport const htmlEntities = (str = '') => {\n    return String(str)\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;');\n};\n\nexport const uniqID = () => {\n    return `pt${Math.random()\n        .toString(32)\n        .slice(2, 12)}-${Date.now()}`;\n};\n\n/**\n * Generates a contact UID of the form 'proton-web-uuid'\n * @return {String}\n */\nexport function generateUID() {\n    const s4 = () => {\n        return Math.floor((1 + Math.random()) * 0x10000)\n            .toString(16)\n            .substring(1);\n    };\n\n    return `proton-web-${s4()}${s4()}-${s4()}-${s4()}-${s4()}-${s4()}${s4()}${s4()}`;\n}\n\n/**\n * Generate a random string.\n * @param {Number} length\n * @return {string}\n */\n// export const getRandomString = (length) => {\n//     const charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n//     let i;\n//     let result = '';\n\n//     const values = getRandomValues(new Uint32Array(length));\n\n//     for (i = 0; i < length; i++) {\n//         result += charset[values[i] % charset.length];\n//     }\n\n//     return result;\n// };\n\nexport const replaceLineBreaks = (content: string) => {\n    return content.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />');\n};\n","import DOMPurify from 'dompurify';\n\nimport { unicodeTag, unescapeCSSEncoding, escape } from './string';\n\n/*\nThis is valid\n    - background:&#117;r&#108;(\n    - background:url&lpar;\n    - etc.\n*/\nconst CSS_URL = '((url)(\\\\(|&(#40|#x00028|lpar);))';\nconst REGEXP_URL_ATTR = new RegExp(CSS_URL, 'gi');\nconst { LIST_PROTON_ATTR, MAP_PROTON_ATTR } = [\n    'data-src',\n    'src',\n    'srcset',\n    'background',\n    'poster',\n    'xlink:href'\n].reduce(\n    (acc, attr) => {\n        acc.LIST_PROTON_ATTR.push(`proton-${attr}`);\n        acc.MAP_PROTON_ATTR[attr] = true;\n        return acc;\n    },\n    {\n        LIST_PROTON_ATTR: [] as string[],\n        MAP_PROTON_ATTR: Object.create(null)\n    }\n);\n\nconst CONFIG: { [key: string]: any } = {\n    default: {\n        ALLOWED_URI_REGEXP: /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|blob|xmpp|data):|[^a-z]|[a-z+.\\-]+(?:[^a-z+.\\-:]|$))/i, // eslint-disable-line no-useless-escape\n        ADD_TAGS: ['proton-src', 'base', 'proton-svg'],\n        ADD_ATTR: ['target', 'proton-src'],\n        FORBID_TAGS: ['style', 'input', 'form'],\n        FORBID_ATTR: ['srcset']\n    },\n    // When we display a message we need to be global and return more informations\n    raw: { WHOLE_DOCUMENT: true, RETURN_DOM: true },\n    html: { WHOLE_DOCUMENT: false, RETURN_DOM: true },\n    protonizer: {\n        FORBID_ATTR: {},\n        ADD_ATTR: ['target'].concat(LIST_PROTON_ATTR),\n        WHOLE_DOCUMENT: true,\n        RETURN_DOM: true\n    },\n    content: {\n        ALLOW_UNKNOWN_PROTOCOLS: true,\n        WHOLE_DOCUMENT: false,\n        RETURN_DOM: true,\n        RETURN_DOM_FRAGMENT: true\n    }\n};\n\n/**\n * Escape some WTF from the CSSParser, cf spec files\n * @param  {String} style\n * @return {String}\n */\nconst escapeURLinStyle = (style: string) => {\n    // handle the case where the value is html encoded, e.g.:\n    // background:&#117;rl(&quot;https://i.imgur.com/WScAnHr.jpg&quot;)\n\n    const unescapedEncoding = unescapeCSSEncoding(style);\n    const escapeFlag = unescapedEncoding !== style;\n\n    const escapedStyle = unescapedEncoding.replace(/\\\\r/g, 'r').replace(REGEXP_URL_ATTR, 'proton-url(');\n\n    if (escapedStyle === unescapedEncoding) {\n        // nothing escaped: just return input\n        return style;\n    }\n\n    return escapeFlag ? escape(escapedStyle) : escapedStyle;\n};\n\nfunction beforeSanitizeElements(node: Element) {\n    // We only work on elements\n    if (node.nodeType !== 1) {\n        return node;\n    }\n\n    Array.from(node.attributes).forEach((type) => {\n        const item = type.name;\n        if (MAP_PROTON_ATTR[item]) {\n            node.setAttribute('proton-' + item, node.getAttribute(item) || '');\n            node.removeAttribute(item);\n        }\n\n        if (item === 'style') {\n            const escaped = escapeURLinStyle(node.getAttribute('style') || '');\n            node.setAttribute('style', escaped);\n        }\n    });\n\n    return node;\n}\n\nexport const purifyHTMLHooks = (active: boolean) => {\n    if (active) {\n        return DOMPurify.addHook('beforeSanitizeElements', beforeSanitizeElements);\n    }\n\n    DOMPurify.removeHook('beforeSanitizeElements');\n};\n\nconst getConfig = (type: string) => ({ ...CONFIG.default, ...(CONFIG[type] || {}) });\n\nconst clean = (mode: string) => {\n    const config = getConfig(mode);\n\n    return (input: string | Node): string | Node => {\n        DOMPurify.clearConfig();\n        const value = DOMPurify.sanitize(input, config);\n        purifyHTMLHooks(false); // Always remove the hooks\n        if (mode === 'str') {\n            // When trusted types is available, DOMPurify returns a trustedHTML object and not a string, force cast it.\n            return value + '';\n        }\n        return value;\n    };\n};\n\n/**\n * Custom config only for messages\n */\nexport const message = clean('str') as (input: string) => string;\n\n/**\n * Sanitize input with a config similar than Squire + ours\n */\nexport const html = clean('raw') as (input: Node) => Node;\n\n/**\n * Sanitize input with a config similar than Squire + ours\n */\nexport const protonizer = (input: string, attachHooks: boolean): Node => {\n    const process = clean('protonizer');\n    purifyHTMLHooks(attachHooks);\n    return process(input) as Node;\n};\n\n/**\n * Sanitize input and returns the whole document\n\n */\nexport const content = clean('content') as (input: string) => Node;\n\n/**\n * Default config we don't want any custom behaviour\n */\nexport const input = (str: string) => DOMPurify.sanitize(str, {}) + '';\n\nexport const toTagUnicode = unicodeTag;\n","// const JUICE_OPTIONS = {\n//     applyAttributesTableElements: false\n// };\n\n// const DECLASSIFY_OPTIONS = {\n//     ignore: BLOCKQUOTE_SELECTORS.filter((selector) => selector.startsWith('.'))\n//         .map((selector) => selector.replace('.', ''))\n//         .concat(/proton-.*/)\n//         .concat(/protonmail.*/)\n// };\n\n/**\n * Iterates through all parent nodes (including current), comparing against cb.\n * @param {DOMNode} node\n * @param {Function} cb\n * @returns {*}\n */\n// eslint-disable-next-line import/prefer-default-export\n// export const findParent = (node, cb) => {\n//     let traverse = node;\n//     if (traverse && cb(traverse)) {\n//         return traverse;\n//     }\n//     while (traverse.parentNode) {\n//         traverse = traverse.parentNode;\n//         if (cb(traverse)) {\n//             return traverse;\n//         }\n//     }\n// };\n\n/**\n * Inline css into an element and remove all obsolete class names.\n * @param {String} html\n * @returns {String}\n */\n// export const inlineCss = (html = '') => {\n//     try {\n//         return declassify.process(juice(html, JUICE_OPTIONS), DECLASSIFY_OPTIONS);\n//     } catch (err) {\n//         console.error(err);\n//         return html;\n//     }\n// };\n\n/**\n * Set an element to be hidden.\n * @param {DOMNode} el\n * @param {Boolean} value Hidden or shown\n */\n// export const setHidden = (el, value = false) => {\n//     el.style.display = value ? 'none' : '';\n// };\n\n/**\n * Force redraw of an element.\n * Copied from https://stackoverflow.com/a/3485654\n * @param {HTMLElement} el\n */\n// export const forceRedraw = (el) => {\n//     el.style.display = 'none';\n//     // eslint-disable-next-line no-unused-expressions\n//     el.offsetHeight;\n//     el.style.display = '';\n// };\n\nexport const escapeSrc = (value = '') => value.replace(/ src=/g, ' data-src=');\nexport const unescapeSrc = (value = '') => value.replace(/ data-src=/g, ' src=');\n\n/**\n * Toggle class on element depending on conditon\n * @param {DOMNode} element\n * @param {String} className\n * @param {Boolean} value\n */\n// export const toggle = (element, className, value) => {\n//     element.classList.contains(className) === value || element.classList.toggle(className);\n// };\n\n/**\n * Returns whether the element is a node.\n * See {@link https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType}\n * @param {DOMNode} node\n * @returns {boolean}\n */\n// export const isElement = (node) => node && node.nodeType === 1;\n\n/**\n * Get children configuration for a node/fragment\n * As IE is not able to deal with the dom API we need to \"emulate it\"\n * @param  {Element} node Can be a fragment\n * @return {Object}      {children: <Array>, first:<Element>, last:<Element>}\n */\n// export const getChildrenElements = (node) => {\n//     if (!isIE11() || node.firstElementChild) {\n//         return {\n//             first: node.firstElementChild,\n//             last: node.lastElementChild,\n//             children: node.children\n//         };\n//     }\n//     const children = _.filter(node.childNodes, isElement);\n\n//     return {\n//         first: children[0],\n//         last: _.last(children),\n//         children\n//     };\n// };\n\n/**\n * Test if the string contains HTML data\n * It doesn't have loading resources side effects\n * @param {String} str\n * @return {Object}\n */\n// export const isHTML = (str = '') => {\n//     const doc = new DOMParser().parseFromString(str, 'text/html');\n//     const firstChild = doc.body.childNodes[0];\n//     return {\n//         isHtml: Array.from(doc.body.childNodes).some(isElement),\n//         isWrapped: !!isElement(firstChild)\n//     };\n// };\n\nexport const matches = (element: Element, selector: string) =>\n    (element.matches || (element as any).msMatchesSelector).call(element, selector);\n\nexport const wrap = (element: Element, html: string) => {\n    const container = document.createElement('div');\n    container.innerHTML = html;\n\n    const wrapper = container.firstChild as Element;\n\n    wrapper.innerHTML = element.outerHTML;\n\n    element.parentNode?.insertBefore(wrapper, element);\n    element.remove();\n};\n\nexport const parseInDiv = (content: string) => {\n    const div = document.createElement('div');\n    div.innerHTML = content;\n    return div;\n};\n","import { uniqID } from '../string';\nimport { protonizer as purifyHTML } from '../purify';\nimport { parseInDiv } from '../dom';\n\n/*\n * match attributes or elements with svg, xlink, srcset, src, background, poster.\n * the regex checks that the element/attribute is actually in an element by looking forward and seeing if it\n * ends properly with a >\n *\n * Another assumption in these regex are: all attributes use the \" quotes instead of the ' quote. This is satisfied\n * by the previous standardization steps\n */\nconst SVG_LIST = ['svg'];\nconst FORBIDDEN_SVG = `(${SVG_LIST.join('|')})`;\nconst NO_SPECIALS = '([^\"><\\\\\\\\]|\\\\\\\\[^><])';\nconst NO_QUOTS = '(\\\\\\\\.|[^\"\\\\\\\\])';\nconst HTML_STRING = `(\"${NO_QUOTS}*\")`;\nconst VERIFY_ELEMENT_END = `(?=(${NO_SPECIALS}|${HTML_STRING})*>)`;\nconst VERIFY_UNIQUE = '([^-])';\n\n// Ensure that the forbidden attributes are not already escaped with proton- by checking that there is no '-' character in front of them.\nconst REGEXP_SVG_BREAK = new RegExp(VERIFY_UNIQUE + FORBIDDEN_SVG + VERIFY_ELEMENT_END, 'gi');\n\n/**\n * Parsing base64 is expensive and can create a crash.\n * Here we can reduce input string from many Mb to less than 100kb, which is way easier to escape.\n * So instead of escaping everything with it too, we remove them from the HTML\n * and we replace it with an attribute with an uniq hash so we can load them\n * later for the user via injectMessageMedia component.\n * Store it inside inside a cache, an Angular Factory as we will need it for:\n *     - lazy load the image post render message\n *     - open the composer we need to lazy load it here too\n *\n * Source: regexp https://www.regextester.com/95505\n * @param  {String} input       Raw unescaped HTML\n * @param  {Object} cache       cacheBase64 factory\n * @param  {Boolean} activeCache\n * @return {String}\n */\nfunction removeBase64(input, cache, activeCache) {\n    /* eslint no-useless-escape: \"off\" */\n    return input.replace(/src=\"data:image\\/([a-zA-Z]*);base64,([^\\\"]*)\\\"/g, (match) => {\n        const hash = uniqID();\n        activeCache && cache.put(hash, match);\n        return `data-proton-replace-base=\"${hash}\"`;\n    });\n}\n\n/**\n * Parse the dom and find all matching base64 custom tags we added\n * then replace them by the valid SRC for the base64.\n * @param  {Element} node\n * @param  {Object} cache cacheBase64 service\n * @return {String}       HTML\n */\nexport function attachBase64Parser(node, cache) {\n    const nodes = [...node.querySelectorAll('[data-proton-replace-base]')];\n    nodes.forEach((node) => {\n        const hash = node.getAttribute('data-proton-replace-base');\n\n        // Clean the string and remove \\n else it won't load inside the browser\n        const src = (cache.get(hash) || '')\n            .replace(/^src=\"/, '')\n            .replace(/\"$/, '')\n            .replace(/\\n/, '');\n        src && node.setAttribute('src', src);\n        node.removeAttribute('data-proton-replace-base');\n    });\n    return node.innerHTML;\n}\n\n/**\n * Attach escaped base64 to the dom if the input is a txt\n * @param  {String} input HTML\n * @param  {Object} cache cacheBase64 service\n * @return {String}       HTML\n */\nexport function attachBase64(input, cache) {\n    // const [$parser] = $.parseHTML(`<div>${input}</div>`);\n    const div = parseInDiv(input);\n    return attachBase64Parser(div, cache);\n}\n\nfunction escapeSVG(input = '') {\n    return input.replace(REGEXP_SVG_BREAK, '$1proton-$2');\n}\n\n/**\n * Escape content for a message\n * Content can be a Document when we open a message, it's useful\n * in order to bind the base if it exists\n * @param  {MessageExtended} message         Content to escape\n * @param  {Options} options.action           Type of action\n * @return {MessageExtended}                            Parser\n */\nexport const transformEscape = async ({ raw, action }, { cache, activeCache = true } = {}) => {\n    const value = removeBase64(raw, cache, activeCache);\n    const activeHooks = action !== 'user.inject';\n    return { document: purifyHTML(escapeSVG(value), activeHooks) };\n};\n","import { matches } from '../dom';\n\nconst PROTOCOLS = ['ftp://', 'http://', 'https://', 'xmpp:', 'tel:', 'callto:'];\nconst ALL_PROTOCOLS = PROTOCOLS.concat(['mailto:']);\nconst MAP = PROTOCOLS.reduce((acc, key) => ((acc[key] = true), acc), {});\nconst EXCLUDE_ANCHORS = ':not([href=\"\"]):not([href^=\"#\"])';\n\nconst getNormalizedHref = (link) => {\n    return link\n        .getAttribute('href')\n        .trim()\n        .toLowerCase();\n};\n\nconst linkUsesProtocols = (link) => ALL_PROTOCOLS.some((proto) => getNormalizedHref(link).startsWith(proto));\n\nconst isEmptyAnchor = (link) => {\n    const href = getNormalizedHref(link);\n    return href === '' || MAP[href];\n};\n\nconst noReferrerInfo = (link) => {\n    link.setAttribute('rel', 'noreferrer nofollow noopener');\n};\n\n/**\n * make links open in a new tab\n * @param  {Array} links Collection of links\n * @return {Array}       links\n */\nconst httpInNewTab = (link) => {\n    if (matches(link, EXCLUDE_ANCHORS)) {\n        const href = link.getAttribute('href') || '';\n        const hasHTTP = href.indexOf('http') === 0;\n        const isRelative = href.indexOf('/') === 0;\n        // Prevent issue for Edge/IE A security problem cf https://jsfiddle.net/dpaoxoks/7/\n        if (hasHTTP || isRelative) {\n            link.setAttribute('target', '_blank');\n        }\n    }\n};\n\n/**\n * turn these relative links into absolute links\n * (example.com/a -> http://example.com)\n * @param  {Array} links Collection of links\n * @return {Array}       links\n */\nconst sanitizeRelativeHttpLinks = (link) => {\n    if (matches(link, EXCLUDE_ANCHORS) && !linkUsesProtocols(link) && link.nodeName === 'A') {\n        // link.href is the absolute value of the link: mail.protonmail.com is prepended, use getAttribute\n        const url = link.getAttribute('href');\n\n        link.setAttribute('href', `http://${url}`);\n    }\n};\n\n/*\n * Anchors will work on the whole protonmail page, so we need to disable them\n * opening them in a new tab will just open a empty page.\n */\nconst disableAnchors = (link) => {\n    isEmptyAnchor(link) && (link.style.pointerEvents = 'none');\n};\n\nexport const transformLinks = ({ document }) => {\n    const links = [...document.querySelectorAll('[href]')];\n\n    links.forEach((link) => {\n        httpInNewTab(link);\n        noReferrerInfo(link);\n        sanitizeRelativeHttpLinks(link);\n        disableAnchors(link);\n    });\n\n    return { document };\n};\n","import mimemessage from 'mimemessage';\n\nimport { ucFirst } from '../string';\nimport { Attachment } from '../../models/attachment';\nimport { transformEscape } from '../transforms/transformEscape';\n\nexport const REGEXP_CID_START = /^cid:/g;\n\n/**\n * Flush the container HTML and return the container\n */\nexport const getBodyParser = (content = '', activeCache = false) => {\n    return transformEscape(\n        { raw: content, action: '' },\n        {\n            activeCache,\n            isDocument: false,\n            cache: {}\n        }\n    );\n};\n\n/**\n * Removes enclosing quotes (\"\", '', &lt;&gt;) from a string\n */\nconst trimQuotes = (input: string) => {\n    const value = `${input || ''}`.trim(); // input can be a number\n\n    if (['\"', \"'\", '<'].indexOf(value.charAt(0)) > -1 && ['\"', \"'\", '>'].indexOf(value.charAt(value.length - 1)) > -1) {\n        return value.substr(1, value.length - 2);\n    }\n\n    return value;\n};\n\nexport const readCID = (Headers: any = {}) => {\n    if (Headers['content-id']) {\n        return trimQuotes(Headers['content-id']);\n    }\n\n    // We can find an image without cid so base64 the location\n    if (Headers['content-location']) {\n        return trimQuotes(Headers['content-location']);\n    }\n\n    return '';\n};\n\n/**\n * Find embedded element in div\n */\nexport const findEmbedded = (cid: string, document: Element) => {\n    // If cid is an empty string, it can give a false positive\n    if (!cid) {\n        return [];\n    }\n    const selector = [\n        `img[src=\"${cid}\"]`,\n        `img[src=\"cid:${cid}\"]`,\n        `img[data-embedded-img=\"${cid}\"]`,\n        `img[data-embedded-img=\"cid:${cid}\"]`,\n        `img[data-src=\"cid:${cid}\"]`,\n        `img[proton-src=\"cid:${cid}\"]`\n    ];\n    return [...document.querySelectorAll(selector.join(', '))];\n};\n\n/**\n * Extract embedded attachment from body\n */\nexport const extractEmbedded = (attachments: Attachment[] = [], document: Element) => {\n    return attachments.filter(({ Headers = {} }) => {\n        const cid = readCID(Headers);\n        const nodes = findEmbedded(cid, document);\n\n        return nodes.length;\n    });\n};\n\n/**\n * Convert raw headers to better format handled by the mimemessage lib\n */\nexport const convertMimeHeaders = (config: { [key: string]: string } = {}) => {\n    const headers = Object.keys(config)\n        .filter((key) => key.startsWith('content'))\n        .reduce((acc, key) => {\n            const [, type] = key.split('-');\n            acc[`content${ucFirst(type)}`] = config[key];\n            return acc;\n        }, Object.create(null));\n\n    return {\n        formatted: mimemessage.factory(headers),\n        headers\n    };\n};\n\nexport const getAttachementName = (Headers: { [key: string]: string } = {}) => {\n    if (Headers['content-disposition'] !== 'inline') {\n        const { formatted = {} as any } = convertMimeHeaders(Headers);\n        const { params: { filename = '' } = {} } = formatted.contentDisposition() || {};\n        if (filename) {\n            return filename.replace(/\"/g, '');\n        }\n    }\n\n    return '';\n};\n\n/**\n * Get the url for an embedded image\n */\nexport const srcToCID = (node: Element) => {\n    const attribute = node.getAttribute('data-embedded-img') || '';\n    return attribute.replace(REGEXP_CID_START, '');\n};\n","import { Message } from '../../models/message';\nimport { Attachment } from '../../models/attachment';\nimport { readCID } from './embeddedUtils';\n\nconst CIDList: { [ID: string]: { [cid: string]: Attachment } } = {};\n\nexport const getMessageCIDs = ({ ID = '' }: Message = {}) => CIDList[ID] || {};\n\nexport const containsMessageCIDs = ({ ID = '' }: Message = {}) => Object.keys(CIDList[ID] || {}).length > 0;\n\nexport const addMessageCID = ({ ID = '' }: Message, { Headers = {}, Name = '' }: Attachment) => {\n    !CIDList[ID] && (CIDList[ID] = {});\n    // !message.NumEmbedded && (message.NumEmbedded = 0);\n\n    const cid = readCID(Headers);\n    Headers.embedded = '1';\n    // message.NumEmbedded++;\n    CIDList[ID][cid] = { Headers, Name };\n};\n\n/**\n * Check if the cid exist for a specific message\n */\nexport const existMessageCID = (message: Message, cid: string) => {\n    return !!getMessageCIDs(message)[cid];\n};\n","import { MessageExtended, Message } from '../../models/message';\nimport { extractEmbedded, getAttachementName, REGEXP_CID_START } from '../embedded/embeddedUtils';\nimport { addMessageCID, getMessageCIDs } from './embeddedStoreCids';\nimport { Attachment } from '../../models/attachment';\n\nexport const getAttachment = (message: Message = {}, src = '') => {\n    const cid = src.replace(REGEXP_CID_START, '');\n    return getMessageCIDs(message)[cid] || {};\n};\n\nexport const find = (message: MessageExtended) => {\n    const list = (message.data || {}).Attachments || [];\n\n    if (!list.length || !message.document) {\n        return [];\n    }\n\n    const embeddedAttachments = extractEmbedded(list, message.document);\n\n    embeddedAttachments.forEach((attachment) => {\n        addMessageCID(message.data || {}, attachment);\n    });\n\n    return embeddedAttachments;\n};\n\n/**\n * Find all attachements inline\n */\nexport const listInlineAttachments = (message: MessageExtended) => {\n    const list = (message.data || {}).Attachments || [];\n    const MAP_CID = getMessageCIDs(message.data);\n\n    return Object.keys(MAP_CID).reduce((acc, cid) => {\n        // Extract current attachement content-id\n        const contentId = ((MAP_CID[cid] || {}).Headers || {})['content-id'];\n        const contentName = getAttachementName(MAP_CID[cid].Headers);\n\n        // Find the matching attachement\n        const attachment = list.find(({ Headers = {}, Name = '' } = {}) => {\n            if (Headers['content-id']) {\n                return Headers['content-id'] === contentId;\n            }\n\n            if (Headers['content-location']) {\n                return Name === contentName;\n            }\n\n            return false;\n        });\n\n        attachment && acc.push({ cid, attachment });\n        return acc;\n    }, [] as { cid: string; attachment: Attachment }[]);\n};\n","import { Message } from '../../models/message';\nimport { isDraft } from '../message/messages';\nimport { getMessageCIDs } from './embeddedStoreCids';\n\nexport interface BlobInfo {\n    url: string;\n    isContentLocation: boolean;\n}\n\nconst PREFIX_DRAFT = 'draft_';\n\nconst urlCreator = () => window.URL || window.webkitURL;\n\nconst Blobs: { [cid: string]: BlobInfo } = {};\nconst MAP_BLOBS: { [key: string]: string[] } = {};\n\nconst getHashKey = (msg: Message) => {\n    const draft = isDraft(msg);\n    const prefix = draft ? PREFIX_DRAFT : '';\n    return `${prefix}${msg.ConversationID || msg.ID}`.trim();\n};\n\n/**\n * The URL.revokeObjectURL() static method releases an existing object URL\n * which was previously created by calling URL.createObjectURL().\n * Call this method when you've finished using a object URL, in order to let\n * the browser know it doesn't need to keep the reference to the file\n * any longer.\n */\nfunction deallocateList(key: string) {\n    const list = MAP_BLOBS[key] || [];\n    list.forEach((cid) => {\n        if (Blobs[cid]) {\n            urlCreator().revokeObjectURL(Blobs[cid].url);\n            // Remove the Blob ref from our store\n            delete Blobs[cid];\n        }\n    });\n    delete MAP_BLOBS[key];\n}\n\n/**\n * blob URLs never get deallocated automatically--\n * we manage deallocation to avoid a massive memory leak\n * once we navigate away from a conversation\n * eg. this can be triggered from the conversations controller\n */\nexport function deallocate(message: Message = {}) {\n    const key = getHashKey(message);\n    Object.keys(MAP_BLOBS)\n        .filter((k) => k !== key && k.indexOf(PREFIX_DRAFT) !== 0) // Do nothing for draft and itself\n        .forEach(deallocateList);\n}\n\n/**\n * Use the Blobs array to store CIDs url reference\n * once the attachment has been decrypted\n * so we can re-use the blob instead of decrypting\n * this should be rewritted a bit to work with\n * the service store\n */\nexport const store = (message: Message = {}, cid = '') => {\n    const Attachments = getMessageCIDs(message);\n    const { Headers = {} } = Attachments[cid] || {};\n\n    const key = getHashKey(message);\n\n    MAP_BLOBS[key] = MAP_BLOBS[key] || [];\n\n    return (data: Uint8Array, MIME = '') => {\n        // If you switch to another conversation the MAP_BLOBS won't exist anymore\n        if (MAP_BLOBS[key]) {\n            // Turn the decrypted attachment data into a blob.\n            let blob: Blob | null = new Blob([data], { type: MIME });\n            // Generate the URL\n            let imageUrl: string | null = urlCreator().createObjectURL(blob);\n            // Store the generated URL\n            Blobs[cid] = {\n                url: imageUrl,\n                isContentLocation:\n                    typeof Headers['content-location'] !== 'undefined' && typeof Headers['content-id'] === 'undefined'\n            };\n            // this is supposed to remove the blob so it\n            // can be garbage collected. we dont save it (for now)\n            blob = null;\n            imageUrl = null;\n\n            MAP_BLOBS[key].push(cid);\n            // dispatcher.embeddedStore('store', { cid });\n        }\n    };\n};\n\nexport const getBlob = (cid: string) => Blobs[cid] || {};\n\nexport const hasBlob = (cid: string) => !!Blobs[cid];\n","// import { REGEX_IMAGE_EXTENSION } from 'proton-shared/lib/constants';\n\n/**\n * Convert base64 string to Image\n * @param  {String} base64str\n * @return {Object}\n */\n// export const toImage = (base64str) => {\n//     return new Promise((resolve) => {\n//         const image = new Image();\n\n//         image.onload = () => {\n//             resolve(image);\n//         };\n\n//         image.src = base64str;\n//     });\n// };\n\n/**\n * Resizes a picture to a maximum length/width (based on largest dimension)\n * @param {String} original Base64 representation of image to be resized.\n * @param {Number} maxSize Amount of pixels that largest dimention (whether width or length) should have.\n * @param {String} finalMimeType Mime type of the resulting resized image.\n * @param {Number} encoderOptions A Number between 0 and 1 indicating image quality if the requested type is image/jpeg or image/webp\n * @return {Promise} receives base64 string of resized image.\n */\n// export const resizeImage = (original, maxSize, finalMimeType = 'image/jpeg', encoderOptions = 1) => {\n//     return toImage(original).then((image) => {\n//         // Resize the image\n//         const canvas = document.createElement('canvas');\n//         let width = image.width;\n//         let height = image.height;\n\n//         if (width > height && width > maxSize) {\n//             height *= maxSize / width;\n//             width = maxSize;\n//         } else if (height > maxSize) {\n//             width *= maxSize / height;\n//             height = maxSize;\n//         }\n\n//         canvas.width = width;\n//         canvas.height = height;\n//         canvas.getContext('2d').drawImage(image, 0, 0, width, height);\n\n//         return canvas.toDataURL(finalMimeType, encoderOptions);\n//     });\n// };\n\n/**\n * Extract the mime and base64 str from a base64 image.\n * @param {String} str\n * @returns {Promise} {mime, base64}\n */\n// const extractBase64Image = (str = '') => {\n//     const [mimeInfo = '', base64 = ''] = (str || '').split(',');\n//     const [, mime = ''] = mimeInfo.match(/:(.*?);/) || [];\n//     return { mime, base64 };\n// };\n\n/**\n * Convert a base 64 str to an uint8 array.\n * @param base64str\n * @returns {Uint8Array}\n */\n// const toUint8Array = (base64str) => {\n//     const bstr = atob(base64str);\n//     let n = bstr.length;\n//     const u8arr = new Uint8Array(n);\n//     while (n--) {\n//         u8arr[n] = bstr.charCodeAt(n);\n//     }\n//     return u8arr;\n// };\n\n/**\n * Convert a data URL to a Blob Object\n * @param {String} base64str\n * @param {String} filename\n * @return {Object}\n */\n// export const toFile = (base64str, filename = 'file') => {\n//     const { base64, mime } = extractBase64Image(base64str);\n//     return new File([toUint8Array(base64)], filename, { type: mime });\n// };\n\n/**\n * Convert a data URL to a Blob Object\n * @param  {String} base64str\n * @return {Blob}\n */\n// export const toBlob = (base64str) => {\n//     const { base64, mime } = extractBase64Image(base64str);\n//     return new Blob([toUint8Array(base64)], { type: mime });\n// };\n\n/**\n * Down size image to reach the max size limit\n * @param  {String} base64str\n * @param  {} maxSize in bytes\n * @param  {String} mimeType\n * @param  {Number} encoderOptions\n * @return {Promise}\n */\n// export const downSize = (base64str, maxSize, mimeType = 'image/jpeg', encoderOptions = 1) => {\n//     const process = (source, max) => {\n//         return resizeImage(source, max, mimeType, encoderOptions).then((resized) => {\n//             const { size } = toBlob(resized);\n\n//             if (size <= maxSize) {\n//                 return resized;\n//             }\n\n//             return process(resized, Math.round(max * 0.9));\n//         });\n//     };\n\n//     return toImage(base64str).then(({ height, width }) => process(base64str, height > width ? height : width));\n// };\n\n/**\n * Returns true if the URL is an inline embedded image.\n * @param {String} src\n * @returns {boolean}\n */\nexport const isInlineEmbedded = (src = '') => src.startsWith('data:');\n\n/**\n * Returns true if the URL is an embedded image.\n * @param {String} src\n * @returns {boolean}\n */\nexport const isEmbedded = (src = '') => src.startsWith('cid:');\n\n/**\n * Prepare image source to be display\n * @param {String} value\n * @return {String}\n */\n// export const formatImage = (value = '') => {\n//     if (!value) {\n//         return value;\n//     }\n\n//     if (REGEX_IMAGE_EXTENSION.test(value)) {\n//         return value;\n//     }\n\n//     if (value.startsWith('data:')) {\n//         return value;\n//     }\n\n//     return `data:image/png;base64,${value}`;\n// };\n","import { MessageExtended } from '../../models/message';\nimport { escapeSrc, unescapeSrc, wrap } from '../dom';\nimport { Api } from '../../models/utils';\nimport { ENCRYPTED_STATUS } from '../../constants';\nimport { listInlineAttachments, getAttachment } from './embeddedFinder';\nimport { hasBlob, store, getBlob, BlobInfo } from './embeddedStoreBlobs';\nimport { get } from '../attachment/attachmentLoader';\nimport { Attachment } from '../../models/attachment';\nimport { noop } from 'proton-shared/lib/helpers/function';\nimport { wait } from 'proton-shared/lib/helpers/promise';\nimport { getMessageCIDs } from './embeddedStoreCids';\nimport { findEmbedded, srcToCID } from './embeddedUtils';\nimport { isInlineEmbedded, isEmbedded } from '../image';\nimport { AttachmentsDataCache } from '../../hooks/useAttachments';\n\nconst EMBEDDED_CLASSNAME = 'proton-embedded';\n\nconst wrapImage = (img: Element) => wrap(img, '<div class=\"image loading\"></div>');\n\n/**\n * Get the url for an embedded image\n */\nexport const getUrl = (node: Element) => {\n    // If it's an inline embedded img, just return the src because that contains the img data.\n    const src = node.getAttribute('data-embedded-img') || '';\n    if (isInlineEmbedded(src)) {\n        return src;\n    }\n    const cid = srcToCID(node);\n    const { url = '' } = getBlob(cid);\n    return url;\n};\n\n/**\n * Prepare embedded images in the document\n */\nexport const prepareImages = (message: MessageExtended, show: boolean, isReplyForward: boolean, isOutside: boolean) => {\n    if (!message.document) {\n        return;\n    }\n\n    let showEmbedded = message.showEmbeddedImages;\n\n    const images = [...message.document.querySelectorAll('img[proton-src]')];\n\n    images.forEach((image) => {\n        const src = image.getAttribute('proton-src') || undefined;\n        image.setAttribute('referrerPolicy', 'no-referrer');\n        const attachment = getAttachment(message.data, src);\n\n        if (!image.classList.contains(EMBEDDED_CLASSNAME)) {\n            image.classList.add(EMBEDDED_CLASSNAME);\n        }\n\n        if (!image.parentElement) {\n            return;\n        }\n\n        // check if the attachment exist before processing\n        if (!(attachment && Object.keys(attachment).length > 0)) {\n            /**\n             * If the attachment does not exist and the proton-src attribute\n             * starts with cid:, it's an embedded image that does not exist in the list of attachments,\n             * or is not a valid image.\n             * So remove the element from the DOM because it will not display anything useful anyway.\n             */\n            if (isEmbedded(src)) {\n                image.parentElement.removeChild(image);\n            }\n            // If it's not an inline embedded image, it's either an embedded image or a remote image. So stop here.\n            // Otherwise, continue so that the inline image is detected as an embedded image.\n            if (!isInlineEmbedded(src)) {\n                return;\n            }\n        }\n\n        if (show) {\n            image.setAttribute('data-embedded-img', src || '');\n            /**\n             * Since the image is supposed to be displayed, remove the proton-src attribute.\n             * Then it will be parsed by the embeddedParser in the blob or cid direction.\n             */\n            image.removeAttribute('proton-src');\n\n            // Auto load image inside a reply draft\n            if (isReplyForward) {\n                // `getUrl` may return undefined here because the embedded attachments have not yet been decrypted and put in the blob store.\n                const url = getUrl(image);\n                // only set it if it is defined, otherwise the unescapeSrc will add two src=\"\"\n                url && image.setAttribute('src', url);\n                return;\n            }\n\n            // We don't need to add it outside\n            if (!isOutside) {\n                !image.parentElement.classList.contains('loading') && wrapImage(image);\n                image.removeAttribute('src');\n            }\n            return;\n        }\n\n        showEmbedded = false;\n\n        // Inline embedded images does not have an attachment.\n        if (attachment) {\n            image.setAttribute('alt', attachment.Name || '');\n        }\n    });\n\n    return showEmbedded;\n};\n\n/**\n * launch and forget: we don't need to do anything with the result\n * wait a bit before disabling the invalidsignature modal\n * this allows the user to see the change icon popup.\n *\n * More elaborate explanation:\n * We're addressing a fairly rare UX thing here.\n * We want to avoid showing a popup saying the confirmmodal when the signature is invalid to often.\n * For instance, when embedding images you can see that the icon says the signature is invalid,\n * so we don't show this icon (as the user can know it before clicking).\n *\n * However, if you would click on the embedded attachment before it has downloaded the attachment, it will not show this icon.\n * So consider you clicking on this attachment when it didn't verify the attachment yet.\n * Then just after that the attachment loader downloaded the attachment and\n * verified it signature and sets invalidSignature.askAgain to false.\n * Then you don't know that this happened, but in this case you should get a popup.\n *\n * Note when thinking  this is just a race condition: also consider the case where you are clicking\n * on the icon and it shows the icon just before you click: it's not humanly possible to see that it\n * changed and is not valid. So even in that case we want to show the icon.\n */\nconst triggerSigVerification = (\n    message: MessageExtended,\n    attachments: Attachment[],\n    api: Api,\n    cache: Map<string, any>\n) => {\n    /*\n     * launch and forget: we don't need to do anything with the result\n     * wait a bit before disabling the invalidsignature modal\n     * this allows the user to see the change icon popup.\n     */\n    Promise.all(\n        attachments.map(async (attachment) => {\n            await get(attachment, message, cache, api);\n            await wait(1000);\n            // invalidSignature.askAgain(message, attachment, false);\n        })\n    );\n};\n\n/**\n * It works on data-src attribute for this reason:\n * Don't set the src attribute since it's evaluated and cid:cid create an error (#3330)\n * NET::ERR_UNKNOWN_URL_SCHEME because src=\"cid:xxxx\" is not valid HTML\n * This function expects the content to be properly unescaped later.\n */\nconst actionDirection: { [key: string]: (nodes: Element[], cid: string, url: string) => void } = {\n    blob(nodes: Element[], cid: string, url: string) {\n        nodes.forEach((node) => {\n            // Always remove the `data-` src attribute set by the cid function, otherwise it can get displayed if the user does not auto load embedded images.\n            node.removeAttribute('data-src');\n            if (node.getAttribute('proton-src')) {\n                return;\n            }\n            node.setAttribute('data-src', url);\n            node.setAttribute('data-embedded-img', cid);\n            node.classList.add(EMBEDDED_CLASSNAME);\n        });\n    },\n    cid(nodes: Element[], cid: string) {\n        nodes.forEach((node) => {\n            node.removeAttribute('data-embedded-img');\n            node.removeAttribute('src');\n            node.setAttribute('data-src', `cid:${cid}`);\n        });\n    }\n};\n\n/**\n * Parse the content to inject the generated blob src\n */\nexport const mutateHTML = (message: MessageExtended, direction: string) => {\n    if (!message.document) {\n        return;\n    }\n\n    const document = message.document;\n\n    document.innerHTML = escapeSrc(document.innerHTML);\n\n    Object.keys(getMessageCIDs(message.data)).forEach((cid) => {\n        const nodes = findEmbedded(cid, document);\n\n        if (nodes.length) {\n            const { url = '' } = getBlob(cid);\n\n            (actionDirection[direction] || noop)(nodes, cid, url);\n        }\n    });\n\n    document.innerHTML = unescapeSrc(document.innerHTML);\n};\n\nexport const decrypt = async (message: MessageExtended, api: Api, cache: AttachmentsDataCache) => {\n    const list = listInlineAttachments(message);\n    const attachments = list.map(({ attachment }) => attachment);\n    // const show = message.showEmbeddedImages === true || mailSettings.ShowImages & SHOW_IMAGES.EMBEDDED;\n    // const sigList = show ? list : list.filter(({ attachment }) => cache.has(attachment.ID));\n\n    // For a draft if we close it before the end of the attachment upload, there are no keyPackets\n    // pgp attachments do not have keypackets.\n\n    const promises = list\n        .filter(({ attachment }) => attachment.KeyPackets || attachment.Encrypted === ENCRYPTED_STATUS.PGP_MIME)\n        .filter(({ cid }) => !hasBlob(cid))\n        .map(async ({ cid, attachment }) => {\n            const storeAttachement = store(message.data, cid);\n            const buffer = await get(attachment, message, cache, api);\n            return storeAttachement(buffer.data, attachment.MIMEType);\n        });\n\n    if (!promises.length) {\n        // all cid was already stored, we can resolve\n        triggerSigVerification(message, attachments, api, cache);\n        return {};\n    }\n\n    await Promise.all(promises);\n\n    // We need to trigger on the original list not after filtering: after filter they are just stored\n    // somewhere else\n    triggerSigVerification(message, attachments, api, cache);\n    return list.reduce((acc, { cid }) => {\n        acc[cid] = getBlob(cid);\n        return acc;\n    }, {} as { [cid: string]: BlobInfo });\n};\n","import { SHOW_IMAGES } from 'proton-shared/lib/constants';\nimport { Computation } from '../../hooks/useMessage';\nimport { find } from '../embedded/embeddedFinder';\nimport { mutateHTML, decrypt, prepareImages } from '../embedded/embeddedParser';\nimport { MESSAGE_ACTIONS } from '../../constants';\n\nexport const transformEmbedded: Computation = async (message, { attachmentsCache, api, mailSettings }) => {\n    const { ShowImages = 0 } = mailSettings as { ShowImages: number };\n    const show = message.showEmbeddedImages === true || ShowImages === SHOW_IMAGES.EMBEDDED;\n    const isReplyForward =\n        message.action === MESSAGE_ACTIONS.REPLY ||\n        message.action === MESSAGE_ACTIONS.REPLY_ALL ||\n        message.action === MESSAGE_ACTIONS.FORWARD;\n    const isOutside = false; // TODO: const isEoReply = $state.is('eo.reply');\n\n    const attachments = find(message);\n    const showEmbeddedImages = prepareImages(message, show, isReplyForward, isOutside);\n\n    const direction = 'blob';\n\n    if (attachments.length === 0 || !show) {\n        /**\n         * cf #5088 we need to escape the body again if we forgot to set the password First.\n         * Prevent unescaped HTML.\n         *\n         * Don't do it everytime because it's \"slow\" and we don't want to slow down the process.\n         */\n        if (isOutside) {\n            mutateHTML(message, direction);\n        }\n    } else {\n        await decrypt(message, api, attachmentsCache.data);\n        mutateHTML(message, direction);\n    }\n\n    return { document: message.document, showEmbeddedImages, numEmbedded: attachments.length };\n};\n","export const transformWelcome = ({ document }) => {\n    // For the welcome email, we need to change the path to the welcome image lock\n    const images = [...document.querySelectorAll('img[src=\"/img/app/welcome_lock.gif\"]')];\n\n    if (images.length > 0) {\n        images.forEach((image) => {\n            image.src = '/assets/img/emails/welcome_lock.gif';\n        });\n    }\n\n    return { document };\n};\n","import { c } from 'ttag';\n\nconst BLOCKQUOTE_SELECTORS = [\n    '.protonmail_quote',\n    '.gmail_quote',\n    '.yahoo_quoted',\n    '.gmail_extra',\n    '.moz-cite-prefix',\n    // '.WordSection1',\n    '#isForwardContent',\n    '#isReplyContent',\n    '#mailcontent:not(table)',\n    '#origbody',\n    '#reply139content',\n    '#oriMsgHtmlSeperator',\n    'blockquote[type=\"cite\"]'\n];\n\nconst quotes = BLOCKQUOTE_SELECTORS.map((selector) => `${selector}:not(:empty)`).join(',');\n\nexport const transformBlockquotes = ({ document: doc }) => {\n    const blockquotes = [...doc.querySelectorAll(quotes)];\n    const parent = doc.textContent;\n    let found = false;\n\n    blockquotes.forEach((blockquote) => {\n        if (!found) {\n            const child = blockquote.textContent;\n            const [before = '', after = ''] = parent.split(child);\n\n            if (child.length < parent.length && before.length && !after.length) {\n                const button = document.createElement('button');\n                const title = c('Title').t`Show previous message`;\n\n                button.className = 'pm-button pm-button--small more proton-message-blockquote-toggle';\n                button.textContent = '...'; // perf issue we can't use <icon> as we don't want to compile.\n                button.setAttribute('title', title);\n\n                // For some messages, the content of the message before <button> is not inside <div>\n                blockquote.parentNode.insertBefore(document.createElement('BR'), blockquote);\n                blockquote.parentNode.insertBefore(button, blockquote);\n\n                found = true;\n            }\n        }\n    });\n\n    return { document: doc };\n};\n","import { flow, filter, reduce } from 'lodash/fp';\n\nimport { SHOW_IMAGES } from 'proton-shared/lib/constants';\n\nconst WHITELIST = ['notify@protonmail.com'];\n\n// const { dispatcher } = dispatchers(['message.open']);\n\nconst ATTRIBUTES = ['url', 'xlink:href', 'srcset', 'src', 'svg', 'background', 'poster'].map(\n    (name) => `proton-${name}`\n);\n\nconst REGEXP_FIXER = (() => {\n    const str = ATTRIBUTES.map((key) => {\n        if (key === 'proton-src') {\n            return `${key}=(?!\"(cid|data):)`;\n        }\n        return key;\n    }).join('|');\n    return `(${str})`;\n})();\n\n/**\n * Find inside the current parser DOM every content escaped\n * and build a list of Object <attribute>:<value> but don't parse them if\n * it is an embedded content.\n * As we have many differents attributes we create a list\n * @param  {Node} html parser\n * @return {Array}\n */\nfunction prepareInjection(html) {\n    // Query selector\n    const selector = ATTRIBUTES.map((attr) => {\n        const [key] = attr.split(':');\n        return `[${key}]`;\n    })\n        .concat('[style]')\n        .join(', ');\n\n    /**\n     * Create a map of every proton-x attribute and its value\n     * @param  {Node} node Current element\n     * @return {Object}\n     */\n    const mapAttributes = (node) => {\n        return flow(\n            filter((attr) => ATTRIBUTES.indexOf(attr.name) !== -1),\n            reduce((acc, attr) => ((acc[`${attr.name}`] = attr.value), acc), {})\n        )(node.attributes);\n    };\n\n    const $list = [].slice.call(html.querySelectorAll(selector));\n\n    // Create a list containing a map of every attributes (proton-x) per node\n    const attributes = $list.reduce((acc, node) => {\n        if (node.hasAttribute('proton-src')) {\n            const src = node.getAttribute('proton-src');\n\n            // We don't want to unescape attachments or inline embedded as we are going to process them later\n            if (src.indexOf('cid:') !== -1) {\n                return acc;\n            }\n            if (src.indexOf('data:') !== -1) {\n                return acc;\n            }\n        }\n        acc.push(mapAttributes(node));\n        return acc;\n    }, []);\n\n    return attributes;\n}\n\nexport const transformRemote = (\n    { data: message = {}, document = null, showRemoteImages: inputShowImages = false },\n    { action = null, mailSettings }\n) => {\n    const regex = new RegExp(REGEXP_FIXER, 'g');\n    const showImages =\n        inputShowImages ||\n        !!(mailSettings.ShowImages & SHOW_IMAGES.REMOTE || WHITELIST.includes(message.Sender.Address));\n    const content = document.innerHTML;\n    const hasImages = regex.test(content);\n\n    if (showImages) {\n        // If load:manual we use a custom directive to inject the content\n        if (action === 'user.inject') {\n            // TODO: uncoment this block\n            // const list = prepareInjection(html);\n            prepareInjection(document);\n            // const hasSVG = /svg/.test(html.innerHTML);\n            // if (list.length || hasSVG) {\n            //     dispatcher['message.open']('remote.injected', { action, list, message, hasSVG });\n            // }\n        } else {\n            document.innerHTML = content.replace(regex, (match, $1) => $1.substring(7));\n        }\n    }\n    return { document, showRemoteImages: hasImages ? showImages : undefined };\n};\n","export const transformStylesheet = ({ document }) => {\n    const firstElement = document.firstElementChild;\n\n    /**\n     * Some emails from ex: tripit contains a position absolute on the container\n     * => hack to prevent margin on android/ios\n     * @{@link https://twitter.com/HTeuMeuLeu/status/852110032045035520}\n     * Gmail changes the dom too.\n     */\n    if (firstElement && /absolute/.test(firstElement.style.position)) {\n        firstElement.style.position = 'inherit';\n    }\n    return { document };\n};\n","const ELEMENTS = [\n    {\n        selector: 'a:not([href^=\"http\"])',\n        attribute: 'href'\n    },\n    {\n        selector: 'img:not([src^=\"http\"]):not([proton-src^=\"cid\"])',\n        attribute: 'proton-src'\n    }\n];\n\nconst getBaseURL = (base) => {\n    // Make sure base has trailing slash\n    const baseUrl = base.getAttribute('href');\n    if (baseUrl.substr(-1, 1) !== '/') {\n        return `${baseUrl}/`;\n    }\n    return baseUrl;\n};\n\n/**\n * Append base url to any href/src if we need to\n * @param  {Node} html HTML document from DOMPurify\n * @return {Node}      Dom based\n */\nexport const transformBase = ({ document }) => {\n    const base = document.querySelector('base');\n\n    if (!base || !base.getAttribute('href')) {\n        return { document };\n    }\n\n    // Make sure base has trailing slash\n    const BASE_URL = getBaseURL(base);\n\n    const bindAttribute = (node, key, value = '') => {\n        if (!value.startsWith('http')) {\n            node.setAttribute(key, BASE_URL + value);\n        }\n    };\n\n    ELEMENTS.forEach(({ selector, attribute }) => {\n        [...document.querySelectorAll(selector)].forEach((el) => {\n            const keyproton = `proton-${attribute}`;\n            const value = el.getAttribute(attribute) || '';\n            const ptValue = el.getAttribute(keyproton) || '';\n            // Ensure we don't add a useless / if we already have one\n            const url = value.charAt(0) === '/' ? value.slice(1) : value;\n\n            /*\n                Bind the value only when we need, if there is a proton-src we don't need\n                to add the src else it will generate a request to the domain\n             */\n            !ptValue && bindAttribute(el, attribute, url);\n            ptValue && bindAttribute(el, keyproton, ptValue);\n        });\n    });\n\n    return { document };\n};\n","import { BinaryResult } from 'pmcrypto';\n\nimport { Message } from '../../models/message';\nimport { ENCRYPTED_STATUS } from '../../constants';\nimport { Attachment, AttachmentMime } from '../../models/attachment';\nimport { AttachmentsDataCache } from '../../hooks/useAttachments';\n\n// This prefix is really useful to distinguish 'real' attachments from pgp attachments.\nconst ID_PREFIX = 'PGPAttachment';\n\nconst getId = (message: Message, parsedAttachment: any, number: number) =>\n    `${ID_PREFIX}_${message.ID}_${parsedAttachment.checksum}_${number}`;\n\n/**\n * Unfortunately mailparser doesn't expose header data directly so we will reconstruct the headers\n */\nconst getHeaders = ({\n    generatedFileName = '',\n    contentDisposition = '',\n    contentId = '',\n    transferEncoding = '',\n    contentType = ''\n}: AttachmentMime) => {\n    const headers: { [key: string]: any } = {};\n    const filenameOption = '; filename=' + JSON.stringify(generatedFileName);\n    headers['content-disposition'] = contentDisposition + filenameOption;\n    // test if this is an assigned content id\n    if (!/^.*@mailparser$/.test(contentId)) {\n        headers['content-id'] = /^<.*>$/.test(contentId) ? contentId : `<${contentId}>`;\n    }\n    if (contentDisposition.toLowerCase() === 'inline') {\n        headers.embedded = 1;\n    }\n    if (transferEncoding) {\n        headers['content-transfer-encoding'] = transferEncoding;\n    }\n    headers['content-type'] = contentType + filenameOption;\n    return headers;\n};\n\n/**\n * Convert a single attachment\n */\nconst convertSingle = (\n    message: Message,\n    parsedAttachment: AttachmentMime,\n    number: number,\n    verified: number,\n    cache: AttachmentsDataCache\n): Attachment => {\n    const ID = getId(message, parsedAttachment, number);\n\n    const attachment: Attachment = {\n        ID,\n        Headers: getHeaders(parsedAttachment),\n        Name: parsedAttachment.generatedFileName,\n        KeyPackets: null, // already decrypted;\n        MIMEType: parsedAttachment.contentType,\n        Signature: null,\n        Size: parsedAttachment.length,\n        Encrypted: ENCRYPTED_STATUS.PGP_MIME\n    };\n\n    const attachmentData: BinaryResult = {\n        data: parsedAttachment.content,\n        filename: '',\n        signatures: []\n    };\n\n    cache.set(ID, attachmentData /*, verified*/);\n    // invalidSignature.askAgain(message, attachment, false);\n    return attachment;\n};\n\n/**\n * Converts the parsedAttachment coming from mailparser to an attachment linked to the message provided.\n */\nexport const convert = (\n    message: Message,\n    attachments: AttachmentMime[],\n    verified: number,\n    cache: AttachmentsDataCache\n): Attachment[] => {\n    return attachments.map((attachment, number) => convertSingle(message, attachment, number, verified, cache));\n};\n","import { decryptMIMEMessage, decryptMessageLegacy } from 'pmcrypto';\nimport { MIME_TYPES } from 'proton-shared/lib/constants';\nimport { c } from 'ttag';\n\nimport { Message, MessageExtended } from '../../models/message';\nimport { convert } from '../attachment/attachmentConverter';\nimport { VERIFICATION_STATUS } from '../../constants';\nimport { getDate } from './messages';\nimport { AttachmentsDataCache } from '../../hooks/useAttachments';\n\nconst getVerifiedStatus = (pmcryptoVerified: number, publicKeys: any) => {\n    const signedInvalid = VERIFICATION_STATUS.SIGNED_AND_INVALID;\n    const signedPubkey = VERIFICATION_STATUS.SIGNED_NO_PUB_KEY;\n    return !publicKeys.length && pmcryptoVerified === signedInvalid ? signedPubkey : pmcryptoVerified;\n};\n\nexport const decryptMimeMessage = async (\n    message: Message,\n    privateKeys: any,\n    publicKeys: any,\n    attachmentsCache: AttachmentsDataCache\n): Promise<MessageExtended> => {\n    const headerFilename = c('Encrypted Headers').t`Encrypted Headers filename`;\n    const sender = (message.Sender || {}).Address;\n\n    const result = await decryptMIMEMessage({\n        message: message.Body,\n        messageDate: getDate(message),\n        privateKeys,\n        publicKeys,\n        headerFilename,\n        sender\n    });\n\n    const { body = c('Message empty').t`Message content if empty`, mimetype = MIME_TYPES.PLAINTEXT } =\n        (await result.getBody()) || {};\n\n    const verified = getVerifiedStatus(await result.verify(), publicKeys);\n\n    const attachments = convert(message, await result.getAttachments(), verified, attachmentsCache);\n    const encryptedSubject = await result.getEncryptedSubject();\n\n    return { raw: body, data: { ...message, Attachments: attachments }, verified, encryptedSubject, mimetype };\n};\n\nexport const decryptLegacyMessage = async (\n    message: Message,\n    privateKeys: any,\n    publicKeys: any\n): Promise<MessageExtended> => {\n    const { data, verified: pmcryptoVerified = VERIFICATION_STATUS.NOT_SIGNED } = (await decryptMessageLegacy({\n        message: message.Body,\n        messageDate: getDate(message),\n        privateKeys,\n        publicKeys\n    })) as any;\n\n    const verified = getVerifiedStatus(pmcryptoVerified, publicKeys);\n\n    return { raw: data, verified, publicKeys, privateKeys };\n};\n","import { useCallback } from 'react';\nimport { useGetPublicKeys, useGetAddressKeys } from 'react-components';\nimport { splitKeys } from 'proton-shared/lib/keys/keys';\nimport { MessageExtended } from '../models/message';\nimport { isMIME } from '../helpers/message/messages';\nimport { decryptLegacyMessage, decryptMimeMessage } from '../helpers/message/messageDecrypt';\nimport { useAttachmentsCache } from './useAttachments';\n\n// Reference: Angular/src/app/message/factories/messageModel.js decryptBody\n\nexport const useDecryptMessage = () => {\n    const getPublicKeys = useGetPublicKeys();\n    const getAddressKeys = useGetAddressKeys();\n    const attachmentsCache = useAttachmentsCache();\n\n    return useCallback(\n        async ({ data: message = {} }: MessageExtended): Promise<MessageExtended> => {\n            const [{ publicKeys = [] }, addressKeys] = await Promise.all([\n                getPublicKeys((message.Sender || {}).Address),\n                getAddressKeys(message.AddressID)\n            ]);\n            const { privateKeys } = splitKeys(addressKeys) as any;\n\n            // TODO: filter out compromised addresses (if not done already)\n\n            if (isMIME(message)) {\n                return decryptMimeMessage(message, privateKeys, publicKeys, attachmentsCache.data);\n            }\n\n            return decryptLegacyMessage(message, privateKeys, publicKeys);\n        },\n        [getPublicKeys, getAddressKeys, attachmentsCache]\n    );\n};\n","import React, { useLayoutEffect, createContext } from 'react';\nimport { useInstance, useEventManager } from 'react-components';\nimport createCache from 'proton-shared/lib/helpers/cache';\nimport createLRU from 'proton-shared/lib/helpers/lru';\nimport { EVENT_ACTIONS } from 'proton-shared/lib/constants';\nimport { MessageExtended } from '../models/message';\nimport { Event } from '../models/event';\n\ninterface Props {\n    children: JSX.Element;\n}\n\nexport interface Cache<Key, Value> {\n    has: (key: Key) => boolean;\n    get: (key: Key) => Value;\n    set: (key: Key, value: Value) => void;\n    delete: (key: Key) => void;\n    subscribe: (handler: (key: Key) => void) => () => void;\n}\n\nexport type MessageCache = Cache<string, MessageExtended>;\n\nexport const MessageContext = createContext<MessageCache>(null as any /* Just to please TS */);\n\n/**\n * The purpose of this provider is to synchronize individual message fetches with updates from the event manager,\n * and to have a separate LRU cache for it.\n */\nconst MessageProvider = ({ children }: Props) => {\n    const { subscribe } = useEventManager();\n    const cache: MessageCache = useInstance(() => {\n        return createCache(createLRU({ max: 50 } as any));\n    });\n\n    useLayoutEffect(() => {\n        return subscribe(({ Messages }: Event) => {\n            if (!Array.isArray(Messages)) {\n                return;\n            }\n            for (const { ID, Action, Message } of Messages) {\n                // Ignore updates for non-fetched messages.\n                if (!cache.has(ID)) {\n                    continue;\n                }\n                if (Action === EVENT_ACTIONS.DELETE) {\n                    cache.delete(ID);\n                }\n                if (Action === EVENT_ACTIONS.UPDATE_DRAFT || Action === EVENT_ACTIONS.UPDATE_FLAGS) {\n                    cache.set(ID, { ...cache.get(ID), ...Message });\n                }\n            }\n        });\n    }, []);\n\n    return <MessageContext.Provider value={cache}>{children}</MessageContext.Provider>;\n};\n\nexport default MessageProvider;\n","import { encodeBase64, decodeBase64 } from 'pmcrypto';\nimport { arrayToBinaryString, binaryStringToArray } from 'proton-shared/lib/helpers/string';\nimport { Binary } from '../models/utils';\n\nexport const arrayToBase64 = (data: Binary): string => encodeBase64(arrayToBinaryString(data)) || '';\n\nexport const base64ToArray = (data: string): Binary => binaryStringToArray(decodeBase64(data) || '');\n","import { getKeys, decodeBase64, binaryStringToArray, getFingerprint, isExpiredKey, PmcryptoKey } from 'pmcrypto';\n\nimport { unique } from 'proton-shared/lib/helpers/array';\nimport { PACKAGE_TYPE, RECIPIENT_TYPE, MIME_TYPES, KEY_FLAGS } from 'proton-shared/lib/constants';\n\nimport { Message } from '../../models/message';\nimport { isEO, isSign } from '../message/messages';\nimport { normalizeEmail } from '../addresses';\nimport { Address } from '../../models/address';\nimport { getByEmail, isOwnAddress, isFallbackAddress } from '../addresses';\nimport { KeyData, Key } from '../../models/key';\nimport { findEmailInCache } from '../contacts';\nimport { ContactEmailCache, ContactEmail } from '../../models/contact';\nimport { base64ToArray } from '../base64';\n\nexport type MapPreference = { [email: string]: SendPreference };\n\nexport interface SendPreference {\n    encrypt: boolean;\n    sign: boolean;\n    mimetype: MIME_TYPES;\n    publickeys: PmcryptoKey[];\n    primaryPinned: boolean;\n    scheme: PACKAGE_TYPE;\n    pinned: boolean;\n    isVerified: boolean;\n    warnings: any[];\n    ownAddress: boolean;\n}\n\ntype CachePreference = { [contactID: string]: { [email: string]: PreferenceInfo } };\n\ninterface PreferenceInfo {\n    encryptFlag: boolean;\n    signFlag: boolean;\n    emailKeys: string[];\n    mimetype: MIME_TYPES;\n    scheme: PACKAGE_TYPE;\n    isVerified: boolean;\n}\n\nconst cache: CachePreference = {};\n\nconst emailInExtrInfo = (contactEmail: ContactEmail) =>\n    cache[contactEmail.ContactID || ''] && cache[contactEmail.ContactID || ''][normalizeEmail(contactEmail.Email)];\n\nconst getInExtrInfo = (contactEmail: ContactEmail) =>\n    (cache[contactEmail.ContactID || ''] || {})[normalizeEmail(contactEmail.Email)] || {};\n\nconst usesDefaults = (contactEmail: ContactEmail) => !contactEmail || contactEmail.Defaults;\n\n/**\n * Determines if a certain key object is allowed to be used for encryption\n */\nconst encryptionEnabled = ({ Flags }: Key) => Flags & KEY_FLAGS.ENABLE_ENCRYPTION;\n\n/**\n * Returns the default send preferences if no contact is available for the specified email address.\n * The global settings, composer mode and API keys can still change the defaults though.\n */\nconst getDefaultInfo = async (\n    email: string,\n    { RecipientType, Keys = [], Warnings: warnings = [] }: KeyData,\n    defaultMimeType: MIME_TYPES,\n    eoEnabled: boolean,\n    globalSign: boolean,\n    mailSettings: any,\n    addresses: Address[]\n): Promise<SendPreference> => {\n    const isInternal = RecipientType === RECIPIENT_TYPE.TYPE_INTERNAL;\n    const isExternal = RecipientType === RECIPIENT_TYPE.TYPE_EXTERNAL;\n    const settingsScheme = mailSettings.PGPScheme;\n    const settingsMime = settingsScheme === PACKAGE_TYPE.SEND_PGP_MIME ? MIME_TYPES.MIME : MIME_TYPES.PLAINTEXT;\n    const address = getByEmail(addresses, email);\n    const ownAddress = isOwnAddress(address, Keys);\n\n    if ((isInternal || isExternal) && Keys.length) {\n        const fallbackAddress = isFallbackAddress(address, Keys);\n\n        return {\n            warnings,\n            encrypt: true,\n            sign: true,\n            mimetype: isExternal ? settingsMime : defaultMimeType,\n            publickeys: await getKeys(Keys[0].PublicKey),\n            primaryPinned: !fallbackAddress,\n            scheme: isInternal ? PACKAGE_TYPE.SEND_PM : settingsScheme,\n            pinned: ownAddress,\n            ownAddress,\n            isVerified: true\n        };\n    }\n    if (eoEnabled) {\n        return {\n            warnings,\n            encrypt: true,\n            sign: false,\n            mimetype: defaultMimeType,\n            publickeys: [],\n            primaryPinned: true,\n            scheme: PACKAGE_TYPE.SEND_EO,\n            pinned: false,\n            ownAddress,\n            isVerified: true\n        };\n    }\n    return {\n        warnings,\n        encrypt: false,\n        sign: globalSign,\n        mimetype: globalSign ? settingsMime : defaultMimeType,\n        publickeys: [],\n        primaryPinned: true,\n        scheme: globalSign ? settingsScheme : PACKAGE_TYPE.SEND_CLEAR,\n        pinned: false,\n        ownAddress,\n        isVerified: true\n    };\n};\n\nconst mimetypeLogic = (\n    mimetype: MIME_TYPES,\n    defaultMimetype: MIME_TYPES,\n    scheme: PACKAGE_TYPE,\n    sign: boolean,\n    encrypt: boolean\n) => {\n    /*\n     * PGP/MIME can only send using the MIME encoding as it doesn't support separate attachments and we need to encode\n     * them in the body\n     */\n    if (scheme === PACKAGE_TYPE.SEND_PGP_MIME && (sign || encrypt)) {\n        return MIME_TYPES.MIME;\n    }\n    if (scheme === PACKAGE_TYPE.SEND_PGP_INLINE && (sign || encrypt)) {\n        return MIME_TYPES.PLAINTEXT;\n    }\n    // If sending EO, respect the mime type of the composer, since it will be what the API returns when retrieving the message.\n    if (scheme === PACKAGE_TYPE.SEND_EO) {\n        return defaultMimetype;\n    }\n    if (defaultMimetype === MIME_TYPES.PLAINTEXT || mimetype === null) {\n        // NEVER upconvert\n        return defaultMimetype;\n    }\n    return mimetype;\n};\n\n/**\n * Checks if one of the allowed sending keys is pinned. This function returns true if key pinning is disabled\n * or if atleast on of the Sending keys are in the contacts\n * Should be done on extract, so API changes (the other user resetting their password) are noticed.\n */\nconst isPrimaryPinned = async (base64Keys: string[], Keys: Key[], email: string, addresses: Address[]) => {\n    if (base64Keys.length === 0) {\n        const address = getByEmail(addresses, email);\n        return !isFallbackAddress(address, Keys);\n    }\n\n    const sendKeys = Keys.filter(encryptionEnabled).map((key) => key.PublicKey);\n    const keys = await Promise.all(sendKeys.map(getKeys));\n    const sendKeyObjects = keys.filter(([k = false]: any) => !!k);\n    const [pinnedKey] = await getKeys(base64ToArray(base64Keys[0]) as any);\n    const pinnedFingerprint = getFingerprint(pinnedKey);\n\n    return (\n        sendKeyObjects.length === 0 || sendKeyObjects.map(([k]: any) => getFingerprint(k)).includes(pinnedFingerprint)\n    );\n};\n\n/**\n * Generates the sendpreferences using the extracted information after parsing the contacts.\n * This function is the counterpart extractInfo\n */\nconst extractInfo = async (\n    { encryptFlag, signFlag, mimetype: inputMimetype, emailKeys, scheme: inputScheme, isVerified }: PreferenceInfo,\n    keyData: KeyData,\n    defaultMimeType: MIME_TYPES,\n    eoEnabled: boolean,\n    globalSign: boolean,\n    email: string,\n    mailSettings: any,\n    addresses: Address[]\n): Promise<SendPreference> => {\n    const { RecipientType, Warnings = [], Keys = [] } = keyData;\n    const isInternal = RecipientType === RECIPIENT_TYPE.TYPE_INTERNAL;\n    const isExternalWithKeys = RecipientType === RECIPIENT_TYPE.TYPE_EXTERNAL && Keys.length > 0;\n    const primaryPinned =\n        isInternal || isExternalWithKeys ? await isPrimaryPinned(emailKeys, Keys, email, addresses) : true;\n    const pmKey = isInternal || isExternalWithKeys ? await getKeys(Keys[0].PublicKey) : [];\n    // In case the pgp packet list contains multiple keys, only the first one is taken.\n    const keyObjs = await Promise.all(\n        emailKeys\n            .map((s) => decodeBase64(s) || '')\n            .map(binaryStringToArray)\n            .map((a) => {\n                return getKeys(a).then(([k]) => isExpiredKey(k).then((isExpired: boolean) => (isExpired ? null : [k])));\n            })\n    );\n    const keyObjects = (keyObjs.filter((k) => k !== null) as unknown) as PmcryptoKey[];\n\n    const publickeys = keyObjects.length && primaryPinned ? [keyObjects[0]] : pmKey;\n    const warnings = Warnings;\n    let encrypt = isInternal || isExternalWithKeys || (encryptFlag && !!keyObjects.length);\n    let sign = isInternal || isExternalWithKeys || (signFlag === null ? !!globalSign : signFlag);\n    sign = sign || encryptFlag;\n\n    let scheme: PACKAGE_TYPE;\n    if (isInternal) {\n        scheme = PACKAGE_TYPE.SEND_PM;\n    } else {\n        scheme = sign || encrypt ? inputScheme : PACKAGE_TYPE.SEND_CLEAR;\n    }\n    scheme = scheme === null ? mailSettings.PGPScheme : scheme;\n\n    if (eoEnabled && !encrypt) {\n        sign = false;\n        encrypt = true;\n        scheme = PACKAGE_TYPE.SEND_EO;\n    }\n\n    const mimetype = mimetypeLogic(inputMimetype, defaultMimeType, scheme, sign, encrypt);\n    const pinned = keyObjects.length > 0;\n    const ownAddress = false;\n\n    return { publickeys, warnings, encrypt, sign, scheme, mimetype, primaryPinned, isVerified, pinned, ownAddress };\n};\n\n/**\n * Extracts the preferences from the contacts and stores it in the cache for reusage.\n * The logic is straightforward but we see for more info\n * https://docs.google.com/document/d/1lEBkG0DC5FOWlumInKtu4a9Cc1Eszp48ZhFy9UpPQso\n */\nconst getApiInfo = async (\n    email: string,\n    keyData: KeyData,\n    defaultMimeType: MIME_TYPES,\n    eoEnabled: boolean,\n    globalSign: boolean,\n    mailSettings: any,\n    addresses: Address[],\n    cache: ContactEmailCache\n) => {\n    const normalizedEmail = normalizeEmail(email);\n    // const isInternal = keyData.RecipientType === RECIPIENT_TYPE.TYPE_INTERNAL;\n    // const isExternalWithKeys = keyData.RecipientType === RECIPIENT_TYPE.TYPE_EXTERNAL && keyData.Keys.length > 0;\n\n    const contactEmail = findEmailInCache(cache, normalizedEmail);\n    if (usesDefaults(contactEmail)) {\n        const info = await getDefaultInfo(\n            email,\n            keyData,\n            defaultMimeType,\n            eoEnabled,\n            globalSign,\n            mailSettings,\n            addresses\n        );\n        return { [email]: info };\n    }\n\n    // TODO: Decrypt contacts\n\n    ////////////////////////////////////\n    ////////////// MOCK ////////////////\n    ////////////////////////////////////\n\n    const info = await getDefaultInfo(email, keyData, defaultMimeType, eoEnabled, globalSign, mailSettings, addresses);\n    return { [email]: info };\n\n    ////////////////////////////////////\n    ////////////// MOCK ////////////////\n    ////////////////////////////////////\n\n    // const { vCard, errors } = await Contact.get(contactEmail.ContactID);\n\n    // const keyList = toList(vCard.get('key'));\n    // const encryptFlagList = toList(vCard.get('x-pm-encrypt'));\n    // const signFlagList = toList(vCard.get('x-pm-sign'));\n    // const schemeList = toList(vCard.get('x-pm-scheme'));\n    // const mimeList = toList(vCard.get('x-pm-mimetype'));\n    // const emailList = toList(vCard.get('email'));\n\n    // const group = getGroup(emailList, normalizedEmail);\n    // if (!group) {\n    //     return { [email]: await getDefaultInfo(email, keyData, defaultMimeType, eoEnabled, globalSign) };\n    // }\n\n    // const matchesGroup = groupMatcher(group.toLowerCase());\n    // const emailKeys = _.filter(keyList, matchesGroup);\n    // const encryptFlag = _.find(encryptFlagList, matchesGroup);\n    // const signFlag = _.find(signFlagList, matchesGroup);\n    // const mimetypeProp = _.find(mimeList, matchesGroup);\n    // const mimetype = mimetypeProp ? mimetypeProp.valueOf() : null;\n    // const schemeProp = _.find(schemeList, matchesGroup);\n    // const scheme = schemeProp ? toSchemeConstant(schemeProp.valueOf()) : null;\n    // const base64Keys = await reorderKeys(\n    //     keyData,\n    //     (await Promise.all(_.map(emailKeys, (prop) => contactKey.getBase64Value(prop)))).filter(Boolean) // In case the key is expired or revoked we don't get the base 64 value but false\n    // );\n    // const data = {\n    //     encryptFlag:\n    //         isInternal ||\n    //         isExternalWithKeys ||\n    //         ((encryptFlag ? encryptFlag.valueOf().toLowerCase() !== 'false' : false) && emailKeys.length > 0),\n    //     signFlag:\n    //         isInternal ||\n    //         isExternalWithKeys ||\n    //         (signFlag ? signFlag.valueOf().toLowerCase() !== 'false' : !!globalSign),\n    //     emailKeys: base64Keys,\n    //     mimetype: mimetype !== 'text/plain' && mimetype !== 'text/html' ? null : mimetype,\n    //     scheme: isInternal ? PACKAGE_TYPE.SEND_PM : scheme,\n    //     isVerified: !errors.includes(CONTACT_ERROR.TYPE2_CONTACT_VERIFICATION)\n    // };\n\n    // // We don't support encryption without signing\n    // data.signFlag = data.signFlag || data.encryptFlag;\n\n    // CACHE.EXTRACTED_INFO[contactEmail.ContactID] = CACHE[contactEmail.ContactID] || {};\n    // CACHE.EXTRACTED_INFO[contactEmail.ContactID][normalizedEmail] = data;\n\n    // return { [email]: await extractInfo(data, keyData, defaultMimeType, eoEnabled, globalSign, email) };\n};\n\n/**\n * Extracts send preferences from the cache if available\n */\nconst getCacheInfo = async (\n    email: string,\n    keyData: KeyData,\n    defaultMimeType: MIME_TYPES,\n    eoEnabled: boolean,\n    globalSign: boolean,\n    mailSettings: any,\n    addresses: Address[],\n    cache: ContactEmailCache\n): Promise<MapPreference> => {\n    const normalizedEmail = normalizeEmail(email);\n    const contactEmail = findEmailInCache(cache, normalizedEmail);\n\n    if (usesDefaults(contactEmail)) {\n        return {\n            [email]: await getDefaultInfo(\n                email,\n                keyData,\n                defaultMimeType,\n                eoEnabled,\n                globalSign,\n                mailSettings,\n                addresses\n            )\n        };\n    }\n\n    if (!emailInExtrInfo(contactEmail)) {\n        // return { [email]: null };\n        return {};\n    }\n\n    return {\n        [email]: await extractInfo(\n            getInExtrInfo(contactEmail),\n            keyData,\n            defaultMimeType,\n            eoEnabled,\n            globalSign,\n            email,\n            mailSettings,\n            addresses\n        )\n    };\n};\n\nconst inExtractedInfoCache = (contactEmailList: ContactEmail[]) =>\n    contactEmailList.every((e) => usesDefaults(e) || emailInExtrInfo(e));\n\nconst inCache = (emails: string[], cache: ContactEmailCache) => {\n    const normalizedEmails = emails.map(normalizeEmail);\n    const contactEmailList = normalizedEmails.map((email) => findEmailInCache(cache, email));\n\n    return inExtractedInfoCache(contactEmailList);\n};\n\nconst getInfo = async (\n    email: string,\n    keyData: KeyData,\n    defaultMimeType: MIME_TYPES,\n    eoEnabled: boolean,\n    globalSign: boolean,\n    mailSettings: any,\n    addresses: Address[],\n    cache: ContactEmailCache\n): Promise<MapPreference> => {\n    const address = getByEmail(addresses, email);\n\n    if (isOwnAddress(address, keyData.Keys)) {\n        const info = await getDefaultInfo(\n            email,\n            keyData,\n            defaultMimeType,\n            eoEnabled,\n            globalSign,\n            mailSettings,\n            addresses\n        );\n        return { [email]: info };\n    }\n\n    if (inCache([email], cache)) {\n        return getCacheInfo(email, keyData, defaultMimeType, eoEnabled, globalSign, mailSettings, addresses, cache);\n    }\n\n    return getApiInfo(email, keyData, defaultMimeType, eoEnabled, globalSign, mailSettings, addresses, cache);\n};\n\n/**\n * The goal of this service is to provide all the encryption + encoding preferences for a recipient by parsing the\n * contact of the recipient, considering the general settings, inputs from the message that we want to send and API stuff\n *\n * For the general logic see:\n * https://docs.google.com/document/d/1lEBkG0DC5FOWlumInKtu4a9Cc1Eszp48ZhFy9UpPQso\n * This is the specification it should implement and should be the right way to do this\n *\n * primaryPinned basically just says if the primary key is available for sending (so either pinned or key pinning is disabled\n * It differs from pinned as pinned just says is key pinning is enabled.\n * primaryPinned is a flag that tells the FE that we first need to fix the sendPreference before sending.\n */\nexport const getSendPreferences = async (\n    emails: string[] = [],\n    message: Message,\n    mailSettings: any,\n    addresses: Address[],\n    cache: ContactEmailCache,\n    getPublicKeys: (email: string) => Promise<KeyData>,\n    catchErrors = false\n): Promise<MapPreference> => {\n    const defaultMimeType: MIME_TYPES = message ? (message.MIMEType as MIME_TYPES) : MIME_TYPES.DEFAULT;\n    const eoEnabled = isEO(message);\n    const globalSign = message ? isSign(message) : mailSettings.Sign;\n    const normEmails: string[] = unique(emails.map(normalizeEmail));\n    const normInfos = await Promise.all(\n        normEmails.map(async (email) => {\n            try {\n                const keyData = await getPublicKeys(email);\n                return getInfo(email, keyData, defaultMimeType, eoEnabled, globalSign, mailSettings, addresses, cache);\n            } catch (e) {\n                if (!catchErrors) {\n                    throw e;\n                }\n            }\n        })\n    );\n    const normMap = Object.assign({}, ...normInfos);\n\n    return emails.reduce((acc, cur) => {\n        const result = normMap[normalizeEmail(cur)];\n        if (!result) {\n            return acc;\n        }\n        acc[cur] = result;\n        return acc;\n    }, {} as MapPreference);\n};\n","import mimemessage from 'mimemessage';\nimport { BinaryResult, arrayToBinaryString } from 'pmcrypto';\n\nimport { MessageExtended } from '../../models/message';\nimport { getPlainText, getHTML, getAttachments } from '../message/messages';\nimport { Attachment } from '../../models/attachment';\nimport { MIME_TYPES } from 'proton-shared/lib/constants';\nimport { get } from '../attachment/attachmentLoader';\nimport { AttachmentsDataCache } from '../../hooks/useAttachments';\nimport { Api } from '../../models/utils';\nimport { getBodyParser, extractEmbedded } from '../embedded/embeddedUtils';\n\n// Reference: Angular/src/app/composer/services/mimeMessageBuilder.js\n\ninterface AttachmentData {\n    attachment: Attachment;\n    data: BinaryResult;\n}\n\n/**\n * Remove '; name=' and '; filename=' values\n */\nconst extractContentValue = (value = '') => {\n    const semicolonIndex = value.indexOf(';');\n    if (semicolonIndex === -1) {\n        return value;\n    }\n    return value.substr(0, semicolonIndex);\n};\n\nconst buildAttachments = (attachments: AttachmentData[]) =>\n    attachments.map(({ attachment, data }) => {\n        const attachmentName = JSON.stringify(attachment.Name);\n        const headers = attachment.Headers || {};\n        const contentTypeValue =\n            extractContentValue(headers['content-type']) || attachment.MIMEType || 'application/octet-stream';\n        const contentDispositionValue = extractContentValue(headers['content-disposition']) || 'attachment';\n        const entity = mimemessage.factory({\n            contentType: `${contentTypeValue}; filename=${attachmentName}; name=${attachmentName}`,\n            contentTransferEncoding: 'base64',\n            body: arrayToBinaryString(data.data)\n        });\n\n        entity.header(\n            'content-disposition',\n            `${contentDispositionValue}; filename=${attachmentName}; name=${attachmentName}`\n        );\n\n        if (headers['content-id']) {\n            entity.header('content-id', headers['content-id']);\n        }\n\n        return entity;\n    });\n\nconst buildEmbeddedHtml = (html?: string, attachments?: AttachmentData[]) => {\n    const htmlEntity = mimemessage.factory({\n        contentType: 'text/html;charset=utf-8',\n        contentTransferEncoding: 'base64',\n        body: html\n    });\n\n    if (attachments && attachments.length > 0) {\n        console.log('attachments in mime message ignored as not supported yet', attachments);\n    }\n    // TODO: Attachments\n    // const testDiv = embeddedUtils.getBodyParser(html);\n    // const inlineAttachments = embeddedUtils.extractEmbedded(attachments, testDiv);\n    // const attachmentEntities = buildAttachments(inlineAttachments);\n\n    // add the attachments\n    // const relatedBody = [htmlEntity].concat(attachmentEntities);\n    const relatedBody = [htmlEntity];\n\n    return mimemessage.factory({\n        contentType: 'multipart/related',\n        body: relatedBody\n    });\n};\n\n/**\n * Quoted printable for compatibility with old clients\n * Mimemessagefactory doesn't handle the empty string well.\n */\nconst buildPlaintextEntity = (plaintext?: string) =>\n    mimemessage.factory({\n        body: plaintext,\n        contentTransferEncoding: 'quoted-printable'\n    });\n\n/**\n * Build the multipart/alternate MIME entity containing both the HTML and plain text entities.\n */\nconst buildAlternateEntity = (plaintext?: string, html?: string, attachments?: AttachmentData[]) =>\n    mimemessage.factory({\n        contentType: 'multipart/alternative',\n        body: [buildPlaintextEntity(plaintext), buildEmbeddedHtml(html, attachments)]\n    });\n\n/**\n * Builds a mime body given the plaintext, html source and a list of attachments to fetch embedded images from\n */\nconst buildBodyEntity = (plaintext?: string, html?: string, attachments?: AttachmentData[]) => {\n    if (html !== undefined && plaintext !== undefined) {\n        return buildAlternateEntity(plaintext, html, attachments);\n    }\n    return html !== undefined ? buildEmbeddedHtml(html, attachments) : buildPlaintextEntity(plaintext);\n};\n\n/**\n * Extracts the non-inline attachments from the given html.\n */\nconst getNormalAttachments = (html?: string, attachments: AttachmentData[] = []) => {\n    if (html === undefined) {\n        return attachments;\n    }\n    const testDiv = getBodyParser(html);\n    const embeddedAttachments = extractEmbedded(attachments, testDiv);\n    return attachments.filter((attachment) => !embeddedAttachments.includes(attachment));\n};\n\n/**\n * Builds a multipart message from the given plaintext, html bodies and attachments.\n * The html body is not necessary to create a valid mime body\n */\nconst build = (plaintext?: string, html?: string, attachments?: AttachmentData[]): string => {\n    const bodyEntity = buildBodyEntity(plaintext, html, attachments);\n    const normalAttachments = getNormalAttachments(html, attachments);\n    const attachmentEntities = buildAttachments(normalAttachments);\n    const body = [bodyEntity].concat(attachmentEntities);\n\n    const msgentity = mimemessage.factory({\n        contentType: 'multipart/mixed',\n        body\n    });\n\n    // this trailing line space is important: if it's not there outlook.com adds it and breaks pgp/mime signatures.\n    return msgentity.toString() + '\\r\\n';\n};\n\nconst fetchMimeDependencies = async (\n    message: MessageExtended,\n    cache: AttachmentsDataCache,\n    api: Api\n): Promise<AttachmentData[]> => {\n    return Promise.all(\n        getAttachments(message.data).map(async (attachment) => ({\n            attachment,\n            data: await get(attachment, message, cache, api)\n        }))\n    );\n};\n\nexport const constructMime = async (\n    message: MessageExtended,\n    cache: AttachmentsDataCache,\n    api: Api,\n    downconvert = true\n) => {\n    // TODO: ?\n    // if (message.isMIME() && message.decryptedMIME) {\n    //     return message.decryptedMIME;\n    // }\n\n    const plaintext = getPlainText(message, downconvert);\n    const html = message.data?.MIMEType === MIME_TYPES.DEFAULT ? getHTML(message) : undefined;\n    const attachments = await fetchMimeDependencies(message, cache, api);\n\n    return build(plaintext, html, attachments);\n};\n","import { MIME_TYPES, PACKAGE_TYPE } from 'proton-shared/lib/constants';\n\nimport { MessageExtended } from '../../models/message';\nimport { MapPreference } from './sendPreferences';\n\nimport { constructMime } from './sendMimeBuilder';\nimport { addReceived, getPlainText, getHTML } from '../message/messages';\nimport { PmcryptoKey } from 'pmcrypto';\nimport { AttachmentsDataCache } from '../../hooks/useAttachments';\nimport { Api } from '../../models/utils';\n\n// Reference: Angular/src/app/composer/services/encryptMessage.js\n// Reference: Angular/src/app/composer/services/generateTopPackages.js\n\nconst { PLAINTEXT, DEFAULT, MIME } = MIME_TYPES;\n\ntype PackageStatus = {\n    [key in MIME_TYPES]?: boolean;\n};\n\nexport type Packages = {\n    [key in MIME_TYPES]?: Package;\n};\n\nexport interface Package {\n    Flags?: number;\n    Addresses?: { [email: string]: Package };\n    MIMEType?: MIME_TYPES;\n    Body?: string;\n    BodyKey?: any;\n    BodyKeyPacket?: string;\n    Type?: PACKAGE_TYPE;\n    PublicKey?: PmcryptoKey;\n    AttachmentKeys?: { [AttachmentID: string]: { Key: string; Algorithm: string } };\n    AttachmentKeyPackets?: { [AttachmentID: string]: string };\n}\n\n/**\n * Generates the mime top-level packages, which include all attachments in the body.\n * Build the multipart/alternate MIME entity containing both the HTML and plain text entities.\n */\nconst generateMimePackage = async (\n    message: MessageExtended,\n    cache: AttachmentsDataCache,\n    api: Api\n): Promise<Package> => ({\n    Flags: addReceived(message.data?.Flags),\n    Addresses: {},\n    MIMEType: MIME,\n    Body: await constructMime(message, cache, api)\n});\n\nconst generatePlainTextPackage = async (message: MessageExtended): Promise<Package> => ({\n    Flags: addReceived(message.data?.Flags),\n    Addresses: {},\n    MIMEType: PLAINTEXT,\n    Body: getPlainText(message, true)\n});\n\nconst generateHTMLPackage = async (message: MessageExtended): Promise<Package> => ({\n    Flags: addReceived(message.data?.Flags),\n    Addresses: {},\n    MIMEType: DEFAULT,\n    Body: getHTML(message)\n});\n\n/**\n * Generates all top level packages. The top level packages have unencrypted bodies which are encrypted later on\n * once the sub level packages are attached, so we know with which keys we need to encrypt the bodies with.\n * Top level packages that are not needed are not generated.\n */\nexport const generateTopPackages = async (\n    message: MessageExtended,\n    sendPrefs: MapPreference,\n    cache: AttachmentsDataCache,\n    api: Api\n): Promise<Packages> => {\n    const packagesStatus: PackageStatus = Object.values(sendPrefs).reduce(\n        (packages, info) => ({\n            [PLAINTEXT]: packages[PLAINTEXT] || info.mimetype === MIME_TYPES.PLAINTEXT,\n            [DEFAULT]:\n                packages[DEFAULT] ||\n                info.mimetype === DEFAULT ||\n                (info.scheme === PACKAGE_TYPE.SEND_PGP_MIME && !info.encrypt && !info.sign),\n            [MIME]: packages[MIME] || (info.scheme === PACKAGE_TYPE.SEND_PGP_MIME && (info.encrypt || info.sign))\n        }),\n        {\n            [PLAINTEXT]: false,\n            [DEFAULT]: false,\n            [MIME]: false\n        } as PackageStatus\n    );\n\n    const demandedPackages = Object.values(MIME_TYPES).filter((k) => packagesStatus[k]);\n\n    const packages: Packages = {};\n\n    await Promise.all(\n        demandedPackages.map(async (type) => {\n            switch (type) {\n                case MIME:\n                    packages[MIME] = await generateMimePackage(message, cache, api);\n                    return;\n                case PLAINTEXT:\n                    packages[PLAINTEXT] = await generatePlainTextPackage(message);\n                    return;\n                case DEFAULT:\n                    packages[DEFAULT] = await generateHTMLPackage(message);\n                    return;\n                default:\n                    throw new Error(); // Should never happen.\n            }\n        })\n    );\n\n    return packages;\n};\n","import { MIME_TYPES, PACKAGE_TYPE } from 'proton-shared/lib/constants';\n\nimport { Package, Packages } from './sendTopPackages';\nimport { MessageExtended, Message } from '../../models/message';\nimport { MapPreference, SendPreference } from './sendPreferences';\nimport { isEO, getAttachments } from '../message/messages';\n\nconst { PLAINTEXT, DEFAULT, MIME } = MIME_TYPES;\nconst { SEND_PM, SEND_CLEAR, SEND_PGP_INLINE, SEND_PGP_MIME, SEND_EO } = PACKAGE_TYPE;\n\nexport const SEND_MIME = 32; // TODO update proton-shared constant\n\n/**\n * Package for a ProtonMail user.\n */\nconst sendPM = async ({ publickeys }: SendPreference, message: Message = {}) => ({\n    Type: SEND_PM,\n    PublicKey: publickeys.length ? publickeys[0] : undefined,\n    Signature: getAttachments(message).every(({ Signature }) => Signature)\n});\n\n/**\n * Package for a outside user using ProtonMail encryption\n */\nconst sendPMEncryptedOutside = async (message: Message = {}) => {\n    console.warn('Unsuported yet', message);\n\n    // TODO\n\n    return {};\n\n    // try {\n    //     const Token = await message.generateReplyToken();\n\n    //     const [{ data: EncToken }, { Auth }] = await Promise.all([\n    //         encryptMessage({ data: Token, publicKeys: [], passwords: [message.Password] }),\n    //         srp.getVerify({ Password: message.Password })\n    //     ]);\n\n    //     return {\n    //         Auth,\n    //         Type: SEND_TYPES.SEND_EO,\n    //         PasswordHint: message.PasswordHint,\n    //         Token,\n    //         EncToken,\n    //         Signature: +message.Attachments.every(({ Signature }) => Signature)\n    //     };\n    // } catch (err) {\n    //     message.encrypting = false;\n    //     dispatchMessageAction(message);\n    //     console.error(err);\n    //     throw err;\n    // }\n};\n\n/**\n * Package for a PGP/MIME user.\n */\nconst sendPGPMime = async ({ publickeys, sign, encrypt }: SendPreference) => {\n    if (encrypt) {\n        return {\n            Type: SEND_PGP_MIME,\n            PublicKey: publickeys.length ? publickeys[0] : undefined\n        };\n    }\n\n    // PGP/MIME signature only\n    return {\n        Type: SEND_MIME,\n        Signature: +sign\n    };\n};\n\n/**\n * Package for a PGP/Inline user.\n */\nconst sendPGPInline = async ({ publickeys, sign, encrypt }: SendPreference, message: Message = {}) => {\n    if (encrypt) {\n        return {\n            Type: SEND_PGP_INLINE,\n            PublicKey: publickeys.length ? publickeys[0] : undefined,\n            Signature: getAttachments(message).every(({ Signature }) => Signature)\n        };\n    }\n\n    // PGP/Inline signature only\n    return {\n        Type: SEND_CLEAR,\n        Signature: +sign\n    };\n};\n\n/**\n * Package for an unencrypted user\n */\nconst sendClear = async () => ({ Type: SEND_CLEAR, Signature: 0 });\n\n/**\n * Attach the subpackages for encryptMessage to the given top level packages. The packages need to be encrypted before\n * they can be send to the api. See encryptPackages for that.\n */\nexport const attachSubPackages = async (\n    packages: Packages,\n    message: MessageExtended,\n    emails: string[],\n    sendPrefs: MapPreference\n): Promise<Packages> => {\n    const bindPackageSet = async (promise: Promise<Package>, email: string, type: MIME_TYPES) => {\n        const pack = await promise;\n        const packageToUpdate = packages[type] as Package;\n\n        if (!packageToUpdate.Addresses) {\n            packageToUpdate.Addresses = {};\n        }\n        if (!packageToUpdate.Type) {\n            packageToUpdate.Type = 0;\n        }\n\n        packageToUpdate.Addresses[email] = pack;\n        packageToUpdate.Type |= pack.Type || 0;\n    };\n\n    const promises = emails.map((email: string) => {\n        const info = sendPrefs[email];\n\n        const mimeType = info.mimetype === null ? message.data?.MIMEType : info.mimetype;\n        const packageType = mimeType === 'text/html' ? DEFAULT : PLAINTEXT;\n\n        switch (info.scheme) {\n            case SEND_PM:\n                return bindPackageSet(sendPM(info, message.data), email, packageType);\n            case SEND_PGP_MIME:\n                if (!info.sign && !info.encrypt) {\n                    return bindPackageSet(sendClear(), email, DEFAULT);\n                }\n                return bindPackageSet(sendPGPMime(info), email, MIME);\n            case SEND_PGP_INLINE:\n                return bindPackageSet(sendPGPInline(info, message.data), email, PLAINTEXT);\n            case SEND_EO:\n            case SEND_CLEAR:\n                // Encrypted for outside (EO)\n                if (isEO(message.data)) {\n                    return bindPackageSet(sendPMEncryptedOutside(message.data), email, packageType);\n                }\n\n                return bindPackageSet(sendClear(), email, packageType);\n        }\n    });\n\n    await Promise.all(promises);\n    return packages;\n};\n","import {\n    encryptMessage,\n    splitMessage,\n    armorBytes,\n    concatArrays,\n    generateSessionKey,\n    encryptSessionKey,\n    SessionKey,\n    PmcryptoKey\n} from 'pmcrypto';\n\nimport { identity } from 'proton-shared/lib/helpers/function';\nimport { splitKeys } from 'proton-shared/lib/keys/keys';\nimport { hasBit } from 'proton-shared/lib/helpers/bitset';\n\nimport { MessageExtended, Message } from '../../models/message';\nimport { Packages, Package } from './sendTopPackages';\nimport { getAttachments } from '../message/messages';\nimport { getSessionKey } from '../attachment/attachmentLoader';\nimport { AddressKeys } from '../../models/key';\nimport { arrayToBase64 } from '../base64';\nimport { PACKAGE_TYPE, MIME_TYPES } from 'proton-shared/lib/constants';\nimport { AES256 } from '../../constants';\nimport { SEND_MIME } from './sendSubPackages';\nimport { Attachment } from '../../models/attachment';\n\n// Reference: Angular/src/app/composer/services/encryptPackages.js\n\ninterface AttachmentKeys {\n    Attachment: Attachment;\n    SessionKey: SessionKey;\n}\n\nconst { SEND_CLEAR, SEND_EO } = PACKAGE_TYPE;\n\nconst packToBase64 = ({ data, algorithm: Algorithm = AES256 }: SessionKey) => {\n    return { Key: arrayToBase64(data), Algorithm };\n};\n\nconst encryptKeyPacket = async ({\n    sessionKeys = [],\n    publicKeys = [],\n    passwords = []\n}: {\n    sessionKeys?: SessionKey[];\n    publicKeys?: PmcryptoKey[];\n    passwords?: string[];\n}) =>\n    Promise.all(\n        sessionKeys.map(async (sessionKey) => {\n            const { message } = await encryptSessionKey({\n                data: sessionKey.data,\n                algorithm: sessionKey.algorithm,\n                publicKeys: publicKeys.length > 0 ? publicKeys : undefined,\n                passwords\n            });\n            const data = message.packets.write();\n            return arrayToBase64(data as Uint8Array);\n        })\n    );\n\n/**\n * Encrypt the attachment session keys and add them to the package\n */\nconst encryptAttachmentKeys = async (pack: Package, message: MessageExtended, attachmentKeys: AttachmentKeys[]) => {\n    // multipart/mixed bodies already include the attachments so we don't add them here\n    if (pack.MIMEType === MIME_TYPES.MIME) {\n        return;\n    }\n\n    const promises = Object.values(pack.Addresses || {}).map(async (address) => {\n        const isEo = hasBit(address.Type, PACKAGE_TYPE.SEND_EO);\n\n        if (!(isEo || address.PublicKey)) {\n            return;\n        }\n\n        const keys = await encryptKeyPacket({\n            sessionKeys: attachmentKeys.map(({ SessionKey }) => SessionKey),\n            passwords: isEo ? [message.data?.Password || ''] : undefined,\n            publicKeys: isEo ? undefined : [address.PublicKey as PmcryptoKey]\n        });\n\n        const AttachmentKeyPackets: { [AttachmentID: string]: string } = {};\n        attachmentKeys.forEach(({ Attachment }, i) => (AttachmentKeyPackets[Attachment.ID || ''] = keys[i]));\n        address.AttachmentKeyPackets = AttachmentKeyPackets;\n    });\n\n    if (hasBit(pack.Type, PACKAGE_TYPE.SEND_CLEAR)) {\n        const AttachmentKeys: { [AttachmentID: string]: { Key: string; Algorithm: string } } = {};\n        attachmentKeys.forEach(({ Attachment, SessionKey }) => {\n            AttachmentKeys[Attachment.ID || ''] = packToBase64(SessionKey);\n        });\n        pack.AttachmentKeys = AttachmentKeys;\n    }\n\n    return Promise.all(promises);\n};\n\n/**\n * Generate random session key in the format openpgp creates them\n */\nconst generateSessionKeyHelper = async (): Promise<SessionKey> => ({\n    algorithm: AES256,\n    data: await generateSessionKey(AES256)\n});\n\n/**\n * Encrypt the body in the given package. Should only be used if the package body differs from message body\n * (i.e. the draft body)\n */\nconst encryptBodyPackage = async (pack: Package, ownKeys: AddressKeys[], publicKeys: PmcryptoKey[]) => {\n    const { privateKeys } = splitKeys(ownKeys) as any;\n    const cleanPublicKeys = publicKeys.filter(identity);\n\n    const { data, sessionKey } = await encryptMessage({\n        data: pack.Body || '',\n        publicKeys: cleanPublicKeys,\n        sessionKey: cleanPublicKeys.length ? undefined : await generateSessionKeyHelper(),\n        privateKeys,\n        returnSessionKey: true,\n        compression: true\n    });\n\n    const { asymmetric: keys, encrypted } = await splitMessage(data);\n    return { keys, encrypted, sessionKey };\n};\n\n/**\n * Encrypts the draft body. This is done separately from the other bodies so we can make sure that the send body\n * (the encrypted body in the message object) is the same as the other emails so we can use 1 blob for them in the api\n * (i.e. deduplication)\n */\nconst encryptDraftBodyPackage = async (\n    pack: Package,\n    ownKeys: AddressKeys[],\n    publicKeys: PmcryptoKey[],\n    message: MessageExtended\n) => {\n    // TODO: Do the change is equivalent?\n    // const ownPublicKeys = await getKeys(message.From.Keys[0].PublicKey);\n    // const publicKeys = ownPublicKeys.concat(_.filter(publicKeysList));\n\n    const { privateKeys, publicKeys: ownPublicKeys } = splitKeys(ownKeys) as any;\n    const cleanPublicKeys = [...ownPublicKeys, ...publicKeys].filter(identity);\n\n    const { data, sessionKey } = await encryptMessage({\n        data: pack.Body || '',\n        publicKeys: cleanPublicKeys,\n        privateKeys,\n        returnSessionKey: true,\n        compression: true\n    });\n\n    const packets = await splitMessage(data);\n\n    const { asymmetric, encrypted } = packets;\n\n    // rebuild the data without the send keypackets\n    packets.asymmetric = packets.asymmetric.slice(0, ownPublicKeys.length);\n    // combine message\n    const value = concatArrays(Object.values(packets).flat() as Uint8Array[]);\n    // _.flowRight(concatArrays, _.flatten, _.values)(packets);\n\n    (message.data as Message).Body = await armorBytes(value);\n\n    return { keys: asymmetric.slice(ownPublicKeys.length), encrypted, sessionKey };\n};\n\n/**\n * Encrypts the body of the package and then overwrites the body in the package and adds the encrypted session keys\n * to the subpackages. If we send clear message the unencrypted session key is added to the (top-level) package too.\n */\nconst encryptBody = async (pack: Package, ownKeys: AddressKeys[], message: MessageExtended): Promise<void> => {\n    const addressKeys = Object.keys(pack.Addresses || {});\n    const addresses = Object.values(pack.Addresses || {});\n    const publicKeysList = addresses.map(({ PublicKey }) => PublicKey as PmcryptoKey);\n    /*\n     * Special case: reuse the encryption packet from the draft, this allows us to do deduplication on the back-end.\n     * In fact, this will be the most common case.\n     */\n    const encryptPack = message.data?.MIMEType === pack.MIMEType ? encryptDraftBodyPackage : encryptBodyPackage;\n\n    const { keys, encrypted, sessionKey } = await encryptPack(pack, ownKeys, publicKeysList, message);\n\n    let counter = 0;\n    publicKeysList.forEach((publicKey, index) => {\n        if (!publicKey) {\n            return;\n        }\n\n        const key = keys[counter++];\n        (pack.Addresses || {})[addressKeys[index]].BodyKeyPacket = arrayToBase64(key);\n    });\n\n    await Promise.all(\n        addresses.map(async (subPack) => {\n            if (subPack.Type !== SEND_EO) {\n                return;\n            }\n            const [BodyKeyPacket] = await encryptKeyPacket({\n                sessionKeys: [sessionKey],\n                passwords: [message.data?.Password || '']\n            });\n\n            // eslint-disable-next-line require-atomic-updates\n            subPack.BodyKeyPacket = BodyKeyPacket;\n        })\n    );\n\n    if ((pack.Type || 0) & (SEND_CLEAR | SEND_MIME)) {\n        // eslint-disable-next-line require-atomic-updates\n        pack.BodyKey = packToBase64(sessionKey);\n    }\n    // eslint-disable-next-line require-atomic-updates\n    pack.Body = arrayToBase64(encrypted[0]);\n};\n\nconst encryptPackage = async (\n    pack: Package,\n    message: MessageExtended,\n    ownKeys: AddressKeys[],\n    attachmentKeys: AttachmentKeys[]\n): Promise<Package> => {\n    await Promise.all([encryptBody(pack, ownKeys, message), encryptAttachmentKeys(pack, message, attachmentKeys)]);\n\n    Object.values(pack.Addresses || {}).forEach((address: any) => delete address.PublicKey);\n\n    return pack;\n};\n\nconst getAttachmentKeys = async (message: MessageExtended): Promise<AttachmentKeys[]> =>\n    Promise.all(\n        getAttachments(message.data).map(async (attachment) => ({\n            Attachment: attachment,\n            SessionKey: await getSessionKey(attachment, message)\n        }))\n    );\n\n/**\n * Encrypts the packages and removes all temporary values that should not be send to the API\n */\nexport const encryptPackages = async (\n    message: MessageExtended,\n    packages: Packages,\n    getAddressKeys: (addressID?: string) => Promise<AddressKeys[]>\n): Promise<Packages> => {\n    const attachmentKeys = await getAttachmentKeys(message);\n    const ownKeys = await getAddressKeys(message.data?.AddressID); // Original code: message.From.ID, don't know of From property\n    const packageList = Object.values(packages) as Package[];\n    await Promise.all(packageList.map((pack) => encryptPackage(pack, message, ownKeys, attachmentKeys)));\n\n    return packages;\n};\n","import { useCallback } from 'react';\nimport { unique } from 'proton-shared/lib/helpers/array';\nimport { sendMessage } from 'proton-shared/lib/api/messages';\nimport { useMailSettings, useAddresses, useGetPublicKeys, useGetAddressKeys, useApi } from 'react-components';\n\nimport { MessageExtended } from '../models/message';\nimport { getRecipientsAddresses } from '../helpers/message/messages';\n\nimport { getSendPreferences } from '../helpers/send/sendPreferences';\nimport { generateTopPackages } from '../helpers/send/sendTopPackages';\nimport { attachSubPackages } from '../helpers/send/sendSubPackages';\nimport { encryptPackages } from '../helpers/send/sendEncrypt';\nimport { useAttachmentsCache } from './useAttachments';\n\n// Reference: Angular/src/app/composer/services/sendMessage.js\n\nexport const useSendMessage = () => {\n    const [mailSettings] = useMailSettings();\n    const [addresses] = useAddresses();\n    const cache = new Map(); // TODO\n    const getPublicKeys = useGetPublicKeys();\n    const getAddressKeys = useGetAddressKeys();\n    const api = useApi();\n    const { data } = useAttachmentsCache();\n\n    return useCallback(\n        async (message: MessageExtended) => {\n            // TODO: Prepare embedded\n            const emails = getRecipientsAddresses(message.data);\n            // TODO: handleAttachmentSigs\n\n            const uniqueEmails = unique(emails);\n            // eslint-disable-next-line\n            const sendPrefs = await getSendPreferences(\n                uniqueEmails,\n                message.data || {},\n                mailSettings,\n                addresses,\n                cache,\n                getPublicKeys\n            );\n            // todo regression testing: https://github.com/ProtonMail/Angular/issues/5088\n\n            console.log('sendPrefs', sendPrefs);\n\n            let packages = await generateTopPackages(message, sendPrefs, data, api);\n            packages = await attachSubPackages(packages, message, emails, sendPrefs);\n            packages = await encryptPackages(message, packages, getAddressKeys);\n\n            console.log('packages', packages);\n\n            // return;\n\n            // Old code save the draft here\n            // New one should have saved it just before\n            // TODO: Do I miss something?\n            //\n            // /*\n            //  * we do not re-encrypt the draft body if the packages contain the draft body: the generatePackages call will have\n            //  * generated the body correctly (otherwise it breaks deduplication)\n            //  */\n            // const encrypt = !packages.map(({ MIMEType }) => MIMEType).includes(message.MIMEType);\n            // // save the draft with the re-encrypted body\n            // await postMessage(message, { loader: false, encrypt });\n\n            // TODO: Restore that with attachments management\n            // // wait on the signature promise after the encrypt, so it can be done in parallel with the encryption\n            // // which is better for performance.\n            // await attachmentUpdates;\n            // message.encrypting = false;\n            // dispatchMessageAction(message);\n\n            // TODO: Define if this risk exist in the new architecture\n            // // Avoid to have SAVE and SEND request in the same time\n            // // Make sure to keep that just before the send message API request\n            // await composerRequestModel.chain(message);\n\n            // TODO: Implement retry system\n            // const suppress = retry ? [API_CUSTOM_ERROR_CODES.MESSAGE_VALIDATE_KEY_ID_NOT_ASSOCIATED] : [];\n            // try {\n            const { Sent } = await api(sendMessage(message.data?.ID, { Packages: packages } as any));\n            console.log('Sent', Sent);\n            return { data: Sent };\n            // } catch (e) {\n            //     if (retry && e.data.Code === API_CUSTOM_ERROR_CODES.MESSAGE_VALIDATE_KEY_ID_NOT_ASSOCIATED) {\n            //         sendPreferences.clearCache();\n            //         keyCache.clearCache();\n            //         // retry if we used the wrong keys\n            //         return send(message, parameters, false);\n            //     }\n            //     throw e;\n            // }\n        },\n        [mailSettings, addresses, cache, getPublicKeys]\n    );\n};\n","import { encryptMessage, PmcryptoKey } from 'pmcrypto';\nimport { MessageExtended } from '../../models/message';\n\n// Reference: Angular/src/app/message/factories/messageModel.js encryptBody\n\nexport const encryptBody = async (\n    message: MessageExtended,\n    privateKeys: PmcryptoKey[],\n    publicKeys: PmcryptoKey[]\n): Promise<MessageExtended> => {\n    const { data } = await encryptMessage({\n        data: message.content || '',\n        publicKeys: [publicKeys[0]],\n        privateKeys,\n        format: 'utf8',\n        compression: true\n    });\n\n    return { ...message, data: { ...message.data, Body: data } };\n};\n","import { useCallback } from 'react';\nimport { useGetPublicKeys, useGetAddressKeys } from 'react-components';\nimport { splitKeys } from 'proton-shared/lib/keys/keys';\n\nimport { encryptBody } from '../helpers/message/messageEncrypt';\nimport { MessageExtended } from '../models/message';\n\nexport const useEncryptMessage = () => {\n    const getPublicKeys = useGetPublicKeys();\n    const getAddressKeys = useGetAddressKeys();\n\n    // TODO: Cache result\n    return useCallback(\n        async (message: MessageExtended): Promise<MessageExtended> => {\n            const [{ publicKeys = [] }, addressKeys] = await Promise.all([\n                getPublicKeys(message.data?.Sender?.Address),\n                getAddressKeys(message.data?.AddressID)\n            ]);\n            const { privateKeys } = splitKeys(addressKeys) as any;\n\n            return encryptBody(message, privateKeys, publicKeys);\n        },\n        [getPublicKeys, getAddressKeys]\n    );\n};\n","import { useContext, useEffect, useCallback, useState, useMemo } from 'react';\nimport { c } from 'ttag';\nimport { useApi, useEventManager } from 'react-components';\nimport {\n    getMessage,\n    markMessageAsRead,\n    createDraft as createDraftApi,\n    updateDraft,\n    deleteMessages\n} from 'proton-shared/lib/api/messages';\nimport { wait } from 'proton-shared/lib/helpers/promise';\n\nimport { transformEscape } from '../helpers/transforms/transformEscape';\nimport { transformLinks } from '../helpers/transforms/transformLinks';\nimport { transformEmbedded } from '../helpers/transforms/transformEmbedded';\nimport { transformWelcome } from '../helpers/transforms/transformWelcome';\nimport { transformBlockquotes } from '../helpers/transforms/transformBlockquotes';\nimport { transformStylesheet } from '../helpers/transforms/transformStylesheet';\nimport { transformRemote } from '../helpers/transforms/transformRemote';\nimport { transformBase } from '../helpers/transforms/transformBase';\nimport { useDecryptMessage } from './useDecryptMessage';\nimport { AttachmentsCache, useAttachmentsCache } from './useAttachments';\nimport { MessageContext } from '../containers/MessageProvider';\nimport { Message, MessageExtended } from '../models/message';\nimport { useSendMessage } from './useSendMessage';\nimport { MailSettings, Api } from '../models/utils';\nimport { useEncryptMessage } from './useEncryptMessage';\nimport { MESSAGE_ACTIONS } from '../constants';\n\nexport interface ComputationOption {\n    cache: any;\n    mailSettings: MailSettings;\n    api: Api;\n    attachmentsCache: AttachmentsCache;\n}\n\nexport interface Computation {\n    (message: MessageExtended, options: ComputationOption):\n        | Promise<Partial<MessageExtended>>\n        | Partial<MessageExtended>;\n}\n\ninterface MessageActions {\n    load: () => Promise<void>;\n    initialize: () => Promise<void>;\n    loadRemoteImages: () => Promise<void>;\n    loadEmbeddedImages: () => Promise<void>;\n    createDraft: (message: MessageExtended) => Promise<void>;\n    saveDraft: (message: MessageExtended) => Promise<void>;\n    send: (message: MessageExtended) => Promise<void>;\n    deleteDraft: () => Promise<void>;\n}\n\ninterface MessageActivity {\n    lock: boolean;\n    current: string;\n}\n\n/**\n * Apply updates from the message model to the message in state\n */\nexport const mergeMessages = (messageState: MessageExtended, messageModel: MessageExtended) => {\n    if (messageState.document) {\n        messageState.document.innerHTML = messageModel.content || '';\n    }\n    const message = {\n        ...messageState,\n        content: messageModel.content,\n        data: { ...messageState.data, ...messageModel.data }\n    };\n    return message;\n};\n\n/**\n * Only takes technical stuff from the updated message\n */\nexport const mergeSavedMessage = (messageSaved: Message = {}, messageReturned: Message) => ({\n    ...messageSaved,\n    ID: messageReturned.ID,\n    ParentID: messageReturned.ParentID,\n    Time: messageReturned.Time,\n    ContextTime: messageReturned.ContextTime,\n    ConversationID: messageReturned.ConversationID\n});\n\nexport const useMessage = (\n    inputMessage: Message = {},\n    mailSettings: any\n): [MessageExtended, MessageActions, MessageActivity] => {\n    const api = useApi();\n    const { call } = useEventManager();\n    const cache = useContext(MessageContext);\n    const computeCache = useMemo(() => new Map(), []);\n    const attachmentsCache = useAttachmentsCache();\n\n    // messageID change ONLY when a draft is created\n    const [messageID, setMessageID] = useState(inputMessage.ID || '');\n    const [message, setMessage] = useState<MessageExtended>(\n        cache.has(messageID) ? cache.get(messageID) : { data: inputMessage }\n    );\n    const [messageActivity, setMessageActivity] = useState<MessageActivity>({ lock: false, current: '' });\n\n    const decrypt = useDecryptMessage();\n    const encrypt = useEncryptMessage();\n    const sendMessage = useSendMessage();\n\n    // Update messageID if component is reused for another message\n    useEffect(() => {\n        if (!!inputMessage.ID && inputMessage.ID !== messageID) {\n            setMessageID(inputMessage.ID);\n        }\n    }, [inputMessage]);\n\n    // Update message state and listen to cache for updates on the current message\n    useEffect(() => {\n        cache.has(messageID) ? setMessage(cache.get(messageID)) : setMessage({ data: inputMessage });\n\n        return cache.subscribe((changedMessageID) => {\n            // Prevent updates on message deltion from the cache to prevent undefined message in state.\n            if (changedMessageID === messageID && cache.has(messageID)) {\n                setMessage(cache.get(messageID));\n            }\n        });\n    }, [messageID, cache]);\n\n    const transforms = [\n        transformEscape,\n        transformBase,\n        transformLinks,\n        transformEmbedded,\n        transformWelcome,\n        transformBlockquotes,\n        transformStylesheet,\n        transformRemote\n    ] as Computation[];\n\n    const loadData = useCallback(\n        async ({ data: message = {} }: MessageExtended) => {\n            // If the Body is already there, no need to send a request\n            if (!message.Body) {\n                const { Message } = await api(getMessage(message.ID));\n                return { data: Message as Message };\n            }\n            return {} as MessageExtended;\n        },\n        [api]\n    );\n\n    const markAsRead = useCallback(\n        async ({ data: message = {} }: MessageExtended) => {\n            const markAsRead = async () => {\n                await api(markMessageAsRead([message.ID || '']));\n                call();\n            };\n\n            if (message.Unread) {\n                markAsRead(); // No await to not slow down the UX\n                return { data: { ...message, Unread: 0 } } as MessageExtended;\n            }\n\n            return {} as MessageExtended;\n        },\n        [api]\n    );\n\n    const create = useCallback(\n        async (message: MessageExtended = {}) => {\n            const { Message } = await api(\n                createDraftApi({\n                    Action: message.action !== MESSAGE_ACTIONS.NEW ? message.action : undefined,\n                    Message: message.data\n                } as any)\n            );\n            call();\n            return { data: mergeSavedMessage(message.data, Message) };\n        },\n        [api]\n    );\n\n    const update = useCallback(\n        async (message: MessageExtended = {}) => {\n            const { Message } = await api(updateDraft(message.data?.ID, message.data));\n            call();\n            return { data: mergeSavedMessage(message.data, Message) };\n        },\n        [api]\n    );\n\n    const deleteRequest = useCallback(\n        async (message: MessageExtended = {}) => {\n            await api(deleteMessages([message.data?.ID]));\n            call();\n            return {};\n        },\n        [api]\n    );\n\n    const activities = new Map<Computation, string>([\n        [encrypt, c('Action').t`Encrypting`],\n        [create, c('Action').t`Creating`],\n        [update, c('Action').t`Saving`],\n        [sendMessage, c('Action').t`Sending`],\n        [deleteRequest, c('Action').t`Deleting`]\n    ]);\n    transforms.forEach((transform) => activities.set(transform, c('Action').t`Processing`));\n\n    /**\n     * Run a computation on a message, wait until it finish\n     * Return the message extanded with the result of the computation\n     */\n    const runSingle = useCallback(\n        async (message: MessageExtended, compute: Computation) => {\n            let current = '';\n            if (activities.has(compute)) {\n                current = activities.get(compute) as string;\n            }\n            setMessageActivity({ lock: true, current });\n\n            const result = (await compute(message, { cache: computeCache, mailSettings, api, attachmentsCache })) || {};\n\n            if (result.document) {\n                result.content = result.document.innerHTML;\n            }\n\n            return { ...message, ...result } as MessageExtended;\n        },\n        [cache]\n    );\n\n    type CacheUpdate = (newMessage: MessageExtended) => Promise<void> | void;\n\n    const simpleUpdateCache: CacheUpdate = (newMessage: MessageExtended) => {\n        cache.set(messageID, newMessage);\n    };\n\n    /**\n     * Run a list of computation sequentially\n     * updateCacheCallback is used to update the cache value after computations but before unlocking the message\n     * A callback is needed here because it's better to position precisely the moment where to update the cache\n     */\n    const run = useCallback(\n        async (\n            message: MessageExtended,\n            computes: Computation[],\n            updateCacheCallback: CacheUpdate = simpleUpdateCache\n        ) => {\n            setMessageActivity({ lock: true, current: '' });\n            const result = await computes.reduce(\n                async (messagePromise: Promise<MessageExtended>, compute: Computation) => {\n                    return runSingle(await messagePromise, compute);\n                },\n                Promise.resolve(message)\n            );\n            await updateCacheCallback(result);\n            // Allow the cache update to be dispatched in React before resolving (simplify several race conditions)\n            await wait(0);\n            setMessageActivity({ lock: false, current: '' });\n            return result;\n        },\n        [runSingle, cache]\n    );\n\n    const load = useCallback(async () => {\n        await run(message, [loadData]);\n    }, [messageID, message, run, cache]);\n\n    const initialize = useCallback(async () => {\n        cache.set(messageID, { ...message, initialized: false });\n        await run(\n            message,\n            [loadData, decrypt, markAsRead, ...transforms] as Computation[],\n            (newMessage: MessageExtended) => cache.set(messageID, { ...newMessage, initialized: true })\n        );\n    }, [messageID, message, run, cache]);\n\n    const loadRemoteImages = useCallback(async () => {\n        await run({ ...message, showRemoteImages: true }, [transformRemote as Computation]);\n    }, [messageID, message, message, run, cache]);\n\n    const loadEmbeddedImages = useCallback(async () => {\n        await run({ ...message, showEmbeddedImages: true }, [transformEmbedded]);\n    }, [messageID, message, run, cache]);\n\n    const createDraft = useCallback(\n        async (message: MessageExtended) => {\n            await run(message, [encrypt, create] as Computation[], (newMessage: MessageExtended) => {\n                cache.set(newMessage.data?.ID || '', newMessage);\n                setMessageID(newMessage.data?.ID || '');\n            });\n        },\n        [message, run, cache]\n    );\n\n    const saveDraft = useCallback(\n        async (messageModel: MessageExtended) => {\n            await run(mergeMessages(message, messageModel), [encrypt, update]);\n        },\n        [message, run, cache]\n    );\n\n    const send = useCallback(\n        async (messageModel: MessageExtended) => {\n            await run(mergeMessages(message, messageModel), [encrypt, update, sendMessage]);\n        },\n        [message, run, cache]\n    );\n\n    const deleteDraft = useCallback(async () => {\n        await run(message, [deleteRequest], () => cache.delete(messageID));\n    }, [message, run, cache]);\n\n    return [\n        message,\n        {\n            load,\n            initialize,\n            loadRemoteImages,\n            loadEmbeddedImages,\n            createDraft,\n            saveDraft,\n            send,\n            deleteDraft\n        },\n        messageActivity\n    ];\n};\n","import React, { useEffect, useRef } from 'react';\nimport { useToggle, Loader, classnames } from 'react-components';\n\nimport { hasAttachments, isDraft } from '../../helpers/message/messages';\nimport { Label } from '../../models/label';\nimport MessageBody from './MessageBody';\nimport HeaderCollapsed from './header/HeaderCollapsed';\nimport HeaderExpanded from './header/HeaderExpanded';\nimport MessageFooter from './MessageFooter';\nimport { Message } from '../../models/message';\nimport { useMessage } from '../../hooks/useMessage';\nimport { OnCompose } from '../../containers/ComposerContainer';\n\ninterface Props {\n    labels: Label[];\n    message: Message;\n    mailSettings: any;\n    initialExpand?: boolean;\n    conversationIndex?: number;\n    onCompose: OnCompose;\n}\n\nconst MessageView = ({\n    labels = [],\n    message: inputMessage,\n    mailSettings,\n    initialExpand = true,\n    conversationIndex = 0,\n    onCompose\n}: Props) => {\n    const draft = isDraft(inputMessage);\n\n    const { state: expanded, set: setExpanded } = useToggle(initialExpand && !draft);\n    const elementRef = useRef<HTMLElement>(null);\n    const [message, { load, initialize, loadRemoteImages, loadEmbeddedImages }] = useMessage(\n        inputMessage,\n        mailSettings\n    );\n\n    const loaded = !!message?.initialized;\n\n    const prepareMessage = async () => {\n        if (typeof message?.initialized === 'undefined') {\n            await initialize();\n        }\n\n        // Don't scroll if it's the first message of the conversation and only on the first automatic expand\n        if (conversationIndex !== 0 && initialExpand) {\n            elementRef.current && elementRef.current.scrollIntoView({ behavior: 'smooth', block: 'start' });\n        }\n    };\n\n    useEffect(() => {\n        if (!draft && !loaded && expanded) {\n            prepareMessage();\n        }\n\n        if (draft && message.data?.Subject === undefined) {\n            load();\n        }\n    }, [message, loaded, expanded]);\n\n    const handleLoadRemoteImages = async () => {\n        await loadRemoteImages();\n    };\n\n    const handleLoadEmbeddedImages = async () => {\n        await loadEmbeddedImages();\n    };\n\n    const handleExpand = (value: boolean) => () => {\n        if (draft) {\n            onCompose({ existingDraft: message });\n        } else {\n            setExpanded(value);\n        }\n    };\n\n    return (\n        <article ref={elementRef} className={classnames(['message-container mb2', expanded && 'is-opened'])}>\n            {expanded ? (\n                <>\n                    <HeaderExpanded\n                        message={message}\n                        messageLoaded={loaded}\n                        onLoadRemoteImages={handleLoadRemoteImages}\n                        onLoadEmbeddedImages={handleLoadEmbeddedImages}\n                        labels={labels}\n                        mailSettings={mailSettings}\n                        onCollapse={handleExpand(false)}\n                        onCompose={onCompose}\n                    />\n                    {loaded ? (\n                        <>\n                            <MessageBody message={message} />\n                            {hasAttachments(message.data) ? <MessageFooter message={message} /> : null}\n                        </>\n                    ) : (\n                        <Loader />\n                    )}\n                </>\n            ) : (\n                <HeaderCollapsed message={message} labels={labels} onExpand={handleExpand(true)} />\n            )}\n        </article>\n    );\n};\n\nexport default MessageView;\n","import { Message } from '../../models/message';\nimport { MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\nimport { isCustomLabel } from '../labels';\nimport { hasLabel } from '../elements';\nimport { isDraft, isSentAutoReply } from './messages';\n\n// Reference: Angular/src/app/message/services/findExpandableMessage.js\n\n/**\n * Filter the list of message to find the first readable message\n * - iterate backwards\n * - check if the previous item is read\n * - if the previous isRead === 1, break the iteration\n */\nconst getFirstMessageToRead = (messages: Message[]): Message => {\n    // Else we open the first message unread beginning to the end list\n    let index = messages.length;\n    let contains = false;\n\n    while (--index > 0) {\n        if (messages[index - 1].Unread === 0) {\n            // Is read\n            contains = true;\n            break;\n        }\n    }\n\n    const position = contains ? index : 0;\n    // A conversation can contains only one draft\n    return messages.length ? messages[position] : messages[0];\n};\n\nconst getLast = (messages: Message[]): Message => {\n    if (messages.length === 0) {\n        return {};\n    }\n    return messages[messages.length - 1];\n};\n\n/**\n * Find in the message to scroll and expand\n */\nexport const findMessageToExpand = (labelID = '', messages: Message[] = []): Message => {\n    if (labelID === MAILBOX_LABEL_IDS.STARRED || isCustomLabel(labelID)) {\n        return getFirstMessageToRead(messages.filter((message) => hasLabel(message, labelID) && !isDraft(message)));\n    }\n\n    if (labelID === MAILBOX_LABEL_IDS.DRAFTS || labelID === MAILBOX_LABEL_IDS.ALL_DRAFTS) {\n        return getLast(messages.filter(isDraft));\n    }\n\n    const realMessages = messages.filter((message) => !isDraft(message) && !isSentAutoReply(message));\n    const latest = getLast(realMessages);\n\n    if (latest && latest.Unread === 0) {\n        return latest;\n    }\n\n    return getFirstMessageToRead(realMessages);\n};\n","import React from 'react';\nimport { c } from 'ttag';\n\ninterface Props {\n    inTrash: boolean;\n    filter: boolean;\n    onToggle: () => void;\n}\n\nconst TrashWarning = ({ inTrash, filter, onToggle }: Props) => {\n    return (\n        <div className=\"containsMessage flex flex-column\">\n            <p className=\"bordered-container flex pt0-5 pb0-5 pl1 pr1\">\n                {inTrash\n                    ? c('Info').t`This conversation contains non-trashed messages.`\n                    : c('Info').t`This conversation contains trashed messages.`}\n                <a onClick={onToggle} className=\"ml0-5\">\n                    {inTrash\n                        ? filter\n                            ? c('Action').t`Show non-trashed messages`\n                            : c('Action').t`Hide non-trashed messages`\n                        : filter\n                        ? c('Action').t`Show trashed messages`\n                        : c('Action').t`Hide trashed messages`}\n                </a>\n            </p>\n        </div>\n    );\n};\n\nexport default TrashWarning;\n","import React from 'react';\nimport { Loader, useLabels, useToggle } from 'react-components';\n\nimport MessageView from '../message/MessageView';\nimport ItemStar from '../list/ItemStar';\nimport { ELEMENT_TYPES } from '../../constants';\nimport NumMessages from './NumMessages';\nimport ItemLabels from '../list/ItemLabels';\nimport { useConversation } from '../../hooks/useConversation';\nimport { findMessageToExpand } from '../../helpers/message/messageExpandable';\nimport TrashWarning from './TrashWarning';\nimport { MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\nimport { hasLabel } from '../../helpers/elements';\nimport { OnCompose } from '../../containers/ComposerContainer';\n\ninterface Props {\n    labelID: string;\n    conversationID: string;\n    messageID?: string;\n    mailSettings: any;\n    onCompose: OnCompose;\n}\n\nconst ConversationView = ({ labelID, conversationID, mailSettings, onCompose }: Props) => {\n    const [labels] = useLabels();\n    const [conversationData, loading] = useConversation(conversationID);\n    const { state: filter, toggle: toggleFilter } = useToggle(true);\n\n    if (loading) {\n        return <Loader />;\n    }\n\n    const { Conversation: conversation, Messages: messages = [] } = conversationData;\n\n    if (!conversation) {\n        return null;\n    }\n\n    const inTrash = labelID === MAILBOX_LABEL_IDS.TRASH;\n    const filteredMessages = messages.filter((message) => inTrash === hasLabel(message, MAILBOX_LABEL_IDS.TRASH));\n    const messagesToShow = filter ? filteredMessages : messages;\n    const showTrashWarning = filteredMessages.length !== messages.length;\n\n    const initialExpand = findMessageToExpand(labelID, messagesToShow).ID;\n\n    return (\n        <>\n            <header className=\"flex flex-column mb1\">\n                <div className=\"flex flex-nowrap flex-spacebetween flex-items-center mb1\">\n                    <h2 className=\"mb0\">\n                        <NumMessages className=\"mr0-25\" conversation={conversation} />\n                        {conversation.Subject}\n                    </h2>\n                    <div>\n                        <ItemLabels labels={labels} max={4} element={conversation} />\n                        <ItemStar element={conversation} type={ELEMENT_TYPES.CONVERSATION} />\n                    </div>\n                </div>\n                {showTrashWarning && <TrashWarning inTrash={inTrash} filter={filter} onToggle={toggleFilter} />}\n            </header>\n            {messagesToShow.map((message, index) => (\n                <MessageView\n                    key={message.ID}\n                    message={message}\n                    initialExpand={message.ID === initialExpand}\n                    labels={labels}\n                    mailSettings={mailSettings}\n                    conversationIndex={index}\n                    onCompose={onCompose}\n                />\n            ))}\n        </>\n    );\n};\n\nexport default ConversationView;\n","import { useContext, useCallback } from 'react';\nimport { getConversation } from 'proton-shared/lib/api/conversations';\nimport { useCachedModelResult, useApi } from 'react-components';\n\nimport { MessageContext, Cache } from '../containers/MessageProvider';\nimport { Conversation } from '../models/conversation';\nimport { Message } from '../models/message';\n\nexport type ConversationCache = Cache<string, Conversation>;\n\ninterface ConversationResult {\n    Conversation: Conversation;\n    Messages?: Message[];\n}\n\nconst getKey = (ID: string) => `Conversation-${ID}`;\n\nexport const useConversation = (conversationID: string): [ConversationResult, boolean, any] => {\n    // Pretty ugly \"reuse\" of the MessageCache\n    // TODO: either use a different cache or properly handle mix types\n    const cache = (useContext(MessageContext) as any) as ConversationCache;\n    const api = useApi();\n\n    const miss = useCallback(() => {\n        return api(getConversation(conversationID));\n    }, [conversationID, api, cache]);\n\n    return useCachedModelResult(cache as any, getKey(conversationID), miss);\n};\n","import React from 'react';\nimport { useUser, useModals, LinkButton, AuthenticatedBugModal } from 'react-components';\nimport { c, ngettext, msgid } from 'ttag';\nimport { capitalize } from 'proton-shared/lib/helpers/string';\n\nimport unreadEmailsSvg from 'design-system/assets/img/shared/unread-emails.svg';\nimport { LabelCount } from '../../models/label';\n\ninterface Props {\n    labelCount: LabelCount;\n}\n\nconst WelcomePane = ({ labelCount }: Props) => {\n    const [user] = useUser();\n    const { createModal } = useModals();\n\n    const Unread = labelCount.Unread || 0;\n\n    const unreadsLabel = (\n        <strong key=\"unreads-label\">\n            {ngettext(msgid`${Unread} unread email`, `${Unread} unread emails`, Unread)}\n        </strong>\n    );\n\n    const reportBugButton = (\n        <LinkButton key=\"report-bug-btn\" onClick={() => createModal(<AuthenticatedBugModal />)}>{c('Action')\n            .t`report a bug`}</LinkButton>\n    );\n\n    return (\n        <div className=\"flex-item-fluid aligncenter p3\">\n            <h1>\n                {user.DisplayName ? c('Title').t`Welcome, ${capitalize(user.DisplayName)}!` : c('Title').t`Welcome`}\n            </h1>\n            {Unread ? <p>{c('Info').jt`You have ${unreadsLabel} in this folder`}</p> : null}\n            {user.hasPaidMail ? (\n                <>\n                    <p className=\"mw40e center mb2\">\n                        {c('Info')\n                            .jt`Having trouble sending or receiving emails? Interested in helping us improve our service? Feel free to ${reportBugButton}.`}\n                    </p>\n                    <img src={unreadEmailsSvg} alt={c('Alternative text for welcome image').t`Welcome`} />\n                </>\n            ) : (\n                <>\n                    <p>{c('Info')\n                        .t`Upgrade to a paid plan starting from $4/month only and get additional storage capacity and more addresses with ProtonMail Plus.`}</p>\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default WelcomePane;\n","import React, { useMemo } from 'react';\nimport { Button, useLabels } from 'react-components';\nimport { c, ngettext, msgid } from 'ttag';\n\nimport conversationSingleSvg from 'design-system/assets/img/shared/selected-conversation-single.svg';\nimport conversationManySvg from 'design-system/assets/img/shared/selected-conversation-many.svg';\nimport { LabelCount } from '../../models/label';\nimport { getLabelName } from '../../helpers/labels';\n\ninterface Props {\n    labelCount: LabelCount;\n    checkedIDs?: string[];\n    onUncheckAll: () => void;\n}\n\nconst SelectionPane = ({ labelCount, checkedIDs = [], onUncheckAll }: Props) => {\n    const [labels] = useLabels();\n\n    const total = labelCount.Total || 0;\n    const checkeds = checkedIDs.length;\n\n    const labelName = useMemo(() => getLabelName(labelCount.LabelID || '', labels), [labels, labelCount]);\n\n    return (\n        <div className=\"flex-item-fluid aligncenter p3\">\n            {checkeds === 0 && labelName && <h3 className=\"bold\">{labelName}</h3>}\n            <p className=\"mb2\">\n                {checkeds === 0\n                    ? ngettext(\n                          msgid`You have ${total} stored in this folder`,\n                          `You have ${total} stored in this folder`,\n                          total\n                      )\n                    : ngettext(\n                          msgid`You selected ${checkeds} element from this folder`,\n                          `You selected ${checkeds} elements from this folder`,\n                          checkeds\n                      )}\n            </p>\n            <div className=\"mb2\">\n                <img\n                    src={checkeds > 1 ? conversationManySvg : conversationSingleSvg}\n                    alt={c('Alternative text for conversation image').t`Conversation`}\n                />\n            </div>\n            {checkeds > 0 && <Button onClick={onUncheckAll}>{c('Action').t`Deselect`}</Button>}\n        </div>\n    );\n};\n\nexport default SelectionPane;\n","import React, { useEffect, useMemo } from 'react';\n\nimport WelcomePane from './WelcomePane';\nimport SelectionPane from './SelectionPane';\nimport { ELEMENT_TYPES } from '../../constants';\nimport { useConversationCounts, useMessageCounts } from 'react-components';\nimport { getCurrentType } from '../../helpers/elements';\nimport { LabelCount } from '../../models/label';\n\ninterface Props {\n    labelID: string;\n    checkedIDs?: string[];\n    onUncheckAll: () => void;\n    welcomeRef: any;\n    mailSettings: any;\n}\n\nconst PlaceholderView = ({ labelID = '', checkedIDs = [], onUncheckAll, welcomeRef, mailSettings }: Props) => {\n    const [conversationCounts] = useConversationCounts();\n    const [messageCounts] = useMessageCounts();\n    const type = getCurrentType({ mailSettings, labelID });\n\n    useEffect(\n        () => () => {\n            welcomeRef.current = true;\n        },\n        []\n    );\n\n    const labelCount: LabelCount = useMemo(() => {\n        const counters = type === ELEMENT_TYPES.CONVERSATION ? conversationCounts : messageCounts;\n\n        if (!Array.isArray(counters)) {\n            return 0;\n        }\n\n        return counters.find((counter) => counter.LabelID === labelID) || { LabelID: '', Unread: 0, Total: 0 };\n    }, [labelID, conversationCounts, messageCounts]);\n\n    return welcomeRef.current || checkedIDs.length > 0 ? (\n        <SelectionPane labelCount={labelCount} checkedIDs={checkedIDs} onUncheckAll={onUncheckAll} />\n    ) : (\n        <WelcomePane labelCount={labelCount} />\n    );\n};\n\nexport default PlaceholderView;\n","import React from 'react';\nimport { useLabels } from 'react-components';\n\nimport MessageView from '../message/MessageView';\nimport ItemStar from '../list/ItemStar';\nimport { ELEMENT_TYPES } from '../../constants';\nimport ItemLabels from '../list/ItemLabels';\nimport { useMessage } from '../../hooks/useMessage';\nimport { OnCompose } from '../../containers/ComposerContainer';\n\ninterface Props {\n    messageID: string;\n    mailSettings: any;\n    onCompose: OnCompose;\n}\n\nconst MessageOnlyView = ({ messageID, mailSettings, onCompose }: Props) => {\n    const [labels] = useLabels();\n\n    // There is only reading on the message here, no actions\n    // MessageView will be in charge to trigger all messages actions\n    const [message] = useMessage({ ID: messageID }, mailSettings);\n\n    if (!message.data) {\n        return null;\n    }\n\n    return (\n        <>\n            <header className=\"flex flex-nowrap flex-spacebetween flex-items-center mb1\">\n                <h2 className=\"mb0\">{message.data?.Subject}</h2>\n                <div>\n                    <ItemLabels labels={labels} max={4} element={message.data} />\n                    <ItemStar element={message.data} type={ELEMENT_TYPES.MESSAGE} />\n                </div>\n            </header>\n            <MessageView\n                message={message.data}\n                initialExpand={true}\n                labels={labels}\n                mailSettings={mailSettings}\n                onCompose={onCompose}\n            />\n        </>\n    );\n};\n\nexport default MessageOnlyView;\n","import React, { useState, useMemo, useRef, useEffect } from 'react';\nimport { Loader, classnames } from 'react-components';\nimport { History, Location } from 'history';\n\nimport { Element } from '../models/element';\nimport { Sort, Filter, Page, SearchParameters } from '../models/tools';\n\nimport { useMailboxPageTitle } from '../hooks/useMailboxPageTitle';\nimport { useElements } from '../hooks/useElements';\n\nimport { isColumnMode, isConversationMode } from '../helpers/mailSettings';\nimport { getSearchParams } from '../helpers/url';\nimport {\n    pageFromUrl,\n    sortFromUrl,\n    filterFromUrl,\n    setPageInUrl,\n    setSortInUrl,\n    setFilterInUrl,\n    setPathInUrl,\n    extractSearchParameters\n} from '../helpers/mailboxUrl';\n\nimport Toolbar from '../components/toolbar/Toolbar';\nimport List from '../components/list/List';\nimport ConversationView from '../components/conversation/ConversationView';\nimport PlaceholderView from '../components/view/PlaceholderView';\nimport MessageOnlyView from '../components/message/MessageOnlyView';\nimport { OnCompose } from './ComposerContainer';\nimport { PAGE_SIZE } from '../constants';\nimport { isMessage } from '../helpers/elements';\nimport { isDraft } from '../helpers/message/messages';\n\nimport './main-area.scss';\n\ninterface Props {\n    labelID: string;\n    mailSettings: any;\n    elementID?: string;\n    location: Location;\n    history: History;\n    onCompose: OnCompose;\n}\n\nconst MailboxContainer = ({\n    labelID: inputLabelID,\n    mailSettings,\n    elementID: inputElementID,\n    location,\n    history,\n    onCompose\n}: Props) => {\n    const columnMode = isColumnMode(mailSettings);\n\n    // Page state is hybrid: page number is handled by the url, total computed in useElements, size and limit are constants\n    // Yet, it is simpler to co-localize all these data in one object\n    const [page, setPage] = useState<Page>({\n        page: pageFromUrl(location),\n        total: 0,\n        size: PAGE_SIZE,\n        limit: PAGE_SIZE\n    });\n\n    const searchParams = getSearchParams(location);\n    const conversationMode = isConversationMode(inputLabelID, mailSettings, extractSearchParameters(location));\n    const searchParameters = useMemo<SearchParameters>(() => extractSearchParameters(location), [\n        searchParams.address,\n        searchParams.from,\n        searchParams.to,\n        searchParams.keyword,\n        searchParams.begin,\n        searchParams.end,\n        searchParams.attachments,\n        searchParams.wildcard\n    ]);\n    const sort = useMemo<Sort>(() => sortFromUrl(location), [searchParams.sort]);\n    const filter = useMemo<Filter>(() => filterFromUrl(location), [searchParams.filter]);\n\n    const [checkedElements, setCheckedElements] = useState(Object.create(null));\n    const [checkAll, setCheckAll] = useState(false);\n    const welcomeRef = useRef(false);\n\n    const [labelID, elements, loading, total] = useElements({\n        conversationMode,\n        labelID: inputLabelID,\n        page,\n        sort,\n        filter,\n        search: searchParameters\n    });\n\n    useEffect(() => setPage({ ...page, page: pageFromUrl(location) }), [searchParams.page]);\n    useEffect(() => setPage({ ...page, total }), [total]);\n\n    useMailboxPageTitle(labelID);\n\n    const checkedIDs = useMemo(() => {\n        return Object.entries(checkedElements).reduce((acc, [elementID, isChecked]) => {\n            if (!isChecked) {\n                return acc;\n            }\n            acc.push(elementID);\n            return acc;\n        }, [] as string[]);\n    }, [checkedElements]);\n\n    const elementID = useMemo(() => {\n        if (checkedIDs.length > 0) {\n            return undefined;\n        }\n        return inputElementID;\n    }, [inputElementID, checkedIDs]);\n\n    const selectedIDs = useMemo(() => {\n        if (checkedIDs.length) {\n            return checkedIDs;\n        }\n        if (elementID) {\n            return [elementID];\n        }\n        return [];\n    }, [checkedIDs, elementID]);\n\n    const handleElement = (element: Element) => {\n        history.push(setPathInUrl(location, labelID, element.ID));\n        if (isMessage(element) && isDraft(element)) {\n            onCompose({ existingDraft: { data: element } });\n        }\n    };\n    const handleBack = () => history.push(setPathInUrl(location, labelID));\n    const handlePage = (pageNumber: number) => history.push(setPageInUrl(location, pageNumber));\n    const handleSort = (sort: Sort) => history.push(setSortInUrl(location, sort));\n    const handleFilter = (filter: Filter) => history.push(setFilterInUrl(location, filter));\n\n    const handleCheck = (IDs: string[] = [], checked = false) => {\n        const update = IDs.reduce((acc, contactID) => {\n            acc[contactID] = checked;\n            return acc;\n        }, Object.create(null));\n        setCheckedElements({ ...checkedElements, ...update });\n        setCheckAll(checked && IDs.length === elements.length);\n    };\n\n    const handleCheckAll = (checked = false) =>\n        handleCheck(\n            elements.map(({ ID = '' }: Element) => ID),\n            checked\n        );\n\n    const handleUncheckAll = () => handleCheckAll(false);\n\n    return (\n        <>\n            <Toolbar\n                labelID={labelID}\n                elementID={elementID}\n                selectedIDs={selectedIDs}\n                mailSettings={mailSettings}\n                checkAll={checkAll}\n                onCheckAll={handleCheckAll}\n                page={page}\n                onPage={handlePage}\n                sort={sort}\n                onSort={handleSort}\n                filter={filter}\n                onFilter={handleFilter}\n                onBack={handleBack}\n            />\n            <div\n                className={classnames([\n                    'main-area--withToolbar flex-item-fluid flex reset4print',\n                    !columnMode && 'main-area--rowMode'\n                ])}\n            >\n                {(columnMode || !elementID) && (\n                    <div className=\"items-column-list scroll-if-needed scroll-smooth-touch\">\n                        {loading ? (\n                            <div className=\"flex flex-justify-center h100\">\n                                <Loader />\n                            </div>\n                        ) : (\n                            <List\n                                labelID={labelID}\n                                mailSettings={mailSettings}\n                                elementID={elementID}\n                                elements={elements}\n                                checkedIDs={checkedIDs}\n                                onCheck={handleCheck}\n                                onClick={handleElement}\n                            />\n                        )}\n                    </div>\n                )}\n                {(columnMode || elementID) && (\n                    <section className=\"view-column-detail p2 flex-item-fluid scroll-if-needed\">\n                        {elementID ? (\n                            conversationMode ? (\n                                <ConversationView\n                                    labelID={labelID}\n                                    mailSettings={mailSettings}\n                                    conversationID={elementID}\n                                    onCompose={onCompose}\n                                />\n                            ) : (\n                                <MessageOnlyView\n                                    mailSettings={mailSettings}\n                                    messageID={elementID}\n                                    onCompose={onCompose}\n                                />\n                            )\n                        ) : (\n                            <PlaceholderView\n                                labelID={labelID}\n                                mailSettings={mailSettings}\n                                welcomeRef={welcomeRef}\n                                checkedIDs={checkedIDs}\n                                onUncheckAll={handleUncheckAll}\n                            />\n                        )}\n                    </section>\n                )}\n            </div>\n        </>\n    );\n};\n\nexport default MailboxContainer;\n","import { useEffect } from 'react';\nimport { useLabels, useUser, useConversationCounts, useMessageCounts, useMailSettings } from 'react-components';\nimport { getLabelName } from '../helpers/labels';\nimport { isConversationMode } from '../helpers/mailSettings';\nimport { toMap } from 'proton-shared/lib/helpers/object';\nimport { LabelCount } from '../models/label';\n\nexport const useMailboxPageTitle = (labelID: string) => {\n    const [mailSettings, loadingMailSettings] = useMailSettings();\n    const [labels, loadingLabels] = useLabels();\n    const [user, loadingUser] = useUser();\n    const [conversationCounts, loadingConversationCounts] = useConversationCounts() as [LabelCount[], boolean];\n    const [messageCounts, loadingMessageCounts] = useMessageCounts() as [LabelCount[], boolean];\n\n    const loadings = [loadingMailSettings, loadingLabels, loadingUser, loadingConversationCounts, loadingMessageCounts];\n\n    useEffect(() => {\n        if (loadings.every((loading) => !loading)) {\n            const conversationMode = isConversationMode(labelID, mailSettings);\n            const counters = conversationMode ? conversationCounts : messageCounts;\n            const countersMap = toMap(counters, 'LabelID') as { [labelID: string]: LabelCount };\n            const unreads = (countersMap[labelID] || {}).Unread || 0;\n            const unreadString = unreads > 0 ? `(${unreads}) ` : '';\n            const labelName = getLabelName(labelID, labels);\n            const address = user.Email;\n            document.title = `${unreadString}${labelName} | ${address} | ProtonMail`;\n        }\n    }, [labelID, ...loadings]);\n};\n","import React, { useLayoutEffect } from 'react';\nimport { ErrorBoundary, useMailSettings, Loader, useEventManager } from 'react-components';\n\nimport PrivateLayout from '../components/layout/PrivateLayout';\nimport MailboxContainer from './MailboxContainer';\nimport { HUMAN_TO_LABEL_IDS } from '../constants';\nimport { OnCompose } from './ComposerContainer';\nimport { RouteProps } from '../PrivateApp';\nimport { Event } from '../models/event';\nimport { EVENT_ACTIONS } from 'proton-shared/lib/constants';\nimport { setPathInUrl } from '../helpers/mailboxUrl';\n\ninterface Props extends RouteProps {\n    onCompose: OnCompose;\n}\n\nconst PageContainer = ({ match, location, history, onCompose }: Props) => {\n    const [mailSettings, loadingMailSettings] = useMailSettings();\n    const { subscribe } = useEventManager();\n\n    const { elementID, labelID: currentLabelID = '' } = (match || {}).params || {};\n    const labelID = HUMAN_TO_LABEL_IDS[currentLabelID] || currentLabelID;\n\n    // Detect if the element in URL has been deleted and come back to the label if so\n    useLayoutEffect(\n        () =>\n            subscribe(({ Messages }: Event) => {\n                const match = Messages?.find(({ ID, Action }) => Action === EVENT_ACTIONS.DELETE && ID === elementID);\n\n                if (match) {\n                    history.push(setPathInUrl(location, labelID));\n                }\n            }),\n        [elementID]\n    );\n\n    return (\n        <PrivateLayout labelID={labelID} location={location} history={history} onCompose={onCompose}>\n            <ErrorBoundary>\n                {loadingMailSettings ? (\n                    <Loader />\n                ) : (\n                    <MailboxContainer\n                        labelID={labelID}\n                        mailSettings={mailSettings}\n                        elementID={elementID}\n                        location={location}\n                        history={history}\n                        onCompose={onCompose}\n                    />\n                )}\n            </ErrorBoundary>\n        </PrivateLayout>\n    );\n};\n\nexport default PageContainer;\n","import React from 'react';\nimport { c } from 'ttag';\nimport { Icon, Button, classnames } from 'react-components';\n\nimport { MessageExtended } from '../../models/message';\n\ninterface ButtonProps {\n    onClick: () => void;\n    iconName: string;\n    className?: string;\n}\n\nconst TitleBarButton = ({ onClick, iconName, className = '' }: ButtonProps) => {\n    return (\n        <Button className={classnames(['composer-title-bar-button', className])} onClick={onClick}>\n            <Icon className=\"mauto\" name={iconName} color=\"currentColor\" />\n        </Button>\n    );\n};\n\ninterface Props {\n    message: MessageExtended;\n    minimized: boolean;\n    maximized: boolean;\n    toggleMinimized: () => void;\n    toggleMaximized: () => void;\n    onClose: () => void;\n}\n\nconst ComposerTitleBar = ({ message = {}, minimized, maximized, toggleMinimized, toggleMaximized, onClose }: Props) => {\n    const title = message.data?.Subject || c('Title').t`New message`;\n\n    return (\n        <header className=\"composer-title-bar flex flex-row\">\n            <span className=\"flex-self-vcenter flex-item-fluid pl0-5 pr1 ellipsis\">{title}</span>\n            <TitleBarButton\n                iconName=\"minimize\"\n                className={classnames([minimized && 'rotateX-180'])}\n                onClick={toggleMinimized}\n            />\n            <TitleBarButton iconName={maximized ? 'contract-window' : 'expand'} onClick={toggleMaximized} />\n            <TitleBarButton iconName=\"close\" onClick={onClose} />\n        </header>\n    );\n};\n\nexport default ComposerTitleBar;\n","import React, { useState, ChangeEvent } from 'react';\nimport { c } from 'ttag';\nimport {\n    Table,\n    TableHeader,\n    Checkbox,\n    TableRow,\n    TableBody,\n    FormModal,\n    SearchInput as SearchInputUntyped\n} from 'react-components';\nimport { ContactEmail } from '../../../models/contact';\nimport AddressesRecipientItem from './AddressesRecipientItem';\nimport { Recipient } from '../../../models/address';\n\nconst SearchInput = SearchInputUntyped as any;\n\ninterface Props {\n    inputValue?: Recipient[];\n    allContacts?: ContactEmail[];\n    onClose?: () => void;\n    onSubmit: (recipients: Recipient[]) => void;\n}\n\nconst AddressesContactsModal = ({ onSubmit, onClose, inputValue = [], allContacts = [], ...rest }: Props) => {\n    const [value, setValue] = useState(inputValue);\n    const [contacts, setContacts] = useState<ContactEmail[]>(allContacts);\n\n    const handleChangeSearch = (searchInput = '') => {\n        const search = searchInput.toLowerCase();\n        const contacts = allContacts?.filter(\n            (contact) => contact.Name?.toLowerCase().includes(search) || contact.Email?.toLowerCase().includes(search)\n        );\n        setContacts(contacts || []);\n    };\n\n    const handleChangeCheckbox = (contact: ContactEmail) => (event: ChangeEvent<HTMLInputElement>) => {\n        const checked = event.target.checked;\n        let newValue: Recipient[];\n        if (checked) {\n            newValue = [...value, { Name: contact.Name, Address: contact.Email }];\n        } else {\n            newValue = value.filter((recipient) => recipient.Address !== contact.Email);\n        }\n        setValue(newValue);\n    };\n\n    const handleRemove = (toRemove: Recipient) => () => {\n        setValue(value.filter((recipient) => recipient !== toRemove));\n    };\n\n    const isChecked = (contact: ContactEmail) => !!value.find((recipient) => recipient.Address === contact.Email);\n\n    const handleSubmit = () => {\n        onSubmit(value);\n        onClose?.();\n    };\n\n    return (\n        <FormModal\n            submit={c('Action').t`Add`}\n            title={c('Info').t`Add multiple recipients`}\n            onSubmit={handleSubmit}\n            onClose={onClose}\n            {...rest}\n        >\n            <SearchInput placeholder={c('Info').t`Search for contacts`} onChange={handleChangeSearch} />\n            <Table className=\"addresses-contacts-table\">\n                <TableHeader cells={[<Checkbox key={0} />, c('Info').t`Name`, c('Info').t`Email`]} />\n                <TableBody colSpan={0}>\n                    {contacts.map((contact) => (\n                        <TableRow\n                            key={contact.ID}\n                            cells={[\n                                <Checkbox\n                                    key={0}\n                                    checked={isChecked(contact)}\n                                    onChange={handleChangeCheckbox(contact)}\n                                />,\n                                contact.Name,\n                                contact.Email\n                            ]}\n                        />\n                    ))}\n                </TableBody>\n            </Table>\n            {value.length > 0 && (\n                <div className=\"composer-addresses-container flex-item-fluid bordered-container pl1-25 pr1-25\">\n                    {value.map((recipient, i) => (\n                        <AddressesRecipientItem key={i} recipient={recipient} onRemove={handleRemove(recipient)} />\n                    ))}\n                </div>\n            )}\n        </FormModal>\n    );\n};\n\nexport default AddressesContactsModal;\n","import React, { useState, MutableRefObject } from 'react';\nimport { c } from 'ttag';\nimport { Label, generateUID, Button, Tooltip, classnames, useModals } from 'react-components';\n\nimport { MessageExtended } from '../../../models/message';\nimport AddressesInput from './AddressesInput';\nimport AddressesContactsModal from './AddressesContactsModal';\nimport { ContactEmail, ContactGroup } from '../../../models/contact';\nimport { RecipientType, Recipient } from '../../../models/address';\n\ninterface Props {\n    message: MessageExtended;\n    contacts: ContactEmail[];\n    contactGroups: ContactGroup[];\n    onChange: (message: MessageExtended) => void;\n    expanded: boolean;\n    toggleExpanded: () => void;\n    addressesFocusRef: MutableRefObject<() => void>;\n}\n\nconst AddressesEditor = ({\n    message,\n    contacts,\n    contactGroups,\n    onChange,\n    expanded,\n    toggleExpanded,\n    addressesFocusRef\n}: Props) => {\n    const [uid] = useState(generateUID('composer'));\n    const { createModal } = useModals();\n\n    const handleChange = (type: RecipientType) => (value: Recipient[]) => {\n        onChange({ data: { [type]: value } });\n    };\n\n    const handleContactModal = (type: RecipientType) => async () => {\n        const recipients = await new Promise((resolve) => {\n            createModal(\n                <AddressesContactsModal inputValue={message.data?.[type]} allContacts={contacts} onSubmit={resolve} />\n            );\n        });\n\n        onChange({ data: { [type]: recipients } });\n    };\n\n    return (\n        <div className=\"flex flex-row flex-nowrap flex-items-start pl0-5 mb0-5\">\n            <div className=\"flex flex-column composer-meta-label\">\n                <Label htmlFor={`to-${uid}`}>\n                    <Tooltip title={c('Title').t`Add contacts`}>\n                        <a onClick={handleContactModal('ToList')}>{c('Title').t`To`}</a>\n                    </Tooltip>\n                </Label>\n                {expanded && (\n                    <>\n                        <Label htmlFor={`cc-${uid}`}>\n                            <Tooltip title={c('Title').t`Add contacts`}>\n                                <a onClick={handleContactModal('CCList')}>{c('Title').t`CC`}</a>\n                            </Tooltip>\n                        </Label>\n                        <Label htmlFor={`bcc-${uid}`}>\n                            <Tooltip title={c('Title').t`Add contacts`}>\n                                <a onClick={handleContactModal('BCCList')}>{c('Title').t`BCC`}</a>\n                            </Tooltip>\n                        </Label>\n                    </>\n                )}\n            </div>\n\n            <div className=\"flex flex-column flex-item-fluid w100\">\n                <div className=\"flex flex-row w100 composer-addresses-container-line\">\n                    <AddressesInput\n                        id={`to-${uid}`}\n                        recipients={message.data?.ToList}\n                        onChange={handleChange('ToList')}\n                        addressesFocusRef={addressesFocusRef}\n                        contacts={contacts}\n                        contactGroups={contactGroups}\n                    />\n                    <Tooltip originalPlacement=\"left\" title={c('Title').t`CC BCC`}>\n                        <Button\n                            icon=\"caret\"\n                            className={classnames(['pm-button--link ml0-5 mr0-5', expanded && 'rotateX-180'])}\n                            onClick={toggleExpanded}\n                        />\n                    </Tooltip>\n                </div>\n                {expanded && (\n                    <>\n                        <div className=\"flex flex-row w100 mt0-5 composer-addresses-container-line\">\n                            <AddressesInput\n                                id={`cc-${uid}`}\n                                recipients={message.data?.CCList}\n                                onChange={handleChange('CCList')}\n                                contacts={contacts}\n                                contactGroups={contactGroups}\n                            />\n                        </div>\n                        <div className=\"flex flex-row w100 mt0-5 composer-addresses-container-line\">\n                            <AddressesInput\n                                id={`bcc-${uid}`}\n                                recipients={message.data?.BCCList}\n                                onChange={handleChange('BCCList')}\n                                contacts={contacts}\n                                contactGroups={contactGroups}\n                            />\n                        </div>\n                    </>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default AddressesEditor;\n","import { ContactGroup } from './contact';\n\nexport interface Address {\n    ID?: string;\n    Email?: string;\n    DisplayName?: string;\n    Priority?: number;\n    Receive?: number;\n    Status?: number;\n    Order?: number;\n    Send?: number;\n    Signature?: string;\n}\n\nexport type RecipientType = 'ToList' | 'CCList' | 'BCCList';\nexport const recipientTypes: RecipientType[] = ['ToList', 'CCList', 'BCCList'];\n\nexport interface Recipient {\n    Name?: string;\n    Address?: string;\n    Group?: string;\n}\n\nexport interface RecipientGroup {\n    group?: ContactGroup;\n    recipients: Recipient[];\n}\n\nexport interface RecipientOrGroup {\n    recipient?: Recipient;\n    group?: RecipientGroup;\n}\n","import React, { Fragment } from 'react';\nimport { c } from 'ttag';\nimport { Label, Button } from 'react-components';\n\nimport { MessageExtended } from '../../../models/message';\nimport { Recipient, recipientTypes } from '../../../models/address';\nimport { recipientsToRecipientOrGroup, getRecipientOrGroupLabel } from '../../../helpers/addresses';\nimport { ContactEmail, ContactGroup } from '../../../models/contact';\n\ninterface Props {\n    message: MessageExtended;\n    contacts: ContactEmail[];\n    contactGroups: ContactGroup[];\n    onFocus: () => void;\n}\n\nconst AddressesSummary = ({ message: { data = {} }, contacts, contactGroups, onFocus }: Props) => {\n    return (\n        <div className=\"flex flex-row flex-nowrap flex-items-center pl0-5 mb0-5\" onClick={onFocus}>\n            <Label htmlFor={null} className=\"composer-meta-label color-pm-blue\">\n                {c('Title').t`To`}\n            </Label>\n            <div className=\"flex flex-row flex-item-fluid w100\">\n                <span className=\"flex-item-fluid bordered-container flex composer-addresses-fakefield\">\n                    <span className=\"ellipsis mw100\">\n                        {recipientTypes.map((type) => {\n                            const recipients: Recipient[] = data[type] || [];\n                            if (recipients.length === 0) {\n                                return null;\n                            }\n                            const recipientOrGroups = recipientsToRecipientOrGroup(recipients, contactGroups);\n                            return (\n                                <Fragment key={type}>\n                                    {type === 'CCList' && (\n                                        <span className=\"mr0-5 color-pm-blue\">{c('Title').t`CC`}:</span>\n                                    )}\n                                    {type === 'BCCList' && (\n                                        <span className=\"mr0-5 color-pm-blue\">{c('Title').t`BCC`}:</span>\n                                    )}\n                                    {recipientOrGroups.map((recipientOrGroup, i) => (\n                                        <span key={i} className=\"mr0-5\">\n                                            {getRecipientOrGroupLabel(recipientOrGroup, contacts)}\n                                            {i !== recipientOrGroups.length - 1 && ','}\n                                        </span>\n                                    ))}\n                                </Fragment>\n                            );\n                        })}\n                    </span>\n                </span>\n                <Button icon=\"caret\" className=\"pm-button--link ml0-5 mr0-5 \" />\n            </div>\n        </div>\n    );\n};\n\nexport default AddressesSummary;\n","import React, { MutableRefObject, useEffect } from 'react';\nimport { useToggle, useContactEmails } from 'react-components';\n\nimport { MessageExtended } from '../../../models/message';\nimport AddressesEditor from './AddressesEditor';\nimport AddressesSummary from './AddressesSummary';\nimport { getRecipients } from '../../../helpers/message/messages';\nimport { ContactEmail } from '../../../models/contact';\nimport { useContactGroups } from '../../../hooks/useContactGroups';\n\ninterface Props {\n    message: MessageExtended;\n    onChange: (message: MessageExtended) => void;\n    addressesBlurRef: MutableRefObject<() => void>;\n    addressesFocusRef: MutableRefObject<() => void>;\n}\n\nconst Addresses = ({ message, onChange, addressesBlurRef, addressesFocusRef }: Props) => {\n    const [contacts, loadingContacts]: [ContactEmail[], boolean] = useContactEmails();\n    const [contactGroups, loadingContactGroups] = useContactGroups();\n\n    // Summary of selected addresses or addresses editor\n    const { state: editor, set: setEditor } = useToggle(true);\n\n    // CC and BCC visible in expanded mode\n    const { state: expanded, set: setExpanded, toggle: toggleExpanded } = useToggle(\n        getRecipients(message.data).length > 0\n    );\n\n    useEffect(() => {\n        addressesBlurRef.current = () => setEditor(false);\n    }, []);\n\n    if (loadingContacts || loadingContactGroups) {\n        return null;\n    }\n\n    const handleFocus = () => {\n        setEditor(true);\n        setExpanded(true);\n        setTimeout(() => {\n            addressesFocusRef.current();\n        });\n    };\n\n    return editor ? (\n        <AddressesEditor\n            message={message}\n            contacts={contacts}\n            contactGroups={contactGroups}\n            onChange={onChange}\n            expanded={expanded}\n            toggleExpanded={toggleExpanded}\n            addressesFocusRef={addressesFocusRef}\n        />\n    ) : (\n        <AddressesSummary message={message} contacts={contacts} contactGroups={contactGroups} onFocus={handleFocus} />\n    );\n};\n\nexport default Addresses;\n","import React, { useState, ChangeEvent, MutableRefObject } from 'react';\nimport { c } from 'ttag';\nimport { Label, Select, Input, generateUID } from 'react-components';\n\nimport ComposerAddresses from './addresses/Addresses';\nimport { MessageExtended } from '../../models/message';\nimport { Address } from '../../models/address';\nimport { getFromAdresses } from '../../helpers/addresses';\n\ninterface Props {\n    message: MessageExtended;\n    addresses: Address[];\n    onChange: (message: MessageExtended) => void;\n    addressesBlurRef: MutableRefObject<() => void>;\n    addressesFocusRef: MutableRefObject<() => void>;\n}\n\nconst ComposerMeta = ({ message, addresses, onChange, addressesBlurRef, addressesFocusRef }: Props) => {\n    const [uid] = useState(generateUID('composer'));\n\n    const addressesOptions = getFromAdresses(addresses, message.originalTo).map((address: Address) => ({\n        text: address.Email,\n        value: address.ID\n    }));\n\n    const handleFromChange = (event: ChangeEvent) => {\n        const select = event.target as HTMLSelectElement;\n        const AddressID = select.value;\n        const address = addresses.find((address: Address) => address.ID === AddressID);\n        const Sender = { Name: address?.DisplayName, Address: address?.Email };\n        onChange({ data: { AddressID, Sender } });\n    };\n\n    const handleSubjectChange = (event: ChangeEvent) => {\n        const input = event.target as HTMLInputElement;\n        onChange({ data: { Subject: input.value } });\n    };\n\n    return (\n        <div className=\"composer-meta w100\">\n            <div className=\"flex flex-row flex-nowrap flex-items-center pl0-5 mb0-5\">\n                <Label htmlFor={`from-${uid}`} className=\"composer-meta-label\">\n                    {c('Info').t`From`}\n                </Label>\n                <Select\n                    id={`from-${uid}`}\n                    options={addressesOptions}\n                    value={message.data?.AddressID}\n                    onChange={handleFromChange}\n                    onFocus={addressesBlurRef.current}\n                ></Select>\n            </div>\n            <ComposerAddresses\n                message={message}\n                onChange={onChange}\n                addressesBlurRef={addressesBlurRef}\n                addressesFocusRef={addressesFocusRef}\n            />\n            <div className=\"flex flex-row flex-nowrap flex-items-center pl0-5 mb0-5\">\n                <Label htmlFor={`subject-${uid}`} className=\"composer-meta-label\">\n                    {c('Info').t`Subject`}\n                </Label>\n                <Input\n                    id={`subject-${uid}`}\n                    value={message.data?.Subject}\n                    placeholder={c('Placeholder').t`Subject`}\n                    onChange={handleSubjectChange}\n                    onFocus={addressesBlurRef.current}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default ComposerMeta;\n","import React from 'react';\nimport { c, msgid } from 'ttag';\nimport { Icon, useToggle } from 'react-components';\nimport humanSize from 'proton-shared/lib/helpers/humanSize';\n\nimport { Message } from '../../../models/message';\nimport { attachmentsSize, getAttachments } from '../../../helpers/message/messages';\nimport { Attachment } from '../../../models/attachment';\n\ninterface Props {\n    message?: Message;\n    onRemove: (attachment: Attachment) => () => void;\n}\n\nconst AttachmentsList = ({ message, onRemove }: Props) => {\n    const { state: expanded, toggle: toggleExpanded } = useToggle(false);\n\n    const attachments = getAttachments(message);\n    const size = humanSize(attachmentsSize(message));\n\n    return (\n        <div className=\"flex flex-column relative w100 flex-nowrap\">\n            <button type=\"button\" className=\"flex flex-row flex-spacebetween w100 p0-5\" onClick={toggleExpanded}>\n                <div>\n                    <strong className=\"mr0-5\">{size}</strong>\n                    <Icon name=\"attach\" className=\"mr0-5\" />\n                    {c('Info').ngettext(\n                        msgid`${attachments.length} file attached`,\n                        `${attachments.length} files attached`,\n                        attachments.length\n                    )}\n                </div>\n                <div className=\"color-pm-blue\">{expanded ? c('Action').t`Hide` : c('Action').t`Show`}</div>\n            </button>\n            {expanded && (\n                <div className=\"composer-attachments-expand flex flex-row flex-wrap pt1 pb0-5 pl0-5 pr0-5\">\n                    {attachments.map((attachment) => (\n                        <div key={attachment.ID} className=\"composer-attachments-item\">\n                            <div className=\"flex flex-spacebetween bordered-container p0-25 flex-nowrap flex-items-center pm_button bg-white-dm p0\">\n                                <Icon name=\"attach\" />\n                                <span className=\"flex-item-fluid ellipsis pl0-5 pr0-5\">{attachment.Name}</span>\n                                <button\n                                    type=\"button\"\n                                    className=\"inline-flex pl0-5 pr0-5 no-pointer-events-children h100\"\n                                    onClick={onRemove(attachment)}\n                                >\n                                    <Icon name=\"off\" size={12} />\n                                </button>\n                            </div>\n                        </div>\n                    ))}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default AttachmentsList;\n","import React, { MutableRefObject, useRef, useEffect, RefObject } from 'react';\nimport ReactQuill from 'react-quill';\nimport Quill from 'quill';\nimport { noop } from 'proton-shared/lib/helpers/function';\nimport { MessageExtended } from '../../models/message';\nimport { getAttachments } from '../../helpers/message/messages';\nimport AttachmentsList from './attachments/AttachmensList';\nimport { Attachment } from '../../models/attachment';\n\nimport 'react-quill/dist/quill.snow.css';\n\nconst Block = Quill.import('blots/block');\nBlock.tagName = 'div';\nQuill.register(Block);\n\ninterface Props {\n    message: MessageExtended;\n    onChange: (message: MessageExtended) => void;\n    onFocus: () => void;\n    onRemoveAttachment: (attachment: Attachment) => () => void;\n    contentFocusRef: MutableRefObject<() => void>;\n}\n\nconst ComposerContent = ({ message, onChange, onFocus, onRemoveAttachment, contentFocusRef }: Props) => {\n    const inputRef: RefObject<ReactQuill> = useRef(null);\n\n    useEffect(() => {\n        contentFocusRef.current = inputRef.current?.focus || noop;\n    }, []);\n\n    const handleChange = (content: string, delta: any, source: string) => {\n        if (source === 'user') {\n            onChange({ content });\n        }\n    };\n\n    const attachments = getAttachments(message.data);\n\n    return (\n        <section className=\"composer-content flex-item-fluid w100 mb0-5 flex flex-column flex-nowrap\">\n            <ReactQuill\n                className=\"composer-quill w100 flex-item-fluid\"\n                value={message.content || ''}\n                readOnly={!message.content}\n                onChange={handleChange}\n                onFocus={onFocus}\n                ref={inputRef}\n            />\n            {attachments.length > 0 && <AttachmentsList message={message.data} onRemove={onRemoveAttachment} />}\n        </section>\n    );\n};\n\nexport default ComposerContent;\n","import React, { ChangeEvent } from 'react';\nimport { Button } from 'react-components';\n\ninterface Props {\n    onAddAttachments: (files: File[]) => void;\n}\n\nconst AttachmentsButton = ({ onAddAttachments }: Props) => {\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n        const input = event.target;\n        if (input.files) {\n            onAddAttachments([...input.files]);\n            input.value = '';\n        }\n    };\n\n    return (\n        <div className=\"composer-attachments-button-wrapper\">\n            <input type=\"file\" multiple onChange={handleChange} />\n            <Button icon=\"attach\" />\n        </div>\n    );\n};\n\nexport default AttachmentsButton;\n","import React from 'react';\nimport { c } from 'ttag';\nimport { Button, useModals, ConfirmModal, Alert } from 'react-components';\nimport { noop } from 'proton-shared/lib/helpers/function';\n\nimport { formatSimpleDate } from '../../helpers/date';\nimport { MessageExtended } from '../../models/message';\nimport { getDate } from '../../helpers/elements';\nimport AttachmentsButton from './attachments/AttachmentsButton';\nimport { useSlowChanges } from '../../hooks/useSlowChanges';\n\ninterface Props {\n    message: MessageExtended;\n    lock: boolean;\n    activity: string;\n    onAddAttachments: (files: File[]) => void;\n    onSave: () => Promise<void>;\n    onSend: () => Promise<void>;\n    onDelete: () => Promise<void>;\n}\n\nconst ComposerActions = ({\n    message,\n    lock,\n    activity: activityInput,\n    onSave,\n    onSend,\n    onDelete,\n    onAddAttachments\n}: Props) => {\n    const { createModal } = useModals();\n    const activity = useSlowChanges(activityInput);\n\n    const handleDelete = () => {\n        return createModal(\n            <ConfirmModal onConfirm={onDelete} onClose={noop} title={c('Title').t`Delete`}>\n                <Alert>{c('Info').t`Permanently delete this draft?`}</Alert>\n            </ConfirmModal>\n        );\n    };\n\n    let dateMessage = '';\n\n    if (lock) {\n        dateMessage = c('Action').t`Saving`;\n    } else {\n        const date = getDate(message.data);\n        if (date.getTime() !== 0) {\n            const dateString = formatSimpleDate(date);\n            dateMessage = c('Info').t`Saved at ${dateString}`;\n        }\n    }\n\n    return (\n        <footer className=\"composer-actions flex flex-row flex-spacebetween w100\">\n            <div className=\"flex\">\n                <AttachmentsButton onAddAttachments={onAddAttachments} />\n                <Button icon=\"expiration\" className=\"ml0-5\" />\n                <Button icon=\"lock\" className=\"ml0-5\" />\n            </div>\n            <div className=\"flex-self-vcenter\">\n                <span>{dateMessage}</span>\n                <Button className=\"ml1\" icon=\"trash\" disabled={lock} onClick={handleDelete} />{' '}\n                <Button icon=\"save\" disabled={lock} onClick={onSave} />{' '}\n                <Button className=\"pm-button-blue composer-send-button\" loading={lock} onClick={onSend}>\n                    {lock ? activity : c('Action').t`Send`}\n                </Button>\n            </div>\n        </footer>\n    );\n};\n\nexport default ComposerActions;\n","import { c } from 'ttag';\nimport { encryptMessage, splitMessage, PmcryptoKey } from 'pmcrypto';\n\nimport { MessageExtended } from '../../models/message';\nimport { Api, Binary } from '../../models/utils';\nimport { getAttachments } from '../message/messages';\nimport { readFileAsBuffer } from '../file';\nimport { uploadAttachment } from '../../api/attachments';\nimport { isEmbeddable } from './attachments';\nimport { Attachment } from '../../models/attachment';\n\n// Reference: Angular/src/app/attachments/factories/attachmentModel.js\n\ntype UploadQueryResult = Promise<{ Attachment: Attachment }>;\n\nexport enum ATTACHMENT_ACTION {\n    ATTACHMENT = 'attachment',\n    INLINE = 'inline'\n}\n\nconst encrypt = async (\n    data: Binary,\n    { name, type, size }: File = {} as File,\n    inline: boolean,\n    publicKeys: PmcryptoKey[],\n    privateKeys: PmcryptoKey[]\n) => {\n    const { message, signature } = await encryptMessage({\n        filename: name,\n        armor: false,\n        detached: true,\n        data,\n        publicKeys,\n        privateKeys\n    });\n\n    const { asymmetric, encrypted } = await splitMessage(message);\n\n    return {\n        Filename: name,\n        MIMEType: type,\n        FileSize: size,\n        Inline: inline,\n        signature: signature ? signature.packets.write() : undefined,\n        Preview: data,\n        keys: asymmetric[0],\n        data: encrypted[0]\n    };\n};\n\n/**\n * Read the file locally, and encrypt it. return the encrypted file.\n */\nconst encryptFile = async (file: File, inline: boolean, pubKeys: PmcryptoKey[], privKey: PmcryptoKey[]) => {\n    if (!file) {\n        throw new TypeError(c('Error').t`You did not provide a file.`);\n    }\n    try {\n        const result = await readFileAsBuffer(file);\n        return encrypt(new Uint8Array(result), file, inline, pubKeys, privKey);\n    } catch (e) {\n        throw new Error(c('Error').t`Failed to encrypt attachment. Please try again.`);\n    }\n};\n\n/**\n * Add a new attachment, upload it to the server\n */\nconst uploadFile = async (file: File, message: MessageExtended, inline: boolean, api: Api, total = 1, cid = '') => {\n    const titleImage = c('Title').t`Image`;\n\n    const tempPacket = {\n        filename: file.name || `${titleImage} ${getAttachments(message.data).length + 1}`,\n        uploading: true,\n        Size: file.size,\n        ContentID: cid\n    };\n\n    // TODO\n    // force update the embedded counter\n    // if (file.inline) {\n    //     message.NumEmbedded++;\n    //     // CID doesn't exist when the user add an attachment\n    //     tempPacket.ContentID = cid || embedded.generateCid(file.upload.uuid, message.From.Email);\n    //     tempPacket.Inline = 1;\n    // }\n\n    // const privateKeys = keysModel.getPrivateKeys(message.AddressID);\n    // message.attachmentsToggle = true;\n\n    const publicKeys = message.publicKeys && message.publicKeys.length > 0 ? [message.publicKeys[0]] : [];\n\n    const packets = await encryptFile(file, inline, publicKeys, message.privateKeys || []);\n\n    const { Attachment } = await (api(\n        uploadAttachment({\n            Filename: packets.Filename || tempPacket.filename,\n            MessageID: message.data?.ID || '',\n            ContentID: tempPacket.ContentID,\n            MIMEType: packets.MIMEType,\n            KeyPackets: new Blob([packets.keys] as any),\n            DataPacket: new Blob([packets.data] as any),\n            Signature: packets.signature ? new Blob([packets.signature] as any) : undefined\n        })\n    ) as UploadQueryResult);\n\n    console.log('result', total, Attachment);\n\n    // TODO\n    // if (isAborted) {\n    //     return;\n    // }\n\n    // Extract content-id even if there are no headers\n    // const contentId = `${(Attachment.Headers || {})['content-id'] || ''}`;\n    // const newCid = contentId.replace(/[<>]+/g, '');\n\n    // return { attachment, sessionKey, packets, cid: newCid, REQUEST_ID };\n    return Attachment;\n};\n\n/**\n * Upload a list of attachments [...File]\n */\nexport const upload = async (\n    files: File[] = [],\n    message: MessageExtended = {},\n    action = ATTACHMENT_ACTION.ATTACHMENT,\n    api: Api,\n    // triggerEvent = true,\n    cid = ''\n) => {\n    const uploads = await Promise.all(\n        files.map((file) => {\n            const inline = isEmbeddable(file.type) && action === ATTACHMENT_ACTION.INLINE;\n            return uploadFile(file, message, inline, api, files.length, cid);\n        })\n    );\n\n    // message.uploading = promises.length;\n    // message.encryptingAttachment = true;\n    // dispatchMessageAction(message);\n\n    // const cleanUploads = uploads.filter(Boolean) as {\n    //     attachment: Attachment;\n    //     sessionKey: any;\n    //     packets: any;\n    //     cid: string;\n    //     REQUEST_ID: string;\n    // }[]; // will be undefined for aborted request\n\n    // message.uploading = 0;\n    // message.encryptingAttachment = false;\n    // dispatchMessageAction(message);\n\n    // TODO: Embedded\n    // Create embedded and replace theses files from the upload list\n    // const embeddedMap = addEmbedded(upload, message);\n    // return _.map(upload, (config) => {\n    //     return embeddedMap[config.attachment.ID] || config;\n    // });\n\n    // .then((upload) => {\n    //     message.addAttachments(upload.map(({ attachment }) => attachment));\n    //     updateMapAttachments(upload);\n\n    //     if (triggerEvent && upload.length) {\n    //         dispatch('upload.success', { upload, message, messageID: message.ID });\n    //     }\n    //     return upload;\n    // }).catch((err) => {\n    //     dispatchMessageAction(message);\n    //     throw err;\n    // });\n\n    // TODO\n    // const promise = composerRequestModel.add(message, callback);\n    // networkActivityTracker.track(promise);\n\n    return uploads;\n};\n","import { useState, useEffect } from 'react';\n\n/**\n * Slow down changes on a value, mostly to let user see steps\n * Doesn't drop steps but stack them\n * Falsy value are not preserved\n */\nexport const useSlowChanges = <T>(currentValue: T, time = 500): T => {\n    const [value, setValue] = useState<T>(currentValue);\n    const [stack, setStack] = useState<T[]>([]);\n    const [timeout, setTimeoutState] = useState<NodeJS.Timeout>();\n\n    const runTimeout = () => setTimeoutState(setTimeout(() => setTimeoutState(undefined), time));\n\n    useEffect(() => {\n        if (timeout === undefined) {\n            if (currentValue) {\n                runTimeout();\n            }\n            setValue(currentValue);\n        } else {\n            setStack([...stack, currentValue]);\n        }\n    }, [currentValue]);\n\n    useEffect(() => {\n        if (timeout === undefined && stack.length > 0) {\n            const [first, ...rest] = stack;\n            setValue(first);\n            setStack(rest);\n            runTimeout();\n        }\n    }, [timeout, stack]);\n\n    return value;\n};\n","import { arrayToBinaryString } from 'pmcrypto';\n\n/**\n * Convert file to encoded base 64 string\n * @param  {File} file\n * @param {Function} isValid File validator ex: valid file type\n * @return {Promise}\n */\n// export const toBase64 = async (file, isValid = () => true) => {\n//     if (file && !isValid(file)) {\n//         throw new Error('Invalid file format');\n//     }\n\n//     return new Promise((resolve, reject) => {\n//         const reader = new FileReader();\n\n//         reader.onload = ({ target }) => {\n//             resolve(target.result);\n//         };\n//         reader.onerror = reject;\n//         reader.onabort = reject;\n\n//         reader.readAsDataURL(file);\n//     });\n// };\n\n/**\n * Read the content of a blob and returns its value as a buffer\n */\nexport const readFileAsBuffer = (file: File) => {\n    return new Promise<ArrayBuffer>((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => resolve(reader.result as ArrayBuffer);\n        reader.onerror = reject;\n        reader.onabort = reject;\n        reader.readAsArrayBuffer(file);\n    });\n};\n\n/**\n * Read the content of a blob and returns its value as a string.\n * Not using readAsBinaryString because it's deprecated.\n */\nexport const readFileAsString = async (file: File) => {\n    const arrayBuffer = await readFileAsBuffer(file);\n    // eslint-disable-next-line new-cap\n    return arrayToBinaryString(new Uint8Array(arrayBuffer));\n};\n\n/**\n * Convert a blob url to the matching blob\n * @link https://stackoverflow.com/a/42508185\n * @param  {String} url blob://xxxx\n * @return {Promise}     Blob\n */\n// export const blobURLtoBlob = (url) => {\n//     return new Promise((resolve, reject) => {\n//         const xhr = new XMLHttpRequest();\n//         xhr.open('GET', url);\n//         xhr.responseType = 'blob';\n//         xhr.onerror = reject;\n//         xhr.onload = () => {\n//             if (xhr.status === 200) {\n//                 return resolve(xhr.response);\n//             }\n//             reject(xhr);\n//         };\n//         xhr.send();\n//     });\n// };\n\n/**\n * Read the base64 portion of a data url.\n * @param {String} url\n * @returns {Uint8Array}\n */\n// export const readDataUrl = (url = '') => {\n//     const error = 'The given url is not a data url.';\n\n//     if (url.substring(0, 5) !== 'data:') {\n//         throw new Error(error);\n//     }\n\n//     const [, base64] = url.split(',');\n//     if (!base64) {\n//         throw new Error(error);\n//     }\n\n//     return binaryStringToArray(decodeBase64(base64));\n// };\n","import React, { useState, useEffect, CSSProperties, useRef, useCallback } from 'react';\nimport { classnames, useToggle, useWindowSize, useNotifications, useApi } from 'react-components';\nimport { c } from 'ttag';\n\nimport { MessageExtended } from '../../models/message';\nimport ComposerTitleBar from './ComposerTitleBar';\nimport ComposerMeta from './ComposerMeta';\nimport ComposerContent from './ComposerContent';\nimport ComposerActions from './ComposerActions';\nimport { useMessage } from '../../hooks/useMessage';\nimport { Address } from '../../models/address';\nimport {\n    COMPOSER_GUTTER,\n    COMPOSER_VERTICAL_GUTTER,\n    APP_BAR_WIDTH,\n    HEADER_HEIGHT,\n    COMPOSER_HEIGHT,\n    COMPOSER_SWITCH_MODE\n} from '../../containers/ComposerContainer';\nimport { noop, debounce } from 'proton-shared/lib/helpers/function';\nimport { getRecipients } from '../../helpers/message/messages';\nimport { upload, ATTACHMENT_ACTION } from '../../helpers/attachment/attachmentUploader';\nimport { Attachment } from '../../models/attachment';\nimport { removeAttachment } from '../../api/attachments';\n\n/**\n * Create a new MessageExtended with props from both m1 and m2\n * Almost a standard deep merge but simplified with specific needs\n * m2 props will override those from m1\n */\nconst mergeMessages = (m1: MessageExtended, m2: MessageExtended): MessageExtended => ({\n    ...m1,\n    ...m2,\n    data: { ...m1.data, ...m2.data }\n});\n\nconst computeStyle = (\n    inputStyle: CSSProperties,\n    minimized: boolean,\n    maximized: boolean,\n    width: number,\n    height: number\n): CSSProperties => {\n    if (minimized) {\n        return {\n            ...inputStyle,\n            height: 'auto'\n        };\n    }\n    if (maximized) {\n        return {\n            ...inputStyle,\n            right: COMPOSER_GUTTER,\n            width: width - COMPOSER_GUTTER - APP_BAR_WIDTH,\n            height: height - COMPOSER_VERTICAL_GUTTER * 2\n        };\n    }\n    return inputStyle;\n};\n\ninterface Props {\n    style?: CSSProperties;\n    focus: boolean;\n    message?: MessageExtended;\n    mailSettings: any;\n    addresses: Address[];\n    onFocus: () => void;\n    onChange: (message: MessageExtended) => void;\n    onClose: () => void;\n}\n\nconst Composer = ({\n    style: inputStyle = {},\n    focus,\n    message: inputMessage = {},\n    mailSettings,\n    addresses,\n    onFocus,\n    onChange,\n    onClose\n}: Props) => {\n    const api = useApi();\n    const { state: minimized, toggle: toggleMinimized } = useToggle(false);\n    const { state: maximized, toggle: toggleMaximized } = useToggle(false);\n    const [opening, setOpening] = useState(true); // Needed to force focus only at first time\n    const [modelMessage, setModelMessage] = useState<MessageExtended>(inputMessage);\n    const [\n        syncedMessage,\n        { initialize, createDraft, saveDraft, send, deleteDraft },\n        { lock: syncLock, current: syncActivity }\n    ] = useMessage(inputMessage.data, mailSettings);\n    const [width, height] = useWindowSize();\n    const { createNotification } = useNotifications();\n\n    // Manage focus from the container yet keeping logic in each component\n    const addressesBlurRef = useRef<() => void>(noop);\n    const addressesFocusRef = useRef<() => void>(noop);\n    const contentFocusRef = useRef<() => void>(noop);\n\n    useEffect(() => {\n        if (!syncLock && !syncedMessage.data?.ID) {\n            createDraft(inputMessage);\n        }\n\n        if (!syncLock && syncedMessage.data?.ID && typeof syncedMessage.initialized === 'undefined') {\n            initialize();\n        }\n\n        if (modelMessage.content === undefined) {\n            setModelMessage({ ...modelMessage, content: syncedMessage.content });\n        }\n\n        onChange(syncedMessage);\n    }, [syncLock, syncedMessage]);\n\n    useEffect(() => {\n        if (!maximized && height - COMPOSER_VERTICAL_GUTTER - HEADER_HEIGHT < COMPOSER_HEIGHT - COMPOSER_SWITCH_MODE) {\n            toggleMaximized();\n        }\n        if (maximized && height - COMPOSER_VERTICAL_GUTTER - HEADER_HEIGHT > COMPOSER_HEIGHT + COMPOSER_SWITCH_MODE) {\n            toggleMaximized();\n        }\n    }, [height]);\n\n    // Manage focus at opening\n    useEffect(() => {\n        if (!opening) {\n            return;\n        }\n        setTimeout(() => {\n            if (getRecipients(syncedMessage.data).length === 0) {\n                addressesFocusRef.current();\n            } else {\n                contentFocusRef.current();\n            }\n        });\n        setOpening(false);\n    }, [syncedMessage]);\n\n    const autoSave = useCallback(\n        debounce(async (message: MessageExtended) => {\n            await saveDraft(message);\n        }, 2000),\n        [saveDraft]\n    );\n    const handleChange = (message: MessageExtended) => {\n        console.log('change', message);\n        const newModelMessage = mergeMessages(modelMessage, message);\n        setModelMessage(newModelMessage);\n        autoSave(newModelMessage);\n    };\n    const save = async (messageToSave = modelMessage) => {\n        await saveDraft(messageToSave);\n        createNotification({ text: c('Info').t`Message saved` });\n    };\n    const handleAddAttachments = async (files: File[]) => {\n        const attachments = await upload(files, modelMessage, ATTACHMENT_ACTION.ATTACHMENT, api);\n        if (attachments) {\n            const Attachments = [...(modelMessage.data?.Attachments || []), ...attachments];\n            const newModelMessage = mergeMessages(modelMessage, { data: { Attachments } });\n            setModelMessage(newModelMessage);\n            save(modelMessage);\n        }\n    };\n    const handleRemoveAttachment = (attachment: Attachment) => async () => {\n        await api(removeAttachment(attachment.ID || '', modelMessage.data?.ID || ''));\n        const Attachments = modelMessage.data?.Attachments?.filter((a: Attachment) => a.ID !== attachment.ID);\n        const newModelMessage = mergeMessages(modelMessage, { data: { Attachments } });\n        setModelMessage(newModelMessage);\n        save(modelMessage);\n    };\n    const handleSave = async () => {\n        await save();\n    };\n    const handleSend = async () => {\n        await send(modelMessage);\n        createNotification({ text: c('Success').t`Message sent` });\n        onClose();\n    };\n    const handleDelete = async () => {\n        onClose();\n        await deleteDraft();\n        createNotification({ text: c('Info').t`Message discarded` });\n    };\n    const handleClick = async () => {\n        if (minimized) {\n            toggleMinimized();\n        }\n        onFocus();\n    };\n    const handleClose = async () => {\n        onClose();\n        await save();\n    };\n\n    const style = computeStyle(inputStyle, minimized, maximized, width, height);\n\n    return (\n        <div\n            className={classnames([\n                'composer flex flex-column p0-5',\n                !focus && 'composer-blur',\n                minimized && 'composer-minimized pb0'\n            ])}\n            style={style}\n            onFocus={onFocus}\n            onClick={handleClick}\n        >\n            <ComposerTitleBar\n                message={modelMessage}\n                minimized={minimized}\n                maximized={maximized}\n                toggleMinimized={toggleMinimized}\n                toggleMaximized={toggleMaximized}\n                onClose={handleClose}\n            />\n            {!minimized && (\n                <>\n                    <ComposerMeta\n                        message={modelMessage}\n                        addresses={addresses}\n                        onChange={handleChange}\n                        addressesBlurRef={addressesBlurRef}\n                        addressesFocusRef={addressesFocusRef}\n                    />\n                    <ComposerContent\n                        message={modelMessage}\n                        onChange={handleChange}\n                        onFocus={addressesBlurRef.current}\n                        onRemoveAttachment={handleRemoveAttachment}\n                        contentFocusRef={contentFocusRef}\n                    />\n                    <ComposerActions\n                        message={modelMessage}\n                        lock={syncLock}\n                        activity={syncActivity}\n                        onAddAttachments={handleAddAttachments}\n                        onSave={handleSave}\n                        onSend={handleSend}\n                        onDelete={handleDelete}\n                    />\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default Composer;\n","/**\n * Clean template\n * @link {https://gist.github.com/dhoko/4b0c20e66c8a3f1aa431}\n */\nexport const dedentTpl = (callSite: TemplateStringsArray, ...args: string[]) => {\n    function format(str = '') {\n        let size = -1;\n        return str.replace(/\\n(\\s+)/g, (m, m1) => {\n            if (size < 0) {\n                size = m1.replace(/\\t/g, '    ').length;\n            }\n            return '\\n' + m1.slice(Math.min(m1.length, size));\n        });\n    }\n    // TODO: Could this append with TS?\n    // if (typeof callSite === 'string') {\n    //     return format(callSite);\n    // }\n    // if (typeof callSite === 'function') {\n    //     return (...args: string[]) => format(callSite(...args));\n    // }\n    const output = callSite\n        .slice(0, args.length + 1)\n        .map((text, i) => (i === 0 ? '' : args[i - 1]) + text)\n        .join('');\n    return format(output);\n};\n","import { PM_SIGNATURE } from 'proton-shared/lib/constants';\n\nimport { MESSAGE_ACTIONS } from '../../constants';\nimport { MailSettings } from '../../models/utils';\nimport { dedentTpl } from '../dedent';\nimport { replaceLineBreaks } from '../string';\nimport { message } from '../purify';\nimport { parseInDiv } from '../dom';\n\nexport const CLASSNAME_SIGNATURE_CONTAINER = 'protonmail_signature_block';\nexport const CLASSNAME_SIGNATURE_USER = 'protonmail_signature_block-user';\nexport const CLASSNAME_SIGNATURE_PROTON = 'protonmail_signature_block-proton';\nexport const CLASSNAME_SIGNATURE_EMPTY = 'protonmail_signature_block-empty';\n\n/**\n * Preformat the protonMail signature\n */\nconst getProtonSignature = (mailSettings: MailSettings) => (mailSettings.PMSignature === 0 ? '' : PM_SIGNATURE);\n\n/**\n * Check if the signature is empty for a user\n */\nconst isEmptyUserSignature = (signature: string) =>\n    !signature || signature === '<div><br /></div>' || signature === '<div><br></div>';\n\n/**\n * Generate a space tag, it can be hidden from the UX via a className\n */\nconst createSpace = (className = '') => {\n    const tagOpen = className ? `<div class=\"${className}\">` : '<div>';\n    return `${tagOpen}<br /></div>`;\n};\n\n/**\n * Generate spaces for the signature\n *     No signature: 1 space\n *     addressSignature: 2 spaces + addressSignature\n *     protonSignature: 2 spaces + protonSignature\n *     user + proton signature: 2 spaces + addressSignature + 1 space + protonSignature\n */\nconst getSpaces = (signature: string, protonSignature: string, isReply = false) => {\n    const isUserEmpty = isEmptyUserSignature(signature);\n    const isEmptySignature = isUserEmpty && !protonSignature;\n    return {\n        start: isEmptySignature ? createSpace() : createSpace() + createSpace(),\n        end: isReply ? createSpace() : '',\n        between: !isUserEmpty && protonSignature ? createSpace() : ''\n    };\n};\n\n/**\n * Generate a map of classNames used for the signature template\n */\nconst getClassNamesSignature = (signature: string, protonSignature: string) => {\n    const isUserEmpty = isEmptyUserSignature(signature);\n    const isProtonEmpty = !protonSignature;\n    return {\n        userClass: isUserEmpty ? CLASSNAME_SIGNATURE_EMPTY : '',\n        protonClass: isProtonEmpty ? CLASSNAME_SIGNATURE_EMPTY : '',\n        containerClass: isUserEmpty && isProtonEmpty ? CLASSNAME_SIGNATURE_EMPTY : ''\n    };\n};\n\n/**\n * Generate the template for a signature and clean it\n */\nconst templateBuilder = (signature = '', mailSettings: MailSettings, isReply = false, noSpace = false) => {\n    const protonSignature = getProtonSignature(mailSettings);\n    const { userClass, protonClass, containerClass } = getClassNamesSignature(signature, protonSignature);\n    const space = getSpaces(signature, protonSignature, isReply);\n\n    const template = dedentTpl`\n        <div class=\"${CLASSNAME_SIGNATURE_CONTAINER} ${containerClass}\">\n            <div class=\"${CLASSNAME_SIGNATURE_USER} ${userClass}\">\n                ${replaceLineBreaks(signature)}\n            </div>\n            ${space.between}\n            <div class=\"${CLASSNAME_SIGNATURE_PROTON} ${protonClass}\">\n                ${replaceLineBreaks(protonSignature)}\n            </div>\n        </div>\n    `;\n\n    if (!noSpace) {\n        return `${space.start}${message(template)}${space.end}`;\n    }\n\n    return message(template);\n};\n\n/**\n * Insert Signatures before the message\n *     - Always append a container signature with both user's and proton's\n *     - Theses signature can be empty but the dom remains\n */\nexport const insertSignature = (\n    content = '',\n    signature = '',\n    action: MESSAGE_ACTIONS,\n    mailSettings: MailSettings,\n    isAfter = false\n) => {\n    const position = isAfter ? 'beforeend' : 'afterbegin';\n    const template = templateBuilder(signature, mailSettings, action !== MESSAGE_ACTIONS.NEW);\n\n    // Parse the current message and append before it the signature\n    const element = parseInDiv(content);\n    element.insertAdjacentHTML(position, template);\n\n    return element.innerHTML;\n};\n","import { c } from 'ttag';\nimport { setBit } from 'proton-shared/lib/helpers/bitset';\n\nimport { Message, MessageExtended } from '../../models/message';\nimport { Address, Recipient } from '../../models/address';\nimport { MESSAGE_ACTIONS, MESSAGE_FLAGS } from '../../constants';\nimport { MailSettings } from '../../models/utils';\nimport { findSender } from '../addresses';\nimport { Attachment } from '../../models/attachment';\nimport { insertSignature } from './messageSignature';\nimport { formatFullDate } from '../date';\nimport { recipientToInput } from '../addresses';\nimport { isSent, isSentAndReceived } from './messages';\nimport { unique } from 'proton-shared/lib/helpers/array';\n\n// Reference: Angular/src/app/message/services/messageBuilder.js\n\nexport const RE_PREFIX = c('Message').t`Re:`;\nexport const FW_PREFIX = c('Message').t`Fw:`;\n\n/**\n * Format the subject to add the prefix only when the subject\n * doesn't start with it\n */\nexport const formatSubject = (subject = '', prefix = '') => {\n    const hasPrefix = new RegExp(`^${prefix}`, 'i');\n    return hasPrefix.test(subject) ? subject : `${prefix} ${subject}`;\n};\n\n/**\n * Format and build a new message\n * TODO: Define if referenceMessage could ever be defined\n */\nconst newCopy = (\n    {\n        data: { Subject = '', ToList = [], CCList = [], BCCList = [] } = {},\n        encryptedSubject = ''\n    }: MessageExtended = {},\n    useEncrypted = false\n): Message => {\n    return {\n        Subject: useEncrypted ? encryptedSubject : Subject,\n        ToList,\n        CCList,\n        BCCList\n    };\n};\n\n/**\n * Format and build a reply\n */\nconst reply = (referenceMessage: MessageExtended = {}, useEncrypted = false): Message => {\n    const Subject = formatSubject(\n        useEncrypted ? referenceMessage.encryptedSubject : referenceMessage.data?.Subject,\n        RE_PREFIX\n    );\n    const ToList =\n        isSent(referenceMessage.data) || isSentAndReceived(referenceMessage.data)\n            ? referenceMessage.data?.ToList\n            : referenceMessage.data?.ReplyTos;\n\n    return {\n        Subject,\n        ToList\n    };\n};\n\n/**\n * Format and build a replyAll\n */\nconst replyAll = (referenceMessage: MessageExtended = {}, useEncrypted = false, addresses: Address[]): Message => {\n    const { data = {}, encryptedSubject = '' } = referenceMessage;\n\n    const Subject = formatSubject(useEncrypted ? encryptedSubject : data.Subject, RE_PREFIX);\n\n    if (isSent(referenceMessage.data) || isSentAndReceived(referenceMessage.data)) {\n        return { Subject, ToList: data.ToList, CCList: data.CCList, BCCList: data.BCCList };\n    }\n\n    const ToList = data.ReplyTos;\n\n    // Remove user address in CCList and ToList\n    const userAddresses = addresses.map(({ Email = '' }) => Email.toLowerCase());\n    const CCListWithoutUserAddresses: Recipient[] = unique([...(data.ToList || []), ...(data.CCList || [])]);\n    const CCList = CCListWithoutUserAddresses.filter(\n        ({ Address = '' }) => !userAddresses.includes(Address.toLowerCase())\n    );\n\n    return { Subject, ToList, CCList };\n};\n\n/**\n * Format and build a forward\n */\nconst forward = ({ data = {}, encryptedSubject = '' }: MessageExtended = {}, useEncrypted = false): Message => {\n    const Subject = formatSubject(useEncrypted ? encryptedSubject : data.Subject, FW_PREFIX);\n\n    return { Subject, ToList: [] };\n};\n\nexport const handleActions = (\n    action: MESSAGE_ACTIONS,\n    referenceMessage: MessageExtended = {},\n    addresses: Address[] = []\n): Message => {\n    // TODO: I would prefere manage a confirm modal from elsewhere\n    // const useEncrypted = !!referenceMessage.encryptedSubject && (await promptEncryptedSubject(currentMsg));\n    const useEncrypted = !!referenceMessage.encryptedSubject;\n\n    switch (action) {\n        case MESSAGE_ACTIONS.NEW:\n            return newCopy(referenceMessage, useEncrypted);\n        case MESSAGE_ACTIONS.REPLY:\n            return reply(referenceMessage, useEncrypted);\n        case MESSAGE_ACTIONS.REPLY_ALL:\n            return replyAll(referenceMessage, useEncrypted, addresses);\n        case MESSAGE_ACTIONS.FORWARD:\n            return forward(referenceMessage, useEncrypted);\n        // No default needed as all enum values are addressed\n    }\n};\n\n/**\n * Generate blockquote of the referenced message to the content of the new mail\n */\nconst generateBlockquote = (referenceMessage: MessageExtended) => {\n    const date = formatFullDate(referenceMessage.data?.Time);\n    const sender = recipientToInput(referenceMessage.data?.Sender);\n    const previously = c('Message').t`On ${date}, ${sender} wrote:`;\n    // TODO\n    // const newContent =\n    //     referenceMessage.data?.MIMEType === MIME_TYPES.PLAINTEXT ? textToHtmlMail.parse(content) : content;\n    // TODO: To check... Should use transformations from useMessage\n    // newContent = prepareContent(content, referenceMessage, ['*'], action);\n    const newContent = referenceMessage.content;\n\n    return `‐‐‐‐‐‐‐ Original Message ‐‐‐‐‐‐‐<br>\n        ${previously}<br>\n        <blockquote class=\"protonmail_quote\" type=\"cite\">\n            ${newContent}\n        </blockquote><br>`;\n};\n\nexport const createNewDraft = (\n    action: MESSAGE_ACTIONS,\n    referenceMessage: MessageExtended = {},\n    mailSettings: MailSettings,\n    addresses: Address[]\n): MessageExtended => {\n    const MIMEType = referenceMessage.data?.MIMEType || mailSettings.DraftMIMEType;\n    const RightToLeft = mailSettings.RightToLeft;\n\n    let Flags = 0;\n    if (mailSettings.AttachPublicKey) {\n        Flags = setBit(Flags, MESSAGE_FLAGS.FLAG_PUBLIC_KEY);\n    }\n    if (mailSettings.Sign) {\n        Flags = setBit(Flags, MESSAGE_FLAGS.FLAG_SIGN);\n    }\n\n    const { Subject, ToList = [], CCList = [], BCCList = [] } = handleActions(action, referenceMessage, addresses);\n\n    const originalTo = referenceMessage.originalTo;\n\n    const senderAddress = findSender(addresses, referenceMessage.data) || {};\n\n    const AddressID = senderAddress.ID; // Set the AddressID from previous message to convert attachments on reply / replyAll / forward\n    const Sender = {\n        Name: senderAddress.DisplayName,\n        Address: senderAddress.Email\n    };\n\n    // TODO: Understand the purpose here\n    // newMsg.Body = currentMsg.Body; // We use the existing Body to speed up the draft request logic\n\n    // TODO: Handle attachments\n    // /* add inline images as attachments */\n    // const attachments = pickAttachements(currentMsg, action);\n    // newMsg.NumEmbedded = 0;\n\n    // newMsg.Attachments = pgpMimeAttachments.clean(attachments);\n    // newMsg.pgpMimeAttachments = pgpMimeAttachments.filter(attachments);\n\n    const Attachments: Attachment[] = [];\n\n    let content = action === MESSAGE_ACTIONS.NEW ? '' : generateBlockquote(referenceMessage);\n\n    const ParentID = action === MESSAGE_ACTIONS.NEW ? undefined : referenceMessage.data?.ID;\n\n    content = insertSignature(content, senderAddress.Signature, action, mailSettings);\n\n    return {\n        data: {\n            ToList,\n            CCList,\n            BCCList,\n            Subject,\n            PasswordHint: '',\n            ExpirationTime: 0,\n            ExpiresIn: 0,\n            Attachments,\n            MIMEType,\n            RightToLeft,\n            Flags,\n            Sender,\n            AddressID,\n            ParentID,\n            Unread: 0\n        },\n        content,\n        action,\n        originalTo,\n        initialized: true\n    };\n};\n","import React, { ReactNode, useState, CSSProperties } from 'react';\nimport { c } from 'ttag';\nimport { useMailSettings, useAddresses, useWindowSize, useNotifications } from 'react-components';\nimport { range } from 'proton-shared/lib/helpers/array';\n\nimport { MessageExtended } from '../models/message';\nimport Composer from '../components/composer/Composer';\nimport { MESSAGE_ACTIONS } from '../constants';\nimport { useDraft } from '../hooks/useDraft';\n\nimport '../components/composer/composer.scss';\n\nexport const COMPOSER_WIDTH = 600;\nexport const COMPOSER_HEIGHT = 520;\nexport const COMPOSER_GUTTER = 20;\nexport const COMPOSER_VERTICAL_GUTTER = 10;\nexport const COMPOSER_ZINDEX = 300;\nexport const COMPOSER_SWITCH_MODE = 20;\nexport const HEADER_HEIGHT = 80;\nexport const APP_BAR_WIDTH = 45;\n\nconst computeRightPositions = (count: number, width: number): number[] => {\n    const neededWidth = COMPOSER_WIDTH * count + COMPOSER_GUTTER * (count + 1);\n\n    if (neededWidth < width) {\n        return range(0, count).map((i) => COMPOSER_WIDTH * i + COMPOSER_GUTTER * (i + 1));\n    }\n\n    const widthToDivide = width - COMPOSER_GUTTER * 2 - COMPOSER_WIDTH;\n    const share = widthToDivide / (count - 1);\n    return range(0, count).map((i) => COMPOSER_GUTTER + share * i);\n};\n\nconst computeStyle = (index: number, hasFocus: boolean, rightPositions: number[], height: number): CSSProperties => {\n    const maxHeight = height - COMPOSER_VERTICAL_GUTTER - HEADER_HEIGHT;\n    return {\n        right: rightPositions[index],\n        zIndex: hasFocus ? COMPOSER_ZINDEX + 1 : COMPOSER_ZINDEX,\n        height: maxHeight > COMPOSER_HEIGHT ? COMPOSER_HEIGHT : maxHeight\n    };\n};\n\nexport interface ComposeExisting {\n    existingDraft: MessageExtended;\n}\n\nexport interface ComposeNew {\n    action: MESSAGE_ACTIONS;\n    referenceMessage?: MessageExtended;\n}\n\nexport type ComposeArgs = ComposeExisting | ComposeNew;\n\nexport const getComposeExisting = (composeArgs: ComposeArgs) =>\n    (composeArgs as ComposeExisting).existingDraft ? (composeArgs as ComposeExisting) : undefined;\n\nexport const getComposeNew = (composeArgs: ComposeArgs) =>\n    typeof (composeArgs as ComposeNew).action === 'number' ? (composeArgs as ComposeNew) : undefined;\n\nexport const getComposeArgs = (composeArgs: ComposeArgs) => ({\n    composeExisting: getComposeExisting(composeArgs),\n    composeNew: getComposeNew(composeArgs)\n});\n\nexport interface OnCompose {\n    (args: ComposeArgs): void;\n}\n\ninterface Props {\n    children: (props: { onCompose: OnCompose }) => ReactNode;\n}\n\nconst ComposerContainer = ({ children }: Props) => {\n    const [mailSettings, loadingSettings] = useMailSettings();\n    const [addresses, loadingAddresses] = useAddresses();\n\n    // Handling simple Message would have been simpler\n    // But in order to create new drafts from here, MessageExtended was mandatory\n    const [messages, setMessages] = useState<MessageExtended[]>([]);\n    const [focusedMessage, setFocusedMessage] = useState<MessageExtended | undefined>();\n    const [width, height] = useWindowSize();\n    const { createNotification } = useNotifications();\n    const createDraft = useDraft();\n\n    if (loadingSettings || loadingAddresses) {\n        return null;\n    }\n\n    const handleCompose = (composeArgs: ComposeArgs) => {\n        if (messages.length >= 3) {\n            createNotification({\n                type: 'error',\n                text: c('Error').t`Maximum composer reached`\n            });\n            return;\n        }\n\n        const { composeExisting, composeNew } = getComposeArgs(composeArgs);\n\n        console.log('compose', composeExisting, composeNew);\n\n        if (composeExisting) {\n            const { existingDraft } = composeExisting;\n\n            const existingMessage = messages.find((m) => m.data?.ID === existingDraft.data?.ID);\n            if (existingMessage) {\n                setFocusedMessage(existingMessage);\n                return;\n            }\n\n            setMessages([...messages, existingDraft]);\n            setFocusedMessage(existingDraft);\n            return;\n        }\n\n        if (composeNew) {\n            const { action, referenceMessage } = composeNew;\n            const newMessage = createDraft(action, referenceMessage);\n            setMessages([...messages, newMessage]);\n            setFocusedMessage(newMessage);\n        }\n    };\n    const handleChange = (oldMessage: MessageExtended) => (newMessage: MessageExtended) => {\n        const newMessages = [...messages];\n        newMessages[newMessages.indexOf(oldMessage)] = newMessage;\n        setMessages(newMessages);\n        if (oldMessage === focusedMessage) {\n            setFocusedMessage(newMessage);\n        }\n    };\n    const handleClose = (message: MessageExtended) => () => {\n        const newMessages = messages.filter((m) => m !== message);\n        setMessages(newMessages);\n        if (newMessages.length > 0) {\n            setFocusedMessage(newMessages[0]);\n        }\n    };\n    const handleFocus = (message: MessageExtended) => () => {\n        setFocusedMessage(message);\n    };\n\n    const rightPositions = computeRightPositions(messages.length, width);\n\n    return (\n        <>\n            {children({ onCompose: handleCompose })}\n            <div className=\"composer-container\">\n                {messages.map((message, i) => (\n                    <Composer\n                        key={message.data?.ID || i}\n                        style={computeStyle(i, message === focusedMessage, rightPositions, height)}\n                        message={message}\n                        focus={message === focusedMessage}\n                        mailSettings={mailSettings}\n                        addresses={addresses}\n                        onFocus={handleFocus(message)}\n                        onChange={handleChange(message)}\n                        onClose={handleClose(message)}\n                    />\n                ))}\n            </div>\n        </>\n    );\n};\n\nexport default ComposerContainer;\n","import { useCache, useMailSettings, useAddresses } from 'react-components';\n\nimport { createNewDraft } from '../helpers/message/messageDraft';\nimport { MESSAGE_ACTIONS } from '../constants';\nimport { useEffect, useCallback } from 'react';\nimport { MessageExtended } from '../models/message';\n\nconst CACHE_KEY = 'Draft';\n\n/**\n * Hooks to create new draft messages.\n * It will prepare an empty draft to be quickly reused and create other drafts with helpers\n */\nexport const useDraft = () => {\n    const cache = useCache();\n    const [mailSettings, loadingSettings] = useMailSettings();\n    const [addresses, loadingAddresses] = useAddresses();\n\n    useEffect(() => {\n        if (!loadingSettings && !loadingAddresses) {\n            const message = createNewDraft(MESSAGE_ACTIONS.NEW, undefined, mailSettings, addresses);\n            cache.set(CACHE_KEY, message);\n        }\n    }, [cache, mailSettings, addresses]);\n\n    const createDraft = useCallback(\n        (action: MESSAGE_ACTIONS, referenceMessage: MessageExtended = {}) => {\n            if (action === MESSAGE_ACTIONS.NEW && cache.has(CACHE_KEY)) {\n                return cache.get(CACHE_KEY) as MessageExtended;\n            } else {\n                return createNewDraft(action, referenceMessage, mailSettings, addresses);\n            }\n        },\n        [cache, mailSettings, addresses]\n    );\n\n    return createDraft;\n};\n","import React from 'react';\nimport { RouteChildrenProps } from 'react-router';\nimport { Route } from 'react-router-dom';\nimport { StandardPrivateApp } from 'react-components';\n\nimport {\n    UserModel,\n    MailSettingsModel,\n    UserSettingsModel,\n    SubscriptionModel,\n    OrganizationModel,\n    LabelsModel,\n    AddressesModel,\n    ConversationCountsModel,\n    MessageCountsModel\n} from 'proton-shared/lib/models';\n\nimport locales from './locales';\nimport PageContainer from './containers/PageContainer';\nimport MessageProvider from './containers/MessageProvider';\nimport ComposerContainer from './containers/ComposerContainer';\n\nexport type RouteProps = RouteChildrenProps<{ labelID: string; elementID?: string }>;\n\ninterface Props {\n    onLogout: () => void;\n}\n\nconst PrivateApp = ({ onLogout }: Props) => {\n    return (\n        <StandardPrivateApp\n            onLogout={onLogout}\n            locales={locales}\n            preloadModels={[UserModel, UserSettingsModel]}\n            eventModels={[\n                UserModel,\n                AddressesModel,\n                ConversationCountsModel,\n                MessageCountsModel,\n                MailSettingsModel,\n                UserSettingsModel,\n                LabelsModel,\n                SubscriptionModel,\n                OrganizationModel\n            ]}\n        >\n            <MessageProvider>\n                <ComposerContainer>\n                    {({ onCompose }) => (\n                        <Route\n                            path=\"/:labelID/:elementID?\"\n                            render={(routeProps: RouteProps) => <PageContainer {...routeProps} onCompose={onCompose} />}\n                        />\n                    )}\n                </ComposerContainer>\n            </MessageProvider>\n        </StandardPrivateApp>\n    );\n};\n\nexport default PrivateApp;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icons } from 'react-components';\n\nconst PublicLayout = ({ children }) => {\n    return (\n        <>\n            <main className=\"main-full flex flex-column flex-nowrap reset4print\">{children}</main>\n            <Icons />\n        </>\n    );\n};\n\nPublicLayout.propTypes = {\n    children: PropTypes.node.isRequired\n};\n\nexport default PublicLayout;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { c } from 'ttag';\nimport { LoginForm, Href, SimpleDropdown, DropdownMenu, SignInLayout } from 'react-components';\n\nconst LoginContainer = ({ stopRedirect, history, onLogin }) => {\n    const handleLogin = (...args) => {\n        stopRedirect();\n        history.push('/inbox');\n        onLogin(...args);\n    };\n    return (\n        <SignInLayout title={c('Title').t`Log in`}>\n            <h2>{c('Title').t`User log in`}</h2>\n            <LoginForm\n                onLogin={handleLogin}\n                needHelp={\n                    <SimpleDropdown content={c('Dropdown button').t`Need help?`} className=\"pm-button--link\">\n                        <DropdownMenu>\n                            <div className=\"inbl w100 pt0-5 pb0-5 ellipsis\">\n                                <Link to=\"/reset-password\">{c('Link').t`Reset password`}</Link>\n                            </div>\n                            <div className=\"inbl w100 pt0-5 pb0-5 ellipsis\">\n                                <Link to=\"/forgot-username\">{c('Link').t`Forgot username?`}</Link>\n                            </div>\n                            <div className=\"inbl w100 pt0-5 pb0-5 ellipsis\">\n                                <Href url=\"https://protonmail.com/support/knowledge-base/common-login-problems/\">{c(\n                                    'Link'\n                                ).t`Common login problems`}</Href>\n                            </div>\n                            <div className=\"inbl w100 pt0-5 pb0-5 ellipsis\">\n                                <Href url=\"https://protonmail.com/support/\">{c('Link').t`Contact support`}</Href>\n                            </div>\n                        </DropdownMenu>\n                    </SimpleDropdown>\n                }\n            />\n        </SignInLayout>\n    );\n};\n\nLoginContainer.propTypes = {\n    history: PropTypes.object.isRequired,\n    location: PropTypes.object.isRequired,\n    onLogin: PropTypes.func.isRequired,\n    stopRedirect: PropTypes.func.isRequired\n};\n\nexport default LoginContainer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// eslint-disable-next-line\nconst SignupContainer = ({ match, history, onLogin, stopRedirect }) => {\n    return <>SignupContainer</>;\n};\n\nSignupContainer.propTypes = {\n    stopRedirect: PropTypes.func.isRequired,\n    onLogin: PropTypes.func.isRequired,\n    match: PropTypes.shape({\n        params: PropTypes.shape({\n            step: PropTypes.string\n        })\n    }).isRequired,\n    history: PropTypes.shape({\n        push: PropTypes.func.isRequired,\n        location: PropTypes.shape({\n            search: PropTypes.string.isRequired,\n            state: PropTypes.oneOfType([\n                PropTypes.shape({\n                    selector: PropTypes.string.isRequired,\n                    token: PropTypes.string.isRequired\n                }),\n                PropTypes.shape({\n                    Coupon: PropTypes.shape({ Code: PropTypes.string })\n                })\n            ])\n        }).isRequired\n    }).isRequired\n};\n\nexport default SignupContainer;\n","import React, { useState, useRef, useLayoutEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Route, Switch } from 'react-router-dom';\nimport { Loader, ModalsChildren, ResetPasswordContainer, ForgotUsernameContainer } from 'react-components';\nimport { loadOpenPGP } from 'proton-shared/lib/openpgp';\n\nimport PublicLayout from './components/layout/PublicLayout';\nimport LoginContainer from './containers/LoginContainer';\nimport SignupContainer from './containers/SignupContainer';\nimport { Redirect } from 'react-router';\n\nconst PublicApp = ({ onLogin }) => {\n    const hasStopRedirect = useRef(false);\n    const stopRedirect = () => (hasStopRedirect.current = true);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(false);\n\n    useLayoutEffect(() => {\n        (async () => {\n            await Promise.all([loadOpenPGP()]);\n        })()\n            .then(() => setLoading(false))\n            .catch(() => setError(true));\n    }, []);\n\n    if (error) {\n        return 'OpenPGP failed to load. Handle better.';\n    }\n\n    if (loading) {\n        return <Loader />;\n    }\n\n    return (\n        <>\n            <ModalsChildren />\n            <PublicLayout>\n                <Switch>\n                    <Route path=\"/reset-password\" render={() => <ResetPasswordContainer onLogin={onLogin} />} />\n                    <Route path=\"/forgot-username\" component={ForgotUsernameContainer} />\n                    <Route\n                        path=\"/login\"\n                        render={({ history, location }) => (\n                            <LoginContainer\n                                stopRedirect={stopRedirect}\n                                history={history}\n                                location={location}\n                                onLogin={onLogin}\n                            />\n                        )}\n                    />\n                    <Route\n                        path=\"/signup/:step?\"\n                        render={({ history, match }) => (\n                            <SignupContainer\n                                stopRedirect={stopRedirect}\n                                history={history}\n                                match={match}\n                                onLogin={onLogin}\n                            />\n                        )}\n                    />\n                    <Route\n                        render={({ location }) => {\n                            /**\n                             * Needed due to the race condition between onLogin and history.push\n                             * A state on the location is not possible because the location is not changed when logging out.\n                             */\n                            if (hasStopRedirect.current) {\n                                return null;\n                            }\n                            return (\n                                <Redirect\n                                    to={{\n                                        pathname: '/login',\n                                        state: { from: location }\n                                    }}\n                                />\n                            );\n                        }}\n                    />\n                </Switch>\n            </PublicLayout>\n        </>\n    );\n};\n\nPublicApp.propTypes = {\n    onLogin: PropTypes.func.isRequired\n};\n\nexport default PublicApp;\n","import { hot } from 'react-hot-loader/root';\nimport React from 'react';\nimport { ProtonApp, useAuthentication } from 'react-components';\n\nimport * as config from './config';\nimport PrivateApp from './PrivateApp';\nimport PublicApp from './PublicApp';\n\nimport './app.scss';\n\nconst Setup = () => {\n    const { UID, login, logout } = useAuthentication();\n    if (UID) {\n        return <PrivateApp onLogout={logout} />;\n    }\n    return <PublicApp onLogin={login} />;\n};\n\nconst App = () => {\n    return (\n        <ProtonApp config={config}>\n            <Setup />\n        </ProtonApp>\n    );\n};\n\nexport default hot(App);\n","import ReactDOM from 'react-dom';\nimport React from 'react';\nimport 'core-js/stable';\nimport 'regenerator-runtime/runtime';\nimport 'yetch/polyfill';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.querySelector('.app-root'));\n","var map = {\n\t\"./3-d-secure.svg\": \"0gKn\",\n\t\"./american-express-safekey.svg\": \"Jui7\",\n\t\"./cc-american-express.svg\": \"/qD2\",\n\t\"./cc-dankort.svg\": \"0T0d\",\n\t\"./cc-diners-club.svg\": \"vuvo\",\n\t\"./cc-discover.svg\": \"AZZk\",\n\t\"./cc-forbrugs.svg\": \"k2eZ\",\n\t\"./cc-jcb.svg\": \"7Amw\",\n\t\"./cc-maestro.svg\": \"lXKh\",\n\t\"./cc-mastercard.svg\": \"ZUPP\",\n\t\"./cc-paypal.svg\": \"egYP\",\n\t\"./cc-unionpay.svg\": \"ma7A\",\n\t\"./cc-visa.svg\": \"vO2o\",\n\t\"./cc-visaelectron.svg\": \"RMFI\",\n\t\"./discover-protectbuy.svg\": \"qsy5\",\n\t\"./mastercard-securecode.svg\": \"6Bn0\",\n\t\"./verified-by-visa.svg\": \"Q7qE\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"5FMj\";","var map = {\n\t\"./af/index.js\": [\n\t\t\"IqAn\",\n\t\t11\n\t],\n\t\"./ar-DZ/index.js\": [\n\t\t\"JVC1\",\n\t\t12\n\t],\n\t\"./ar-MA/index.js\": [\n\t\t\"+7lX\",\n\t\t13\n\t],\n\t\"./ar-SA/index.js\": [\n\t\t\"xMju\",\n\t\t14\n\t],\n\t\"./az/index.js\": [\n\t\t\"jEeQ\",\n\t\t15\n\t],\n\t\"./be/index.js\": [\n\t\t\"YEhR\",\n\t\t3\n\t],\n\t\"./bg/index.js\": [\n\t\t\"isx8\",\n\t\t4\n\t],\n\t\"./bn/index.js\": [\n\t\t\"+b7I\",\n\t\t16\n\t],\n\t\"./ca/index.js\": [\n\t\t\"Vwa+\",\n\t\t17\n\t],\n\t\"./cs/index.js\": [\n\t\t\"dvhP\",\n\t\t18\n\t],\n\t\"./cy/index.js\": [\n\t\t\"HQUR\",\n\t\t19\n\t],\n\t\"./da/index.js\": [\n\t\t\"7ur/\",\n\t\t20\n\t],\n\t\"./de/index.js\": [\n\t\t\"bgw5\",\n\t\t21\n\t],\n\t\"./el/index.js\": [\n\t\t\"dH0v\",\n\t\t22\n\t],\n\t\"./en-AU/index.js\": [\n\t\t\"VHew\",\n\t\t23\n\t],\n\t\"./en-CA/index.js\": [\n\t\t\"wXhn\",\n\t\t24\n\t],\n\t\"./en-GB/index.js\": [\n\t\t\"nwJ3\",\n\t\t25\n\t],\n\t\"./en-US/index.js\": [\n\t\t\"IogR\",\n\t\t26\n\t],\n\t\"./eo/index.js\": [\n\t\t\"UB7v\",\n\t\t27\n\t],\n\t\"./es/index.js\": [\n\t\t\"/S0t\",\n\t\t28\n\t],\n\t\"./et/index.js\": [\n\t\t\"Br0m\",\n\t\t29\n\t],\n\t\"./fa-IR/index.js\": [\n\t\t\"gEFy\",\n\t\t30\n\t],\n\t\"./fi/index.js\": [\n\t\t\"ndVD\",\n\t\t31\n\t],\n\t\"./fr-CA/index.js\": [\n\t\t\"KTij\",\n\t\t32\n\t],\n\t\"./fr/index.js\": [\n\t\t\"LKA2\",\n\t\t33\n\t],\n\t\"./gl/index.js\": [\n\t\t\"4bge\",\n\t\t34\n\t],\n\t\"./gu/index.js\": [\n\t\t\"3t4y\",\n\t\t35\n\t],\n\t\"./he/index.js\": [\n\t\t\"75M+\",\n\t\t36\n\t],\n\t\"./hi/index.js\": [\n\t\t\"CUe2\",\n\t\t37\n\t],\n\t\"./hr/index.js\": [\n\t\t\"L9Jq\",\n\t\t38\n\t],\n\t\"./hu/index.js\": [\n\t\t\"Nm+E\",\n\t\t39\n\t],\n\t\"./hy/index.js\": [\n\t\t\"netp\",\n\t\t40\n\t],\n\t\"./id/index.js\": [\n\t\t\"A6C3\",\n\t\t41\n\t],\n\t\"./is/index.js\": [\n\t\t\"N4bE\",\n\t\t42\n\t],\n\t\"./it/index.js\": [\n\t\t\"hmb4\",\n\t\t43\n\t],\n\t\"./ja/index.js\": [\n\t\t\"uAXs\",\n\t\t44\n\t],\n\t\"./ka/index.js\": [\n\t\t\"pwL5\",\n\t\t45\n\t],\n\t\"./kk/index.js\": [\n\t\t\"zGPi\",\n\t\t5\n\t],\n\t\"./ko/index.js\": [\n\t\t\"iW8+\",\n\t\t46\n\t],\n\t\"./lt/index.js\": [\n\t\t\"xj+b\",\n\t\t47\n\t],\n\t\"./lv/index.js\": [\n\t\t\"x5pY\",\n\t\t6\n\t],\n\t\"./ms/index.js\": [\n\t\t\"gUWk\",\n\t\t48\n\t],\n\t\"./nb/index.js\": [\n\t\t\"73vv\",\n\t\t49\n\t],\n\t\"./nl/index.js\": [\n\t\t\"hCQt\",\n\t\t50\n\t],\n\t\"./nn/index.js\": [\n\t\t\"vORL\",\n\t\t51\n\t],\n\t\"./pl/index.js\": [\n\t\t\"B6yL\",\n\t\t7\n\t],\n\t\"./pt-BR/index.js\": [\n\t\t\"2dYp\",\n\t\t52\n\t],\n\t\"./pt/index.js\": [\n\t\t\"gdks\",\n\t\t53\n\t],\n\t\"./ro/index.js\": [\n\t\t\"r2yp\",\n\t\t54\n\t],\n\t\"./ru/index.js\": [\n\t\t\"nz/o\",\n\t\t8\n\t],\n\t\"./sk/index.js\": [\n\t\t\"Wqan\",\n\t\t9\n\t],\n\t\"./sl/index.js\": [\n\t\t\"KYSo\",\n\t\t55\n\t],\n\t\"./sr/index.js\": [\n\t\t\"7mU3\",\n\t\t56\n\t],\n\t\"./sv/index.js\": [\n\t\t\"hxgj\",\n\t\t57\n\t],\n\t\"./ta/index.js\": [\n\t\t\"1ssA\",\n\t\t58\n\t],\n\t\"./te/index.js\": [\n\t\t\"SGoj\",\n\t\t59\n\t],\n\t\"./th/index.js\": [\n\t\t\"Pk+z\",\n\t\t60\n\t],\n\t\"./tr/index.js\": [\n\t\t\"3ZWG\",\n\t\t61\n\t],\n\t\"./ug/index.js\": [\n\t\t\"yT3n\",\n\t\t62\n\t],\n\t\"./uk/index.js\": [\n\t\t\"LCGg\",\n\t\t10\n\t],\n\t\"./vi/index.js\": [\n\t\t\"dGQT\",\n\t\t63\n\t],\n\t\"./zh-CN/index.js\": [\n\t\t\"UJqf\",\n\t\t64\n\t],\n\t\"./zh-TW/index.js\": [\n\t\t\"zn9v\",\n\t\t65\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"YO3j\";\nmodule.exports = webpackAsyncContext;","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"dTS7\";"],"sourceRoot":""}