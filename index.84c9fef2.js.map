{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/app/config.ts","webpack:///./src/app/locales.js","webpack:///./src/app/components/header/AdvancedSearchDropdown.js","webpack:///./src/app/components/header/PrivateHeader.js","webpack:///./src/app/components/sidebar/LocationAside.js","webpack:///./src/app/components/sidebar/RefreshButton.js","webpack:///./src/app/constants.ts","webpack:///./src/app/helpers/elements.ts","webpack:///./src/app/components/sidebar/PrivateSidebar.js","webpack:///./src/app/components/layout/PrivateLayout.js","webpack:///./src/app/helpers/labels.ts","webpack:///./src/app/helpers/mailSettings.ts","webpack:///./src/app/hooks/useElements.ts","webpack:///./src/app/helpers/url.ts","webpack:///./src/app/helpers/mailboxUrl.ts","webpack:///./src/app/components/toolbar/ToolbarSeparator.tsx","webpack:///./src/app/components/toolbar/ToolbarButton.tsx","webpack:///./src/app/components/toolbar/ReadUnreadButtons.tsx","webpack:///./src/app/components/toolbar/ToolbarDropdown.tsx","webpack:///./src/app/components/toolbar/LayoutDropdown.tsx","webpack:///./src/app/components/toolbar/MoveButtons.tsx","webpack:///./src/app/components/toolbar/DeleteButton.tsx","webpack:///./src/app/components/toolbar/SortDropdown.tsx","webpack:///./src/app/components/toolbar/FilterDropdown.tsx","webpack:///./src/app/components/toolbar/SelectAll.tsx","webpack:///./src/app/components/dropdown/MoveDropdown.tsx","webpack:///./src/app/components/dropdown/LabelDropdown.tsx","webpack:///./src/app/components/toolbar/BackButton.tsx","webpack:///./src/app/components/toolbar/PagingControls.tsx","webpack:///./src/app/helpers/message.ts","webpack:///./src/app/components/toolbar/Toolbar.tsx","webpack:///./src/app/components/list/ItemCheckbox.tsx","webpack:///./src/app/components/list/ItemStar.js","webpack:///./src/app/components/list/ItemLabels.js","webpack:///./src/app/components/list/ItemAttachmentIcon.js","webpack:///./src/app/components/list/ItemLocation.js","webpack:///./src/app/components/list/ItemDate.js","webpack:///./src/app/helpers/date.js","webpack:///./src/app/components/conversation/NumMessages.tsx","webpack:///./src/app/components/list/ItemColumnLayout.tsx","webpack:///./src/app/components/list/ItemRowLayout.tsx","webpack:///./src/app/components/list/Item.tsx","webpack:///./src/app/helpers/conversation.ts","webpack:///./src/app/components/list/List.tsx","webpack:///./src/app/components/message/MessageBody.tsx","webpack:///./src/app/helpers/displaySignature.js","webpack:///./src/app/helpers/encryptionType.js","webpack:///./src/app/components/message/MessageLock.tsx","webpack:///./src/app/components/message/header/HeaderCollapsed.tsx","webpack:///./src/app/components/message/extras/ExtraImages.tsx","webpack:///./src/app/components/message/extras/ExtraUnsubscribe.tsx","webpack:///./src/app/components/message/header/HeaderExtra.tsx","webpack:///./src/app/components/message/header/HeaderRecipientsSimple.tsx","webpack:///./src/app/components/message/header/HeaderRecipientsDetails.tsx","webpack:///./src/app/components/message/header/HeaderDropdown.tsx","webpack:///./src/app/components/message/header/HeaderExpanded.tsx","webpack:///./src/app/api/attachments.js","webpack:///./src/app/helpers/attachments.ts","webpack:///./src/app/helpers/image.js","webpack:///./src/app/helpers/dom.js","webpack:///./src/app/helpers/string.js","webpack:///./src/app/helpers/embedded/embeddedUtils.js","webpack:///./src/app/helpers/embedded/embeddedStore.js","webpack:///./src/app/helpers/embedded/embeddedFinder.js","webpack:///./src/app/helpers/embedded/embeddedParser.js","webpack:///./src/app/helpers/embedded/embedded.js","webpack:///./src/app/helpers/signatures.js","webpack:///./src/app/hooks/useSignatures.js","webpack:///./src/app/hooks/useAttachments.ts","webpack:///./src/app/components/message/MessageAttachment.tsx","webpack:///./src/app/components/message/MessageFooter.tsx","webpack:///./src/app/helpers/purify.js","webpack:///./src/app/helpers/transforms/transformEscape.js","webpack:///./src/app/helpers/transforms/transformLinks.js","webpack:///./src/app/helpers/transforms/transformEmbedded.js","webpack:///./src/app/helpers/transforms/transformWelcome.js","webpack:///./src/app/helpers/transforms/transformBlockquotes.js","webpack:///./src/app/helpers/transforms/transformRemote.js","webpack:///./src/app/helpers/transforms/transformStylesheet.js","webpack:///./src/app/helpers/transforms/transformBase.js","webpack:///./src/app/containers/MessageProvider.tsx","webpack:///./src/app/hooks/useMessage.ts","webpack:///./src/app/hooks/useDecryptMessage.ts","webpack:///./src/app/components/message/MessageView.tsx","webpack:///./src/app/components/conversation/ConversationView.tsx","webpack:///./src/app/hooks/useConversation.ts","webpack:///./src/app/components/view/WelcomePane.tsx","webpack:///./src/app/components/view/SelectionPane.tsx","webpack:///./src/app/components/view/PlaceholderView.tsx","webpack:///./src/app/components/message/MessageOnlyView.tsx","webpack:///./src/app/containers/MailboxContainer.tsx","webpack:///./src/app/hooks/useMailboxPageTitle.ts","webpack:///./src/app/containers/PageContainer.tsx","webpack:///./src/app/PrivateApp.js","webpack:///./src/app/components/layout/PublicLayout.js","webpack:///./src/app/containers/LoginContainer.js","webpack:///./src/app/containers/SignupContainer.js","webpack:///./src/app/PublicApp.js","webpack:///./src/app/App.js","webpack:///./src/app/index.js","webpack:///./node_modules/design-system/assets/img/shared/bank-icons sync .svg$","webpack:///./node_modules/date-fns/locale lazy ^\\.\\/[a-z]{2}(-([A-Z]{2}))","webpack:///./src/i18n lazy .json$"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","sriHashes","exports","module","l","e","promises","installedChunkData","promise","Promise","resolve","reject","onScriptComplete","script","document","createElement","charset","timeout","nc","setAttribute","src","p","jsonpScriptSrc","indexOf","window","location","origin","crossOrigin","error","Error","event","onerror","onload","clearTimeout","chunk","errorType","type","realSrc","target","message","name","request","undefined","setTimeout","integrity","head","appendChild","all","m","c","d","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","oe","err","console","jsonpArray","oldJsonpFunction","slice","CLIENT_ID","CLIENT_TYPE","CLIENT_SECRET","APP_VERSION","APP_NAME","API_URL","SECURE_URL","API_VERSION","DATE_VERSION","CHANGELOG_PATH","VERSION_PATH","SENTRY_RELEASE","SENTRY_DSN","locales","require","keys","reduce","acc","ALL","INBOX","MAILBOX_LABEL_IDS","TRASH","SPAM","ARCHIVE","AdvancedSearchDropdown","history","formRef","useRef","useState","model","updateModel","useLabels","labels","locationOptions","text","concat","filter","Exclusive","LABEL_EXCLUSIVE","FOLDER","map","ID","Name","LABEL","SimpleDropdown","originalPlacement","hasCaret","content","Icon","className","ref","onSubmit","current","reset","Label","htmlFor","Select","id","options","onChange","PrimaryButton","PrivateHeader","expanded","onToggleExpand","onSearch","useUser","hasPaidMail","MainLogo","url","Hamburger","onToggle","Searchbox","placeholder","advanced","TopNavbar","UpgradeButton","external","TopNavbarLink","to","icon","aria-current","SupportDropdown","LocationAside","action","unread","RefreshButton","useEventManager","useLoading","loading","withLoading","disabled","onClick","a","async","preventDefault","handleRefresh","fill","ELEMENT_TYPES","LABEL_IDS_TO_HUMAN","ALL_DRAFTS","ALL_SENT","ALL_MAIL","SENT","DRAFTS","STARRED","HUMAN_TO_LABEL_IDS","entries","LABEL_IDS_TO_I18N","VERIFICATION_STATUS","MESSAGE_FLAGS","getCurrentType","labelID","mailSettings","includes","ViewMode","VIEW_MODE","GROUP","getTime","element","ContextTime","Labels","find","getLabel","getSize","Size","sort","elements","getValue","Time","e1","e2","b","desc","PrivateSidebar","currentLabelID","useConversationCounts","conversationCounts","loadingConversationCounts","useMessageCounts","messageCounts","loadingMessageCounts","useMailSettings","loadingMailSettings","loadingLabels","ShowMoved","unreadMap","useMemo","counters","Array","isArray","toMap","Loader","getAside","Unread","list","aside","link","SHOW_MOVED","redirectTo","Color","color","data-expanded","NavMenu","PrivateLayout","children","mainAreaRef","setExpand","useEffect","pathname","AppsSidebar","items","StorageSpaceStatus","Href","keyword","log","normalize","Route","path","render","Provider","getHumanLabelID","getLabelName","getI18nLabelID","labelsMap","isColumnMode","ViewLayout","VIEW_LAYOUT","COLUMN","isConversationMode","useElements","conversationMode","page","api","useApi","subscribe","setLoading","pages","total","localCache","setLocalCache","resetCache","values","queryElement","elementID","query","getConversation","getMessage","Conversation","Message","queryElements","queryConversations","queryMessageMetadata","Page","PageSize","size","Limit","limit","LabelID","Sort","Desc","Total","Elements","Conversations","Messages","Action","Element","EVENT_ACTIONS","DELETE","toDelete","UPDATE_FLAGS","toUpdate","CREATE","toCreate","conversation","existingConversation","toUpdateCompleted","newReplacements","forEach","newElements","newPage","some","minPage","startIndex","endIndex","LabelIDs","hasLabel","sortElements","getSearchParams","params","URLSearchParams","search","changeSearchParams","newParams","delete","set","queryString","toString","urlFragment","setPathInUrl","sortToString","filterToString","pageFromUrl","string","pageNumber","parseInt","isNaN","stringToPage","ToolbarSeparator","ToolbarButton","rest","classnames","ReadUnreadButtons","selectedIDs","MessageButtons","MESSAGE_BUTTONS","READ_UNREAD","markAs","status","isUnread","markConversationsAsUnread","markConversationsAsRead","markMessageAsUnread","markMessageAsRead","buttons","title","UNREAD_READ","reverse","ToolbarDropdown","autoClose","generateUID","uid","usePopperAnchor","anchorRef","isOpen","toggle","close","DropdownButton","buttonRef","caretClassName","Dropdown","onClose","LayoutDropdown","currentLayoutIcon","updateLayout","viewLayout","updateViewLayout","DropdownMenu","DropdownMenuButton","ROW","MoveButtons","createNotification","useNotifications","handleMove","labelConversations","labelMessages","IDs","displayTrash","displayInbox","displayArchive","displaySpam","DeleteButton","createModal","useModals","displayDelete","displayEmpty","Confirm","ngettext","msgid","confirm","ErrorButton","onConfirm","Alert","deleteConversations","deleteMessages","emptyLabel","AddressID","TIME","SIZE","ICONS","SortDropdown","onSort","FilterDropdown","onFilter","SelectAll","checked","onCheck","Checkbox","SearchInput","UntypedSearchInput","MoveDropdown","updateSearch","normSearch","folders","Boolean","Tooltip","label","autoFocus","folder","index","LabelDropdown","lastChecked","setLastChecked","alsoArchive","updateAlsoArchive","selectedLabelIDs","updateSelectedLabelIDs","handleCheck","shiftKey","nativeEvent","labelIDs","start","findIndex","end","Math","min","max","update","labelAction","unlabelAction","unlabelMessages","unlabelConversations","BackButton","PagingControls","onPage","setPage","pageCount","floor","String","_","Toolbar","checkAll","onCheckAll","onBack","columnMode","ItemCheckbox","FLAG_RECEIVED","FLAG_SENT","FLAG_RECEIPT_REQUEST","FLAG_IMPORTED","FLAG_REPLIED","FLAG_REPLIEDALL","FLAG_FORWARDED","FLAG_INTERNAL","FLAG_AUTO","FLAG_E2E","FLAG_SIGN","FLAG_PUBLIC_KEY","PLAINTEXT","MIME_TYPES","MIME","hasFlag","flag","Flags","hasBit","isImported","isInternal","isExternal","isAuto","isReceived","isSent","isDraft","isE2E","isSentEncrypted","isInternalEncrypted","isPGPEncrypted","inSigningPeriod","isMIME","MIMEType","getSender","Sender","Address","getParsedHeaders","parameter","ParsedHeaders","getAttachments","Attachments","hasAttachments","ItemStar","isConversation","isStarred","iconName","ItemLabels","onUnlabel","orderBy","style","backgroundColor","borderColor","Link","ItemAttachmentIcon","ContextNumAttachments","ItemLocation","FORMATERS","simple","date","format","isToday","locale","dateLocale","full","distance","dateFnsFormatDistanceToNow","addSuffix","ItemDate","formater","Date","getDate","NumMessages","ItemColumnLayout","senders","Subject","ItemRowLayout","humanSize","Item","displayRecipients","Senders","getSenders","recipients","Recipients","ToList","CCList","BCCList","getMessageRecipients","ItemLayout","NumUnread","classList","contains","closest","stopPropagation","getInitial","join","List","checkedIDs","elementIDs","MessageBody","plain","isPlainText","dangerouslySetInnerHTML","__html","SIGNED_AND_INVALID","SIGNED_AND_VALID","I18N","pm","pgp","clear","sentEncrypted","auto","sentClear","draft","getFromType","isExternalEncrypted","MessageLock","inputClassName","displaySignature","verified","displaySignatureStatus","pgpEncrypted","tooltip","encType","getEncryptionType","href","internal","HeaderCollapsed","onExpand","inOutClass","ExtraImages","showRemoteImages","showEmbeddedImages","onLoadImages","ExtraUnsubscribe","getListUnsubscribe","HeaderExtra","onLoadRemoteImages","onLoadEmbeddedImages","HeaderRecipientsSimple","RecipientsList","HeaderRecipientsDetails","HeaderDropdown","HeaderExpanded","messageLoaded","onCollapse","useToggle","showDetails","state","toggleDetails","Group","ButtonGroup","getAttachment","attachmentID","method","output","getCacheKey","decrypt","attachment","sessionKey","at","Uint8Array","decryptMessage","sessionKeys","signatures","fromCache","getRequest","getSessionKey","keyPackets","binaryStringToArray","decodeBase64","KeyPackets","privateKeys","decryptSessionKey","getDecryptedAttachmentAPI","cache","decrypted","blob","concatArrays","getDecryptedAttachment","cadata","getAndVerify","reverify","verify","Preview","formatDownload","isError","generateDownload","downloadFile","Blob","download","att","formatDownloadAll","currentName","split","ext","pop","newName","getZipAttachmentName","downloadAll","zip","JSZip","file","generateAsync","isInlineEmbedded","startsWith","isEmbedded","matches","node","selector","msMatchesSelector","OPEN_TAG_AUTOCOMPLETE","CLOSE_TAG_AUTOCOMPLETE","OPEN_TAG_AUTOCOMPLETE_RAW","CLOSE_TAG_AUTOCOMPLETE_RAW","ucFirst","input","charAt","toUpperCase","uniqID","random","now","REGEXP_CID_START","convertMimeHeaders","config","headers","formatted","mimemessage","factory","trimQuotes","trim","substr","readCID","Headers","findEmbedded","cid","querySelectorAll","Blobs","MAP_BLOBS","CIDList","PREFIX_DRAFT","urlCreator","URL","webkitURL","getHashKey","msg","ConversationID","store","noop","imageUrl","createObjectURL","isContentLocation","getBlob","getMessageCIDs","NumEmbedded","embeddedUtils","embedded","embeddedAttachments","attachments","embeddedStore","listInlineAttachments","MAP_CID","contentId","contentName","contentDisposition","filename","replace","ENCRYPTED_STATUS","invalidSignature","askAgain","actionDirection","nodes","removeAttribute","getAttribute","add","mutateHTML","direction","triggerSigVerification","attachmentLoader","then","wait","embeddedFinder","show","ShowImages","SHOW_IMAGES","EMBEDDED","sigList","has","Encrypted","storeAttachement","buffer","escape","innerHTML","escapeSrc","unescape","unescapeSrc","parser","isOutside","numEmbedded","embeddedParser","getUrl","NOT_SIGNED","SIGNED_NO_PUB_KEY","verifyAllSignatures","decryptedAttachment","publicKeys","attMessage","createMessage","asyncSigVerifiers","signature","verifyMessage","embeddedSigs","Signature","getSignature","statusPerSig","pmcryptoVerified","useSignatures","useCache","Map","useSignaturesCache","useCallback","verifySignature","useAttachments","useAttachmentsCache","downloadAttachment","downloadAllAttachment","OUTER_MAP_CLASSNAME","mp3","javascript","vcard","xls","mov","pdf","power","word","INNER_MAP_CLASSNAME","MessageAttachment","showLoader","setShowLoader","showInstant","setShowInstant","humanAttachmentSize","outerIcon","single","getInnerFileIconType","disposition","Number","isEmbeddedLocal","classNames","showInner","aria-busy","MessageFooter","humanAttachmentsSize","attachmentsSize","numAttachments","numPureAttachments","REGEXP_URL_ATTR","RegExp","attr","LIST_PROTON_ATTR","MAP_PROTON_ATTR","CONFIG","default","ALLOWED_URI_REGEXP","ADD_TAGS","ADD_ATTR","FORBID_TAGS","FORBID_ATTR","raw","WHOLE_DOCUMENT","RETURN_DOM","html","protonizer","ALLOW_UNKNOWN_PROTOCOLS","RETURN_DOM_FRAGMENT","escapeURLinStyle","handleEscape","unescapedEncoding","radix","ignored","val","fromCodePoint","char","escapeFlag","escapedStyle","beforeSanitizeElements","nodeType","from","attributes","item","escaped","purifyHTMLHooks","active","DOMPurify","addHook","removeHook","getConfig","clean","clearConfig","sanitize","attachHooks","process","FORBIDDEN_SVG","HTML_STRING","VERIFY_ELEMENT_END","REGEXP_SVG_BREAK","removeBase64","activeCache","match","hash","put","escapeSVG","transformEscape","activeHooks","purifyHTML","PROTOCOLS","ALL_PROTOCOLS","MAP","getNormalizedHref","toLowerCase","sanitizeRelativeHttpLinks","proto","linkUsesProtocols","nodeName","disableAnchors","isEmptyAnchor","pointerEvents","transformLinks","hasHTTP","isRelative","httpInNewTab","noReferrerInfo","wrapImage","img","container","wrapper","firstChild","outerHTML","parentNode","insertBefore","remove","wrap","transformEmbedded","images","isReplyForward","test","showEmbedded","image","parentElement","removeChild","transformWelcome","str","quotes","transformBlockquotes","doc","blockquotes","parent","textContent","found","blockquote","child","before","after","button","transformStylesheet","firstElement","firstElementChild","position","WHITELIST","ATTRIBUTES","REGEXP_FIXER","prepareInjection","hasAttribute","mapAttributes","transformRemote","inputShowImages","regex","showImages","REMOTE","hasImages","$1","substring","ELEMENTS","attribute","transformBase","base","querySelector","BASE_URL","baseUrl","getBaseURL","bindAttribute","el","keyproton","ptValue","MessageContext","createContext","MessageProvider","useInstance","createCache","createLRU","useLayoutEffect","UPDATE_DRAFT","useMessage","inputMessage","getPublicKeys","getAddressKeys","messageID","useContext","computeCache","setMessage","useGetPublicKeys","useGetAddressKeys","addressKeys","splitKeys","decryptMessageLegacy","Body","messageDate","signedInvalid","signedPubkey","transformAttachements","changedMessageID","transforms","loadData","markAsRead","runSingle","compute","run","computes","messagePromise","load","newMessage","loaded","initialize","initialized","loadRemoteImages","loadEmbeddedImages","MessageView","initialExpand","conversationIndex","setExpanded","elementRef","scrollIntoView","behavior","block","handleExpand","ConversationView","conversationID","miss","useCachedModelResult","useConversation","conversationData","messages","WelcomePane","labelCount","user","unreadsLabel","reportBugButton","LinkButton","AuthenticatedBugModal","DisplayName","capitalize","jt","welcomeMessageSvg","alt","SelectionPane","onUncheckAll","checkeds","labelName","conversationManySvg","conversationSingleSvg","Button","PlaceholderView","welcomeRef","counter","MessageOnlyView","MailboxContainer","inputElementID","searchParams","stringToSort","sortFromUrl","stringToFilter","filterFromUrl","checkedElements","setCheckedElements","setCheckAll","loadingUser","loadings","every","unreads","unreadString","address","Email","useMailboxPageTitle","contactID","handleCheckAll","setPageInUrl","setSortInUrl","setFilterInUrl","PageContainer","ErrorBoundary","PrivateApp","onLogout","StandardPrivateApp","preloadModels","UserModel","UserSettingsModel","eventModels","AddressesModel","ConversationCountsModel","MessageCountsModel","MailSettingsModel","LabelsModel","SubscriptionModel","OrganizationModel","component","PublicLayout","Icons","LoginContainer","stopRedirect","onLogin","SignInLayout","LoginForm","needHelp","SignupContainer","propTypes","PropTypes","func","isRequired","shape","step","oneOfType","token","Coupon","Code","PublicApp","hasStopRedirect","setError","loadOpenPGP","catch","Switch","ResetPasswordContainer","ForgotUsernameContainer","Redirect","Setup","useAuthentication","UID","login","logout","hot","ProtonApp","ReactDOM","webpackContext","req","webpackContextResolve","code","webpackAsyncContext","ids","webpackEmptyAsyncContext"],"mappings":"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","file":"index.84c9fef2.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// script path function\n \tfunction jsonpScriptSrc(chunkId) {\n \t\treturn __webpack_require__.p + \"\" + ({}[chunkId]||chunkId) + \".\" + {\"3\":\"99a5cb4b\",\"4\":\"686e54f7\",\"5\":\"cc1cb445\",\"6\":\"8ef2cc60\",\"7\":\"9bf6c907\",\"8\":\"0aa2f2b1\",\"9\":\"c33610b0\",\"10\":\"2e92948f\",\"11\":\"b2223442\",\"12\":\"2658e333\",\"13\":\"7eb0d330\",\"14\":\"3c332fad\",\"15\":\"029880d5\",\"16\":\"ded26825\",\"17\":\"815dbee9\",\"18\":\"29d6d7da\",\"19\":\"b29d9ab5\",\"20\":\"811dc1f1\",\"21\":\"895970ae\",\"22\":\"8ae7f408\",\"23\":\"0c176e2a\",\"24\":\"eef190ed\",\"25\":\"d430a8bd\",\"26\":\"f36955ef\",\"27\":\"bf29b131\",\"28\":\"150e2a33\",\"29\":\"b4944d34\",\"30\":\"a6247051\",\"31\":\"89d060b6\",\"32\":\"2b38fd46\",\"33\":\"cbf3210c\",\"34\":\"b866cc8a\",\"35\":\"b76d3c3e\",\"36\":\"204a52a4\",\"37\":\"6475c6cc\",\"38\":\"a889cd75\",\"39\":\"70cf3b7f\",\"40\":\"d5bdc5e5\",\"41\":\"a17027de\",\"42\":\"40439042\",\"43\":\"3dc3a915\",\"44\":\"faf8a6eb\",\"45\":\"f9dca841\",\"46\":\"86c347da\",\"47\":\"7e2b4b30\",\"48\":\"c003ce59\",\"49\":\"68b5ce14\",\"50\":\"dd1831ae\",\"51\":\"a5ca2360\",\"52\":\"89e4a224\",\"53\":\"4b0ebfd8\",\"54\":\"05d21b52\",\"55\":\"1cfade66\",\"56\":\"16b279b6\",\"57\":\"7e63c556\",\"58\":\"6b6f4235\",\"59\":\"f2b7e6a4\",\"60\":\"2d03cd11\",\"61\":\"ba8a9d5b\",\"62\":\"d1676b00\",\"63\":\"cf6b8cc1\",\"64\":\"133924bf\"}[chunkId] + \".chunk.js\"\n \t}\n \tvar sriHashes = {\"3\":\"sha384-9934ABN6uqPEPFosQLqxuVhvYUV4okLUNbM0wPFOjE32xxR0586aPIAfPwsnK0aM\",\"4\":\"sha384-c8lzpMfT7HLNH/GninvVmldA6MAz78U7S67XgZ0sL1zC/XsvbAc1sk/8WCbo5DRm\",\"5\":\"sha384-lv7AR2bqV8OenkumNTiZZdadAbQfO2XuJbYqEt9AzFdGlC10pFrN3Cs+aZUgjPcD\",\"6\":\"sha384-zGs+rCNJ2ybc4gZG6rllZSyRoPEPzHKQsQdmg5Ct1obpLbhfrgY0Eh8xKnaVYAWQ\",\"7\":\"sha384-pYGHH3VUsYMwA4BAKILHXmvGjpaxZlX7K4Of8Vf0TpR1zS6KDsgHFNzDpzirDyBf\",\"8\":\"sha384-ACeUJuCEJ59IYImLrUenrF6deSrpeWezxLcOsBAQyORKzdpa17wYYLC3/lu9FXfx\",\"9\":\"sha384-i0T45goKd5FtPV6EQM7mrJpda8H8zPWOz5tjU9ymETt7xBC6jUjwNqHloDdlm24u\",\"10\":\"sha384-8jUnc1d4TZkeepUWsacU28Ba3xjVZQC+DhOPOUgsOujkW4AH00aKevnp3eALoF96\",\"11\":\"sha384-DArCUJcqJmVbAYO1HmaQBxRDAd1LhtMG3EtURSQnKJtwDiZ1YwnP2rwfkK69PMf4\",\"12\":\"sha384-XS0QUhEY75QdhPe6i1rnrb4KAI4vmxXrsCsUmdIWSbx+ZzXXqOOWQouR+Hua6ukg\",\"13\":\"sha384-m+5HhZASMNDlwdTS4rbCfY+uMTLoDEBuHkgo2eRz1U72aRnXBRtcFNIpYN8UcOw0\",\"14\":\"sha384-lRW/huJoiN9BopHCZ2RcPCpNHFtWg3585yWFpWhv+DHGLlUB9fgLWMA1V/Roj1+b\",\"15\":\"sha384-irOAQuzwBISkvtz8hzaB0WP9TNhpfAYByjaJsV8JxgV+2F+3umYIZtxCJDfclqux\",\"16\":\"sha384-BRfHejCiWsn28LbRHzgaPHBmWBeqhz+loh+/rXH2QTedcz0OMFYxD7pvQch4Maq8\",\"17\":\"sha384-UP9yAZvoLx3uOKiaRwDd8CnL+TG6XnvmCQ/dqZUmuxDfNZimQYs6mhtwaDm1mC/E\",\"18\":\"sha384-ES8l1C4+eGYE3gz5iokugFlvGNUc3Jkl+RqsyPcNNYjnbugjT4OPnWttCcelmjC/\",\"19\":\"sha384-zuIZQSzznBcH/aeP6dj/cfl9tnmBnFZ5OvQWlFuj6zTniPXSJ825U++zKvplDaFc\",\"20\":\"sha384-jKcgQSWZyXXAHZ7g5WNU6glCJtd1tVX4BAcyO+Qo4PJMWFI7EIYYfbb1ieSu4Eob\",\"21\":\"sha384-8kzw/z8VFEI4cFXKzDPIhxdSEz3rcKu7VL7Hb8dm/1jP9WDy3G/6Pq1sk0DwdlUQ\",\"22\":\"sha384-vQaEGDUlI+f05Zln/tyPRJX7Q+EH6KpzX5B+1Ksqeq6smzvDMRw/VcuU7WO/9UWo\",\"23\":\"sha384-AoehfZkceTHXRM5ePhp5CSnOVH2PoqIeL8gzUpv5R1Vw2lZJrXIDuzUsxp4KZgq3\",\"24\":\"sha384-hMnh3w0w1iPOFlEhpEHjBAlGJVlowHPzeZ0M2IgBRwTD2htzyWAa5MRvVPkTzdJA\",\"25\":\"sha384-W/vYvDOgjWSw6gxJmVjoKKQmMwfR9dWhEORiTWcPGpDRuwQORazeQfeyxzfjoXdW\",\"26\":\"sha384-l0G9EBxQrDdTWOPdCuYSNETCg5O6AtKYekF47wIyiTjGwE04QYa8SLMSFxd8o71d\",\"27\":\"sha384-6OO7XYx9E3QXkIhdIlHQVH8Ue44DVJp6nrwTvFmrbXg9Nli+uRZgKGomg8WeiR5q\",\"28\":\"sha384-kf5ojG+WPoIphDkrlnR3D8popMDAnND5JLIltB7TQ3ye6zb8uOGYlF9AbKB08a9+\",\"29\":\"sha384-tnX0KN/cE5IZdJclcW7QcVbgrkg9mJrThT3/qxojXwCgrikX9kQaSLV7HtGWEp0J\",\"30\":\"sha384-WkkBR/2HPdRYZvC42rOkNplMBjlRLXlN6PHAN44T7C/py4oriEnv33Ze51S6Rd82\",\"31\":\"sha384-UNRa2ZGZ41ii/29/KnlYViDgvnb2hA6l3XuLrgDQLwLazM8VuaURvhQ02mJeICwL\",\"32\":\"sha384-AsuQU0y81OeHG6H/atJuFNibNJ5XjvuskJjC8MqHRThMTaVPAmIOVriCK+2vvchr\",\"33\":\"sha384-LgLJ3EvoZtIH0CDV7fGICHlQSeplOQ91vtIYNNJDdA0ENr/Q8yHfcxRMibTRv2lT\",\"34\":\"sha384-hb/lMcKNyJvXHCaXxXXmGClN2mW6KRgbY+U2PjU1kOm93RG9Om+r8pX3Kpdnnqh4\",\"35\":\"sha384-z+Zv2ZTMH6JCh48NoXvxPueez9w8XAHZlpPDMY1Y7I/pt1eJSgxgxDwf0PK0JIOR\",\"36\":\"sha384-XSYUc6dvyA7SajIlM8GwH5oqi7VeUAjVBcc+vQzlmJa7ttnN2oEJLsCphFHkS5C0\",\"37\":\"sha384-5h0AJiBbQmnmdLoIV6T3+wDDvPlyPQt8iwni+MkRZDnYXO26pMsmc4d/l9zZV3N3\",\"38\":\"sha384-W8sU1K3akH3iR1b2CgC0NjRHd2navx73bLUlbH/kxAxjm80AEJ9+GkNHEwiGvtS8\",\"39\":\"sha384-VzYMHzEL3iG47djGZ8oFdSxk2k88lejaAAXa9j9sP8JFkQ9KO6juZrjnv0Qt+Qhv\",\"40\":\"sha384-T4PpKTsD9/LYiH7irzAx7ZNGJbC/5RGjEpsq+i/Sov/Ok3YDK/L6soiemAuLjJIN\",\"41\":\"sha384-PPuiSgLVtm9dKVr7s5Yf2+MmSsnBNsQizBIyR1tTgVclLmyp8M/+LaANz/QaZl4w\",\"42\":\"sha384-fjyvCz3D+xT+Y1DiQ1DXBeYM/yVCjVhkIMJIK7Hmj2KRnh/JgCmUS9Y3BchRLHKE\",\"43\":\"sha384-9cRxEJRfWCr3NJOWD5RWORkImWu7NhRUbdWmKRL4O30QZt5YHGWqGAHdu3nm6iJN\",\"44\":\"sha384-ojzmhdPobWffn3uS7YlXq8nUjrFSKnIEo5igI9VmsV0hf5sML1vuqo3WNQ8cVTd0\",\"45\":\"sha384-zx8A2SLhiOzCrp0YsZI3L67f601RtYZkG+T8Ypn7cEIxMb/5kfyjlu0AncxNsqRl\",\"46\":\"sha384-orcgeC+mhWxY99KH2JApmjOshTEcJ8ndZzOdUKfttrMZQPDlTULjWPOarYsXRrbC\",\"47\":\"sha384-nJ0DaYc5GWnwssOIfk5YahTBrNISX+r0xmSvJ0bF4pAIQejpnw1KPc2LOAKkK5x3\",\"48\":\"sha384-jzEKNGMf5XBJm1srqq8UZsYGD+XNEsV5YBMeGRWR0udJC4N3pC8R8pttnubZVHtk\",\"49\":\"sha384-WahoBLbM74PGDr/7/fXrnbvs2TwiYihLfkiAnqvHOqFsnZNmEasRBasd43J3F4X7\",\"50\":\"sha384-C4bS4nSOgnJlFMdjHgoFhiVjA+XiFeet6Tqtfgg7zRxg/kBVdibpD/2as6vLDNrA\",\"51\":\"sha384-wRNAFACmiKh7qvcPXQkjdrU2MwDDvwci1sZepkaQDh9RAPWI7RNjPoHAZGV5FYlW\",\"52\":\"sha384-a0b3xhuXCCBxCKwbP5wjNQc9ZCzDHmH+TTVVkdrpNKO4OwbDLA5UyJTJ90l9nGv8\",\"53\":\"sha384-XP0rQY7SqZIC5f/uxurYuYi0a8MNVdxarSV8Vb6nscMsXpLRjrUREf2siCZ6KvBM\",\"54\":\"sha384-VQiGyLj12mnQv4Gbq262pqG3ClZUAWoI4cOiClzNf9fqBd66eAI+Jp+I149+8Qe5\",\"55\":\"sha384-rV6u8eshKm1ESH0MK6LYeqyY5+8C2Nt/qVn8ooBr+GcZSUnFi2c9aXdddVrU/wIp\",\"56\":\"sha384-zaGeszS8oQHGzgMlYL0/wQkNyuEvpbswRtityiuS4y0GzxCjy+d+NIL3CNRSg4cn\",\"57\":\"sha384-hS/5RVkIw66sQdEqjl66X/YjLX3eBqWBSce7sbXdSbLGiEpb8nGbrj9SNx8hRqwy\",\"58\":\"sha384-s763XtDuYj/NBS8L6/uXd3TCBhjsztgBv2SZPbX/QtpaDiv0LgKLxIx2astqjLY5\",\"59\":\"sha384-TzW2aFz9aLA54S/yPUzTlCBuh1+hJ2iPVNdgtZIAP1LzEfKwF8ZvBhzWTpmz8CPr\",\"60\":\"sha384-skCRYdZpBI4T0RUlwriRgXKe5LNXomfke5BxGWyCbQJw5i3xUe3AFrEM/7F63s/0\",\"61\":\"sha384-Q4E0teznn7Aj66mYA9mT7JRn+zOhBcDvsEjxSOoAoV52jtiBsKJh7Tlh0MejtUB/\",\"62\":\"sha384-GZV2VNVAzNi975g0cLQQ/DKnCiLUkNI7Ooc00P42VLsnwOdxRt0e8DaO754mBJ6K\",\"63\":\"sha384-eU8Nu5+9hDL+VCxDT9Kl2XnXb08gLe5740xMLlDmOcE06oBYmO3l9Lwv0EelIyDy\",\"64\":\"sha384-XoiKA1IU2zJPo8CPBM/oQVuTJcij0q5Xr5oQMtlJLP4ArWl/A05zMuLZ03LCVVsy\"};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n\n\n \t\t// JSONP chunk loading for javascript\n\n \t\tvar installedChunkData = installedChunks[chunkId];\n \t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n \t\t\t// a Promise means \"currently loading\".\n \t\t\tif(installedChunkData) {\n \t\t\t\tpromises.push(installedChunkData[2]);\n \t\t\t} else {\n \t\t\t\t// setup Promise in chunk cache\n \t\t\t\tvar promise = new Promise(function(resolve, reject) {\n \t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n \t\t\t\t});\n \t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n \t\t\t\t// start chunk loading\n \t\t\t\tvar script = document.createElement('script');\n \t\t\t\tvar onScriptComplete;\n\n \t\t\t\tscript.charset = 'utf-8';\n \t\t\t\tscript.timeout = 120;\n \t\t\t\tif (__webpack_require__.nc) {\n \t\t\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n \t\t\t\t}\n \t\t\t\tscript.src = jsonpScriptSrc(chunkId);\n \t\t\t\tif (script.src.indexOf(window.location.origin + '/') !== 0) {\n \t\t\t\t\tscript.crossOrigin = \"anonymous\";\n \t\t\t\t}\n \t\t\t\t// create error before stack unwound to get useful stacktrace later\n \t\t\t\tvar error = new Error();\n \t\t\t\tonScriptComplete = function (event) {\n \t\t\t\t\t// avoid mem leaks in IE.\n \t\t\t\t\tscript.onerror = script.onload = null;\n \t\t\t\t\tclearTimeout(timeout);\n \t\t\t\t\tvar chunk = installedChunks[chunkId];\n \t\t\t\t\tif(chunk !== 0) {\n \t\t\t\t\t\tif(chunk) {\n \t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n \t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n \t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n \t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n \t\t\t\t\t\t\terror.type = errorType;\n \t\t\t\t\t\t\terror.request = realSrc;\n \t\t\t\t\t\t\tchunk[1](error);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tinstalledChunks[chunkId] = undefined;\n \t\t\t\t\t}\n \t\t\t\t};\n \t\t\t\tvar timeout = setTimeout(function(){\n \t\t\t\t\tonScriptComplete({ type: 'timeout', target: script });\n \t\t\t\t}, 120000);\n \t\t\t\tscript.onerror = script.onload = onScriptComplete;\n \t\t\t\tscript.integrity = sriHashes[chunkId];\n \t\t\t\tscript.crossOrigin = \"anonymous\";\n \t\t\t\tdocument.head.appendChild(script);\n \t\t\t}\n \t\t}\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// on error function for async loading\n \t__webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,2]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","export const CLIENT_ID = 'WebMail';\nexport const CLIENT_TYPE = 1;\nexport const CLIENT_SECRET = '';\nexport const APP_VERSION = '1.0.0';\nexport const APP_NAME = 'proton-mail';\nexport const API_URL = 'https://protonmail.blue/api';\nexport const SECURE_URL = 'https://secure.protonmail.blue';\nexport const API_VERSION = '3';\nexport const DATE_VERSION = 'Thu, 05 Dec 2019 14:23:50 GMT';\nexport const CHANGELOG_PATH = 'assets/changelog.tpl.html';\nexport const VERSION_PATH = 'assets/version.json';\nexport const SENTRY_RELEASE = '';\nexport const SENTRY_DSN = '';","const locales = require.context('../i18n', true, /.json$/, 'lazy');\n\nexport default locales.keys().reduce((acc, key) => {\n    acc[key.slice(2, key.length - 5)] = () => locales(key);\n    return acc;\n}, {});\n","import React, { useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon, SimpleDropdown, PrimaryButton, Label, Select, useLabels } from 'react-components';\nimport { MAILBOX_LABEL_IDS, LABEL_EXCLUSIVE } from 'proton-shared/lib/constants';\nimport { c } from 'ttag';\n\nconst ALL = 'all';\nconst { INBOX, TRASH, SPAM, ARCHIVE } = MAILBOX_LABEL_IDS;\n\nconst AdvancedSearchDropdown = ({ location, history }) => {\n    const formRef = useRef();\n    const [model, updateModel] = useState({});\n    const [labels = []] = useLabels();\n    const locationOptions = [\n        { value: ALL, text: c('Option').t`All` },\n        { value: INBOX, text: c('Mailbox').t`Inbox` },\n        { value: ARCHIVE, text: c('Mailbox').t`Archive` },\n        { value: SPAM, text: c('Mailbox').t`Spam` },\n        { value: TRASH, text: c('Mailbox').t`Trash` }\n    ]\n        .concat(\n            labels\n                .filter(({ Exclusive }) => Exclusive === LABEL_EXCLUSIVE.FOLDER)\n                .map(({ ID: value, Name: text }) => ({ value, text }))\n        )\n        .concat(\n            labels\n                .filter(({ Exclusive }) => Exclusive === LABEL_EXCLUSIVE.LABEL)\n                .map(({ ID: value, Name: text }) => ({ value, text }))\n        );\n    const handleSubmit = () => {\n        const state = {}; // TODO\n        history.push({ ...location }, state);\n        formRef.current.reset();\n    };\n    return (\n        <SimpleDropdown\n            originalPlacement=\"bottom-right\"\n            hasCaret={false}\n            content={<Icon name=\"caret\" className=\"fill-white searchbox-advanced-search-icon\" />}\n            className=\"searchbox-advanced-search-button\"\n        >\n            <form ref={formRef} name=\"advanced-search\" className=\"p1\" onSubmit={handleSubmit}>\n                <div className=\"mb1\">\n                    <Label htmlFor=\"location\">{c('Label').t`Location`}</Label>\n                    <Select\n                        id=\"location\"\n                        options={locationOptions}\n                        onChange={({ target }) => updateModel({ ...model, location: target.value })}\n                    />\n                </div>\n                <div className=\"mb1 flex flex-nowrap\">\n                    <div className=\"mr1\">\n                        <Label>{c('Label').t`Sender`}</Label>\n                    </div>\n                    <div>\n                        <Label>{c('Label').t`Recipient`}</Label>\n                    </div>\n                </div>\n                <div className=\"mb1 flex flex-nowrap\">\n                    <div className=\"mr1\">\n                        <Label>{c('Label').t`Start date`}</Label>\n                    </div>\n                    <div>\n                        <Label>{c('Label').t`End date`}</Label>\n                    </div>\n                </div>\n                <div className=\"mb1 flex flex-nowrap\">\n                    <div className=\"mr1\">\n                        <Label>{c('Label').t`Address`}</Label>\n                    </div>\n                    <div>\n                        <Label>{c('Label').t`Attachments`}</Label>\n                    </div>\n                </div>\n                <div>\n                    <PrimaryButton className=\"w100\" type=\"submit\">{c('Action').t`Search`}</PrimaryButton>\n                </div>\n            </form>\n        </SimpleDropdown>\n    );\n};\n\nAdvancedSearchDropdown.propTypes = {\n    history: PropTypes.object.isRequired,\n    location: PropTypes.object.isRequired\n};\n\nexport default AdvancedSearchDropdown;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    MainLogo,\n    SupportDropdown,\n    Hamburger,\n    TopNavbar,\n    TopNavbarLink,\n    UpgradeButton,\n    Searchbox,\n    useUser\n} from 'react-components';\nimport { c } from 'ttag';\n\nimport AdvancedSearchDropdown from './AdvancedSearchDropdown';\n\nconst PrivateHeader = ({ location, history, expanded, onToggleExpand, onSearch }) => {\n    const [{ hasPaidMail }] = useUser();\n    return (\n        <header className=\"header flex flex-nowrap reset4print\">\n            <MainLogo url=\"/inbox\" className=\"nomobile\" />\n            <Hamburger expanded={expanded} onToggle={onToggleExpand} />\n            <Searchbox\n                placeholder={c('Placeholder').t`Search messages`}\n                onSearch={onSearch}\n                advanced={<AdvancedSearchDropdown location={location} history={history} />}\n            />\n            <TopNavbar>\n                {hasPaidMail ? null : <UpgradeButton external={true} />}\n                <TopNavbarLink to=\"/inbox\" icon=\"mailbox\" text={c('Title').t`Mailbox`} aria-current={true} />\n                <TopNavbarLink external={true} to=\"/settings\" icon=\"settings-master\" text={c('Title').t`Settings`} />\n                <SupportDropdown />\n            </TopNavbar>\n        </header>\n    );\n};\n\nPrivateHeader.propTypes = {\n    location: PropTypes.object.isRequired,\n    history: PropTypes.object.isRequired,\n    onSearch: PropTypes.func.isRequired,\n    expanded: PropTypes.bool,\n    onToggleExpand: PropTypes.func.isRequired\n};\n\nexport default PrivateHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst LocationAside = ({ action, unread = 0 }) => {\n    return (\n        <>\n            {action}\n            {unread ? <span className=\"navigation__counterItem flex-item-noshrink rounded\">{unread}</span> : null}\n        </>\n    );\n};\n\nLocationAside.propTypes = {\n    action: PropTypes.node,\n    unread: PropTypes.number.isRequired\n};\n\nexport default LocationAside;\n","import React from 'react';\nimport { Icon, useEventManager, useLoading } from 'react-components';\n\nconst RefreshButton = () => {\n    const { call } = useEventManager();\n    const [loading, withLoading] = useLoading();\n\n    const handleRefresh = async (event) => {\n        event.preventDefault();\n        await call();\n    };\n\n    return (\n        <button\n            className=\"mr0-5\"\n            disabled={loading}\n            type=\"button\"\n            onClick={(event) => withLoading(handleRefresh(event))}\n        >\n            <Icon fill=\"light\" name=\"reload\" />\n        </button>\n    );\n};\n\nexport default RefreshButton;\n","import { c } from 'ttag';\nimport { MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\n\nexport const PAGE_SIZE = 50;\n\nexport const ELEMENT_TYPES = {\n    MESSAGE: 'message',\n    CONVERSATION: 'conversation'\n};\n\nexport const LABEL_IDS_TO_HUMAN = {\n    [MAILBOX_LABEL_IDS.INBOX]: 'inbox',\n    [MAILBOX_LABEL_IDS.ALL_DRAFTS]: 'all-drafts',\n    [MAILBOX_LABEL_IDS.ALL_SENT]: 'all-sent',\n    [MAILBOX_LABEL_IDS.TRASH]: 'trash',\n    [MAILBOX_LABEL_IDS.SPAM]: 'spam',\n    [MAILBOX_LABEL_IDS.ALL_MAIL]: 'all-mail',\n    [MAILBOX_LABEL_IDS.ARCHIVE]: 'archive',\n    [MAILBOX_LABEL_IDS.SENT]: 'sent',\n    [MAILBOX_LABEL_IDS.DRAFTS]: 'drafts',\n    [MAILBOX_LABEL_IDS.STARRED]: 'starred'\n};\n\nexport const HUMAN_TO_LABEL_IDS = Object.entries(LABEL_IDS_TO_HUMAN).reduce((acc, [key, value]) => {\n    acc[value] = key;\n    return acc;\n}, Object.create(null));\n\nexport const LABEL_IDS_TO_I18N = {\n    [MAILBOX_LABEL_IDS.INBOX]: c('Link').t`Inbox`,\n    [MAILBOX_LABEL_IDS.ALL_DRAFTS]: c('Link').t`Drafts`,\n    [MAILBOX_LABEL_IDS.ALL_SENT]: c('Link').t`Sent`,\n    [MAILBOX_LABEL_IDS.TRASH]: c('Link').t`Trash`,\n    [MAILBOX_LABEL_IDS.SPAM]: c('Link').t`Spam`,\n    [MAILBOX_LABEL_IDS.ALL_MAIL]: c('Link').t`All mail`,\n    [MAILBOX_LABEL_IDS.ARCHIVE]: c('Link').t`Archive`,\n    [MAILBOX_LABEL_IDS.SENT]: c('Link').t`Sent`,\n    [MAILBOX_LABEL_IDS.DRAFTS]: c('Link').t`Drafts`,\n    [MAILBOX_LABEL_IDS.STARRED]: c('Link').t`Starred`\n};\n\nexport const SIGNATURE_START = 1546300800; // January 1, 2019\n\nexport const VERIFICATION_STATUS = {\n    NOT_VERIFIED: -1,\n    NOT_SIGNED: 0,\n    SIGNED_AND_VALID: 1,\n    SIGNED_AND_INVALID: 2,\n    SIGNED_NO_PUB_KEY: 3\n};\n\nexport const MESSAGE_FLAGS = {\n    FLAG_RECEIVED: 1, // whether a message is received\n    FLAG_SENT: 2, // whether a message is sent\n    FLAG_INTERNAL: 4, // whether the message is between ProtonMail recipients\n    FLAG_E2E: 8, // whether the message is end-to-end encrypted\n    FLAG_AUTO: 16, // whether the message is an autoresponse\n    FLAG_REPLIED: 32, // whether the message is replied to\n    FLAG_REPLIEDALL: 64, // whether the message is replied all to\n    FLAG_FORWARDED: 128, // whether the message is forwarded\n    FLAG_AUTOREPLIED: 256, // whether the message has been responded to with an autoresponse\n    FLAG_IMPORTED: 512, // whether the message is an import\n    FLAG_OPENED: 1024, // whether the message has ever been opened by the user\n    FLAG_RECEIPT_SENT: 2048, // whether a read receipt has been sent in response to the message\n    // For drafts only\n    FLAG_RECEIPT_REQUEST: 65536, // whether to request a read receipt for the message\n    FLAG_PUBLIC_KEY: 131072, // whether to attach the public key\n    FLAG_SIGN: 262144 // whether to sign the message\n};\n","import { formatRelative, format } from 'date-fns';\nimport { MAILBOX_LABEL_IDS, VIEW_MODE } from 'proton-shared/lib/constants';\n\nimport { ELEMENT_TYPES } from '../constants';\nimport { Element } from '../models/element';\nimport { Sort } from '../models/tools';\nimport { Message } from '../models/message';\n\nconst { SENT, ALL_SENT, DRAFTS, ALL_DRAFTS, ALL_MAIL } = MAILBOX_LABEL_IDS;\n\nexport interface TypeParams {\n    labelID: string;\n    mailSettings: any;\n}\n\nexport const getCurrentType = ({ labelID = '', mailSettings = {} }: TypeParams) => {\n    if ([SENT, ALL_SENT, DRAFTS, ALL_DRAFTS, ALL_MAIL].includes(labelID as MAILBOX_LABEL_IDS)) {\n        return ELEMENT_TYPES.MESSAGE;\n    }\n\n    const { ViewMode = VIEW_MODE.GROUP } = mailSettings;\n    return ViewMode === VIEW_MODE.GROUP ? ELEMENT_TYPES.CONVERSATION : ELEMENT_TYPES.MESSAGE;\n};\n\nexport const isConversation = (element: Element): boolean => !(element as Message).conversationID;\nexport const isMessage = (element: Element): boolean => !isConversation(element);\n\nexport const getDate = ({ Time = 0, ContextTime = 0 }: Element = {}) => new Date((ContextTime || Time) * 1000);\n\n/**\n * Get readable time to display from message / conversation\n * @param {Integer} element.Time\n * @return {String} Jan 17, 2016\n */\nexport const getReadableTime = ({ Time = 0, ContextTime = 0 }: Element = {}) => {\n    const date = new Date((ContextTime || Time) * 1000);\n    const now = new Date();\n    return formatRelative(date, now);\n};\n\nexport const getReadableFullTime = ({ Time = 0, ContextTime = 0 }: Element = {}) => {\n    const date = new Date((ContextTime || Time) * 1000);\n    return format(date, 'Ppp');\n};\n\nexport const isUnread = (element: Element) => {\n    if ('NumUnread' in element) {\n        return element.NumUnread !== 0;\n    }\n    if ('Unread' in element) {\n        return element.Unread !== 0;\n    }\n    return false;\n};\n\nexport const getLabel = ({ Labels = [] }: Element, labelID: string) => Labels.find(({ ID = '' }) => ID === labelID);\n\nexport const hasLabel = (element: Element, labelID: string) => {\n    const labelIDs = element.Labels ? element.Labels.map(({ ID }) => ID || '') : element.LabelIDs || [];\n    return labelIDs.some((ID) => labelID === ID);\n};\n\nexport const getTime = (element: Element, labelID: string) =>\n    element.ContextTime || (getLabel(element, labelID) || {}).ContextTime || 0;\n\nexport const getSize = ({ Size = 0 }: Element) => Size;\n\nexport const sort = (elements: Element[], sort: Sort, labelID: string) => {\n    const getValue = {\n        Time: getTime,\n        Size: getSize\n    }[sort.sort];\n    const compare = (a: number, b: number) => (sort.desc ? b - a : a - b);\n    return elements.sort((e1, e2) => compare(getValue(e1, labelID), getValue(e2, labelID)));\n};\n","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    NavMenu,\n    MainLogo,\n    Loader,\n    useMailSettings,\n    useLabels,\n    useConversationCounts,\n    useMessageCounts,\n    PrimaryButton\n} from 'react-components';\nimport { SHOW_MOVED, LABEL_EXCLUSIVE, MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\nimport { redirectTo } from 'proton-shared/lib/helpers/browser';\nimport { toMap } from 'proton-shared/lib/helpers/object';\nimport { c } from 'ttag';\n\nimport LocationAside from './LocationAside';\nimport RefreshButton from './RefreshButton';\nimport { LABEL_IDS_TO_HUMAN, ELEMENT_TYPES } from '../../constants';\nimport { getCurrentType } from '../../helpers/elements';\n\nconst PrivateSidebar = ({ expanded = false, labelID: currentLabelID }) => {\n    const [conversationCounts, loadingConversationCounts] = useConversationCounts();\n    const [messageCounts, loadingMessageCounts] = useMessageCounts();\n    const [mailSettings, loadingMailSettings] = useMailSettings();\n    const [labels, loadingLabels] = useLabels();\n    const { ShowMoved } = mailSettings || {};\n    const type = getCurrentType({ mailSettings, labelID: currentLabelID });\n\n    const unreadMap = useMemo(() => {\n        const counters = type === ELEMENT_TYPES.CONVERSATION ? conversationCounts : messageCounts;\n\n        if (!Array.isArray(counters)) {\n            return {};\n        }\n\n        return toMap(counters, 'LabelID');\n    }, [conversationCounts, messageCounts]);\n\n    if (loadingMailSettings || loadingLabels || loadingConversationCounts || loadingMessageCounts) {\n        return <Loader />;\n    }\n\n    const getAside = (labelID) => {\n        return (\n            <LocationAside\n                unread={unreadMap[labelID].Unread}\n                action={labelID === currentLabelID ? <RefreshButton /> : null}\n            />\n        );\n    };\n\n    const list = [\n        {\n            icon: 'inbox',\n            text: c('Link').t`Inbox`,\n            aside: getAside(MAILBOX_LABEL_IDS.INBOX),\n            link: `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.INBOX]}`\n        },\n        {\n            icon: 'drafts',\n            text: c('Link').t`Drafts`,\n            aside: getAside(ShowMoved & SHOW_MOVED.DRAFTS ? MAILBOX_LABEL_IDS.ALL_DRAFTS : MAILBOX_LABEL_IDS.DRAFTS),\n            link:\n                ShowMoved & SHOW_MOVED.DRAFTS\n                    ? `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.ALL_DRAFTS]}`\n                    : `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.DRAFTS]}`\n        },\n        {\n            icon: 'sent',\n            text: c('Link').t`Sent`,\n            aside: getAside(ShowMoved & SHOW_MOVED.SENT ? MAILBOX_LABEL_IDS.ALL_SENT : MAILBOX_LABEL_IDS.SENT),\n            link:\n                ShowMoved & SHOW_MOVED.SENT\n                    ? `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.ALL_SENT]}`\n                    : `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.SENT]}`\n        },\n        {\n            icon: 'star',\n            text: c('Link').t`Starred`,\n            aside: getAside(MAILBOX_LABEL_IDS.STARRED),\n            link: `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.STARRED]}`\n        },\n        {\n            icon: 'archive',\n            text: c('Link').t`Archive`,\n            aside: getAside(MAILBOX_LABEL_IDS.ARCHIVE),\n            link: `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.ARCHIVE]}`\n        },\n        {\n            icon: 'spam',\n            text: c('Link').t`Spam`,\n            aside: getAside(MAILBOX_LABEL_IDS.SPAM),\n            link: `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.SPAM]}`\n        },\n        {\n            icon: 'trash',\n            text: c('Link').t`Trash`,\n            aside: getAside(MAILBOX_LABEL_IDS.TRASH),\n            link: `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.TRASH]}`\n        },\n        {\n            icon: 'all-emails',\n            text: c('Link').t`All mail`,\n            aside: getAside(MAILBOX_LABEL_IDS.ALL_MAIL),\n            link: `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.ALL_MAIL]}`\n        },\n        {\n            icon: 'folder-label',\n            text: c('Link').t`Folders/labels`,\n            className: 'alignleft',\n            type: 'button',\n            onClick() {\n                redirectTo('/settings/labels');\n            }\n        },\n        ...labels.map(({ ID, Name, Exclusive, Color }) => ({\n            icon: Exclusive === LABEL_EXCLUSIVE.LABEL ? 'label' : 'folder',\n            text: Name,\n            aside: getAside(ID),\n            link: `/${ID}`,\n            color: Color\n        }))\n    ];\n\n    return (\n        <div className=\"sidebar flex flex-column noprint\" data-expanded={expanded}>\n            <div className=\"nodesktop notablet\">\n                <MainLogo url=\"/inbox\" />\n            </div>\n            <div className=\"pl1 pr1 mb1\">\n                <PrimaryButton className=\"w100 bold\">{c('Action').t`Compose`}</PrimaryButton>\n            </div>\n            <nav className=\"navigation mw100 flex-item-fluid scroll-if-needed\">\n                <NavMenu list={list} className=\"mt0\" />\n            </nav>\n        </div>\n    );\n};\n\nPrivateSidebar.propTypes = {\n    labelID: PropTypes.string.isRequired,\n    expanded: PropTypes.bool\n};\n\nexport default PrivateSidebar;\n","import React, { useRef, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { c } from 'ttag';\nimport { Route } from 'react-router-dom';\nimport { AppsSidebar, StorageSpaceStatus, MainAreaContext, Href } from 'react-components';\nimport { normalize } from 'proton-shared/lib/helpers/string';\n\nimport PrivateHeader from '../header/PrivateHeader';\nimport PrivateSidebar from '../sidebar/PrivateSidebar';\n\nconst PrivateLayout = ({ children, location, history, labelID }) => {\n    const mainAreaRef = useRef();\n    const [expanded, setExpand] = useState(false);\n\n    const handleSearch = (keyword) => {\n        console.log(normalize(keyword));\n    };\n\n    useEffect(() => {\n        setExpand(false);\n    }, [location.pathname]);\n\n    return (\n        <div className=\"flex flex-nowrap no-scroll\">\n            <AppsSidebar\n                items={[\n                    <StorageSpaceStatus key=\"storage\">\n                        <Href\n                            url=\"/settings/subscription\"\n                            target=\"_self\"\n                            className=\"pm-button pm-button--primary pm-button--small\"\n                        >\n                            {c('Action').t`Upgrade`}\n                        </Href>\n                    </StorageSpaceStatus>\n                ]}\n            />\n            <div className=\"content flex-item-fluid reset4print\">\n                <PrivateHeader\n                    location={location}\n                    history={history}\n                    expanded={expanded}\n                    onToggleExpand={() => setExpand(!expanded)}\n                    onSearch={handleSearch}\n                />\n                <div className=\"flex flex-nowrap\">\n                    <Route path=\"/:path\" render={() => <PrivateSidebar labelID={labelID} expanded={expanded} />} />\n                    <div className=\"main flex-item-fluid scroll-smooth-touch\" ref={mainAreaRef}>\n                        <div className=\"flex-item-fluid\">\n                            <MainAreaContext.Provider value={mainAreaRef}>{children}</MainAreaContext.Provider>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nPrivateLayout.propTypes = {\n    children: PropTypes.node.isRequired,\n    location: PropTypes.object.isRequired,\n    history: PropTypes.object.isRequired,\n    labelID: PropTypes.string.isRequired\n};\n\nexport default PrivateLayout;\n","import { LABEL_IDS_TO_HUMAN, LABEL_IDS_TO_I18N } from '../constants';\nimport { MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\nimport { Label } from '../models/label';\nimport { toMap } from 'proton-shared/lib/helpers/object';\n\nexport const getHumanLabelID = (labelID: string) => LABEL_IDS_TO_HUMAN[labelID as MAILBOX_LABEL_IDS] || labelID;\nexport const getI18nLabelID = (labelID: string) => LABEL_IDS_TO_I18N[labelID as MAILBOX_LABEL_IDS] || labelID;\n\nexport const getLabelName = (labelID: string, labels: Label[]): string => {\n    if (labelID in LABEL_IDS_TO_HUMAN) {\n        return getI18nLabelID(labelID);\n    }\n\n    const labelsMap: { [key: string]: Label } = toMap(labels) as any;\n    if (labelID in labelsMap) {\n        return labelsMap[labelID].Name || labelID;\n    }\n\n    return labelID;\n};\n","import { VIEW_LAYOUT, VIEW_MODE } from 'proton-shared/lib/constants';\n\ninterface MailSettings {\n    ViewLayout?: number;\n    ViewMode?: number;\n}\n\nexport const isColumnMode = ({ ViewLayout = VIEW_LAYOUT.COLUMN }: MailSettings = {}) =>\n    ViewLayout === VIEW_LAYOUT.COLUMN;\nexport const isConversationMode = ({ ViewMode = VIEW_MODE.GROUP }: MailSettings = {}) => ViewMode === VIEW_MODE.GROUP;\n","import { useState, useEffect, useMemo } from 'react';\nimport { useApi, useEventManager } from 'react-components';\nimport { queryConversations, getConversation } from 'proton-shared/lib/api/conversations';\nimport { queryMessageMetadata, getMessage } from 'proton-shared/lib/api/messages';\nimport { EVENT_ACTIONS } from 'proton-shared/lib/constants';\nimport { Conversation } from '../models/conversation';\nimport { toMap } from 'proton-shared/lib/helpers/object';\nimport { sort as sortElements, hasLabel } from '../helpers/elements';\nimport { Message } from '../models/message';\nimport { Element } from '../models/element';\nimport { Page, Filter, Sort } from '../models/tools';\n\ninterface Options {\n    conversationMode: boolean;\n    labelID: string;\n    page: Page;\n    sort: Sort;\n    filter: Filter;\n}\n\ninterface Cache {\n    total: number;\n    pages: number[];\n    elements: { [ID: string]: Element };\n}\n\ninterface Event {\n    Conversations?: ConversationEvent[];\n    Messages?: MessageEvent[];\n}\n\ninterface ConversationEvent {\n    ID: string;\n    Conversation: Conversation;\n    Action: EVENT_ACTIONS;\n}\n\ninterface MessageEvent {\n    ID: string;\n    Message: Message;\n    Action: EVENT_ACTIONS;\n}\n\ntype ElementEvent = ConversationEvent | MessageEvent;\n\nconst emptyCache = (): Cache => ({ elements: {}, pages: [], total: 0 });\n\nexport const useElements = ({\n    conversationMode,\n    labelID,\n    page,\n    sort,\n    filter\n}: Options): [Conversation[], boolean, number] => {\n    const api = useApi();\n    const { subscribe } = useEventManager();\n    const [loading, setLoading] = useState(false);\n    const [localCache, setLocalCache] = useState<Cache>(emptyCache());\n\n    const isConsecutive = (newPage: number) =>\n        localCache.pages.some((page) => page === newPage || page === newPage - 1 || page === newPage + 1);\n\n    // Prevent updating the state when the cache is already empty\n    const resetCache = () => {\n        if (localCache.pages.length > 0 || Object.values(localCache.elements).length > 0) {\n            setLocalCache(emptyCache());\n        }\n    };\n\n    const queryElement = async (elementID: string): Promise<Element> => {\n        const query = conversationMode ? getConversation : getMessage;\n        const result = await api(query(elementID));\n        return conversationMode ? result.Conversation : result.Message;\n    };\n\n    const queryElements = async (): Promise<{ Total: number; Elements: Element[] }> => {\n        const query = conversationMode ? queryConversations : queryMessageMetadata;\n        const result = await api(\n            query({\n                Page: page.page,\n                PageSize: page.size,\n                Limit: page.limit,\n                LabelID: labelID,\n                Sort: sort.sort,\n                Desc: sort.desc ? 1 : 0,\n                // Begin,\n                // End,\n                // BeginID,\n                // EndID,\n                // Keyword,\n                // To,\n                // From,\n                // Subject,\n                // Attachments,\n                // Starred,\n                Unread: filter.Unread\n                // AddressID,\n                // ID,\n                // AutoWildcard\n            } as any)\n        );\n        return {\n            Total: result.Total,\n            Elements: conversationMode ? result.Conversations : result.Messages\n        };\n    };\n\n    // Listen to event manager and update de cache\n    useEffect(\n        () => {\n            return subscribe(async ({ Conversations = [], Messages = [] }: Event) => {\n                const Elements: ElementEvent[] = conversationMode ? Conversations : Messages;\n\n                console.log('event', Elements);\n\n                const { toDelete, toUpdate, toCreate } = Elements.reduce(\n                    (acc, event) => {\n                        const { ID, Action } = event;\n                        const Element = conversationMode\n                            ? (event as ConversationEvent).Conversation\n                            : (event as MessageEvent).Message;\n                        if (Action === EVENT_ACTIONS.DELETE) {\n                            acc.toDelete.push(ID);\n                        }\n                        if (Action === EVENT_ACTIONS.UPDATE_FLAGS) {\n                            acc.toUpdate.push({ ID, ...Element });\n                        }\n                        if (Action === EVENT_ACTIONS.CREATE) {\n                            acc.toCreate.push(Element);\n                        }\n                        return acc;\n                    },\n                    { toDelete: [] as string[], toUpdate: [] as Element[], toCreate: [] as Element[] }\n                );\n\n                const toUpdateCompleted = await Promise.all(\n                    toUpdate.map(async (conversation) => {\n                        const elementID = conversation.ID || '';\n                        const existingConversation = localCache.elements[elementID];\n\n                        return existingConversation\n                            ? { ...existingConversation, ...conversation }\n                            : queryElement(elementID);\n                    })\n                );\n\n                setLocalCache((localCache) => {\n                    const newReplacements: { [ID: string]: Element } = {};\n\n                    [...toCreate, ...toUpdateCompleted].forEach((element) => {\n                        newReplacements[element.ID || ''] = element;\n                    });\n                    const newElements = {\n                        ...localCache.elements,\n                        ...newReplacements\n                    };\n                    toDelete.forEach((elementID) => {\n                        delete newElements[elementID];\n                    });\n\n                    return {\n                        ...localCache,\n                        elements: newElements\n                    };\n                });\n            });\n        },\n        // Having the cache in dependency will subscribe / unsubscribe to the eventmanager many times\n        // But it's mandatory for the function to have the reference of the current localCache\n        [localCache]\n    );\n\n    // Reset local cache when needed\n    useEffect(() => {\n        resetCache();\n    }, [labelID, page.size, sort, filter]);\n    useEffect(() => {\n        if (!isConsecutive(page.page)) {\n            resetCache();\n        }\n    }, [page.page]);\n\n    // Compute the conversations list from the cache\n    const elements = useMemo(() => {\n        const minPage = localCache.pages.reduce((acc, page) => (page < acc ? page : acc), localCache.pages[0]);\n        const startIndex = (page.page - minPage) * page.size;\n        const endIndex = startIndex + page.size;\n        const elements = Object.values(localCache.elements).filter((element) => hasLabel(element, labelID));\n        return sortElements(elements, sort, labelID).slice(startIndex, endIndex);\n    }, [localCache, labelID, page.page, page.size]);\n\n    const total = useMemo(() => localCache.total, [localCache.total]);\n\n    // Request data when not in the cache\n    useEffect(() => {\n        // No second request if already one underway. TODO: What if parameters has changed?\n        // Send request if page not in cache\n        const shouldSendRequest = () => {\n            // TODO: Check for page size BUT it's complicated\n            // - check against page size\n            // - check against total responses\n            // - check against last page size\n            // WARNING: a problem in the check could trigger infinite requests\n            return !loading && !localCache.pages.includes(page.page);\n        };\n\n        const load = async () => {\n            setLoading(true);\n            try {\n                const { Total, Elements } = await queryElements();\n                setLocalCache((localCache) => {\n                    return {\n                        total: Total,\n                        pages: [...localCache.pages, page.page],\n                        elements: {\n                            ...localCache.elements,\n                            ...(toMap(Elements, 'ID') as { [ID: string]: Element })\n                        }\n                    };\n                });\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        shouldSendRequest() && load();\n\n        // If labelID changes, the cache will be reseted\n    }, [localCache, page.page]);\n\n    return [elements, loading, total];\n};\n","import { Location } from 'history';\n\nexport const getSearchParams = (location: Location): { [key: string]: string } => {\n    const params = new URLSearchParams(location.search);\n\n    const result: { [key: string]: string } = {};\n\n    params.forEach((value, key) => {\n        result[key] = value;\n    });\n\n    return result;\n};\n\nexport const changeSearchParams = (location: Location, newParams: { [key: string]: string | undefined }) => {\n    const params = new URLSearchParams(location.search);\n\n    for (const key in newParams) {\n        if (newParams[key] === undefined) {\n            params.delete(key);\n        } else {\n            params.set(key, newParams[key] as string);\n        }\n    }\n\n    const queryString = params.toString();\n    const urlFragment = (queryString === '' ? '' : '?') + queryString;\n\n    return location.pathname + urlFragment;\n};\n","import { Sort, Filter } from '../models/tools';\nimport { getSearchParams, changeSearchParams } from './url';\nimport { Location } from 'history';\nimport { getHumanLabelID } from './labels';\n\nexport const setPathInUrl = (location: Location, labelID: string, elementID?: string): Location => {\n    const urlFragment = elementID === undefined ? '' : `/${elementID}`;\n    return {\n        ...location,\n        pathname: `/${getHumanLabelID(labelID)}${urlFragment}`\n    };\n};\n\nconst stringToPage = (string: string | undefined): number => {\n    if (string === undefined) {\n        return 0;\n    }\n    const pageNumber = parseInt(string, 10);\n    if (!isNaN(pageNumber)) {\n        return pageNumber - 1;\n    }\n    return 0;\n};\n\nconst stringToSort = (string: string | undefined): Sort => {\n    switch (string) {\n        case '-size':\n            return { sort: 'Size', desc: true };\n        case 'size':\n            return { sort: 'Size', desc: false };\n        case 'date':\n            return { sort: 'Time', desc: false };\n        default:\n            return { sort: 'Time', desc: true };\n    }\n};\n\nconst sortToString = (sort: Sort): string | undefined =>\n    sort.sort === 'Time' ? (sort.desc ? undefined : 'date') : sort.desc ? '-size' : 'size';\n\nconst stringToFilter = (string: string | undefined): Filter => {\n    switch (string) {\n        case 'read':\n            return { Unread: 0 };\n        case 'unread':\n            return { Unread: 1 };\n        default:\n            return {};\n    }\n};\n\nconst filterToString = (filter: Filter): string | undefined =>\n    filter.Unread === undefined ? undefined : filter.Unread === 0 ? 'read' : 'unread';\n\nexport const pageFromUrl = (location: Location) => stringToPage(getSearchParams(location).page);\n\nexport const sortFromUrl = (location: Location) => stringToSort(getSearchParams(location).sort);\n\nexport const filterFromUrl = (location: Location) => stringToFilter(getSearchParams(location).filter);\n\nexport const setPageInUrl = (location: Location, page: number) =>\n    changeSearchParams(location, { page: page === 0 ? undefined : String(page + 1) });\n\nexport const setSortInUrl = (location: Location, sort: Sort) =>\n    changeSearchParams(location, { sort: sortToString(sort) });\n\nexport const setFilterInUrl = (location: Location, filter: Filter) =>\n    changeSearchParams(location, { filter: filterToString(filter) });\n","import React from 'react';\n\nconst ToolbarSeparator = () => <span className=\"toolbar-separator\" />;\n\nexport default ToolbarSeparator;\n","import React, { ReactNode } from 'react';\nimport { classnames } from 'react-components';\n\ninterface Props {\n    disabled?: boolean;\n    loading?: boolean;\n    children: ReactNode;\n    className?: string;\n    title?: string;\n    [rest: string]: any;\n}\n\nconst ToolbarButton = ({ children, loading = false, disabled = false, className = '', ...rest }: Props) => {\n    return (\n        <button\n            type=\"button\"\n            disabled={disabled || loading}\n            className={classnames(['toolbar-button', className])}\n            {...rest}\n        >\n            {children}\n        </button>\n    );\n};\n\nexport default ToolbarButton;\n","import React from 'react';\nimport { MESSAGE_BUTTONS } from 'proton-shared/lib/constants';\nimport { Icon, useApi, useEventManager, useLoading } from 'react-components';\nimport { markMessageAsRead, markMessageAsUnread } from 'proton-shared/lib/api/messages';\nimport { markConversationsAsRead, markConversationsAsUnread } from 'proton-shared/lib/api/conversations';\nimport { c } from 'ttag';\n\nimport ToolbarButton from './ToolbarButton';\nimport { getCurrentType } from '../../helpers/elements';\nimport { ELEMENT_TYPES } from '../../constants';\n\nconst UNREAD = 0;\nconst READ = 1;\n\ninterface Props {\n    mailSettings: any;\n    selectedIDs: string[];\n    labelID: string;\n}\n\nconst ReadUnreadButtons = ({ mailSettings, labelID, selectedIDs = [] }: Props) => {\n    const api = useApi();\n    const { call } = useEventManager();\n    const { MessageButtons = MESSAGE_BUTTONS.READ_UNREAD } = mailSettings;\n    const type = getCurrentType({ mailSettings, labelID });\n    const [loading, withLoading] = useLoading();\n\n    const markAs = async (status = UNREAD) => {\n        const isUnread = status === UNREAD;\n        const action =\n            type === ELEMENT_TYPES.CONVERSATION\n                ? isUnread\n                    ? markConversationsAsUnread\n                    : markConversationsAsRead\n                : isUnread\n                ? markMessageAsUnread\n                : markMessageAsRead;\n        await api(action(selectedIDs));\n        await call();\n    };\n\n    const buttons = [\n        <ToolbarButton\n            key=\"read\"\n            title={c('Action').t`Mark as read`}\n            loading={loading}\n            disabled={!selectedIDs.length}\n            onClick={() => withLoading(markAs(READ))}\n        >\n            <Icon className=\"toolbar-icon mauto\" name=\"read\" />\n        </ToolbarButton>,\n        <ToolbarButton\n            key=\"unread\"\n            title={c('Action').t`Mark as unread`}\n            loading={loading}\n            disabled={!selectedIDs.length}\n            onClick={() => withLoading(markAs(UNREAD))}\n        >\n            <Icon className=\"toolbar-icon mauto\" name=\"unread\" />\n        </ToolbarButton>\n    ];\n\n    if (MessageButtons === MESSAGE_BUTTONS.UNREAD_READ) {\n        buttons.reverse();\n    }\n\n    // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/20356\n    return <>{buttons}</>;\n};\n\nexport default ReadUnreadButtons;\n","import React, { ReactNode, useState } from 'react';\nimport { classnames, usePopperAnchor, DropdownButton, Dropdown, generateUID } from 'react-components';\n\ninterface Props {\n    autoClose?: boolean;\n    title?: string;\n    className?: string;\n    content?: ReactNode;\n    children: ({ onClose }: { onClose: () => void }) => ReactNode;\n    size?: string;\n    [rest: string]: any;\n}\n\nconst ToolbarDropdown = ({\n    title,\n    content,\n    className,\n    children,\n    autoClose = true,\n    size = 'normal',\n    ...rest\n}: Props) => {\n    const [uid] = useState(generateUID('dropdown'));\n\n    const { anchorRef, isOpen, toggle, close } = usePopperAnchor();\n\n    return (\n        <>\n            <DropdownButton\n                title={title}\n                buttonRef={anchorRef}\n                isOpen={isOpen}\n                onClick={toggle}\n                hasCaret={true}\n                caretClassName=\"toolbar-icon\"\n                className={classnames(['flex-item-noshrink toolbar-button toolbar-button--dropdown', className])}\n                {...rest}\n            >\n                {content}\n            </DropdownButton>\n            <Dropdown id={uid} size={size} autoClose={autoClose} isOpen={isOpen} anchorRef={anchorRef} onClose={close}>\n                {children({ onClose: close })}\n            </Dropdown>\n        </>\n    );\n};\n\nexport default ToolbarDropdown;\n","import React from 'react';\nimport { Icon, DropdownMenu, DropdownMenuButton, useApi, useEventManager, useLoading } from 'react-components';\nimport { VIEW_LAYOUT } from 'proton-shared/lib/constants';\nimport { updateViewLayout } from 'proton-shared/lib/api/mailSettings';\nimport { c } from 'ttag';\n\nimport ToolbarDropdown from './ToolbarDropdown';\n\ninterface Props {\n    mailSettings: any;\n}\n\nconst LayoutDropdown = ({ mailSettings = {} }: Props) => {\n    const { ViewLayout = VIEW_LAYOUT.COLUMN } = mailSettings;\n\n    const api = useApi();\n    const { call } = useEventManager();\n    const [loading, withLoading] = useLoading();\n    const currentLayoutIcon = ViewLayout === VIEW_LAYOUT.COLUMN ? 'layout-columns' : 'layout-rows';\n\n    const updateLayout = async (viewLayout: number) => {\n        await api(updateViewLayout(viewLayout));\n        await call();\n    };\n\n    return (\n        <ToolbarDropdown\n            title={c('Action').t`Change layout`}\n            content={<Icon className=\"toolbar-icon\" name={currentLayoutIcon} />}\n        >\n            {() => (\n                <DropdownMenu>\n                    <DropdownMenuButton\n                        disabled={ViewLayout === VIEW_LAYOUT.COLUMN}\n                        loading={loading}\n                        className=\"alignleft\"\n                        onClick={() => withLoading(updateLayout(VIEW_LAYOUT.COLUMN))}\n                    >\n                        <Icon name=\"layout-columns\" className=\"mr0-5\" />\n                        {c('Action').t`Column layout`}\n                    </DropdownMenuButton>\n                    <DropdownMenuButton\n                        disabled={ViewLayout === VIEW_LAYOUT.ROW}\n                        loading={loading}\n                        className=\"alignleft\"\n                        onClick={() => withLoading(updateLayout(VIEW_LAYOUT.ROW))}\n                    >\n                        <Icon name=\"layout-rows\" className=\"mr0-5\" />\n                        {c('Action').t`Row layout`}\n                    </DropdownMenuButton>\n                </DropdownMenu>\n            )}\n        </ToolbarDropdown>\n    );\n};\n\nexport default LayoutDropdown;\n","import React from 'react';\nimport { Icon, useLoading, useNotifications, useEventManager, useApi } from 'react-components';\nimport { MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\nimport { labelMessages } from 'proton-shared/lib/api/messages';\nimport { labelConversations } from 'proton-shared/lib/api/conversations';\nimport { c } from 'ttag';\n\nimport ToolbarButton from './ToolbarButton';\nimport { getCurrentType } from '../../helpers/elements';\nimport { ELEMENT_TYPES } from '../../constants';\n\nconst { TRASH, SPAM, DRAFTS, ARCHIVE, SENT, INBOX, ALL_DRAFTS, ALL_SENT } = MAILBOX_LABEL_IDS;\n\ninterface Props {\n    labelID: string;\n    mailSettings: any;\n    selectedIDs: string[];\n}\n\nconst MoveButtons = ({ labelID = '', mailSettings = {}, selectedIDs = [] }: Props) => {\n    const { createNotification } = useNotifications();\n    const { call } = useEventManager();\n    const api = useApi();\n    const [loading, withLoading] = useLoading();\n    const type = getCurrentType({ mailSettings, labelID });\n\n    const handleMove = async (LabelID: string) => {\n        const action = type === ELEMENT_TYPES.CONVERSATION ? labelConversations : labelMessages;\n        await api(action({ LabelID, IDs: selectedIDs }));\n        await call();\n        createNotification({ text: c('Success').t`Elements moved` });\n    };\n\n    const displayTrash = ![DRAFTS, ALL_DRAFTS, TRASH].includes(labelID as MAILBOX_LABEL_IDS);\n    const displayInbox = ![SENT, ALL_SENT, DRAFTS, ALL_DRAFTS].includes(labelID as MAILBOX_LABEL_IDS);\n    const displayArchive = ![DRAFTS, ALL_DRAFTS, ARCHIVE].includes(labelID as MAILBOX_LABEL_IDS);\n    const displaySpam = ![SENT, ALL_SENT, SPAM].includes(labelID as MAILBOX_LABEL_IDS);\n\n    return (\n        <>\n            {displayTrash ? (\n                <ToolbarButton\n                    loading={loading}\n                    title={c('Action').t`Move to trash`}\n                    onClick={() => withLoading(handleMove(TRASH))}\n                >\n                    <Icon className=\"toolbar-icon mauto\" name=\"trash\" />\n                </ToolbarButton>\n            ) : null}\n            {displayInbox ? (\n                <ToolbarButton\n                    loading={loading}\n                    title={c('Action').t`Move to inbox`}\n                    onClick={() => withLoading(handleMove(INBOX))}\n                >\n                    <Icon className=\"toolbar-icon mauto\" name=\"inbox\" />\n                </ToolbarButton>\n            ) : null}\n            {displayArchive ? (\n                <ToolbarButton\n                    loading={loading}\n                    title={c('Action').t`Move to archive`}\n                    onClick={() => withLoading(handleMove(ARCHIVE))}\n                >\n                    <Icon className=\"toolbar-icon mauto\" name=\"archive\" />\n                </ToolbarButton>\n            ) : null}\n            {displaySpam ? (\n                <ToolbarButton\n                    loading={loading}\n                    title={c('Action').t`Move to spam`}\n                    onClick={() => withLoading(handleMove(SPAM))}\n                >\n                    <Icon className=\"toolbar-icon mauto\" name=\"spam\" />\n                </ToolbarButton>\n            ) : null}\n        </>\n    );\n};\n\nexport default MoveButtons;\n","import React from 'react';\nimport {\n    Icon,\n    useLoading,\n    useNotifications,\n    useEventManager,\n    useApi,\n    ConfirmModal,\n    ErrorButton,\n    useModals,\n    Alert\n} from 'react-components';\nimport { MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\nimport { deleteMessages, emptyLabel } from 'proton-shared/lib/api/messages';\nimport { deleteConversations } from 'proton-shared/lib/api/conversations';\nimport { c, msgid } from 'ttag';\n\nimport ToolbarButton from './ToolbarButton';\nimport { getCurrentType } from '../../helpers/elements';\nimport { ELEMENT_TYPES } from '../../constants';\n\nconst { TRASH, SPAM, DRAFTS, ALL_DRAFTS, ALL_MAIL, INBOX, SENT, ALL_SENT, ARCHIVE } = MAILBOX_LABEL_IDS;\n\ninterface Props {\n    labelID: string;\n    mailSettings: any;\n    selectedIDs: string[];\n}\n\nconst DeleteButton = ({ labelID = '', mailSettings = {}, selectedIDs = [] }: Props) => {\n    const { createNotification } = useNotifications();\n    const { createModal } = useModals();\n    const { call } = useEventManager();\n    const api = useApi();\n    const [loading, withLoading] = useLoading();\n    const displayDelete = [TRASH, SPAM, DRAFTS, ALL_DRAFTS, SENT, ALL_SENT].includes(labelID as MAILBOX_LABEL_IDS);\n    const displayEmpty = ![INBOX, SENT, ALL_SENT, ARCHIVE, ALL_MAIL].includes(labelID as MAILBOX_LABEL_IDS);\n    const type = getCurrentType({ mailSettings, labelID });\n\n    const handleDelete = async () => {\n        await new Promise((resolve, reject) => {\n            createModal(\n                <ConfirmModal\n                    title={c('Title').ngettext(msgid`Delete email`, `Delete emails`, selectedIDs.length)}\n                    confirm={(<ErrorButton type=\"submit\" icon={null}>{c('Action').t`Delete`}</ErrorButton>) as any}\n                    onConfirm={resolve}\n                    onClose={reject}\n                >\n                    <Alert type=\"warning\">\n                        {c('Info').ngettext(\n                            msgid`This action will permanently delete the selected email. Are you sure you want to delete this email?`,\n                            `This action will permanently delete the selected emails. Are you sure you want to delete these emails?`,\n                            selectedIDs.length\n                        )}\n                    </Alert>\n                </ConfirmModal>\n            );\n        });\n        const action = type === ELEMENT_TYPES.CONVERSATION ? deleteConversations : deleteMessages;\n        await api(action(selectedIDs));\n        await call();\n        createNotification({ text: c('Success').t`Elements deleted` });\n    };\n\n    const handleEmpty = async () => {\n        await new Promise((resolve, reject) => {\n            createModal(\n                <ConfirmModal\n                    title={c('Title').t`Empty folder`}\n                    confirm={(<ErrorButton type=\"submit\" icon={null}>{c('Action').t`Empty`}</ErrorButton>) as any}\n                    onConfirm={resolve}\n                    onClose={reject}\n                >\n                    <Alert type=\"warning\">{c('Info')\n                        .t`This action will permanently delete your emails. Are you sure you want to empty this folder?`}</Alert>\n                </ConfirmModal>\n            );\n        });\n        c;\n        await api(emptyLabel({ LabelID: labelID, AddressID: undefined }));\n        await call();\n        createNotification({ text: c('Success').t`Folder cleared` });\n    };\n\n    return (\n        <>\n            {displayDelete ? (\n                <ToolbarButton\n                    loading={loading}\n                    title={c('Action').t`Delete`}\n                    onClick={() => withLoading(handleDelete())}\n                >\n                    <Icon className=\"toolbar-icon\" name=\"delete\" />\n                </ToolbarButton>\n            ) : null}\n            {displayEmpty ? (\n                <ToolbarButton\n                    loading={loading}\n                    title={c('Action').t`Empty folder`}\n                    onClick={() => withLoading(handleEmpty())}\n                >\n                    <Icon className=\"toolbar-icon mauto\" name=\"empty-folder\" />\n                </ToolbarButton>\n            ) : null}\n        </>\n    );\n};\n\nexport default DeleteButton;\n","import React from 'react';\nimport { DropdownMenu, DropdownMenuButton, Icon } from 'react-components';\nimport { c } from 'ttag';\n\nimport ToolbarDropdown from './ToolbarDropdown';\nimport { Sort } from '../../models/tools';\n\nconst ASC = 0;\nconst DESC = 1;\nconst TIME = 'Time';\nconst SIZE = 'Size';\n\nconst ICONS = {\n    [SIZE]: {\n        [ASC]: 'sort-small-large',\n        [DESC]: 'sort-large-small'\n    },\n    [TIME]: {\n        [ASC]: 'sort-old-new',\n        [DESC]: 'sort-new-old'\n    }\n};\n\ninterface Props {\n    loading?: boolean;\n    sort: Sort;\n    onSort: (sort: Sort) => void;\n}\n\nconst SortDropdown = ({ loading, sort: { sort, desc }, onSort }: Props) => {\n    return (\n        <ToolbarDropdown content={<Icon className=\"toolbar-icon\" name={ICONS[sort][desc ? DESC : ASC]} />}>\n            {() => (\n                <DropdownMenu>\n                    <DropdownMenuButton\n                        disabled={sort === SIZE && !desc}\n                        className=\"alignleft\"\n                        loading={loading}\n                        onClick={() => onSort({ sort: SIZE, desc: false })}\n                    >\n                        <Icon name={ICONS[SIZE][ASC]} className=\"mr0-5\" />\n                        {c('Action').t`Size: small to large`}\n                    </DropdownMenuButton>\n                    <DropdownMenuButton\n                        disabled={sort === SIZE && desc}\n                        className=\"alignleft\"\n                        loading={loading}\n                        onClick={() => onSort({ sort: SIZE, desc: true })}\n                    >\n                        <Icon name={ICONS[SIZE][DESC]} className=\"mr0-5\" />\n                        {c('Action').t`Size: large to small`}\n                    </DropdownMenuButton>\n                    <DropdownMenuButton\n                        disabled={sort === TIME && desc}\n                        className=\"alignleft\"\n                        loading={loading}\n                        onClick={() => onSort({ sort: TIME, desc: true })}\n                    >\n                        <Icon name={ICONS[TIME][DESC]} className=\"mr0-5\" />\n                        {c('Action').t`Date: new to old`}\n                    </DropdownMenuButton>\n                    <DropdownMenuButton\n                        disabled={sort === TIME && !desc}\n                        className=\"alignleft\"\n                        loading={loading}\n                        onClick={() => onSort({ sort: TIME, desc: false })}\n                    >\n                        <Icon name={ICONS[TIME][ASC]} className=\"mr0-5\" />\n                        {c('Action').t`Date: old to new`}\n                    </DropdownMenuButton>\n                </DropdownMenu>\n            )}\n        </ToolbarDropdown>\n    );\n};\n\nexport default SortDropdown;\n","import React from 'react';\nimport { DropdownMenu, DropdownMenuButton, Icon } from 'react-components';\nimport { c } from 'ttag';\n\nimport ToolbarDropdown from './ToolbarDropdown';\nimport { Filter } from '../../models/tools';\n\ninterface Props {\n    loading?: boolean;\n    filter: Filter;\n    onFilter: (filter: Filter) => void;\n}\n\nconst FilterDropdown = ({ loading, filter = {}, onFilter }: Props) => {\n    return (\n        <ToolbarDropdown content={<Icon className=\"toolbar-icon\" name=\"bullet-points\" />}>\n            {() => (\n                <DropdownMenu>\n                    <DropdownMenuButton\n                        disabled={Object.values(filter).length === 0}\n                        className=\"alignleft\"\n                        loading={loading}\n                        onClick={() => onFilter({})}\n                    >\n                        <Icon name=\"bullet-points\" className=\"mr0-5\" />\n                        {c('Action').t`Show all`}\n                    </DropdownMenuButton>\n                    <DropdownMenuButton\n                        disabled={filter.Unread === 1}\n                        className=\"alignleft\"\n                        loading={loading}\n                        onClick={() => onFilter({ Unread: 1 })}\n                    >\n                        <Icon name=\"unread\" className=\"mr0-5\" />\n                        {c('Action').t`Show unread`}\n                    </DropdownMenuButton>\n                    <DropdownMenuButton\n                        disabled={filter.Unread === 0}\n                        className=\"alignleft\"\n                        loading={loading}\n                        onClick={() => onFilter({ Unread: 0 })}\n                    >\n                        <Icon name=\"read\" className=\"mr0-5\" />\n                        {c('Action').t`Show read`}\n                    </DropdownMenuButton>\n                </DropdownMenu>\n            )}\n        </ToolbarDropdown>\n    );\n};\n\nexport default FilterDropdown;\n","import React from 'react';\nimport { Checkbox, DropdownMenu, DropdownMenuButton, Icon } from 'react-components';\nimport { c } from 'ttag';\n\nimport ToolbarDropdown from './ToolbarDropdown';\n\ninterface Props {\n    loading?: boolean;\n    disabled?: boolean;\n    checked: boolean;\n    onCheck: (checked?: boolean) => void;\n}\n\nconst SelectAll = ({ loading, disabled, checked, onCheck }: Props) => {\n    return (\n        <>\n            <Checkbox\n                className=\"flex pl1\"\n                checked={checked}\n                disabled={disabled}\n                loading={loading}\n                onChange={({ target }) => onCheck(target.checked)}\n            />\n            <ToolbarDropdown\n                disabled={disabled}\n                loading={loading}\n                title={c('Title').t`Open actions dropdown`}\n                content=\"\"\n            >\n                {() => (\n                    <DropdownMenu>\n                        <DropdownMenuButton className=\"alignleft\" onClick={() => onCheck()}>\n                            <Icon name=\"show-all-emails\" className=\"mr0-5\" />\n                            {c('Action').t`Select all`}\n                        </DropdownMenuButton>\n                        <DropdownMenuButton className=\"alignleft\" onClick={() => onCheck()}>\n                            <Icon name=\"unread\" className=\"mr0-5\" />\n                            {c('Action').t`All unread`}\n                        </DropdownMenuButton>\n                        <DropdownMenuButton className=\"alignleft\" onClick={() => onCheck()}>\n                            <Icon name=\"read\" className=\"mr0-5\" />\n                            {c('Action').t`All read`}\n                        </DropdownMenuButton>\n                        <DropdownMenuButton className=\"alignleft\" onClick={() => onCheck()}>\n                            <Icon name=\"star\" className=\"mr0-5\" />\n                            {c('Action').t`All unstarred`}\n                        </DropdownMenuButton>\n                        <DropdownMenuButton className=\"alignleft\" onClick={() => onCheck()}>\n                            <Icon name=\"starfull\" className=\"mr0-5\" />\n                            {c('Action').t`All starred`}\n                        </DropdownMenuButton>\n                    </DropdownMenu>\n                )}\n            </ToolbarDropdown>\n        </>\n    );\n};\n\nexport default SelectAll;\n","import React, { useState } from 'react';\nimport {\n    LabelModal,\n    SearchInput as UntypedSearchInput,\n    Icon,\n    useLabels,\n    useModals,\n    PrimaryButton,\n    classnames,\n    Tooltip,\n    useLoading,\n    useApi,\n    useNotifications,\n    useEventManager\n} from 'react-components';\nimport { LABEL_EXCLUSIVE, MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\nimport { c } from 'ttag';\nimport { normalize } from 'proton-shared/lib/helpers/string';\nimport { labelMessages } from 'proton-shared/lib/api/messages';\nimport { labelConversations } from 'proton-shared/lib/api/conversations';\n\nimport { ELEMENT_TYPES } from '../../constants';\nimport { Label } from '../../models/label';\n\nimport './MoveDropdown.scss';\n\nconst SearchInput = UntypedSearchInput as any;\n\nconst { INBOX, TRASH, SPAM, ARCHIVE } = MAILBOX_LABEL_IDS;\n\ninterface Props {\n    selectedIDs: string[];\n    type: string;\n    onClose: () => void;\n}\n\nconst MoveDropdown = ({ selectedIDs = [], type, onClose }: Props) => {\n    const { createNotification } = useNotifications();\n    const [loading, withLoading] = useLoading();\n    const api = useApi();\n    const { call } = useEventManager();\n    const { createModal } = useModals();\n    const [labels = []]: [Label[]] = useLabels();\n    const [search, updateSearch] = useState('');\n    const normSearch = normalize(search);\n    const folders = labels\n        .filter(({ Exclusive }) => Exclusive === LABEL_EXCLUSIVE.FOLDER)\n        .concat(\n            [\n                { ID: INBOX, Name: c('Mailbox').t`Inbox`, icon: 'inbox' },\n                { ID: ARCHIVE, Name: c('Mailbox').t`Archive`, icon: 'archive' },\n                { ID: SPAM, Name: c('Mailbox').t`Spam`, icon: 'spam' },\n                { ID: TRASH, Name: c('Mailbox').t`Trash`, icon: 'trash' }\n            ].filter(Boolean)\n        )\n        .filter(({ Name = '' }) => {\n            if (!search) {\n                return true;\n            }\n            const normName = normalize(Name);\n            return normName.includes(normSearch);\n        });\n\n    const handleMove = async (folder: Label) => {\n        const action = type === ELEMENT_TYPES.CONVERSATION ? labelConversations : labelMessages;\n        await api(action({ LabelID: folder.ID, IDs: selectedIDs }));\n        await call();\n        onClose();\n        createNotification({ text: c('Success').t`Elements moved to ${folder.Name}` });\n    };\n\n    return (\n        <div className=\"p1\">\n            <div className=\"flex flex-spacebetween flex-items-center mb1\">\n                <label htmlFor=\"filter-folders\" className=\"bold\">{c('Label').t`Move to`}</label>\n                <Tooltip title={c('Title').t`Create folder`}>\n                    <PrimaryButton\n                        className=\"pm-button--small pm-button--for-smallicon\"\n                        onClick={() => {\n                            createModal(<LabelModal type=\"folder\" label={null} />);\n                        }}\n                    >\n                        <Icon name=\"folder\" fill=\"light\" className=\"flex-item-noshrink mr0-25\" />+\n                    </PrimaryButton>\n                </Tooltip>\n            </div>\n            <div className=\"mb1\">\n                <SearchInput\n                    autoFocus={true}\n                    value={search}\n                    onChange={updateSearch}\n                    id=\"filter-folders\"\n                    placeholder={c('Placeholder').t`Filter folders`}\n                />\n            </div>\n            <div className=\"scroll-if-needed scroll-smooth-touch moveDropdown-list-container\">\n                <ul className=\"unstyled mt0 mb0\">\n                    {folders.map((folder, index) => {\n                        return (\n                            <li key={folder.ID} className={classnames([index < folders.length - 1 && 'border-bottom'])}>\n                                <button\n                                    type=\"button\"\n                                    disabled={loading}\n                                    className=\"w100 flex flex-nowrap flex-items-center pt0-5 pb0-5\"\n                                    onClick={() => withLoading(handleMove(folder))}\n                                >\n                                    <Icon name=\"folder\" color={folder.Color} className=\"flex-item-noshrink mr0-5\" />\n                                    <span className=\"ellipsis\" title={folder.Name}>\n                                        {folder.Name}\n                                    </span>\n                                </button>\n                            </li>\n                        );\n                    })}\n                </ul>\n            </div>\n        </div>\n    );\n};\n\nexport default MoveDropdown;\n","import React, { useState, ChangeEvent } from 'react';\nimport { c } from 'ttag';\nimport {\n    SearchInput as UntypedSearchInput,\n    Icon,\n    useLabels,\n    useModals,\n    PrimaryButton,\n    LabelModal,\n    classnames,\n    Tooltip,\n    useLoading,\n    useApi,\n    useNotifications,\n    Checkbox,\n    useEventManager\n} from 'react-components';\nimport { LABEL_EXCLUSIVE } from 'proton-shared/lib/constants';\nimport { labelMessages, unlabelMessages } from 'proton-shared/lib/api/messages';\nimport { labelConversations, unlabelConversations } from 'proton-shared/lib/api/conversations';\nimport { normalize } from 'proton-shared/lib/helpers/string';\n\nimport { ELEMENT_TYPES } from '../../constants';\nimport { Label } from '../../models/label';\n\nimport './LabelDropdown.scss';\n\nconst SearchInput = UntypedSearchInput as any;\n\ninterface Props {\n    selectedIDs: string[];\n    type: string;\n    onClose: () => void;\n}\n\nconst LabelDropdown = ({ selectedIDs = [], type, onClose }: Props) => {\n    const { createNotification } = useNotifications();\n    const [loading, withLoading] = useLoading();\n    const api = useApi();\n    const { call } = useEventManager();\n    const { createModal } = useModals();\n    const [labels = []]: [Label[]] = useLabels();\n    const [search, updateSearch] = useState('');\n    const [lastChecked, setLastChecked] = useState(''); // Store ID of the last label ID checked\n    const [alsoArchive, updateAlsoArchive] = useState(false);\n    const [selectedLabelIDs, updateSelectedLabelIDs] = useState<{ [labelID: string]: boolean }>({}); // TODO\n\n    const normSearch = normalize(search);\n    const list = labels\n        .filter(({ Exclusive }) => Exclusive === LABEL_EXCLUSIVE.LABEL)\n        .filter(({ Name = '' }) => {\n            if (!search) {\n                return true;\n            }\n            const normName = normalize(Name);\n            return normName.includes(normSearch);\n        });\n\n    const handleApply = async () => {\n        const labelAction = type === ELEMENT_TYPES.MESSAGE ? labelMessages : labelConversations;\n        const unlabelAction = type === ELEMENT_TYPES.MESSAGE ? unlabelMessages : unlabelConversations;\n        // TODO to improve: we call label / unlabel too much\n        const promises = list.map(({ ID: LabelID = '' }) => {\n            if (selectedLabelIDs[LabelID]) {\n                return api(labelAction({ LabelID, IDs: selectedIDs }));\n            } else {\n                return api(unlabelAction({ LabelID, IDs: selectedIDs }));\n            }\n        });\n        await Promise.all(promises);\n        await call();\n        onClose();\n        createNotification({ text: c('Success').t`Labels applied` });\n    };\n\n    const handleCheck = (labelID: string) => ({ target, nativeEvent }: ChangeEvent) => {\n        const { shiftKey } = nativeEvent as any;\n        const labelIDs = [labelID];\n\n        if (lastChecked && shiftKey) {\n            const start = list.findIndex(({ ID }) => ID === labelID);\n            const end = list.findIndex(({ ID }) => ID === lastChecked);\n            labelIDs.push(...list.slice(Math.min(start, end), Math.max(start, end) + 1).map(({ ID = '' }) => ID));\n        }\n\n        setLastChecked(labelID);\n        const update = labelIDs.reduce((acc, ID) => {\n            acc[ID] = (target as HTMLInputElement).checked;\n            return acc;\n        }, Object.create(null));\n        updateSelectedLabelIDs({ ...selectedLabelIDs, ...update });\n    };\n\n    return (\n        <div className=\"p1\">\n            <div className=\"flex flex-spacebetween flex-items-center mb1\">\n                <label htmlFor=\"filter-labels\" className=\"bold\">{c('Label').t`Label as`}</label>\n                <Tooltip title={c('Title').t`Create label`}>\n                    <PrimaryButton\n                        className=\"pm-button--small pm-button--for-smallicon\"\n                        onClick={() => {\n                            createModal(<LabelModal type=\"label\" label={null} />);\n                        }}\n                    >\n                        <Icon name=\"label\" fill=\"light\" className=\"flex-item-noshrink mr0-25\" />+\n                    </PrimaryButton>\n                </Tooltip>\n            </div>\n            <div className=\"mb1\">\n                <SearchInput\n                    autoFocus={true}\n                    value={search}\n                    onChange={updateSearch}\n                    id=\"filter-labels\"\n                    placeholder={c('Placeholder').t`Filter labels`}\n                />\n            </div>\n            <div className=\"scroll-if-needed scroll-smooth-touch mb1 labelDropdown-list-container\">\n                <ul className=\"unstyled mt0 mb0\">\n                    {list.map(({ ID = '', Name = '', Color = '' }, index) => {\n                        return (\n                            <li\n                                key={ID}\n                                className={classnames([\n                                    'w100 flex flex-nowrap flex-spacebetween flex-items-center pt0-5 pb0-5',\n                                    index < list.length - 1 && 'border-bottom'\n                                ])}\n                            >\n                                <div className=\"flex flex-nowrap flex-spacebetween flex-items-center\">\n                                    <Icon name=\"label\" color={Color} className=\"flex-item-noshrink mr0-5\" />\n                                    <label htmlFor={ID} title={Name} className=\"ellipsis\">\n                                        {Name}\n                                    </label>\n                                </div>\n                                <Checkbox\n                                    className=\"flex-item-noshrink\"\n                                    id={ID}\n                                    checked={selectedLabelIDs[ID] || false}\n                                    onChange={handleCheck(ID)}\n                                />\n                            </li>\n                        );\n                    })}\n                </ul>\n            </div>\n            <div className=\"mb1 flex flex-spacebetween\">\n                <label htmlFor=\"alsoArchive\">{c('Label').t`Also archive`}</label>\n                <Checkbox\n                    id=\"alsoArchive\"\n                    checked={alsoArchive}\n                    onChange={({ target }) => updateAlsoArchive(target.checked)}\n                />\n            </div>\n            <div>\n                <PrimaryButton className=\"w100\" loading={loading} onClick={() => withLoading(handleApply())}>\n                    {c('Action').t`Apply`}\n                </PrimaryButton>\n            </div>\n        </div>\n    );\n};\n\nexport default LabelDropdown;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon } from 'react-components';\n\nimport ToolbarButton from './ToolbarButton';\n\ninterface Props {\n    onClick: () => void;\n}\n\nconst BackButton = ({ onClick }: Props) => {\n    return (\n        <ToolbarButton onClick={onClick}>\n            <Icon className=\"toolbar-icon mauto\" name=\"arrow-left\" />\n        </ToolbarButton>\n    );\n};\n\nBackButton.propTypes = {\n    onClick: PropTypes.func.isRequired\n};\n\nexport default BackButton;\n","import React from 'react';\nimport { Icon, DropdownMenu, DropdownMenuButton } from 'react-components';\nimport { c } from 'ttag';\n\nimport ToolbarButton from './ToolbarButton';\nimport ToolbarDropdown from './ToolbarDropdown';\n\nimport './PagingControls.scss';\nimport { Page } from '../../models/tools';\n\ninterface Props {\n    loading: boolean;\n    page: Page;\n    onPage: (page: number) => void;\n}\n\nconst PagingControls = ({ loading, page, onPage }: Props) => {\n    const setPage = (pageNumber: number) => onPage(pageNumber);\n    const handleNext = () => setPage(page.page + 1);\n    const handlePrevious = () => setPage(page.page - 1);\n    const handlePage = (newPage: number) => () => setPage(newPage);\n    const pageCount = Math.floor(page.total / page.size);\n\n    return (\n        <>\n            <ToolbarButton\n                loading={loading}\n                disabled={page.page <= 0}\n                title={c('Action').t`Previous`}\n                onClick={handlePrevious}\n            >\n                <Icon className=\"toolbar-icon rotateZ-90 mauto\" name=\"caret\" />\n            </ToolbarButton>\n            <ToolbarDropdown\n                title={c('Action').t`Change layout`}\n                content={String(page.page + 1)}\n                className=\"paging-dropdown\"\n                size=\"narrow\"\n            >\n                {() => (\n                    <DropdownMenu>\n                        {[...Array(pageCount)].map((_, i) => (\n                            <DropdownMenuButton loading={loading} key={i} onClick={handlePage(i)}>\n                                {i + 1}\n                            </DropdownMenuButton>\n                        ))}\n                    </DropdownMenu>\n                )}\n            </ToolbarDropdown>\n            <ToolbarButton\n                loading={loading}\n                disabled={page.page >= pageCount}\n                title={c('Action').t`Next`}\n                onClick={handleNext}\n            >\n                <Icon className=\"toolbar-icon rotateZ-270 mauto\" name=\"caret\" />\n            </ToolbarButton>\n        </>\n    );\n};\n\nexport default PagingControls;\n","import { hasBit } from 'proton-shared/lib/helpers/bitset';\nimport { MIME_TYPES } from 'proton-shared/lib/constants';\n\nimport { MESSAGE_FLAGS, SIGNATURE_START } from '../constants';\nimport { Message } from '../models/message';\n\nconst {\n    FLAG_RECEIVED,\n    FLAG_SENT,\n    FLAG_RECEIPT_REQUEST,\n    FLAG_IMPORTED,\n    FLAG_REPLIED,\n    FLAG_REPLIEDALL,\n    FLAG_FORWARDED,\n    FLAG_INTERNAL,\n    FLAG_AUTO,\n    FLAG_E2E,\n    FLAG_SIGN,\n    FLAG_PUBLIC_KEY\n} = MESSAGE_FLAGS;\n\nconst { PLAINTEXT, MIME } = MIME_TYPES;\n\n/**\n * Check if a message has a mime type\n * @return {function({MIMEType}): boolean}\n */\nconst hasMimeType = (type: string) => ({ MIMEType }: Message = {}) => MIMEType === type;\n\n/**\n * Check if a message has a flag in the flags bitmap\n * @param {Number} flag\n * @returns {Function}\n */\nexport const hasFlag = (flag: number) => ({ Flags = 0 }: Message = {}) => hasBit(Flags, flag);\n\nexport const isRequestReadReceipt = hasFlag(FLAG_RECEIPT_REQUEST);\nexport const isImported = hasFlag(FLAG_IMPORTED);\nexport const isInternal = hasFlag(FLAG_INTERNAL);\nexport const isExternal = (message: Message) => !isInternal(message);\nexport const isAuto = hasFlag(FLAG_AUTO);\nexport const isReceived = hasFlag(FLAG_RECEIVED);\nexport const isSent = hasFlag(FLAG_SENT);\nexport const isReplied = hasFlag(FLAG_REPLIED);\nexport const isRepliedAll = hasFlag(FLAG_REPLIEDALL);\nexport const isForwarded = hasFlag(FLAG_FORWARDED);\nexport const isSentAndReceived = hasFlag(FLAG_SENT | FLAG_RECEIVED);\nexport const isDraft = (message: Message = {}) => !isSent(message) && !isReceived(message);\nexport const isE2E = hasFlag(FLAG_E2E);\nexport const isSentEncrypted = hasFlag(FLAG_E2E | FLAG_SENT);\nexport const isInternalEncrypted = hasFlag(FLAG_E2E | FLAG_INTERNAL);\nexport const isSign = hasFlag(FLAG_SIGN);\nexport const isAttachPublicKey = hasFlag(FLAG_PUBLIC_KEY);\nexport const isExternalEncrypted = (message: Message) => isE2E(message) && !isInternal(message);\nexport const isPGPEncrypted = (message: Message = {}) => isExternal(message) && isReceived(message) && isE2E(message);\nexport const inSigningPeriod = ({ Time = 0 }: Message) => Time >= SIGNATURE_START;\n\nexport const isMIME = hasMimeType(MIME);\nexport const isPGPInline = (message: Message) => isPGPEncrypted(message) && !isMIME(message);\n\n/**\n * Get sender from message\n * @param {Object} message.Sender\n * @return {String} Name || Address\n */\nexport const getSender = ({ Sender = {} }: Message = {}) => {\n    const { Name = '', Address = '' } = Sender;\n    return Name || Address;\n};\n\n/**\n * Get recipients list from message\n * @param {Array} message.TolList\n * @param {Array} message.BCCList\n * @param {Array} message.CCList\n * @return {Array} [Name || Address]\n */\nexport const getRecipients = ({ ToList = [], CCList = [], BCCList = [] }: Message = {}) => {\n    return [...ToList, ...CCList, ...BCCList].map(({ Address, Name }) => Name || Address);\n};\n\n/**\n * Extract recipients addresses from a message\n * @param {Array} message.ToList\n * @param {Array} message.CCList\n * @param {Array} message.BCCList\n * @return {Array<Object>}\n */\n// export const getRecipients = ({ ToList = [], CCList = [], BCCList = [] } = {}) => {\n//     return ToList.concat(CCList, BCCList);\n// };\n\n/**\n * Extract and normalize recipients\n * @param {Object} message\n * @return {Array<String>}\n */\n// export const normalizeRecipients = (message = {}) => {\n//     return getRecipients(message).map(({ Address }) => normalizeEmail(Address));\n// };\n\n/**\n * Decrypt simple message body with password\n * @param {String} message.Body\n * @param {String} password\n * @return {String} body\n */\n// export async function decrypt({ Body = '' } = {}, password) {\n//     const message = await getMessage(Body);\n//     const { data: body } = await decryptMessage({\n//         message,\n//         passwords: [password]\n//     });\n//     return body;\n// }\n\n/**\n * Get the label ids to add for a message that has moved.\n *\n * Types definition\n *   - 1: a draft\n * if you move it to trash and back to inbox, it will go to draft instead\n *   - 2: is sent\n *  if you move it to trash and back, it will go back to sent\n *   - 3: is inbox and sent (a message sent to yourself)\n * if you move it from trash to inbox, it will acquire both the inbox and sent labels ( 0 and 2 ).\n *\n * @param {Message} message\n * @param {String} labelID label id to which it is moved\n * @returns {Array}\n */\n// export const getLabelIDsMoved = (message, labelID) => {\n//     const toInbox = labelID === MAILBOX_IDENTIFIERS.inbox;\n\n//     if (toInbox) {\n//         // This message is a draft, if you move it to trash and back to inbox, it will go to draft instead\n//         if (message.isDraft()) {\n//             return [MAILBOX_IDENTIFIERS.allDrafts, MAILBOX_IDENTIFIERS.drafts];\n//         }\n\n//         // If you move it from trash to inbox, it will acquire both the inbox and sent labels ( 0 and 2 ).\n//         if (message.isSentAndReceived()) {\n//             return [MAILBOX_IDENTIFIERS.inbox, MAILBOX_IDENTIFIERS.allSent, MAILBOX_IDENTIFIERS.sent];\n//         }\n\n//         // This message is sent, if you move it to trash and back, it will go back to sent\n//         if (message.isSent()) {\n//             return [MAILBOX_IDENTIFIERS.allSent, MAILBOX_IDENTIFIERS.sent];\n//         }\n//     }\n\n//     return [labelID];\n// };\n\n/**\n * Get date from message\n * @param {Integer} message.Time\n * @return {Date}\n */\nexport const getDate = ({ Time = 0 }: Message = {}) => new Date(Time * 1000);\n\n/**\n * Check if these all messages shared the same sender (by email address)\n * @param {Array<message>} messages\n * @return {Boolean}\n */\n// export const sameSender = (messages = []) => {\n//     if (!messages.length) {\n//         return false;\n//     }\n\n//     const [{ Sender: firstSender } = {}] = messages;\n//     const firstAddress = normalizeEmail(firstSender.Address);\n\n//     return (\n//         messages.length ===\n//         messages.filter(({ Sender = {} }) => {\n//             return normalizeEmail(Sender.Address) === firstAddress;\n//         }).length\n//     );\n// };\n\nexport const getParsedHeaders = (message: Message, parameter: string) => {\n    const { ParsedHeaders = {} } = message;\n\n    if (parameter) {\n        return ParsedHeaders[parameter];\n    }\n\n    return ParsedHeaders;\n};\n\nexport const getListUnsubscribe = (message: Message) => {\n    return getParsedHeaders(message, 'List-Unsubscribe') || '';\n};\n\nexport const getListUnsubscribePost = (message: Message) => {\n    return getParsedHeaders(message, 'List-Unsubscribe-Post') || '';\n};\n\nexport const getAttachments = (message: Message = {}) => message.Attachments || [];\nexport const hasAttachments = (message: Message = {}) => getAttachments(message).length > 0;\nexport const attachmentsSize = (message: Message = {}) =>\n    getAttachments(message).reduce((acc, { Size = 0 } = {}) => acc + +Size, 0);\n\nexport const isPlainText = (message: Message = {}) => message.MIMEType === PLAINTEXT;\n","import React from 'react';\nimport { Icon } from 'react-components';\n\nimport ToolbarSeparator from './ToolbarSeparator';\nimport ReadUnreadButtons from './ReadUnreadButtons';\nimport ToolbarDropdown from './ToolbarDropdown';\nimport LayoutDropdown from './LayoutDropdown';\nimport MoveButtons from './MoveButtons';\nimport DeleteButton from './DeleteButton';\nimport SortDropdown from './SortDropdown';\nimport FilterDropdown from './FilterDropdown';\nimport SelectAll from './SelectAll';\nimport MoveDropdown from '../dropdown/MoveDropdown';\nimport LabelDropdown from '../dropdown/LabelDropdown';\nimport BackButton from './BackButton';\nimport PagingControls from './PagingControls';\nimport { getCurrentType } from '../../helpers/elements';\nimport { isColumnMode } from '../../helpers/mailSettings';\nimport { Page, Sort, Filter } from '../../models/tools';\n\ninterface Props {\n    loading?: boolean;\n    checkAll: boolean;\n    onCheckAll: () => void;\n    labelID: string;\n    elementID?: string;\n    selectedIDs: string[];\n    mailSettings: any;\n    page: Page;\n    onPage: (page: number) => void;\n    sort: Sort;\n    onSort: (sort: Sort) => void;\n    filter: Filter;\n    onFilter: (filter: Filter) => void;\n    onBack: () => void;\n}\n\nconst Toolbar = ({\n    labelID = '',\n    elementID,\n    checkAll,\n    onCheckAll,\n    mailSettings = {},\n    selectedIDs = [],\n    loading = false,\n    onSort,\n    sort,\n    onFilter,\n    filter,\n    onBack,\n    page,\n    onPage\n}: Props) => {\n    const type = getCurrentType({ mailSettings, labelID });\n\n    const columnMode = isColumnMode(mailSettings);\n\n    return (\n        <nav className=\"toolbar flex noprint flex-spacebetween\">\n            <div className=\"flex\">\n                {columnMode || !elementID ? (\n                    <SelectAll checked={checkAll} onCheck={onCheckAll} loading={loading} />\n                ) : (\n                    <BackButton onClick={onBack} />\n                )}\n                <ToolbarSeparator />\n                <ReadUnreadButtons labelID={labelID} mailSettings={mailSettings} selectedIDs={selectedIDs} />\n                <ToolbarSeparator />\n                <MoveButtons labelID={labelID} mailSettings={mailSettings} selectedIDs={selectedIDs} />\n                <DeleteButton labelID={labelID} mailSettings={mailSettings} selectedIDs={selectedIDs} />\n                <ToolbarSeparator />\n                <ToolbarDropdown autoClose={false} content={<Icon className=\"toolbar-icon\" name=\"folder\" />}>\n                    {({ onClose }) => <MoveDropdown selectedIDs={selectedIDs} type={type} onClose={onClose} />}\n                </ToolbarDropdown>\n                <ToolbarDropdown autoClose={false} content={<Icon className=\"toolbar-icon\" name=\"label\" />}>\n                    {({ onClose }) => <LabelDropdown selectedIDs={selectedIDs} type={type} onClose={onClose} />}\n                </ToolbarDropdown>\n            </div>\n            <div className=\"flex\">\n                <FilterDropdown loading={loading} filter={filter} onFilter={onFilter} />\n                <SortDropdown loading={loading} sort={sort} onSort={onSort} />\n                <LayoutDropdown mailSettings={mailSettings} />\n                <ToolbarSeparator />\n                <PagingControls loading={loading} page={page} onPage={onPage} />\n            </div>\n        </nav>\n    );\n};\n\nexport default Toolbar;\n","import React, { ReactElement, ChangeEvent } from 'react';\nimport { Icon, classnames } from 'react-components';\n\ninterface Props {\n    children: ReactElement | string;\n    className: string;\n    checked: boolean;\n    onChange: (event: ChangeEvent) => void;\n}\n\nconst ItemCheckbox = ({ children, className, ...rest }: Props) => {\n    return (\n        <label className={classnames(['relative', className])}>\n            <input type=\"checkbox\" className=\"item-checkbox inner-ratio-container cursor-pointer m0\" {...rest} />\n            <span className=\"item-icon flex-item-noshrink rounded50 bg-white inline-flex\">\n                <span className=\"mauto item-abbr\">{children}</span>\n                <span className=\"item-icon-fakecheck mauto\">\n                    <Icon name=\"on\" className=\"fill-white\" />\n                </span>\n            </span>\n        </label>\n    );\n};\n\nexport default ItemCheckbox;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon, useLoading, useApi, useEventManager, classnames } from 'react-components';\nimport { MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\nimport { labelMessages, unlabelMessages } from 'proton-shared/lib/api/messages';\nimport { labelConversations, unlabelConversations } from 'proton-shared/lib/api/conversations';\n\nimport { ELEMENT_TYPES } from '../../constants';\n\nconst ItemStar = ({ element = {}, type = ELEMENT_TYPES.CONVERSATION }) => {\n    const api = useApi();\n    const isConversation = type === ELEMENT_TYPES.CONVERSATION;\n    const { call } = useEventManager();\n    const [loading, withLoading] = useLoading();\n    const labelIDs = isConversation ? element.Labels.map(({ ID }) => ID) : element.LabelIDs;\n    const isStarred = labelIDs.includes(MAILBOX_LABEL_IDS.STARRED);\n    const iconName = isStarred ? 'starfull' : 'star';\n\n    const handleClick = async () => {\n        const action = isConversation\n            ? isStarred\n                ? unlabelConversations\n                : labelConversations\n            : isStarred\n            ? unlabelMessages\n            : labelMessages;\n        await api(action({ LabelID: MAILBOX_LABEL_IDS.STARRED, IDs: [element.ID] }));\n        await call();\n    };\n\n    return (\n        <button\n            disabled={loading}\n            type=\"button\"\n            className={classnames(['starbutton item-star inline-flex', isStarred && 'starbutton--is-starred'])}\n            onClick={() => withLoading(handleClick())}\n        >\n            <Icon name={iconName} fill=\"\" />\n        </button>\n    );\n};\n\nItemStar.propTypes = {\n    type: PropTypes.oneOf([ELEMENT_TYPES.CONVERSATION, ELEMENT_TYPES.MESSAGE]).isRequired,\n    element: PropTypes.object.isRequired\n};\n\nexport default ItemStar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { toMap } from 'proton-shared/lib/helpers/object';\nimport { orderBy } from 'proton-shared/lib/helpers/array';\nimport { Link } from 'react-router-dom';\nimport { Icon, classnames } from 'react-components';\n\nimport { ELEMENT_TYPES } from '../../constants';\n\nconst ItemLabels = ({\n    element,\n    onUnlabel,\n    type = ELEMENT_TYPES.CONVERSATION,\n    max = 99,\n    labels = [],\n    className = ''\n}) => {\n    const isConversation = type === ELEMENT_TYPES.CONVERSATION;\n    const labelIDs = isConversation ? element.Labels.map(({ ID }) => ID) : element.LabelIDs;\n    const labelsMap = toMap(labels);\n\n    return (\n        <div className={classnames(['inbl', className])}>\n            {orderBy(labelIDs.map((ID) => labelsMap[ID]).filter(Boolean), 'Order')\n                .slice(0, max)\n                .map(({ ID = '', Name = '', Color = '' }) => {\n                    const style = {\n                        backgroundColor: Color,\n                        borderColor: Color\n                    };\n                    const to = `/${ID}`;\n                    return (\n                        <span className=\"badgeLabel\" style={style} key={ID}>\n                            <Link to={to}>{Name}</Link>\n                            {onUnlabel ? (\n                                <button type=\"button\" onClick={() => onUnlabel(ID)}>\n                                    <Icon name=\"off\" />\n                                </button>\n                            ) : null}\n                        </span>\n                    );\n                })}\n        </div>\n    );\n};\n\nItemLabels.propTypes = {\n    element: PropTypes.object.isRequired,\n    labels: PropTypes.array,\n    max: PropTypes.number,\n    onUnlabel: PropTypes.func,\n    type: PropTypes.oneOf([ELEMENT_TYPES.CONVERSATION, ELEMENT_TYPES.MESSAGE]).isRequired,\n    className: PropTypes.string\n};\n\nexport default ItemLabels;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon, classnames } from 'react-components';\n\nimport { ELEMENT_TYPES } from '../../constants';\nimport { hasAttachments } from '../../helpers/message';\n\nconst ItemAttachmentIcon = ({ element = {}, type = ELEMENT_TYPES.CONVERSATION, className }) => {\n    const isConversation = type === ELEMENT_TYPES.CONVERSATION;\n    const hasAttachment = isConversation ? element.ContextNumAttachments : hasAttachments(element);\n\n    if (!hasAttachment) {\n        return null;\n    }\n\n    return <Icon name=\"attach\" fill=\"\" className={classnames(['fill-global-success', className])} />;\n};\n\nItemAttachmentIcon.propTypes = {\n    element: PropTypes.object,\n    type: PropTypes.oneOf([ELEMENT_TYPES.CONVERSATION, ELEMENT_TYPES.MESSAGE]).isRequired,\n    className: PropTypes.string\n};\n\nexport default ItemAttachmentIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { Icon } from 'react-components';\nimport { MAILBOX_LABEL_IDS, SHOW_MOVED } from 'proton-shared/lib/constants';\nimport { c } from 'ttag';\n\nimport { LABEL_IDS_TO_HUMAN } from '../../constants';\n\nconst { INBOX, TRASH, SPAM, ARCHIVE, SENT, DRAFTS } = MAILBOX_LABEL_IDS;\n\nconst getFolders = ({ ShowMoved }) => ({\n    [INBOX]: {\n        icon: 'inbox',\n        name: c('Mailbox').t`Inbox`,\n        to: '/inbox'\n    },\n    [TRASH]: {\n        icon: 'trash',\n        name: c('Mailbox').t`Trash`,\n        to: '/trash'\n    },\n    [SPAM]: {\n        icon: 'spam',\n        name: c('Mailbox').t`Spam`,\n        to: '/spam'\n    },\n    [ARCHIVE]: {\n        icon: 'archive',\n        name: c('Mailbox').t`Archive`,\n        to: '/archive'\n    },\n    [SENT]: {\n        icon: 'sent',\n        name: c('Mailbox').t`Sent`,\n        to:\n            ShowMoved & SHOW_MOVED.SENT\n                ? `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.ALL_SENT]}`\n                : `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.SENT]}`\n    },\n    [DRAFTS]: {\n        icon: 'drafts',\n        name: c('Mailbox').t`Drafts`,\n        to:\n            ShowMoved & SHOW_MOVED.DRAFTS\n                ? `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.ALL_DRAFTS]}`\n                : `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.DRAFTS]}`\n    }\n});\n\nconst ItemLocation = ({ message, mailSettings }) => {\n    const { LabelIDs = [] } = message;\n    const folders = getFolders(mailSettings);\n\n    return (\n        <>\n            {LabelIDs.filter((labelID) => folders[labelID]).map((labelID) => {\n                const { icon, name, to } = folders[labelID];\n                return (\n                    <Link to={to} className=\"mr0-25 flex-item-noshrink\" key={labelID} title={name}>\n                        <Icon name={icon} />\n                    </Link>\n                );\n            })}\n        </>\n    );\n};\n\nItemLocation.propTypes = {\n    message: PropTypes.object.isRequired,\n    mailSettings: PropTypes.object.isRequired\n};\n\nexport default ItemLocation;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { classnames } from 'react-components';\n\nimport { getDate } from '../../helpers/elements';\nimport { formatSimpleDate, formatFullDate, formatDistanceToNow } from '../../helpers/date';\n\nconst FORMATERS = {\n    simple: formatSimpleDate,\n    full: formatFullDate,\n    distance: formatDistanceToNow\n};\n\n// TODO: Update with a setInterval?\n\nconst ItemDate = ({ element, className, mode = 'simple' }) => {\n    const formater = FORMATERS[mode] || FORMATERS.distance;\n    return <span className={classnames(['item-date', className])}>{formater(getDate(element))}</span>;\n};\n\nItemDate.propTypes = {\n    element: PropTypes.object.isRequired,\n    className: PropTypes.string,\n    mode: PropTypes.string\n};\n\nexport default ItemDate;\n","import { format, formatDistanceToNow as dateFnsFormatDistanceToNow, isToday } from 'date-fns';\nimport { dateLocale } from 'proton-shared/lib/i18n';\n\nexport const formatSimpleDate = (date) => format(date, isToday(date) ? 'p' : 'PP', { locale: dateLocale });\n\nexport const formatFullDate = (date) => format(date, 'PPPPp', { locale: dateLocale });\n\nexport const formatDistanceToNow = (date) => dateFnsFormatDistanceToNow(date, { locale: dateLocale, addSuffix: true });\n","import React from 'react';\nimport { Conversation } from '../../models/conversation';\n\ninterface Props {\n    conversation: Conversation;\n    className?: string;\n}\n\nconst NumMessages = ({ conversation, className }: Props) => {\n    // ContextNumMessages shoud not be used\n    const { NumMessages = 0 } = conversation;\n\n    if (NumMessages <= 1) {\n        return null;\n    }\n\n    return <span className={className}>({NumMessages})</span>;\n};\n\nexport default NumMessages;\n","import React from 'react';\nimport { classnames } from 'react-components';\n\nimport ItemStar from './ItemStar';\nimport { ELEMENT_TYPES } from '../../constants';\nimport ItemLabels from './ItemLabels';\nimport ItemAttachmentIcon from './ItemAttachmentIcon';\nimport ItemLocation from './ItemLocation';\nimport ItemDate from './ItemDate';\nimport NumMessages from '../conversation/NumMessages';\nimport { Label } from '../../models/label';\nimport { Element } from '../../models/element';\n\ninterface Props {\n    labels?: Label[];\n    element: Element;\n    mailSettings: any;\n    type: string;\n    senders: string;\n    unread: boolean;\n}\n\nconst ItemColumnLayout = ({ labels, element, mailSettings = {}, type, senders, unread }: Props) => {\n    const { Subject } = element;\n    const isConversation = type === ELEMENT_TYPES.CONVERSATION;\n\n    return (\n        <div className=\"flex-item-fluid flex flex-nowrap flex-column flex-spacebetween item-titlesender\">\n            <div className=\"flex\">\n                <div className=\"flex-item-fluid flex w0 pr1\">\n                    {isConversation ? (\n                        <NumMessages className={classnames(['mr0-25', unread && 'bold'])} conversation={element} />\n                    ) : (\n                        <ItemLocation message={element} mailSettings={mailSettings} />\n                    )}\n                    <span className={classnames(['inbl mw100 ellipsis', unread && 'bold'])}>{Subject}</span>\n                </div>\n                <ItemDate element={element} className={unread ? 'bold' : undefined} />\n            </div>\n            <div className=\"flex\">\n                <div className=\"flex-item-fluid flex pr1\">\n                    <span className={classnames(['inbl mw100 ellipsis', unread && 'bold'])}>{senders}</span>\n                </div>\n                <div className=\"item-icons\">\n                    <ItemLabels max={4} type={type} labels={labels} element={element} />\n                    {' ' /* This space is important to keep a small space between elements */}\n                    <ItemAttachmentIcon element={element} type={type} />\n                    {' ' /* This space is important to keep a small space between elements */}\n                    <ItemStar element={element} type={type} />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ItemColumnLayout;\n","import React from 'react';\nimport { classnames } from 'react-components';\n\nimport ItemStar from './ItemStar';\nimport { ELEMENT_TYPES } from '../../constants';\nimport ItemLabels from './ItemLabels';\nimport ItemAttachmentIcon from './ItemAttachmentIcon';\nimport ItemLocation from './ItemLocation';\nimport ItemDate from './ItemDate';\nimport NumMessages from '../conversation/NumMessages';\nimport humanSize from 'proton-shared/lib/helpers/humanSize';\nimport { Label } from '../../models/label';\nimport { Element } from '../../models/element';\n\ninterface Props {\n    labels?: Label[];\n    element: Element;\n    mailSettings: any;\n    type: string;\n    senders: string;\n    unread: boolean;\n}\n\nconst ItemRowLayout = ({ labels, element, mailSettings = {}, type, senders, unread }: Props) => {\n    const { Subject, Size } = element;\n    const isConversation = type === ELEMENT_TYPES.CONVERSATION;\n    const size = humanSize(Size);\n\n    return (\n        <div className=\"flex-item-fluid flex flex-nowrap flex-row flex-spacebetween item-titlesender\">\n            <div className={classnames(['w20 flex mauto pr1', unread && 'bold'])}>{senders}</div>\n            <div className=\"flex-item-fluid flex mauto\">\n                {isConversation ? (\n                    <NumMessages className={classnames(['mr0-25', unread && 'bold'])} conversation={element} />\n                ) : (\n                    <ItemLocation message={element} mailSettings={mailSettings} />\n                )}\n                <span className={classnames(['inbl mw100 ellipsis', unread && 'bold'])}>{Subject}</span>\n                <ItemLabels max={4} type={type} labels={labels} element={element} />\n                <ItemAttachmentIcon element={element} type={type} className=\"ml0-5\" />\n            </div>\n            <span className=\"mtauto mbauto mr1 ml1 ng-binding\">{size}</span>\n            <span className=\"mauto\">\n                <ItemDate element={element} className={unread ? 'bold' : undefined} />\n            </span>\n            <div className=\"mtauto mbauto ml0-5\">\n                <ItemStar element={element} type={type} />\n            </div>\n        </div>\n    );\n};\n\nexport default ItemRowLayout;\n","import React, { ChangeEvent } from 'react';\nimport { classnames } from 'react-components';\nimport { getInitial } from 'proton-shared/lib/helpers/string';\nimport { MAILBOX_LABEL_IDS, VIEW_LAYOUT } from 'proton-shared/lib/constants';\n\nimport ItemCheckbox from './ItemCheckbox';\nimport { getSenders, getRecipients } from '../../helpers/conversation';\nimport { getSender, getRecipients as getMessageRecipients } from '../../helpers/message';\nimport { getCurrentType, isUnread } from '../../helpers/elements';\nimport ItemColumnLayout from './ItemColumnLayout';\nimport ItemRowLayout from './ItemRowLayout';\nimport { Label } from '../../models/label';\nimport { Element } from '../../models/element';\nimport { ELEMENT_TYPES } from '../../constants';\n\nconst { SENT, ALL_SENT, DRAFTS, ALL_DRAFTS } = MAILBOX_LABEL_IDS;\n\ninterface Props {\n    labels?: Label[];\n    labelID: string;\n    elementID?: string;\n    mailSettings: any;\n    element: Element;\n    checked?: boolean;\n    onCheck: (event: ChangeEvent) => void;\n    onClick: (ID: string) => void;\n}\n\nconst Item = ({ labelID, labels, element, elementID, mailSettings = {}, checked = false, onCheck, onClick }: Props) => {\n    const { ID = '' } = element;\n    const displayRecipients = [SENT, ALL_SENT, DRAFTS, ALL_DRAFTS].includes(labelID as MAILBOX_LABEL_IDS);\n    const type = getCurrentType({ mailSettings, labelID });\n    const isConversation = type === ELEMENT_TYPES.CONVERSATION;\n    const senders = isConversation ? getSenders(element) : [getSender(element)];\n    const recipients = isConversation ? getRecipients(element) : getMessageRecipients(element);\n\n    const { ViewLayout = VIEW_LAYOUT.COLUMN } = mailSettings;\n    const isColumnMode = ViewLayout === VIEW_LAYOUT.COLUMN;\n    const ItemLayout = isColumnMode ? ItemColumnLayout : ItemRowLayout;\n    const unread = isUnread(element);\n\n    const clickHandler = (event: React.MouseEvent) => {\n        const target = event.target as HTMLElement;\n        if (target.classList.contains('item-checkbox') || target.closest('.item-checkbox')) {\n            event.stopPropagation();\n            return;\n        }\n        onClick(ID);\n    };\n\n    return (\n        <div\n            onClick={clickHandler}\n            className={classnames([\n                'flex flex-nowrap cursor-pointer',\n                isColumnMode ? 'item-container' : 'item-container-row',\n                elementID === ID && 'item-is-selected',\n                !unread && 'read'\n            ])}\n        >\n            <ItemCheckbox className=\"mr1 item-checkbox\" checked={checked} onChange={onCheck}>\n                {getInitial(displayRecipients ? recipients[0] : senders[0])}\n            </ItemCheckbox>\n            <ItemLayout\n                labels={labels}\n                element={element}\n                mailSettings={mailSettings}\n                type={type}\n                senders={(displayRecipients ? recipients : senders).join(', ')}\n                unread={unread}\n            />\n        </div>\n    );\n};\n\nexport default Item;\n","import { Conversation } from '../models/conversation';\n\nexport const getSenders = ({ Senders = [] }: Conversation = {}) => Senders.map(({ Address, Name }) => Name || Address);\n\nexport const getRecipients = ({ Recipients = [] }: Conversation) =>\n    Recipients.map(({ Address, Name }) => Name || Address);\n","import React, { useState, ChangeEvent } from 'react';\nimport { useLabels } from 'react-components';\n\nimport Item from './Item';\nimport { Element } from '../../models/element';\n\ninterface Props {\n    labelID: string;\n    elementID?: string;\n    mailSettings: any;\n    elements?: Element[];\n    checkedIDs?: string[];\n    onCheck: (IDs?: string[], checked?: boolean) => void;\n    onClick: (ID: string) => void;\n}\n\nconst List = ({ labelID, elementID, mailSettings = {}, elements = [], checkedIDs = [], onCheck, onClick }: Props) => {\n    const [labels] = useLabels();\n    const [lastChecked, setLastChecked] = useState(); // Store ID of the last contact ID checked\n\n    const handleCheck = (elementID: string) => (event: ChangeEvent) => {\n        const target = event.target as HTMLInputElement;\n        const { shiftKey } = event.nativeEvent as any;\n        const elementIDs = [elementID];\n\n        if (lastChecked && shiftKey) {\n            const start = elements.findIndex(({ ID }) => ID === elementID);\n            const end = elements.findIndex(({ ID }) => ID === lastChecked);\n            elementIDs.push(\n                ...elements.slice(Math.min(start, end), Math.max(start, end) + 1).map(({ ID }) => ID || '')\n            );\n        }\n\n        setLastChecked(elementID);\n        onCheck(elementIDs, target.checked);\n    };\n\n    return (\n        <>\n            {elements.map((element) => {\n                return (\n                    <Item\n                        labels={labels}\n                        labelID={labelID}\n                        key={element.ID}\n                        elementID={elementID}\n                        element={element}\n                        checked={checkedIDs.includes(element.ID || '')}\n                        onCheck={handleCheck(element.ID || '')}\n                        onClick={onClick}\n                        mailSettings={mailSettings}\n                    />\n                );\n            })}\n        </>\n    );\n};\n\nexport default List;\n","import React from 'react';\nimport { classnames } from 'react-components';\n\nimport { isPlainText } from '../../helpers/message';\nimport { MessageExtended } from '../../models/message';\n\nimport './MessageBody.scss';\n\ninterface Props {\n    message: MessageExtended;\n}\n\nconst MessageBody = ({ message: { content = '', data: message = {} } }: Props) => {\n    const plain = isPlainText(message);\n    return (\n        <div\n            className={classnames(['message-content bodyDecrypted', plain && 'plain'])}\n            dangerouslySetInnerHTML={{ __html: content }}\n        />\n    );\n};\n\nexport default MessageBody;\n","import { VERIFICATION_STATUS } from '../constants';\n\nimport { isAuto, isImported, inSigningPeriod } from './message';\n\nconst { SIGNED_AND_INVALID, SIGNED_AND_VALID, NOT_SIGNED } = VERIFICATION_STATUS;\n\n/**\n * Some complicated logic after internal discussions.\n * This function returns whether we should display a lock with check / warning (indicating the signature status)\n * or we just display a lock.\n * The following logic is applied:\n *  1. Old SENT messages (not imported, not autoresponse) are not signed\n *  2. If a SENT message has been correctly verified, a lonesome lock is displayed, unaccompanied by its check\n *      (because we don't consciously do key pinning here)\n *  3. If a SENT message doesn't have a signature, but should have, we display a warning. A SENT message should have a signature if:\n *      - it is not an autoreply AND\n *      - it is not an import AND\n *      - it is send after the time when we started signing all messages\n *  4. If a message fails the signature check, we display a warning\n *  5. If a (non-sent) message has been correctly verified, we display a check.\n *  6. Else we just display the appropriate lock.\n *      - this happens when there is no signature or it hasn't been verified (meaning unverified SENT message fall in this case).\n *  This logic is caused by sent message's signatures always being verified without requiring the user to enable key pinning\n *  (key pinning for your own keys happens as a consequence of our authentication method).\n *  Thus we don't want to display this check for people that don't understand key pinning, but still keep the\n *  same security.\n *  @return {() => boolean} whether to display the signature status\n */\nexport const displaySignatureStatus = ({ data: message = {}, verified = 0 }) => {\n    // TODO: const isSentByMe = message.isSentByMe();\n    const isSentByMe = false;\n\n    // Rule 4 + 5 + 6 for non-SENT messages\n    if (!isSentByMe) {\n        return verified === SIGNED_AND_INVALID || verified === SIGNED_AND_VALID;\n    }\n    // SENT messages\n    const imported = isImported(message.data);\n    const auto = isAuto(message.data);\n    const period = inSigningPeriod(message.data.Time);\n    // Rule 1:\n    if (!auto && !imported && !period) {\n        return false;\n    }\n    // Rule 2:\n    if (verified === SIGNED_AND_VALID) {\n        return false;\n    }\n    // Rule 3:\n    if (verified === NOT_SIGNED && !auto && !imported && period) {\n        // warning\n        return true;\n    }\n    // Rule 4 + 6:\n    return verified === SIGNED_AND_INVALID;\n};\n","import { c } from 'ttag';\n\nimport {\n    isSentEncrypted,\n    isAuto,\n    isSent,\n    isDraft,\n    isInternalEncrypted,\n    isExternalEncrypted,\n    inSigningPeriod,\n    isImported\n} from './message';\n\nconst I18N = {\n    pm: [\n        c('Message encryption status').t`End-to-end encrypted message`,\n        // gettextCatalog.getString('End-to-end encrypted message', null, 'Message encryption status'),\n        c('Message encryption status').t`End-to-end encrypted message from verified address`,\n        // gettextCatalog.getString(\n        //     'End-to-end encrypted message from verified address',\n        //     null,\n        //     'Message encryption status'\n        // ),\n        c('Message encryption status').t`Sender verification failed`\n        // gettextCatalog.getString('Sender verification failed', null, 'Message encryption status')\n    ],\n    pgp: [\n        c('Message encryption status').t`PGP-encrypted message`,\n        // gettextCatalog.getString('PGP-encrypted message', null, 'Message encryption status'),\n        c('Message encryption status').t`PGP-encrypted message from verified address`,\n        // gettextCatalog.getString('PGP-encrypted message from verified address', null, 'Message encryption status'),\n        c('Message encryption status').t`Sender verification failed`\n        // gettextCatalog.getString('Sender verification failed', null, 'Message encryption status')\n    ],\n    clear: [\n        c('Message encryption status').t`Stored with zero access encryption`,\n        // gettextCatalog.getString('Stored with zero access encryption', null, 'Message encryption status'),\n        c('Message encryption status').t`PGP-signed message from verified address`,\n        // gettextCatalog.getString('PGP-signed message from verified address', null, 'Message encryption status'),\n        c('Message encryption status').t`Sender verification failed`\n        // gettextCatalog.getString('Sender verification failed', null, 'Message encryption status')\n    ],\n    sentEncrypted: [\n        c('Message encryption status').t`Sent by you with end-to-end encryption`,\n        // gettextCatalog.getString('Sent by you with end-to-end encryption', null, 'Message encryption status'),\n        c('Message encryption status').t`Sent by you with end-to-end encryption`,\n        // gettextCatalog.getString('Sent by you with end-to-end encryption', null, 'Message encryption status'),\n        c('Message encryption status').t`Sender verification failed`\n        // gettextCatalog.getString('Sender verification failed', null, 'Message encryption status')\n    ],\n    auto: [\n        c('Message encryption status').t`Sent by ProtonMail with zero access encryption`\n        // gettextCatalog.getString('Sent by ProtonMail with zero access encryption', null, 'Message encryption status')\n    ],\n    sentClear: [\n        c('Message encryption status').t`Stored with zero access encryption`,\n        // gettextCatalog.getString('Stored with zero access encryption', null, 'Message encryption status'),\n        c('Message encryption status').t`Stored with zero access encryption`,\n        // gettextCatalog.getString('Stored with zero access encryption', null, 'Message encryption status'),\n        c('Message encryption status').t`Sender verification failed`\n        // gettextCatalog.getString('Sender verification failed', null, 'Message encryption status')\n    ],\n    draft: [\n        c('Message encryption status').t`Encrypted message`\n        //gettextCatalog.getString('Encrypted message', null, 'Message encryption status')\n    ]\n};\n\nconst getFromType = (message) => {\n    if (isSentEncrypted(message)) {\n        return I18N.sentEncrypted;\n    }\n\n    if (isAuto(message)) {\n        return I18N.auto;\n    }\n\n    if (isSent(message)) {\n        return I18N.sentClear;\n    }\n\n    if (isDraft(message)) {\n        return I18N.draft;\n    }\n\n    if (isInternalEncrypted(message)) {\n        return I18N.pm;\n    }\n\n    if (isExternalEncrypted(message)) {\n        return I18N.pgp;\n    }\n\n    return I18N.clear;\n};\n\nexport const getEncryptionType = ({ data: message = {}, verified = 0 }) => {\n    const encType = getFromType(message);\n\n    if (encType.length > verified) {\n        // Old messages are not signed, so missing sender signatures should be treated like external missing signatures, no warning\n        if (!inSigningPeriod(message) && isSentEncrypted(message) && !isImported(message)) {\n            return encType[0];\n        }\n\n        return encType[verified];\n    }\n\n    return encType[0];\n};\n","import React from 'react';\nimport { Icon, Tooltip, Href, classnames } from 'react-components';\nimport { displaySignatureStatus } from '../../helpers/displaySignature';\nimport { isPGPEncrypted, isInternal, isSentEncrypted, isDraft, isAuto } from '../../helpers/message';\nimport { getEncryptionType } from '../../helpers/encryptionType';\nimport { MessageExtended } from '../../models/message';\n\n// Reference: Angular/src/templates/message/encryptionStatus.tpl.html\n\ninterface Props {\n    message: MessageExtended;\n    className?: string;\n}\n\nconst MessageLock = ({ message, className: inputClassName }: Props) => {\n    const displaySignature = displaySignatureStatus(message);\n    const pgpEncrypted = isPGPEncrypted(message.data);\n\n    const tooltip = getEncryptionType(message);\n    const href = displaySignature\n        ? 'https://protonmail.com/support/knowledge-base/digital-signature/'\n        : pgpEncrypted\n        ? 'https://protonmail.com/support/knowledge-base/how-to-use-pgp'\n        : 'https://protonmail.com/support/knowledge-base/what-is-encrypted/';\n    // TODO: add lock-signed lock-warning in design system\n    // const icon = displaySignature ? (message.verified ? 'lock-signed' : 'lock-warning') : 'lock';\n    const icon = 'lock';\n    const internal =\n        isInternal(message.data) || isSentEncrypted(message.data) || isDraft(message.data) || isAuto(message.data);\n    const className = classnames([\n        inputClassName,\n        'no-pointer-events-children',\n        ...(displaySignature\n            ? [\n                  message.verified === 1 && 'valid-sig',\n                  message.verified !== 1 && 'invalid-sig',\n                  internal && 'color-pm-blue', // 'internal',\n                  pgpEncrypted && 'pgp'\n              ]\n            : ['nodecoration color-global-grey flex', internal && 'color-pm-blue'])\n    ]);\n\n    return (\n        <Tooltip title={tooltip} className=\"inbl\">\n            <Href className={className} href={href}>\n                <Icon name={icon} className=\"fill-currentColor\" />\n            </Href>\n        </Tooltip>\n    );\n};\n\nexport default MessageLock;\n","import React, { MouseEvent } from 'react';\nimport { c } from 'ttag';\n\nimport ItemStar from '../../list/ItemStar';\nimport ItemDate from '../../list/ItemDate';\nimport { ELEMENT_TYPES } from '../../../constants';\nimport MessageLock from '../MessageLock';\nimport { isSent } from '../../../helpers/message';\nimport ItemLabels from '../../list/ItemLabels';\nimport ItemAttachmentIcon from '../../list/ItemAttachmentIcon';\nimport { MessageExtended } from '../../../models/message';\nimport { Label } from '../../../models/label';\n\ninterface Props {\n    message: MessageExtended;\n    labels: Label[];\n    onExpand: () => void;\n}\n\nconst HeaderCollapsed = ({ message, labels, onExpand }: Props) => {\n    const { Name, Address } = (message.data || {}).Sender || {};\n\n    const handleClick = (event: MouseEvent) => {\n        const target = event.target as HTMLElement;\n        if (target.classList.contains('item-star') || target.closest('.item-star')) {\n            event.stopPropagation();\n            return;\n        }\n\n        onExpand();\n    };\n\n    const inOutClass = isSent(message.data) ? 'is-outbound' : 'is-inbound';\n\n    return (\n        <div\n            className={`message-header message-header-collapsed flex flex-nowrap flex-items-center flex-spacebetween cursor-pointer ${inOutClass}`}\n            onClick={handleClick}\n        >\n            <div>\n                <span className=\"mr0-5\">{c('Label').t`From:`}</span>\n                <span className=\"bold mr0-5\" title={Name}>\n                    {Name}\n                </span>\n                <i title={Address}>&lt;{Address}&gt;</i>\n                <MessageLock message={message} />\n            </div>\n            <div>\n                <ItemAttachmentIcon element={message.data} type={ELEMENT_TYPES.MESSAGE} />\n                <ItemLabels element={message.data || {}} labels={labels} type={ELEMENT_TYPES.MESSAGE} className=\"mr1\" />\n                <ItemDate className=\"mr1\" element={message.data || {}} mode=\"distance\" />\n                <ItemStar element={message.data} type={ELEMENT_TYPES.MESSAGE} />\n            </div>\n        </div>\n    );\n};\n\nexport default HeaderCollapsed;\n","import React from 'react';\nimport { Icon } from 'react-components';\nimport { c } from 'ttag';\nimport { MessageExtended } from '../../../models/message';\n\ninterface Props {\n    message: MessageExtended;\n    type: string;\n    onLoadImages: () => void;\n}\n\nconst ExtraImages = ({\n    message: { showRemoteImages = true, showEmbeddedImages = true },\n    type,\n    onLoadImages\n}: Props) => {\n    // Flags will not be setted if there is no images\n    if ((type === 'remote' && showRemoteImages !== false) || (type === 'embedded' && showEmbeddedImages !== false)) {\n        return null;\n    }\n\n    return (\n        <div className=\"bg-white rounded bordered-container p0-5 mb0-5 flex flex-nowrap\">\n            <Icon name=\"insert-image\" className=\"fill-global-grey mtauto mbauto\" />\n            <span className=\"pl0-5 pr0-5 flex-item-fluid\">\n                {type === 'remote'\n                    ? c('Action').t`This message contains remote content`\n                    : c('Action').t`This message contains embedded images`}\n            </span>\n            <a onClick={onLoadImages} className=\"bold\">\n                {c('Action').t`Load`}\n            </a>\n        </div>\n    );\n};\n\nexport default ExtraImages;\n","import React from 'react';\nimport { Icon, Href } from 'react-components';\nimport { c } from 'ttag';\nimport { getListUnsubscribe } from '../../../helpers/message';\nimport { MessageExtended } from '../../../models/message';\n\ninterface Props {\n    message: MessageExtended;\n}\n\nconst ExtraUnsubscribe = ({ message: { data: message = {} } }: Props) => {\n    if (/*unsubscribed || */ !getListUnsubscribe(message)) {\n        return null;\n    }\n\n    return (\n        <div className=\"bg-white rounded bordered-container p0-5 mb0-5 flex flex-nowrap\">\n            <Icon name=\"email\" className=\"flex-item-noshrink fill-global-grey mtauto mbauto\" />\n            <span className=\"pl0-5 pr0-5 flex-item-fluid\">{c('Info').t`This message is from a mailing list`}</span>\n            <span className=\"flex-item-noshrink flex\">\n                <Href\n                    className=\"bold mr1 pl0-5 pr0-5\"\n                    href=\"https://protonmail.com/support/knowledge-base/auto-unsubscribe\"\n                >\n                    {c('Info').t`Learn more`}\n                </Href>\n                <a className=\"bold\">{c('Action').t`Unsubscribe`}</a>\n            </span>\n        </div>\n    );\n};\n\nexport default ExtraUnsubscribe;\n","import React from 'react';\nimport ExtraImages from '../extras/ExtraImages';\nimport ExtraUnsubscribe from '../extras/ExtraUnsubscribe';\nimport { MessageExtended } from '../../../models/message';\n\ninterface Props {\n    message: MessageExtended;\n    onLoadRemoteImages: () => void;\n    onLoadEmbeddedImages: () => void;\n}\n\nconst HeaderExtra = ({ message, onLoadRemoteImages, onLoadEmbeddedImages }: Props) => {\n    return (\n        <section className=\"ml1 mr1 mt0-5\">\n            {/* TODO: ExpirationTime */}\n            {/* TODO: SpamScore */}\n            {/* TODO: MIMEParsingFailed */}\n            {/* TODO: hasError */}\n            <ExtraUnsubscribe message={message} />\n            {/* TODO: requireReadReceiptConfirmation */}\n            {/* TODO: isAutoReply */}\n            {/* TODO: attachedPublicKey */}\n            {/* TODO: promptKeyPinning */}\n            {/* TODO: askResign */}\n            <ExtraImages message={message} type=\"remote\" onLoadImages={onLoadRemoteImages} />\n            <ExtraImages message={message} type=\"embedded\" onLoadImages={onLoadEmbeddedImages} />\n        </section>\n    );\n};\n\nexport default HeaderExtra;\n","import React from 'react';\nimport { c } from 'ttag';\nimport { Message } from '../../../models/message';\n\ninterface Props {\n    message?: Message;\n}\n\nconst HeaderRecipientsSimple = ({ message = {} }: Props) => {\n    const { ToList = [], CCList = [], BCCList = [] } = message;\n    const recipients = [...ToList, ...BCCList, ...CCList];\n\n    return (\n        <div className=\"flex\">\n            <span className=\"opacity-50 flex-self-vcenter container-to\">{c('Label').t`To:`}</span>\n            <span className=\"flex-self-vcenter mr1\">\n                {recipients.map(({ Address = '', Name = '' }, index) => {\n                    return (\n                        <span key={index} className=\"mr0-5\" title={Address}>\n                            {Name || Address}\n                            {index < recipients.length - 1 && ','}\n                        </span>\n                    );\n                })}\n            </span>\n        </div>\n    );\n};\n\nexport default HeaderRecipientsSimple;\n","import React from 'react';\nimport { c } from 'ttag';\nimport { Message, Recipient } from '../../../models/message';\n\ninterface Props {\n    message?: Message;\n}\n\ninterface ListProps {\n    list: Recipient[];\n}\n\nconst RecipientsList = ({ list }: ListProps) => (\n    <span className=\"flex-self-vcenter flex flex-column\">\n        {list.map(({ Address = '', Name = '' }, index) => {\n            return (\n                <span key={index}>\n                    {Name || Address} <span className=\"opacity-50\">&lt;{Address}&gt;</span>{' '}\n                </span>\n            );\n        })}\n    </span>\n);\n\nconst HeaderRecipientsDetails = ({ message = {} }: Props) => {\n    const { ToList = [], CCList = [], BCCList = [] } = message;\n\n    return (\n        <div className=\"flex flex-column\">\n            {ToList.length > 0 && (\n                <span className=\"flex\">\n                    <span className=\"opacity-50 container-to\">{c('Label').t`To:`}</span>\n                    <span className=\"flex-self-vcenter mr1\">\n                        <RecipientsList list={ToList} />\n                    </span>\n                </span>\n            )}\n            {CCList.length > 0 && (\n                <span className=\"flex\">\n                    <span className=\"opacity-50 container-to\">{c('Label').t`CC:`}</span>\n                    <span className=\"flex-self-vcenter mr1\">\n                        <RecipientsList list={CCList} />\n                    </span>\n                </span>\n            )}\n            {BCCList.length > 0 && (\n                <span className=\"flex\">\n                    <span className=\"opacity-50 container-to\">{c('Label').t`BCC:`}</span>\n                    <span className=\"flex-self-vcenter mr1\">\n                        <RecipientsList list={BCCList} />\n                    </span>\n                </span>\n            )}\n        </div>\n    );\n};\n\nexport default HeaderRecipientsDetails;\n","import React, { useState, ReactNode } from 'react';\nimport { generateUID, usePopperAnchor, DropdownButton, Dropdown } from 'react-components';\n\ninterface Props {\n    content?: ReactNode;\n    children: ({ onClose }: { onClose: () => void }) => ReactNode;\n    autoClose?: boolean;\n    [rest: string]: any;\n}\n\nconst HeaderDropdown = ({ content, children, autoClose, ...rest }: Props) => {\n    const [uid] = useState(generateUID('dropdown'));\n\n    const { anchorRef, isOpen, toggle, close } = usePopperAnchor();\n\n    return (\n        <>\n            <DropdownButton {...rest} buttonRef={anchorRef} isOpen={isOpen} onClick={toggle} caretClassName={null}>\n                {content}\n            </DropdownButton>\n            <Dropdown id={uid} autoClose={autoClose} isOpen={isOpen} anchorRef={anchorRef} onClose={close}>\n                {children({ onClose: close })}\n            </Dropdown>\n        </>\n    );\n};\n\nexport default HeaderDropdown;\n","import React, { MouseEvent } from 'react';\nimport { c } from 'ttag';\nimport { Icon, Group, ButtonGroup, useToggle } from 'react-components';\nimport humanSize from 'proton-shared/lib/helpers/humanSize';\n\nimport ItemStar from '../../list/ItemStar';\nimport ItemDate from '../../list/ItemDate';\nimport { ELEMENT_TYPES } from '../../../constants';\nimport ItemLabels from '../../list/ItemLabels';\nimport ItemLocation from '../../list/ItemLocation';\nimport MoveDropdown from '../../dropdown/MoveDropdown';\nimport LabelDropdown from '../../dropdown/LabelDropdown';\nimport HeaderExtra from './HeaderExtra';\nimport MessageLock from '../MessageLock';\nimport { isSent } from '../../../helpers/message';\nimport HeaderRecipientsSimple from './HeaderRecipientsSimple';\nimport HeaderRecipientsDetails from './HeaderRecipientsDetails';\nimport ItemAttachmentIcon from '../../list/ItemAttachmentIcon';\nimport { MessageExtended } from '../../../models/message';\nimport { Label } from '../../../models/label';\n\nimport './MessageHeader.scss';\nimport HeaderDropdown from './HeaderDropdown';\n\ninterface Props {\n    labels?: Label[];\n    mailSettings: any;\n    message: MessageExtended;\n    messageLoaded: boolean;\n    onLoadRemoteImages: () => void;\n    onLoadEmbeddedImages: () => void;\n    onCollapse: () => void;\n}\n\nconst HeaderExpanded = ({\n    labels,\n    message,\n    messageLoaded,\n    onLoadRemoteImages,\n    onLoadEmbeddedImages,\n    mailSettings,\n    onCollapse\n}: Props) => {\n    const { state: showDetails, toggle: toggleDetails } = useToggle();\n\n    const { Name, Address } = (message.data || {}).Sender || {};\n    const inOutClass = isSent(message.data) ? 'is-outbound' : 'is-inbound';\n\n    const handleClick = (event: MouseEvent) => {\n        if ((event.target as HTMLElement).closest('.stop-propagation')) {\n            event.stopPropagation();\n            return;\n        }\n\n        onCollapse();\n    };\n\n    return (\n        <div className={`message-header message-header-expanded ${inOutClass}`}>\n            <div\n                className=\"flex flex-nowrap flex-items-center flex-spacebetween pt1 pl1 pr1 pb0-5 cursor-pointer\"\n                onClick={handleClick}\n            >\n                <div>\n                    <span className=\"mr0-5\">{c('Label').t`From:`}</span>\n                    <span className=\"bold mr0-5\" title={Name}>\n                        {Name}\n                    </span>\n                    <i title={Address}>&lt;{Address}&gt;</i>\n                    <MessageLock message={message} className=\"stop-propagation\" />\n                </div>\n                <div>\n                    <ItemDate element={message.data || {}} mode=\"distance\" />\n                </div>\n            </div>\n            <div className=\"flex flex-nowrap flex-items-start flex-spacebetween ml1 mr1 mb0-5\">\n                {showDetails ? (\n                    <HeaderRecipientsDetails message={message.data} />\n                ) : (\n                    <HeaderRecipientsSimple message={message.data} />\n                )}\n                <div className=\"stop-propagation\">\n                    <ItemAttachmentIcon element={message.data || {}} type={ELEMENT_TYPES.MESSAGE} />\n                    {' ' /* This space is important to keep a small space between elements */}\n                    <ItemLabels max={4} element={message.data || {}} labels={labels} type={ELEMENT_TYPES.MESSAGE} />\n                    {' ' /* This space is important to keep a small space between elements */}\n                    <ItemLocation message={message.data || {}} mailSettings={mailSettings} />\n                    {' ' /* This space is important to keep a small space between elements */}\n                    <ItemStar element={message.data || {}} type={ELEMENT_TYPES.MESSAGE} />\n                </div>\n            </div>\n            {showDetails ? (\n                <>\n                    <div className=\"ml1 mr1 mb0-5\">\n                        <span className=\"mr0-5\">{c('Label').t`Size:`}</span>\n                        <span>{humanSize((message.data || {}).Size || 0)}</span>\n                    </div>\n                    <div className=\"ml1 mr1 mb0-5\">\n                        <ItemDate element={message.data || {}} mode=\"full\" />\n                    </div>\n                </>\n            ) : null}\n            <HeaderExtra\n                message={message}\n                onLoadRemoteImages={onLoadRemoteImages}\n                onLoadEmbeddedImages={onLoadEmbeddedImages}\n            />\n            <div className=\"flex flex-spacebetween ml1 mr1 mb1 flex-nowrap\">\n                <a onClick={toggleDetails} className=\"bold flex-self-vcenter stop-propagation\">\n                    {showDetails ? c('Action').t`Hide details` : c('Action').t`Show details`}\n                </a>\n                <div className=\"stop-propagation\">\n                    <Group className=\"mr1\">\n                        <HeaderDropdown autoClose={false} content={<Icon name=\"folder\" />}>\n                            {({ onClose }) => (\n                                <MoveDropdown\n                                    selectedIDs={[(message.data || {}).ID || '']}\n                                    type={ELEMENT_TYPES.MESSAGE}\n                                    onClose={onClose}\n                                />\n                            )}\n                        </HeaderDropdown>\n                        <HeaderDropdown autoClose={false} content={<Icon name=\"label\" />}>\n                            {({ onClose }) => (\n                                <LabelDropdown\n                                    selectedIDs={[(message.data || {}).ID || '']}\n                                    type={ELEMENT_TYPES.MESSAGE}\n                                    onClose={onClose}\n                                />\n                            )}\n                        </HeaderDropdown>\n                    </Group>\n\n                    <Group>\n                        <ButtonGroup disabled={!messageLoaded}>\n                            <Icon name=\"reply\" />\n                        </ButtonGroup>\n                        <ButtonGroup disabled={!messageLoaded}>\n                            <Icon name=\"reply-all\" />\n                        </ButtonGroup>\n                        <ButtonGroup disabled={!messageLoaded}>\n                            <Icon name=\"forward\" />\n                        </ButtonGroup>\n                    </Group>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default HeaderExpanded;\n","export const getAttachment = (attachmentID) => ({\n    method: 'get',\n    url: `attachments/${attachmentID}`,\n    output: 'arrayBuffer'\n});\n","import {\n    binaryStringToArray,\n    concatArrays,\n    decodeBase64,\n    decryptMessage,\n    decryptSessionKey,\n    getMessage\n} from 'pmcrypto';\nimport JSZip from 'jszip';\nimport downloadFile from 'proton-shared/lib/helpers/downloadFile';\nimport { getAttachment } from '../api/attachments';\nimport { Attachment, MessageExtended, Message } from '../models/message';\n\n// Reference: Angular/src/app/attachments/services/AttachmentLoader.js\n\n// TODO: Handle isOutside()\n\n// export const getCacheKey = ({ ID }) => `Attachment.${ID}`;\nexport const getCacheKey = ({ ID }: Attachment) => ID;\n\nexport const decrypt = async (attachment: any, sessionKey = {}) => {\n    // create new Uint8Array to store decrypted attachment\n    const at = new Uint8Array(attachment);\n\n    try {\n        // decrypt the att\n        const { data, signatures } = await decryptMessage({\n            message: await getMessage(at as any),\n            sessionKeys: [sessionKey],\n            format: 'binary'\n        });\n\n        return {\n            data,\n            signatures,\n            fromCache: false\n        };\n    } catch (err) {\n        console.error(err);\n        throw err;\n    }\n};\n\nexport const getRequest = ({ ID }: Attachment = {}, api: any) => {\n    // if (isOutside()) {\n    //     const decryptedToken = eoStore.getToken();\n    //     const token = $stateParams.tag;\n    //     return Eo.attachment(decryptedToken, token, ID);\n    // }\n\n    // return attachmentApi.get(ID);\n    return api(getAttachment(ID));\n};\n\nexport const getSessionKey = async (message: MessageExtended, attachment: Attachment) => {\n    // if (attachment.sessionKey) {\n    //     return attachment;\n    // }\n\n    const keyPackets = binaryStringToArray(decodeBase64(attachment.KeyPackets));\n    const options: any = { message: await getMessage(keyPackets) };\n\n    // if (isOutside()) {\n    //     options.passwords = [eoStore.getPassword()];\n    // } else {\n    // options.privateKeys = keysModel.getPrivateKeys(message.AddressID);\n    options.privateKeys = message.privateKeys;\n    // }\n\n    const sessionKey = await decryptSessionKey(options);\n\n    return { ...attachment, sessionKey };\n};\n\nexport const getDecryptedAttachmentAPI = async (\n    message: MessageExtended,\n    attachment: Attachment,\n    { cache, api }: any\n) => {\n    const data = await getRequest(attachment, api);\n    // const data = null;\n    try {\n        const { sessionKey } = await getSessionKey(message, attachment);\n        const decrypted = await decrypt(data, sessionKey);\n        cache.set(getCacheKey(attachment), decrypted);\n        return decrypted;\n    } catch (error) {\n        const blob = concatArrays([binaryStringToArray(decodeBase64(attachment.KeyPackets)), new Uint8Array(data)]);\n        // Fallback download raw attachment\n        return Promise.reject({ data: blob, error });\n    }\n};\n\nexport const getDecryptedAttachment = async (message: MessageExtended, attachment: Attachment, { cache, api }: any) => {\n    const cadata = cache.get(getCacheKey(attachment));\n    if (cadata) {\n        return { ...cadata, fromCache: true };\n    }\n    return getDecryptedAttachmentAPI(message, attachment, { cache, api });\n};\n\nexport const getAndVerify = async (\n    attachment: Attachment = {},\n    message: MessageExtended = {},\n    reverify = false,\n    { cache, api, verify }: any\n) => {\n    if (attachment.Preview) {\n        return attachment.Preview;\n    }\n    const { data, signatures, fromCache } = await getDecryptedAttachment(message, attachment, { cache, api });\n    if (fromCache && !reverify) {\n        return data;\n    }\n\n    verify && (await verify(attachment, data, message, signatures));\n\n    return data;\n};\n\n/**\n * Format attachment for the download\n * @param  {Object} attachment\n * @param  {Object} message    Message\n * @param  {Node} el         Link clicked\n * @return {Promise}\n */\nconst formatDownload = async (attachment: Attachment, message: MessageExtended, { cache, api }: any) => {\n    try {\n        const data = await getAndVerify(attachment, message, false, { cache, api });\n        return {\n            data,\n            Name: attachment.Name,\n            MIMEType: attachment.MIMEType,\n            ID: attachment.ID\n        };\n    } catch (e) {\n        // If the decryption fails we download the encrypted version\n        if (e.data) {\n            return {\n                data: e.data,\n                Name: `${attachment.Name}.pgp`,\n                MIMEType: 'application/pgp',\n                isError: true,\n                ID: attachment.ID\n            };\n        }\n        throw e;\n    }\n};\n\n/**\n * Generate a download for an attachment\n * @param  {Object} attachment\n * @return {void}\n */\nconst generateDownload = async (message: MessageExtended, attachment: Attachment) => {\n    // TODO: uncomment\n    // try {\n    //     await checkAllSignatures(message, [attachment]);\n    // } catch (e) {\n    //     // swallow as the user is informed already by a confirmation and actually caused this error\n    //     return;\n    // }\n\n    downloadFile(new Blob([attachment.data], { type: attachment.MIMEType }), attachment.Name);\n};\n\n/**\n * Download an attachment\n * @param  {Object} attachment\n * @param  {Message} message\n * @param  {Node} el\n * @return {Promise}\n */\nexport const download = async (attachment: Attachment, message: MessageExtended, { cache, api }: any) => {\n    const att = await formatDownload(attachment, message, { cache, api });\n\n    // TODO: uncomment\n    // if (att.isError) {\n    //     if (!(await allowDownloadBrokenAtt())) {\n    //         return; // We don't want to download it\n    //     }\n    // }\n\n    return generateDownload(message, att);\n};\n\n/**\n * The attachment's Name is not uniq we need a uniq name in order\n * to make the zip. The lib doesn't allow duplicates\n * @param  {Message} message\n * @return {Array}         Array of promises\n */\nconst formatDownloadAll = async (message: MessageExtended, { cache, api }: any) => {\n    const { Attachments = [] } = message.data || {};\n    const { list }: { list: Attachment[] } = Attachments.reduce(\n        (acc: any, att) => {\n            const name = att.Name || '';\n            if (!acc.map[name]) {\n                acc.map[name] = { index: 0 };\n            } else {\n                acc.map[name].index++;\n                // We can have an extension\n                const currentName = name.split('.');\n                const ext = currentName.pop();\n                const newName = `${currentName.join('.')} (${acc.map[name].index}).${ext}`;\n                att.Name = newName;\n            }\n            acc.list.push(att);\n            return acc;\n        },\n        { list: [], map: {} }\n    );\n\n    return Promise.all(list.map((att) => formatDownload(att, message, { cache, api })));\n};\n\nconst getZipAttachmentName = (message: Message = {}) => `Attachments-${message.Subject}.zip`;\n\n/**\n * Download all attachments as a zipfile\n * @param  {Object} message Message\n * @param  {Node} el      link clicked\n * @return {Promise}         Always success\n */\nexport const downloadAll = async (message: MessageExtended = {}, { cache, api }: any) => {\n    const list = await formatDownloadAll(message, { cache, api });\n\n    // TODO: uncomment\n    // try {\n    //     await checkAllSignatures(message, list);\n    // } catch (e) {\n    //     // swallow as the user is informed already by a confirmation and actually caused this error\n    //     return;\n    // }\n\n    // TODO: uncomment\n    // // Detect if we have at least one error\n    // if (list.some(({ isError }) => isError)) {\n    //     if (!(await allowDownloadBrokenAtt())) {\n    //         return; // We don't want to download it\n    //     }\n    // }\n\n    const zip = new JSZip();\n    list.forEach(({ Name = '', data }) => zip.file(Name, data));\n    const content = await zip.generateAsync({ type: 'blob' });\n    downloadFile(content, getZipAttachmentName(message.data));\n};\n\nexport const isEmbeddedLocal = ({\n    Headers: { 'content-disposition': disposition, embedded } = {}\n}: Attachment = {}) => {\n    return disposition === 'inline' || Number(embedded) === 1;\n};\n","// import { REGEX_IMAGE_EXTENSION } from 'proton-shared/lib/constants';\n\n/**\n * Convert base64 string to Image\n * @param  {String} base64str\n * @return {Object}\n */\n// export const toImage = (base64str) => {\n//     return new Promise((resolve) => {\n//         const image = new Image();\n\n//         image.onload = () => {\n//             resolve(image);\n//         };\n\n//         image.src = base64str;\n//     });\n// };\n\n/**\n * Resizes a picture to a maximum length/width (based on largest dimension)\n * @param {String} original Base64 representation of image to be resized.\n * @param {Number} maxSize Amount of pixels that largest dimention (whether width or length) should have.\n * @param {String} finalMimeType Mime type of the resulting resized image.\n * @param {Number} encoderOptions A Number between 0 and 1 indicating image quality if the requested type is image/jpeg or image/webp\n * @return {Promise} receives base64 string of resized image.\n */\n// export const resizeImage = (original, maxSize, finalMimeType = 'image/jpeg', encoderOptions = 1) => {\n//     return toImage(original).then((image) => {\n//         // Resize the image\n//         const canvas = document.createElement('canvas');\n//         let width = image.width;\n//         let height = image.height;\n\n//         if (width > height && width > maxSize) {\n//             height *= maxSize / width;\n//             width = maxSize;\n//         } else if (height > maxSize) {\n//             width *= maxSize / height;\n//             height = maxSize;\n//         }\n\n//         canvas.width = width;\n//         canvas.height = height;\n//         canvas.getContext('2d').drawImage(image, 0, 0, width, height);\n\n//         return canvas.toDataURL(finalMimeType, encoderOptions);\n//     });\n// };\n\n/**\n * Extract the mime and base64 str from a base64 image.\n * @param {String} str\n * @returns {Promise} {mime, base64}\n */\n// const extractBase64Image = (str = '') => {\n//     const [mimeInfo = '', base64 = ''] = (str || '').split(',');\n//     const [, mime = ''] = mimeInfo.match(/:(.*?);/) || [];\n//     return { mime, base64 };\n// };\n\n/**\n * Convert a base 64 str to an uint8 array.\n * @param base64str\n * @returns {Uint8Array}\n */\n// const toUint8Array = (base64str) => {\n//     const bstr = atob(base64str);\n//     let n = bstr.length;\n//     const u8arr = new Uint8Array(n);\n//     while (n--) {\n//         u8arr[n] = bstr.charCodeAt(n);\n//     }\n//     return u8arr;\n// };\n\n/**\n * Convert a data URL to a Blob Object\n * @param {String} base64str\n * @param {String} filename\n * @return {Object}\n */\n// export const toFile = (base64str, filename = 'file') => {\n//     const { base64, mime } = extractBase64Image(base64str);\n//     return new File([toUint8Array(base64)], filename, { type: mime });\n// };\n\n/**\n * Convert a data URL to a Blob Object\n * @param  {String} base64str\n * @return {Blob}\n */\n// export const toBlob = (base64str) => {\n//     const { base64, mime } = extractBase64Image(base64str);\n//     return new Blob([toUint8Array(base64)], { type: mime });\n// };\n\n/**\n * Down size image to reach the max size limit\n * @param  {String} base64str\n * @param  {} maxSize in bytes\n * @param  {String} mimeType\n * @param  {Number} encoderOptions\n * @return {Promise}\n */\n// export const downSize = (base64str, maxSize, mimeType = 'image/jpeg', encoderOptions = 1) => {\n//     const process = (source, max) => {\n//         return resizeImage(source, max, mimeType, encoderOptions).then((resized) => {\n//             const { size } = toBlob(resized);\n\n//             if (size <= maxSize) {\n//                 return resized;\n//             }\n\n//             return process(resized, Math.round(max * 0.9));\n//         });\n//     };\n\n//     return toImage(base64str).then(({ height, width }) => process(base64str, height > width ? height : width));\n// };\n\n/**\n * Returns true if the URL is an inline embedded image.\n * @param {String} src\n * @returns {boolean}\n */\nexport const isInlineEmbedded = (src = '') => src.startsWith('data:');\n\n/**\n * Returns true if the URL is an embedded image.\n * @param {String} src\n * @returns {boolean}\n */\nexport const isEmbedded = (src = '') => src.startsWith('cid:');\n\n/**\n * Prepare image source to be display\n * @param {String} value\n * @return {String}\n */\n// export const formatImage = (value = '') => {\n//     if (!value) {\n//         return value;\n//     }\n\n//     if (REGEX_IMAGE_EXTENSION.test(value)) {\n//         return value;\n//     }\n\n//     if (value.startsWith('data:')) {\n//         return value;\n//     }\n\n//     return `data:image/png;base64,${value}`;\n// };\n","// const JUICE_OPTIONS = {\n//     applyAttributesTableElements: false\n// };\n\n// const DECLASSIFY_OPTIONS = {\n//     ignore: BLOCKQUOTE_SELECTORS.filter((selector) => selector.startsWith('.'))\n//         .map((selector) => selector.replace('.', ''))\n//         .concat(/proton-.*/)\n//         .concat(/protonmail.*/)\n// };\n\n/**\n * Iterates through all parent nodes (including current), comparing against cb.\n * @param {DOMNode} node\n * @param {Function} cb\n * @returns {*}\n */\n// eslint-disable-next-line import/prefer-default-export\n// export const findParent = (node, cb) => {\n//     let traverse = node;\n//     if (traverse && cb(traverse)) {\n//         return traverse;\n//     }\n//     while (traverse.parentNode) {\n//         traverse = traverse.parentNode;\n//         if (cb(traverse)) {\n//             return traverse;\n//         }\n//     }\n// };\n\n/**\n * Inline css into an element and remove all obsolete class names.\n * @param {String} html\n * @returns {String}\n */\n// export const inlineCss = (html = '') => {\n//     try {\n//         return declassify.process(juice(html, JUICE_OPTIONS), DECLASSIFY_OPTIONS);\n//     } catch (err) {\n//         console.error(err);\n//         return html;\n//     }\n// };\n\n/**\n * Set an element to be hidden.\n * @param {DOMNode} el\n * @param {Boolean} value Hidden or shown\n */\n// export const setHidden = (el, value = false) => {\n//     el.style.display = value ? 'none' : '';\n// };\n\n/**\n * Force redraw of an element.\n * Copied from https://stackoverflow.com/a/3485654\n * @param {HTMLElement} el\n */\n// export const forceRedraw = (el) => {\n//     el.style.display = 'none';\n//     // eslint-disable-next-line no-unused-expressions\n//     el.offsetHeight;\n//     el.style.display = '';\n// };\n\nexport const escapeSrc = (value = '') => value.replace(/ src=/g, ' data-src=');\nexport const unescapeSrc = (value = '') => value.replace(/ data-src=/g, ' src=');\n\n/**\n * Toggle class on element depending on conditon\n * @param {DOMNode} element\n * @param {String} className\n * @param {Boolean} value\n */\n// export const toggle = (element, className, value) => {\n//     element.classList.contains(className) === value || element.classList.toggle(className);\n// };\n\n/**\n * Returns whether the element is a node.\n * See {@link https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType}\n * @param {DOMNode} node\n * @returns {boolean}\n */\n// export const isElement = (node) => node && node.nodeType === 1;\n\n/**\n * Get children configuration for a node/fragment\n * As IE is not able to deal with the dom API we need to \"emulate it\"\n * @param  {Element} node Can be a fragment\n * @return {Object}      {children: <Array>, first:<Element>, last:<Element>}\n */\n// export const getChildrenElements = (node) => {\n//     if (!isIE11() || node.firstElementChild) {\n//         return {\n//             first: node.firstElementChild,\n//             last: node.lastElementChild,\n//             children: node.children\n//         };\n//     }\n//     const children = _.filter(node.childNodes, isElement);\n\n//     return {\n//         first: children[0],\n//         last: _.last(children),\n//         children\n//     };\n// };\n\n/**\n * Test if the string contains HTML data\n * It doesn't have loading resources side effects\n * @param {String} str\n * @return {Object}\n */\n// export const isHTML = (str = '') => {\n//     const doc = new DOMParser().parseFromString(str, 'text/html');\n//     const firstChild = doc.body.childNodes[0];\n//     return {\n//         isHtml: Array.from(doc.body.childNodes).some(isElement),\n//         isWrapped: !!isElement(firstChild)\n//     };\n// };\n\nexport const matches = (node, selector) => (node.matches || node.msMatchesSelector).call(node, selector);\n\nexport const wrap = (element, html) => {\n    const container = document.createElement('div');\n    container.innerHTML = html;\n\n    const wrapper = container.firstChild;\n\n    wrapper.innerHTML = element.outerHTML;\n\n    element.parentNode.insertBefore(wrapper, element);\n    element.remove();\n};\n\nexport const parseInDiv = (content) => {\n    const div = document.createElement('div');\n    div.innerHTML = content;\n    return div;\n};\n","// import getRandomValues from 'get-random-values';\n\n// import { EMAIL_FORMATING } from '../app/constants';\n\nexport const EMAIL_FORMATING = {\n    OPEN_TAG_AUTOCOMPLETE: '‹',\n    CLOSE_TAG_AUTOCOMPLETE: '›',\n    OPEN_TAG_AUTOCOMPLETE_RAW: '<',\n    CLOSE_TAG_AUTOCOMPLETE_RAW: '>'\n};\n\nconst {\n    OPEN_TAG_AUTOCOMPLETE,\n    CLOSE_TAG_AUTOCOMPLETE,\n    OPEN_TAG_AUTOCOMPLETE_RAW,\n    CLOSE_TAG_AUTOCOMPLETE_RAW\n} = EMAIL_FORMATING;\n\nexport const MAP_TAGS = {\n    [OPEN_TAG_AUTOCOMPLETE_RAW]: OPEN_TAG_AUTOCOMPLETE,\n    [CLOSE_TAG_AUTOCOMPLETE_RAW]: CLOSE_TAG_AUTOCOMPLETE,\n    [OPEN_TAG_AUTOCOMPLETE]: OPEN_TAG_AUTOCOMPLETE_RAW,\n    [CLOSE_TAG_AUTOCOMPLETE]: CLOSE_TAG_AUTOCOMPLETE_RAW\n};\n\nexport const escape = (string) => {\n    const UNESCAPE_HTML_REGEX = /[&<>\"']/g;\n    const HTML_ESCAPES = {\n        '&': '&amp;',\n        '<': '&lt;',\n        '>': '&gt;',\n        '\"': '&quot;',\n        \"'\": '&#39;'\n    };\n\n    return string.replace(UNESCAPE_HTML_REGEX, HTML_ESCAPES);\n};\n\nexport const unescape = (string) => {\n    const ESCAPED_HTML_REGEX = /&(?:amp|lt|gt|quot|#39);/g;\n    const HTML_UNESCAPES = {\n        '&amp;': '&',\n        '&lt;': '<',\n        '&gt;': '>',\n        '&quot;': '\"',\n        '&#39;': \"'\"\n    };\n\n    return string.replace(ESCAPED_HTML_REGEX, HTML_UNESCAPES);\n};\n\n/**\n * Replace custom unicode escape for chevrons by default\n * Replace <> (for a tag) via unicode or reverse it\n * @param  {String} input\n * @param {String} mode  undefined for toUnicode, reverse for unicode -> <|>\n * @return {String}\n */\nexport function unicodeTag(input = '', mode) {\n    if (mode === 'reverse') {\n        const matchTagUnicodeOpenClose = () => new RegExp(`${OPEN_TAG_AUTOCOMPLETE}|${CLOSE_TAG_AUTOCOMPLETE}`, 'ig');\n\n        return input.replace(matchTagUnicodeOpenClose(), (match) => MAP_TAGS[match] || '');\n    }\n\n    const matchTagOpenClose = () => new RegExp(`${OPEN_TAG_AUTOCOMPLETE_RAW}|${CLOSE_TAG_AUTOCOMPLETE_RAW}`, 'ig');\n    return input.replace(matchTagOpenClose(), (match) => MAP_TAGS[match] || '');\n}\n\n/**\n * Transform value to be normalized (lowercase)\n * @param {String} email\n * @return {String}\n */\nexport const normalizeEmail = (email = '') => email.toLowerCase();\n\n/**\n * Remove plus alias part present in the email value\n * @param {String} email containing +plus-alias\n */\nexport const removeEmailAlias = (email = '') => {\n    return normalizeEmail(email)\n        .replace(/(\\+[^@]*)@/, '@')\n        .replace(/[._-](?=[^@]*@)/g, '');\n};\n\n/**\n * Add plus alias part for an email\n * @param {String} email original\n * @param {String} plus part to add between + and @\n * @return {String}\n */\nexport const addPlusAlias = (email = '', plus = '') => {\n    const atIndex = email.indexOf('@');\n    const plusIndex = email.indexOf('+');\n\n    if (atIndex === -1 || plusIndex > -1) {\n        return email;\n    }\n\n    const name = email.substring(0, atIndex);\n    const domain = email.substring(atIndex, email.length);\n\n    return `${name}+${plus}${domain}`;\n};\n\n/**\n * Converts the integer to a 32-bit base encoded string in 2s complement format, so that it doesn't contain a sign \"-\"\n * @param val int The integer to be encoded\n * @param bits int The amount of bits per character\n */\nexport const toUnsignedString = (val, bits) => {\n    const base = 1 << bits;\n    const wordCount = Math.ceil(32 / bits);\n    const bottomBits = (wordCount - 1) * bits;\n\n    const bottom = val & ((1 << bottomBits) - 1);\n    const top = val >>> bottomBits;\n    if (top === 0) {\n        return bottom.toString(base);\n    }\n    const topString = top.toString(base);\n    const bottomString = bottom.toString(base);\n    const padLength = wordCount - topString.length - bottomString.length;\n    const middleString = '0'.repeat(padLength);\n    return topString + middleString + bottomString;\n};\n\n/**\n * Unescape a string in hex or octal encoding.\n * See https://www.w3.org/International/questions/qa-escapes#css_other for all possible cases.\n * @param {String} str\n * @returns {String} escaped string\n */\nexport const unescapeCSSEncoding = (str) => {\n    // Regexp declared inside the function to reset its state (because of the global flag).\n    // cf https://stackoverflow.com/questions/1520800/why-does-a-regexp-with-global-flag-give-wrong-results\n    const UNESCAPE_CSS_ESCAPES_REGEX = /\\\\([0-9A-Fa-f]{1,6}) ?/g;\n    const UNESCAPE_HTML_DEC_REGEX = /&#(\\d+)(;|(?=[^\\d;]))/g;\n    const UNESCAPE_HTML_HEX_REGEX = /&#x([0-9A-Fa-f]+)(;|(?=[^\\d;]))/g;\n    const OTHER_ESC = /\\\\(.)/g;\n\n    const handleEscape = (radix) => (ignored, val) => String.fromCodePoint(Number.parseInt(val, radix));\n    /*\n     * basic unescaped named sequences: &amp; etcetera, lodash does not support a lot, but that is not a problem for our case.\n     * Actually handling all escaped sequences would mean keeping track of a very large and ever growing amount of named sequences\n     */\n    const namedUnescaped = unescape(str);\n    // lodash doesn't unescape &#160; or &#xA0; sequences, we have to do this manually:\n    const decUnescaped = namedUnescaped.replace(UNESCAPE_HTML_DEC_REGEX, handleEscape(10));\n    const hexUnescaped = decUnescaped.replace(UNESCAPE_HTML_HEX_REGEX, handleEscape(16));\n    // unescape css backslash sequences\n    const strUnescapedHex = hexUnescaped.replace(UNESCAPE_CSS_ESCAPES_REGEX, handleEscape(16));\n\n    return strUnescapedHex.replace(OTHER_ESC, (_, char) => char);\n};\n\nexport const ucFirst = (input = '') => {\n    return input.charAt(0).toUpperCase() + input.slice(1);\n};\n\n/**\n * Extract value between chevrons\n * @param {String} str ex: Andy <andy@pm.me>\n * @return {String} ex: andy@pm.me\n */\nexport const extractChevrons = (str = '') => {\n    const CHEVRONS_REGEX = /<([^>]+)>/g;\n    const [, match = ''] = CHEVRONS_REGEX.exec(str) || [];\n    return match;\n};\n\n/**\n * @{link https://css-tricks.com/snippets/javascript/htmlentities-for-javascript/}\n */\nexport const htmlEntities = (str = '') => {\n    return String(str)\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;');\n};\n\nexport const uniqID = () => {\n    return `pt${Math.random()\n        .toString(32)\n        .slice(2, 12)}-${Date.now()}`;\n};\n\n/**\n * Generates a contact UID of the form 'proton-web-uuid'\n * @return {String}\n */\nexport function generateUID() {\n    const s4 = () => {\n        return Math.floor((1 + Math.random()) * 0x10000)\n            .toString(16)\n            .substring(1);\n    };\n\n    return `proton-web-${s4()}${s4()}-${s4()}-${s4()}-${s4()}-${s4()}${s4()}${s4()}`;\n}\n\n/**\n * Generate a random string.\n * @param {Number} length\n * @return {string}\n */\n// export const getRandomString = (length) => {\n//     const charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n//     let i;\n//     let result = '';\n\n//     const values = getRandomValues(new Uint32Array(length));\n\n//     for (i = 0; i < length; i++) {\n//         result += charset[values[i] % charset.length];\n//     }\n\n//     return result;\n// };\n","import mimemessage from 'mimemessage';\n\n// import { toUnsignedString, ucFirst } from '../../../helpers/string';\nimport { ucFirst } from '../string';\n// import transformEscape from '../../message/helpers/transformEscape';\n\nconst REGEXP_CID_START = /^cid:/g;\n\n/**\n * Convert raw headers to better format handled by the mimemessage lib\n * @param  {Object} config   Current attachment headers\n * @return {Object}          { formated: <Object>, headers: Object }\n */\nexport const convertMimeHeaders = (config = {}) => {\n    const headers = Object.keys(config)\n        .filter((key) => key.startsWith('content'))\n        .reduce((acc, key) => {\n            const [, type] = key.split('-');\n            acc[`content${ucFirst(type)}`] = config[key];\n            return acc;\n        }, Object.create(null));\n\n    return {\n        formatted: mimemessage.factory(headers),\n        headers\n    };\n};\n\n/**\n * Flush the container HTML and return the container\n * @param {String} content\n * @return {Node} Empty DIV\n */\n// const getBodyParser = (content = '', activeCache = false) => {\n//     return transformEscape(content, {\n//         action: '',\n//         activeCache,\n//         isDocument: false,\n//         cache: cacheBase64\n//     });\n// };\n\n/**\n * Removes enclosing quotes (\"\", '', &lt;&gt;) from a string\n * @param {String} value - String to be converted\n * @return {String} value - Converted string\n */\nfunction trimQuotes(input) {\n    const value = `${input || ''}`.trim(); // input can be a number\n\n    if (['\"', \"'\", '<'].indexOf(value.charAt(0)) > -1 && ['\"', \"'\", '>'].indexOf(value.charAt(value.length - 1)) > -1) {\n        return value.substr(1, value.length - 2);\n    }\n\n    return value;\n}\n\nexport const readCID = (Headers = {}) => {\n    if (Headers['content-id']) {\n        return trimQuotes(Headers['content-id']);\n    }\n\n    // We can find an image without cid so base64 the location\n    if (Headers['content-location']) {\n        return trimQuotes(Headers['content-location']);\n    }\n\n    return '';\n};\n\n/**\n * Find embedded element in div\n * @param {String} cid\n * @param {HTMLElement} document\n * @return {Array}\n */\nexport const findEmbedded = (cid, document) => {\n    // If cid is an empty string, it can give a false positive\n    if (!cid) {\n        return [];\n    }\n    const selector = [\n        `img[src=\"${cid}\"]`,\n        `img[src=\"cid:${cid}\"]`,\n        `img[data-embedded-img=\"${cid}\"]`,\n        `img[data-embedded-img=\"cid:${cid}\"]`,\n        `img[data-src=\"cid:${cid}\"]`,\n        `img[proton-src=\"cid:${cid}\"]`\n    ];\n    return [...document.querySelectorAll(selector.join(', '))];\n};\n\n/**\n * Check if an attachment is embedded\n * @param {Object} attachment\n * @param {String} body\n * @return {Boolean}\n */\n// const isEmbedded = ({ Headers = {}, MIMEType = '' }, body = '') => {\n//     const testDiv = body ? getBodyParser(body) : document.createElement('DIV');\n//     const cid = readCID(Headers);\n//     const nodes = findEmbedded(cid, testDiv);\n\n//     return nodes.length && attachmentFileFormat.isEmbedded(MIMEType);\n// };\n\n/**\n * Extract embedded attachment from body\n * @param {Array} attachments\n * @param {Node} document\n * @return {Array}\n */\nexport const extractEmbedded = (attachments = [], document) => {\n    return attachments.filter(({ Headers = {} }) => {\n        const cid = readCID(Headers);\n        const nodes = findEmbedded(cid, document);\n\n        return nodes.length;\n    });\n};\n\nexport const getAttachementName = (Headers = {}) => {\n    if (Headers['content-disposition'] !== 'inline') {\n        const { formatted = {} } = convertMimeHeaders(Headers);\n        const { params: { filename } = {} } = formatted.contentDisposition() || {};\n        if (filename) {\n            return filename.replace(/\"/g, '');\n        }\n    }\n\n    return '';\n};\n\n/**\n * Generate CID from input and email\n * @param {String} input\n * @param {String} email\n * @return {String} cid\n */\n// const generateCid = (input, email) => {\n//     const hash = toUnsignedString(tools.hash(input), 4);\n//     const domain = email.split('@')[1];\n//     return `${hash}@${domain}`;\n// };\n\n/**\n * Get the url for an embedded image\n * @param  {Node} node Image\n * @return {String}\n */\nexport const srcToCID = (node) => {\n    const attribute = node.getAttribute('data-embedded-img') || '';\n    return attribute.replace(REGEXP_CID_START, '');\n};\n\nexport const getBlobFromURL = (url = '') => {\n    const xhr = new XMLHttpRequest();\n\n    return new Promise((resolve, reject) => {\n        xhr.open('GET', url, true);\n        xhr.responseType = 'blob';\n        xhr.onload = function onload() {\n            if (xhr.status === 200) {\n                return resolve(xhr.response);\n            }\n            reject(xhr.response);\n        };\n\n        xhr.send();\n    });\n};\n","import { noop } from 'proton-shared/lib/helpers/function';\nimport * as embeddedUtils from './embeddedUtils';\n\nconst Blobs = {};\nconst MAP_BLOBS = {};\nconst CIDList = {};\n// const { on, dispatcher } = dispatchers(['embeddedStore']);\n\nconst PREFIX_DRAFT = 'draft_';\nconst urlCreator = () => window.URL || window.webkitURL;\n\n/**\n * When we close the composer we need to deallocate Blobs used by this composer\n */\n// on('composer.update', (e, { type, data = {} }) => {\n//     if (type === 'close') {\n//         const { ID, ConversationID } = data.message;\n//         const key = `${PREFIX_DRAFT}${ConversationID || ID}`;\n\n//         // CLEAN ALL THE THINGS\n//         if (CIDList[ID]) {\n//             delete CIDList[ID];\n//         }\n\n//         // Clean these blobs !\n//         if (MAP_BLOBS[key]) {\n//             deallocateList(key);\n//         }\n//     }\n// });\n\nfunction getHashKey(msg) {\n    const isDraft = msg.isDraft ? msg.isDraft() : false;\n    const prefix = isDraft ? PREFIX_DRAFT : '';\n    return `${prefix}${msg.ConversationID || msg.ID}`.trim();\n}\n\n/**\n * The URL.revokeObjectURL() static method releases an existing object URL\n * which was previously created by calling URL.createObjectURL().\n * Call this method when you've finished using a object URL, in order to let\n * the browser know it doesn't need to keep the reference to the file\n * any longer.\n * @param {key}  key     Key of the message/conversation\n */\nfunction deallocateList(key) {\n    const list = MAP_BLOBS[key] || [];\n    list.forEach((cid) => {\n        if (Blobs[cid]) {\n            urlCreator().revokeObjectURL(Blobs[cid].url);\n            // Remove the Blob ref from our store\n            delete Blobs[cid];\n        }\n    });\n    delete MAP_BLOBS[key];\n}\n\n/**\n * blob URLs never get deallocated automatically--\n * we manage deallocation to avoid a massive memory leak\n * once we navigate away from a conversation\n * eg. this can be triggered from the conversations controller\n * @param  {Object} message [description]\n * @return {[type]}         [description]\n */\nexport function deallocate(message = {}) {\n    const key = getHashKey(message);\n    Object.keys(MAP_BLOBS)\n        .filter((k) => k !== key && k.indexOf(PREFIX_DRAFT) !== 0) // Do nothing for draft and itself\n        .forEach(deallocateList);\n}\n\n/**\n * Use the Blobs array to store CIDs url reference\n * once the attachment has been decrypted\n * so we can re-use the blob instead of decrypting\n * this should be rewritted a bit to work with\n * the service store\n */\nexport const store = (message = { isDraft: noop }, cid = '') => {\n    const Attachments = CIDList[message.ID] || {};\n    const { Headers = {} } = Attachments[cid] || {};\n\n    const key = getHashKey(message);\n\n    MAP_BLOBS[key] = MAP_BLOBS[key] || [];\n\n    return (data, MIME) => {\n        // If you switch to another conversation the MAP_BLOBS won't exist anymore\n        if (MAP_BLOBS[key]) {\n            // Turn the decrypted attachment data into a blob.\n            let blob = new Blob([data], { type: MIME });\n            // Generate the URL\n            let imageUrl = urlCreator().createObjectURL(blob);\n            // Store the generated URL\n            Blobs[cid] = {\n                url: imageUrl,\n                isContentLocation:\n                    typeof Headers['content-location'] !== 'undefined' && typeof Headers['content-id'] === 'undefined'\n            };\n            // this is supposed to remove the blob so it\n            // can be garbage collected. we dont save it (for now)\n            blob = null;\n            imageUrl = null;\n\n            MAP_BLOBS[key].push(cid);\n            // dispatcher.embeddedStore('store', { cid });\n        }\n    };\n};\n\nexport const getBlob = (cid) => Blobs[cid] || {};\nexport const hasBlob = (cid) => !!Blobs[cid];\n\nexport const getMessageCIDs = ({ ID }) => CIDList[ID] || {};\nexport const containsMessageCIDs = ({ ID }) => Object.keys(CIDList[ID] || {}).length > 0;\nexport const addMessageCID = (message, { Headers = {}, Name = '' }) => {\n    !CIDList[message.ID] && (CIDList[message.ID] = {});\n    !message.NumEmbedded && (message.NumEmbedded = 0);\n\n    const cid = embeddedUtils.readCID(Headers);\n    Headers.embedded = 1;\n    message.NumEmbedded++;\n    CIDList[message.ID][cid] = { Headers, Name };\n};\n\n/**\n * Check if the cid exist for a specific message\n * @param {Resource} message\n * @param {String} cid\n * @return {Boolean}\n */\nexport const existMessageCID = (message, cid) => {\n    return !!getMessageCIDs(message)[cid];\n};\n\nexport const getBlobValue = (cid) => {\n    const { url } = getBlob(cid);\n    return embeddedUtils.getBlobFromURL(url);\n};\n\nexport const cid = {\n    contains: containsMessageCIDs,\n    exist: existMessageCID,\n    add: addMessageCID,\n    get: getMessageCIDs\n};\n\n//     return {\n//         store,\n//         deallocate,\n//         getBlob,\n//         hasBlob,\n//         getBlobValue,\n//         cid: {\n//             contains: containsMessageCIDs,\n//             exist: existMessageCID,\n//             add: addMessageCID,\n//             get: getMessageCIDs\n//         }\n//     };\n","import * as embeddedUtils from './embeddedUtils';\nimport * as embeddedStore from './embeddedStore';\n\nexport const find = (message) => {\n    const list = message.data.Attachments || [];\n\n    if (!list.length) {\n        return 0;\n    }\n\n    const embeddedAttachments = embeddedUtils.extractEmbedded(list, message.document);\n\n    embeddedAttachments.forEach((attachment) => {\n        embeddedStore.cid.add(message, attachment);\n    });\n\n    return embeddedAttachments;\n};\n\n/**\n * Find all attachements inline\n * @param  {Message}\n * @return {Array}\n */\nexport const listInlineAttachments = (message) => {\n    // const list = message.getAttachments();\n    const list = message.data.Attachments || [];\n    const MAP_CID = embeddedStore.cid.get(message);\n\n    return Object.keys(MAP_CID).reduce((acc, cid) => {\n        // Extract current attachement content-id\n        const contentId = MAP_CID[cid].Headers['content-id'];\n        const contentName = embeddedUtils.getAttachementName(MAP_CID[cid].Headers);\n\n        // Find the matching attachement\n        const attachment = list.find(({ Headers = {}, Name = '' } = {}) => {\n            if (Headers['content-id']) {\n                return Headers['content-id'] === contentId;\n            }\n\n            if (Headers['content-location']) {\n                return Name === contentName;\n            }\n\n            return false;\n        });\n\n        attachment && acc.push({ cid, attachment });\n        return acc;\n    }, []);\n};\n","import { flow, filter, map } from 'lodash/fp';\nimport { SHOW_IMAGES } from 'proton-shared/lib/constants';\nimport { wait } from 'proton-shared/lib/helpers/promise';\nimport { noop } from 'proton-shared/lib/helpers/function';\n\nimport { parseInDiv } from '../dom';\nimport * as embeddedUtils from './embeddedUtils';\nimport * as embeddedStore from './embeddedStore';\nimport * as embeddedFinder from './embeddedFinder';\n\nconst ENCRYPTED_STATUS = {\n    PGP_MIME: 8 // Used for attachment\n};\n\nconst EMBEDDED_CLASSNAME = 'proton-embedded';\n\n// TODO: Remove these mocks\n// const AttachmentLoader = { get: noop, has: noop };\nconst invalidSignature = { confirm: noop, askAgain: noop };\n\n/**\n * It works on data-src attribute for this reason:\n * Don't set the src attribute since it's evaluated and cid:cid create an error (#3330)\n * NET::ERR_UNKNOWN_URL_SCHEME because src=\"cid:xxxx\" is not valid HTML\n * This function expects the content to be properly unescaped later.\n */\nconst actionDirection = {\n    blob(nodes, cid, url) {\n        [...nodes].forEach((node) => {\n            // Always remove the `data-` src attribute set by the cid function, otherwise it can get displayed if the user does not auto load embedded images.\n            node.removeAttribute('data-src');\n            if (node.getAttribute('proton-src')) {\n                return;\n            }\n            node.setAttribute('data-src', url);\n            node.setAttribute('data-embedded-img', cid);\n            node.classList.add(EMBEDDED_CLASSNAME);\n        });\n    },\n    cid(nodes, cid) {\n        [...nodes].forEach((node) => {\n            node.removeAttribute('data-embedded-img');\n            node.removeAttribute('src');\n            node.setAttribute('data-src', `cid:${cid}`);\n        });\n    }\n};\n\n/**\n * Parse the content to inject the generated blob src\n * This function expects the content to be unescaped later.\n * @param  {Resource} message             Message\n * @param  {String} direction             Parsing to execute, blob || cid\n * @return {String}                       Parsed HTML\n */\nexport const mutateHTML = (message, direction) => {\n    Object.keys(embeddedStore.cid.get(message)).forEach((cid) => {\n        const nodes = embeddedUtils.findEmbedded(cid, message.document);\n\n        if (nodes.length) {\n            const { url = '' } = embeddedStore.getBlob(cid);\n\n            (actionDirection[direction] || noop)(nodes, cid, url);\n        }\n    });\n};\n\nexport const removeEmbeddedHTML = (message, Headers = {}, content = '') => {\n    const cid = embeddedUtils.readCID(Headers);\n    const tempDOM = parseInDiv(content);\n    const nodes = tempDOM.find(\n        `img[src=\"cid:${cid}\"], img[data-embedded-img=\"cid:${cid}\"], img[data-embedded-img=\"${cid}\"]`\n    );\n    if (nodes.length) {\n        nodes.remove();\n    }\n    return tempDOM.html();\n};\n\n/**\n * launch and forget: we don't need to do anything with the result\n * wait a bit before disabling the invalidsignature modal\n * this allows the user to see the change icon popup.\n *\n * More elaborate explanation:\n * We're addressing a fairly rare UX thing here.\n * We want to avoid showing a popup saying the confirmmodal when the signature is invalid to often.\n * For instance, when embedding images you can see that the icon says the signature is invalid,\n * so we don't show this icon (as the user can know it before clicking).\n *\n * However, if you would click on the embedded attachment before it has downloaded the attachment, it will not show this icon.\n * So consider you clicking on this attachment when it didn't verify the attachment yet.\n * Then just after that the attachment loader downloaded the attachment and\n * verified it signature and sets invalidSignature.askAgain to false.\n * Then you don't know that this happened, but in this case you should get a popup.\n *\n * Note when thinking  this is just a race condition: also consider the case where you are clicking\n * on the icon and it shows the icon just before you click: it's not humanly possible to see that it\n * changed and is not valid. So even in that case we want to show the icon.\n * @param {Object} message\n * @param {Array} list (list of attachments)\n */\nconst triggerSigVerification = (message, list, attachmentLoader) => {\n    /*\n     * launch and forget: we don't need to do anything with the result\n     * wait a bit before disabling the invalidsignature modal\n     * this allows the user to see the change icon popup.\n     */\n    Promise.all(\n        list.map(({ attachment }) =>\n            attachmentLoader\n                .get(attachment, message)\n                .then(() => wait(1000))\n                .then(() => invalidSignature.askAgain(message, attachment, false))\n        )\n    );\n};\n\nexport const decrypt = (message, mailSettings, attachmentLoader) => {\n    const list = embeddedFinder.listInlineAttachments(message);\n    const show = message.showEmbeddedImages === true || mailSettings.ShowImages & SHOW_IMAGES.EMBEDDED;\n    const sigList = show ? list : list.filter(({ attachment }) => attachmentLoader.has(attachment));\n\n    // For a draft if we close it before the end of the attachment upload, there are no keyPackets\n    const promise = flow(\n        // pgp attachments do not have keypackets.\n        filter(({ attachment }) => attachment.KeyPackets || attachment.Encrypted === ENCRYPTED_STATUS.PGP_MIME),\n        filter(({ cid }) => !embeddedStore.hasBlob(cid) && show),\n        map(({ cid, attachment }) => {\n            const storeAttachement = embeddedStore.store(message, cid);\n            return attachmentLoader.get(attachment, message).then((buffer) => {\n                return storeAttachement(buffer, attachment.MIMEType);\n            });\n        })\n    )(list);\n\n    if (!promise.length) {\n        // all cid was already stored, we can resolve\n        triggerSigVerification(message, sigList, attachmentLoader);\n        return Promise.resolve({});\n    }\n\n    return Promise.all(promise).then(() => {\n        // We need to trigger on the original list not after filtering: after filter they are just stored\n        // somewhere else\n        triggerSigVerification(message, sigList, attachmentLoader);\n        return list.reduce((acc, { cid }) => {\n            acc[cid] = embeddedStore.getBlob(cid);\n            return acc;\n        }, Object.create(null));\n    });\n};\n","import { isInlineEmbedded } from '../image';\nimport { escapeSrc, unescapeSrc } from '../dom';\nimport * as embeddedFinder from './embeddedFinder';\nimport * as embeddedUtils from './embeddedUtils';\nimport * as embeddedStore from './embeddedStore';\nimport * as embeddedParser from './embeddedParser';\n\nconst REGEXP_CID_START = /^cid:/g;\n\nconst escape = ({ document }) => (document.innerHTML = escapeSrc(document.innerHTML));\nconst unescape = ({ document }) => (document.innerHTML = unescapeSrc(document.innerHTML));\n\n/**\n * Parse a message in order to\n *     - Find all of its attachments\n *     - Store blobs per attachment\n *     - Bind blobs or cid to the body\n * @param  {Message} message\n * @param  {MailSettingsModel} mailSettings\n * @param  {object} options\n * param  {String} direction blob | cid\n * param  {String} text      Alternative body to parse\n * @return {Promise}\n */\nexport const parser = async (\n    message,\n    mailSettings,\n    { direction = 'blob', isOutside = false, attachmentLoader } = {}\n) => {\n    const numEmbedded = embeddedFinder.find(message).length;\n\n    if (numEmbedded === 0) {\n        /**\n         * cf #5088 we need to escape the body again if we forgot to set the password First.\n         * Prevent unescaped HTML.\n         *\n         * Don't do it everytime because it's \"slow\" and we don't want to slow down the process.\n         */\n        if (isOutside) {\n            escape(message);\n            embeddedParser.mutateHTML(message, direction);\n            unescape(message);\n            return { document: message.document };\n        }\n\n        return {};\n    }\n\n    escape(message);\n    await embeddedParser.decrypt(message, mailSettings, attachmentLoader);\n    embeddedParser.mutateHTML(message, direction);\n    unescape(message);\n    return { document: message.document, numEmbedded };\n};\n\nexport const addEmbedded = (message, cid, data, MIME) => {\n    embeddedStore.store(message, cid)(data, MIME);\n    return embeddedStore.getBlob(cid);\n};\n\n/**\n * Get the url for an embedded image\n * @param  {Node} node Image\n * @return {String}\n */\nexport const getUrl = (node) => {\n    // If it's an inline embedded img, just return the src because that contains the img data.\n    const src = node.getAttribute('data-embedded-img') || '';\n    if (isInlineEmbedded(src)) {\n        return src;\n    }\n    const cid = embeddedUtils.srcToCID(node);\n    const { url = '' } = embeddedStore.getBlob(cid);\n    return url;\n};\n\n/**\n * Check if attachment exist inside the dom\n * @param  {Message} message\n * @param  {Document} html Message body parser\n * @return {Function}\n */\nexport const getAttachment = (message) => {\n    /**\n     * @param  {String} src - cid:url\n     */\n    return (src) => {\n        const cid = src.replace(REGEXP_CID_START, '');\n        const contains = embeddedFinder.find(message);\n        if (contains) {\n            return embeddedStore.cid.get(message)[cid] || {};\n        }\n    };\n};\n\n// return {\n//     parser,\n//     addEmbedded,\n//     getUrl,\n//     getAttachment,\n//     isEmbedded: embeddedUtils.isEmbedded,\n//     getCid: embeddedUtils.readCID,\n//     getBlob: embeddedStore.getBlobValue,\n//     deallocator: embeddedStore.deallocate,\n//     clean: embeddedStore.cleanMemory,\n//     removeEmbedded: embeddedParser.removeEmbeddedHTML,\n//     exist: embeddedStore.cid.exist,\n//     generateCid: embeddedUtils.generateCid\n// };\n","// import _ from 'lodash';\n// import { flow, filter, find } from 'lodash/fp';\nimport { createMessage, getSignature, verifyMessage } from 'pmcrypto';\n\nimport { VERIFICATION_STATUS } from '../constants';\n\n/* @ngInject */\n// function SignatureVerifier(dispatchers, addressesModel, publicKeyStore) {\nconst { NOT_VERIFIED, NOT_SIGNED, SIGNED_AND_INVALID, SIGNED_NO_PUB_KEY, SIGNED_AND_VALID } = VERIFICATION_STATUS;\n// const { dispatcher } = dispatchers(['attachmentVerified']);\n\n/**\n * Needed to push the verified status from PGP/MIME to the CACHE.\n * @param {string} ID\n * @param {number} verified\n */\n// export const put = (ID, verified) => (CACHE[ID] = verified);\n\n/**\n * Converts a protonmail addressID to the actual email address\n * @param addressID\n * @returns {*}\n */\n// const addressIDtoEmail = (addressID) => {\n//     const { Email } = flow(\n//         filter({ Status: 1, Receive: 1 }),\n//         find({ ID: addressID })\n//     )(addressesModel.get());\n\n//     return Email;\n// };\n\n/**\n * Retrieves the available public keys to verify attachments from the given message with\n * @param message\n */\n// const getPublicKeys = (message) => {\n//     // The Sender object is empty for drafts\n//     const email = message.Sender.Address || addressIDtoEmail(message.AddressID);\n\n//     return publicKeyStore.get([email], true).then(({ [email]: list }) => list);\n// };\n\n/**\n * Retrieve the verification status from the cache.\n * @param {String} Attachment.ID\n * @returns {*}\n */\nexport const getVerificationStatus = ({ ID = '' }, cache) => {\n    // Instead of || because VERIFICATION_STATUS can be 0.\n    return cache.has(ID) ? cache.get(ID) : NOT_VERIFIED;\n};\n\n/**\n * Returns the signature status for each of the signatures when after verifying them with the decryptedAttachment\n * @param {Uint8Array} decryptedAttachment\n * @param {Array} signatures\n * @param {Array} publicKeys\n * @returns {Promise.<*[]>}\n */\nconst verifyAllSignatures = (decryptedAttachment, signatures, publicKeys) => {\n    const attMessage = createMessage(decryptedAttachment);\n\n    const asyncSigVerifiers = signatures.map((signature) => {\n        return verifyMessage({\n            message: attMessage,\n            publicKeys,\n            signature\n        }).then(({ verified }) => verified);\n    });\n\n    return Promise.all(asyncSigVerifiers);\n};\n\n/**\n * Verify the signature of an attachment given the decrypted attachment and the message it is attached to.\n * Always tries to reverify the signatures, you can check if the attachment was already verified using\n * getVerificationStatus\n * @param {Object} attachment\n * @param {UInt8Array} decryptedAttachment\n * @param {Message} message\n * @param {embeddedSigs} A list of signature packets found by decrypting the attachment (PGP/Inline case)\n * @returns {Promise.<*>}\n */\nexport const verify = async (attachment, decryptedAttachment, { publicKeys }, embeddedSigs = [], cache) => {\n    const { ID, Signature } = attachment;\n    const signatures = Signature ? [await getSignature(Signature)] : embeddedSigs;\n\n    // shortcut to prevent unnecessary public key fetching\n    if (!signatures.length) {\n        cache.set(ID, NOT_SIGNED);\n        return cache.get(ID);\n    }\n\n    // const keyObjects = await getPublicKeys(message);\n    // const publicKeys = keyObjects.reduce((acc, { key, compromised }) => {\n    //     !compromised && acc.push(key);\n    //     return acc;\n    // }, []);\n    const statusPerSig = await verifyAllSignatures(decryptedAttachment, signatures, publicKeys);\n    const pmcryptoVerified = statusPerSig.reduce(\n        (acc, status) => (acc === SIGNED_AND_VALID ? SIGNED_AND_VALID : status),\n        NOT_SIGNED\n    );\n    const verified =\n        (!publicKeys || !publicKeys.length) && pmcryptoVerified === SIGNED_AND_INVALID\n            ? SIGNED_NO_PUB_KEY\n            : pmcryptoVerified;\n    cache.set(ID, verified);\n    // dispatcher.attachmentVerified('verified', { message, attachment, status: verified });\n    return verified;\n};\n","import { useCallback } from 'react';\nimport { useCache } from 'react-components';\nimport { verify as verifySignature } from '../helpers/signatures';\n\nconst CACHE_KEY = 'Signatures';\n\n// TODO: Use a listenable cache to be able to get reactive data from views\n\nexport const useSignaturesCache = () => {\n    const cache = useCache();\n\n    if (!cache.has(CACHE_KEY)) {\n        cache.set(CACHE_KEY, new Map());\n    }\n    return cache.get(CACHE_KEY);\n};\n\nexport const useSignatures = () => {\n    const cache = useSignaturesCache();\n\n    const verify = useCallback((attachment, decryptedAttachment, { publicKeys }, embeddedSigs = []) =>\n        verifySignature(attachment, decryptedAttachment, { publicKeys }, embeddedSigs, cache)\n    );\n\n    return { verify };\n};\n","import { useCallback } from 'react';\nimport { useCache, useApi } from 'react-components';\nimport {\n    getAndVerify,\n    getCacheKey,\n    download as downloadAttachment,\n    downloadAll as downloadAllAttachment\n} from '../helpers/attachments';\nimport { parser } from '../helpers/embedded/embedded';\nimport { useSignatures } from './useSignatures';\nimport { MessageExtended, Attachment } from '../models/message';\n\nconst CACHE_KEY = 'Attachments';\n\n// TODO: Use a listenable cache to be able to get reactive data from views\n\nexport const useAttachmentsCache = () => {\n    const cache = useCache();\n\n    if (!cache.has(CACHE_KEY)) {\n        cache.set(CACHE_KEY, new Map());\n    }\n    return cache.get(CACHE_KEY);\n};\n\nexport const useAttachments = () => {\n    const cache = useAttachmentsCache();\n    const api = useApi();\n    const { verify } = useSignatures();\n\n    const get = useCallback(\n        (attachment: Attachment = {}, message: MessageExtended = {}) =>\n            getAndVerify(attachment, message, false, { cache, api, verify }),\n        [cache, api]\n    );\n\n    const reverify = useCallback(\n        (attachment: Attachment = {}, message: MessageExtended = {}) =>\n            getAndVerify(attachment, message, true, { cache, api, verify }),\n        [cache, api]\n    );\n\n    const has = useCallback((attachment: Attachment = {}) => cache.get(getCacheKey(attachment)), [cache]);\n\n    const download = useCallback(\n        (attachment: Attachment = {}, message: MessageExtended = {}) =>\n            downloadAttachment(attachment, message, { cache, api }),\n        [cache, api]\n    );\n\n    const downloadAll = useCallback((message: MessageExtended = {}) => downloadAllAttachment(message, { cache, api }), [\n        cache,\n        api\n    ]);\n\n    return { get, reverify, has, download, downloadAll };\n};\n\nexport const useTransformAttachments = () => {\n    const attachmentLoader = useAttachments();\n\n    return useCallback(\n        async (message: MessageExtended, { mailSettings }: any) => {\n            return parser(message, mailSettings, { direction: 'blob', attachmentLoader });\n        },\n        [attachmentLoader]\n    );\n};\n","import React, { useState } from 'react';\nimport humanSize from 'proton-shared/lib/helpers/humanSize';\nimport { Icon, classnames } from 'react-components';\nimport { useAttachments } from '../../hooks/useAttachments';\nimport { Attachment, MessageExtended } from '../../models/message';\nimport { isEmbeddedLocal } from '../../helpers/attachments';\n\n// Reference: Angular/src/templates/attachments/attachmentElement.tpl.html\n\nconst OUTER_MAP_CLASSNAME: { [key: string]: string } = {\n    zip: 'file-rar-zip',\n    mp3: 'file-video',\n    javascript: 'file-unknown',\n    vcard: 'file-unknown',\n    xls: 'file-xls',\n    mov: 'file-video',\n    pdf: 'file-pdf',\n    power: 'file-ppt',\n    word: 'file-doc'\n};\n\nconst INNER_MAP_CLASSNAME: { [key: string]: string } = {\n    'pgp-keys': 'fa-key'\n};\n\nconst getFileIconType = ({ MIMEType = '' }: Attachment) => {\n    const key = Object.keys(OUTER_MAP_CLASSNAME).find((key) => MIMEType.includes(key));\n    return OUTER_MAP_CLASSNAME[key || ''] || '';\n};\n\nconst getInnerFileIconType = ({ MIMEType = '' }: Attachment) => {\n    const key = Object.keys(INNER_MAP_CLASSNAME).find((key) => MIMEType.includes(key));\n    return INNER_MAP_CLASSNAME[key || ''] || '';\n};\n\ninterface Props {\n    attachment: Attachment;\n    message: MessageExtended;\n}\n\nconst MessageAttachment = ({ attachment, message }: Props) => {\n    const { download } = useAttachments();\n    const [showLoader, setShowLoader] = useState(false);\n    const [showInstant, setShowInstant] = useState(false);\n\n    const humanAttachmentSize = humanSize(attachment.Size);\n\n    const outerIcon = getFileIconType(attachment) || 'file-image';\n    const single = !getInnerFileIconType(attachment);\n    const isEmbedded = isEmbeddedLocal(attachment);\n\n    const classNames = classnames([\n        'listAttachments-icon listAttachments-signature-icon mauto file-outer-icon',\n        single && 'single',\n        isEmbedded && 'is-embedded'\n    ]);\n\n    const clickHandler = async () => {\n        setShowLoader(true);\n        await download(attachment, message);\n        setShowLoader(false);\n        setShowInstant(true);\n    };\n\n    const icon = showLoader ? '' : showInstant ? 'download' : outerIcon;\n    const showInner = !single && !showLoader && !showInstant;\n\n    return (\n        <li className=\"mr1 mb1\">\n            <a\n                className=\"message-attachment inline-flex flex-nowrap mw100 pm-button listAttachments-item relative no-pointer-events-children\"\n                title={`${attachment.Name} ${humanAttachmentSize}`}\n                onClick={clickHandler}\n            >\n                <span className=\"flex flex-item-noshrink message-attachmentIcon relative flex\">\n                    <Icon name={icon} size={20} className={classNames} aria-busy={showLoader} />\n                    {showInner && <Icon name=\"key\" className=\"file-inner-icon mauto\" />}\n                </span>\n                <span className=\"inbl ellipsis flex flex-column message-attachmentInfo\">\n                    <span className=\"bl ellipsis mw100\">{attachment.Name}</span>\n                    <span className=\"bl message-attachmentSize\">{humanAttachmentSize}</span>\n                </span>\n            </a>\n        </li>\n    );\n};\n\nexport default MessageAttachment;\n","import React, { useState } from 'react';\nimport { c, msgid } from 'ttag';\nimport { Icon } from 'react-components';\nimport humanSize from 'proton-shared/lib/helpers/humanSize';\n\nimport { attachmentsSize, getAttachments } from '../../helpers/message';\nimport MessageAttachment from './MessageAttachment';\nimport { useAttachments } from '../../hooks/useAttachments';\nimport { MessageExtended } from '../../models/message';\n\ninterface Props {\n    message: MessageExtended;\n}\n\nconst MessageFooter = ({ message }: Props) => {\n    const { downloadAll } = useAttachments();\n    const [showLoader, setShowLoader] = useState(false);\n    const [showInstant, setShowInstant] = useState(false);\n\n    const humanAttachmentsSize = humanSize(attachmentsSize(message.data));\n    const attachments = getAttachments(message.data);\n    const numAttachments = attachments.length;\n    const numEmbedded = message.numEmbedded || 0;\n    const numPureAttachments = numAttachments - numEmbedded;\n\n    const handleDownloadAll = async () => {\n        setShowLoader(true);\n        await downloadAll(message);\n        setShowLoader(false);\n        setShowInstant(true);\n    };\n\n    return (\n        <div className=\"message-attachments\">\n            <div className=\"flex flex-spacebetween mb1\">\n                <span className=\"title\">\n                    <strong className=\"listAttachments-title-size mr0-5\">{humanAttachmentsSize}</strong>\n                    {numPureAttachments > 0 && (\n                        <span className=\"listAttachments-title-files mr0-5\">\n                            <Icon name=\"attach\" className=\"mr0-5\" />\n                            {c('Info').ngettext(\n                                msgid`${numPureAttachments} file attached`,\n                                `${numPureAttachments} files attached`,\n                                numPureAttachments\n                            )}\n                        </span>\n                    )}\n                    {numEmbedded > 0 && (\n                        <span className=\"listAttachments-title-embedded mr0-5\">\n                            {/* TODO: color=\"pm-blue\" */}\n                            <Icon name=\"file-image\" className=\"mr0-5\" />\n                            {c('Info').ngettext(\n                                msgid`${numEmbedded} embedded image`,\n                                `${numEmbedded} embedded images`,\n                                numEmbedded\n                            )}\n                        </span>\n                    )}\n                </span>\n                {numAttachments > 0 && (\n                    <div>\n                        <button onClick={handleDownloadAll} className=\"link strong mr0-5\">\n                            {c('Download attachments').t`Download all`}\n                        </button>\n                        {(showInstant || showLoader) && (\n                            <Icon name={showInstant ? 'download' : ''} aria-busy={showLoader} />\n                        )}\n                    </div>\n                )}\n            </div>\n\n            <ul className=\"listAttachments-list unstyled flex mb0\">\n                {attachments.map((attachment) => (\n                    <MessageAttachment key={attachment.ID} attachment={attachment} message={message} />\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default MessageFooter;\n","import DOMPurify from 'dompurify';\n\nimport { unicodeTag, unescapeCSSEncoding, escape } from './string';\n\n/*\nThis is valid\n    - background:&#117;r&#108;(\n    - background:url&lpar;\n    - etc.\n*/\nconst CSS_URL = '((url)(\\\\(|&(#40|#x00028|lpar);))';\nconst REGEXP_URL_ATTR = new RegExp(CSS_URL, 'gi');\nconst { LIST_PROTON_ATTR, MAP_PROTON_ATTR } = [\n    'data-src',\n    'src',\n    'srcset',\n    'background',\n    'poster',\n    'xlink:href'\n].reduce(\n    (acc, attr) => {\n        acc.LIST_PROTON_ATTR.push(`proton-${attr}`);\n        acc.MAP_PROTON_ATTR[attr] = true;\n        return acc;\n    },\n    {\n        LIST_PROTON_ATTR: [],\n        MAP_PROTON_ATTR: Object.create(null)\n    }\n);\n\nconst CONFIG = {\n    default: {\n        ALLOWED_URI_REGEXP: /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|blob|xmpp|data):|[^a-z]|[a-z+.\\-]+(?:[^a-z+.\\-:]|$))/i, // eslint-disable-line no-useless-escape\n        ADD_TAGS: ['proton-src', 'base', 'proton-svg'],\n        ADD_ATTR: ['target', 'proton-src'],\n        FORBID_TAGS: ['style', 'input', 'form'],\n        FORBID_ATTR: ['srcset']\n    },\n    // When we display a message we need to be global and return more informations\n    raw: { WHOLE_DOCUMENT: true, RETURN_DOM: true },\n    html: { WHOLE_DOCUMENT: false, RETURN_DOM: true },\n    protonizer: {\n        FORBID_ATTR: {},\n        ADD_ATTR: ['target'].concat(LIST_PROTON_ATTR),\n        WHOLE_DOCUMENT: true,\n        RETURN_DOM: true\n    },\n    content: {\n        ALLOW_UNKNOWN_PROTOCOLS: true,\n        WHOLE_DOCUMENT: false,\n        RETURN_DOM: true,\n        RETURN_DOM_FRAGMENT: true\n    }\n};\n\n/**\n * Escape some WTF from the CSSParser, cf spec files\n * @param  {String} style\n * @return {String}\n */\nconst escapeURLinStyle = (style) => {\n    // handle the case where the value is html encoded, e.g.:\n    // background:&#117;rl(&quot;https://i.imgur.com/WScAnHr.jpg&quot;)\n\n    const unescapedEncoding = unescapeCSSEncoding(style);\n    const escapeFlag = unescapedEncoding !== style;\n\n    const escapedStyle = unescapedEncoding.replace(/\\\\r/g, 'r').replace(REGEXP_URL_ATTR, 'proton-url(');\n\n    if (escapedStyle === unescapedEncoding) {\n        // nothing escaped: just return input\n        return style;\n    }\n\n    return escapeFlag ? escape(escapedStyle) : escapedStyle;\n};\n\nfunction beforeSanitizeElements(node) {\n    // We only work on elements\n    if (node.nodeType !== 1) {\n        return node;\n    }\n\n    Array.from(node.attributes).forEach((type) => {\n        const item = type.name;\n        if (MAP_PROTON_ATTR[item]) {\n            node.setAttribute('proton-' + item, node.getAttribute(item));\n            node.removeAttribute(item);\n        }\n\n        if (item === 'style') {\n            const escaped = escapeURLinStyle(node.getAttribute('style'));\n            node.setAttribute('style', escaped);\n        }\n    });\n\n    return node;\n}\n\nexport const purifyHTMLHooks = (active) => {\n    if (active) {\n        return DOMPurify.addHook('beforeSanitizeElements', beforeSanitizeElements);\n    }\n\n    DOMPurify.removeHook('beforeSanitizeElements');\n};\n\nconst getConfig = (type) => ({ ...CONFIG.default, ...(CONFIG[type] || {}) });\nconst clean = (mode) => {\n    const config = getConfig(mode);\n    return (input) => {\n        DOMPurify.clearConfig();\n        const value = DOMPurify.sanitize(input, config);\n        purifyHTMLHooks(false); // Always remove the hooks\n        if (mode === 'str') {\n            // When trusted types is available, DOMPurify returns a trustedHTML object and not a string, force cast it.\n            return value + '';\n        }\n        return value;\n    };\n};\n\n/**\n * Custom config only for messages\n * @param  {String} input\n * @return {String}\n */\nexport const message = clean('str');\n\n/**\n * Sanitize input with a config similar than Squire + ours\n * @param  {String} input\n * @return {Document}\n */\nexport const html = clean('raw');\n\n/**\n * Sanitize input with a config similar than Squire + ours\n * @param  {String} input\n * @return {Document}\n */\nexport const protonizer = (input, attachHooks) => {\n    const process = clean('protonizer');\n    purifyHTMLHooks(attachHooks);\n    return process(input);\n};\n\n/**\n * Sanitize input and returns the whole document\n * @param  {String} input\n * @return {Document}\n */\nexport const content = clean('content');\n\n/**\n * Default config we don't want any custom behaviour\n * @return {String}\n */\nexport const input = (str) => DOMPurify.sanitize(str) + '';\n\nexport const toTagUnicode = unicodeTag;\n","import { uniqID } from '../string';\nimport { protonizer as purifyHTML } from '../purify';\nimport { parseInDiv } from '../dom';\n\n/*\n * match attributes or elements with svg, xlink, srcset, src, background, poster.\n * the regex checks that the element/attribute is actually in an element by looking forward and seeing if it\n * ends properly with a >\n *\n * Another assumption in these regex are: all attributes use the \" quotes instead of the ' quote. This is satisfied\n * by the previous standardization steps\n */\nconst SVG_LIST = ['svg'];\nconst FORBIDDEN_SVG = `(${SVG_LIST.join('|')})`;\nconst NO_SPECIALS = '([^\"><\\\\\\\\]|\\\\\\\\[^><])';\nconst NO_QUOTS = '(\\\\\\\\.|[^\"\\\\\\\\])';\nconst HTML_STRING = `(\"${NO_QUOTS}*\")`;\nconst VERIFY_ELEMENT_END = `(?=(${NO_SPECIALS}|${HTML_STRING})*>)`;\nconst VERIFY_UNIQUE = '([^-])';\n\n// Ensure that the forbidden attributes are not already escaped with proton- by checking that there is no '-' character in front of them.\nconst REGEXP_SVG_BREAK = new RegExp(VERIFY_UNIQUE + FORBIDDEN_SVG + VERIFY_ELEMENT_END, 'gi');\n\n/**\n * Parsing base64 is expensive and can create a crash.\n * Here we can reduce input string from many Mb to less than 100kb, which is way easier to escape.\n * So instead of escaping everything with it too, we remove them from the HTML\n * and we replace it with an attribute with an uniq hash so we can load them\n * later for the user via injectMessageMedia component.\n * Store it inside inside a cache, an Angular Factory as we will need it for:\n *     - lazy load the image post render message\n *     - open the composer we need to lazy load it here too\n *\n * Source: regexp https://www.regextester.com/95505\n * @param  {String} input       Raw unescaped HTML\n * @param  {Object} cache       cacheBase64 factory\n * @param  {Boolean} activeCache\n * @return {String}\n */\nfunction removeBase64(input, cache, activeCache) {\n    /* eslint no-useless-escape: \"off\" */\n    return input.replace(/src=\"data:image\\/([a-zA-Z]*);base64,([^\\\"]*)\\\"/g, (match) => {\n        const hash = uniqID();\n        activeCache && cache.put(hash, match);\n        return `data-proton-replace-base=\"${hash}\"`;\n    });\n}\n\n/**\n * Parse the dom and find all matching base64 custom tags we added\n * then replace them by the valid SRC for the base64.\n * @param  {Element} node\n * @param  {Object} cache cacheBase64 service\n * @return {String}       HTML\n */\nexport function attachBase64Parser(node, cache) {\n    const nodes = [...node.querySelectorAll('[data-proton-replace-base]')];\n    nodes.forEach((node) => {\n        const hash = node.getAttribute('data-proton-replace-base');\n\n        // Clean the string and remove \\n else it won't load inside the browser\n        const src = (cache.get(hash) || '')\n            .replace(/^src=\"/, '')\n            .replace(/\"$/, '')\n            .replace(/\\n/, '');\n        src && node.setAttribute('src', src);\n        node.removeAttribute('data-proton-replace-base');\n    });\n    return node.innerHTML;\n}\n\n/**\n * Attach escaped base64 to the dom if the input is a txt\n * @param  {String} input HTML\n * @param  {Object} cache cacheBase64 service\n * @return {String}       HTML\n */\nexport function attachBase64(input, cache) {\n    // const [$parser] = $.parseHTML(`<div>${input}</div>`);\n    const div = parseInDiv(input);\n    return attachBase64Parser(div, cache);\n}\n\nfunction escapeSVG(input = '') {\n    return input.replace(REGEXP_SVG_BREAK, '$1proton-$2');\n}\n\n/**\n * Escape content for a message\n * Content can be a Document when we open a message, it's useful\n * in order to bind the base if it exists\n * @param  {String|Document} content                       Content to escape\n * @param  {String} options.action           Type of action\n * @return {Node}                            Parser\n */\nexport const transformEscape = async ({ raw }, { action, cache, activeCache = true } = {}) => {\n    const value = removeBase64(raw, cache, activeCache);\n    const activeHooks = action !== 'user.inject';\n    return { document: purifyHTML(escapeSVG(value), activeHooks) };\n};\n","import { matches } from '../dom';\n\nconst PROTOCOLS = ['ftp://', 'http://', 'https://', 'xmpp:', 'tel:', 'callto:'];\nconst ALL_PROTOCOLS = PROTOCOLS.concat(['mailto:']);\nconst MAP = PROTOCOLS.reduce((acc, key) => ((acc[key] = true), acc), {});\nconst EXCLUDE_ANCHORS = ':not([href=\"\"]):not([href^=\"#\"])';\n\nconst getNormalizedHref = (link) => {\n    return link\n        .getAttribute('href')\n        .trim()\n        .toLowerCase();\n};\n\nconst linkUsesProtocols = (link) => ALL_PROTOCOLS.some((proto) => getNormalizedHref(link).startsWith(proto));\n\nconst isEmptyAnchor = (link) => {\n    const href = getNormalizedHref(link);\n    return href === '' || MAP[href];\n};\n\nconst noReferrerInfo = (link) => {\n    link.setAttribute('rel', 'noreferrer nofollow noopener');\n};\n\n/**\n * make links open in a new tab\n * @param  {Array} links Collection of links\n * @return {Array}       links\n */\nconst httpInNewTab = (link) => {\n    if (matches(link, EXCLUDE_ANCHORS)) {\n        const href = link.getAttribute('href') || '';\n        const hasHTTP = href.indexOf('http') === 0;\n        const isRelative = href.indexOf('/') === 0;\n        // Prevent issue for Edge/IE A security problem cf https://jsfiddle.net/dpaoxoks/7/\n        if (hasHTTP || isRelative) {\n            link.setAttribute('target', '_blank');\n        }\n    }\n};\n\n/**\n * turn these relative links into absolute links\n * (example.com/a -> http://example.com)\n * @param  {Array} links Collection of links\n * @return {Array}       links\n */\nconst sanitizeRelativeHttpLinks = (link) => {\n    if (matches(link, EXCLUDE_ANCHORS) && !linkUsesProtocols(link) && link.nodeName === 'A') {\n        // link.href is the absolute value of the link: mail.protonmail.com is prepended, use getAttribute\n        const url = link.getAttribute('href');\n\n        link.setAttribute('href', `http://${url}`);\n    }\n};\n\n/*\n * Anchors will work on the whole protonmail page, so we need to disable them\n * opening them in a new tab will just open a empty page.\n */\nconst disableAnchors = (link) => {\n    isEmptyAnchor(link) && (link.style.pointerEvents = 'none');\n};\n\nexport const transformLinks = ({ document }) => {\n    const links = [...document.querySelectorAll('[href]')];\n\n    links.forEach((link) => {\n        httpInNewTab(link);\n        noReferrerInfo(link);\n        sanitizeRelativeHttpLinks(link);\n        disableAnchors(link);\n    });\n\n    return { document };\n};\n","import { SHOW_IMAGES } from 'proton-shared/lib/constants';\nimport { wrap } from '../dom';\nimport { isInlineEmbedded, isEmbedded } from '../image';\nimport * as embedded from '../embedded/embedded';\n\nconst EMBEDDED_CLASSNAME = 'proton-embedded';\nconst wrapImage = (img) => wrap(img, '<div class=\"image loading\"></div>');\n\nexport const transformEmbedded = async (message, { action = null, mailSettings }) => {\n    const images = [...message.document.querySelectorAll('img[proton-src]')];\n    const { ShowImages = 0 } = mailSettings;\n    const isReplyForward = /^reply|forward/.test(action);\n    const show = message.showEmbeddedImages === true || ShowImages & SHOW_IMAGES.EMBEDDED;\n    // TODO: const isEoReply = $state.is('eo.reply');\n    const isEoReply = false;\n    const getAttachment = embedded.getAttachment(message);\n\n    let showEmbedded = message.showEmbeddedImages;\n\n    images.forEach((image) => {\n        const src = image.getAttribute('proton-src');\n        image.setAttribute('referrerPolicy', 'no-referrer');\n        const attachment = getAttachment(src);\n\n        if (!image.classList.contains(EMBEDDED_CLASSNAME)) {\n            image.classList.add(EMBEDDED_CLASSNAME);\n        }\n\n        // check if the attachment exist before processing\n        if (!(attachment && Object.keys(attachment).length > 0)) {\n            /**\n             * If the attachment does not exist and the proton-src attribute\n             * starts with cid:, it's an embedded image that does not exist in the list of attachments,\n             * or is not a valid image.\n             * So remove the element from the DOM because it will not display anything useful anyway.\n             */\n            if (isEmbedded(src)) {\n                image.parentElement.removeChild(image);\n            }\n            // If it's not an inline embedded image, it's either an embedded image or a remote image. So stop here.\n            // Otherwise, continue so that the inline image is detected as an embedded image.\n            if (!isInlineEmbedded(src)) {\n                return;\n            }\n        }\n\n        if (show) {\n            image.setAttribute('data-embedded-img', src);\n            /**\n             * Since the image is supposed to be displayed, remove the proton-src attribute.\n             * Then it will be parsed by the embeddedParser in the blob or cid direction.\n             */\n            image.removeAttribute('proton-src');\n\n            // Auto load image inside a reply draft\n            if (isReplyForward) {\n                // `getUrl` may return undefined here because the embedded attachments have not yet been decrypted and put in the blob store.\n                const url = embedded.getUrl(image);\n                // only set it if it is defined, otherwise the unescapeSrc will add two src=\"\"\n                url && image.setAttribute('src', url);\n                return;\n            }\n\n            // We don't need to add it outside\n            if (!isEoReply) {\n                !image.parentElement.classList.contains('loading') && wrapImage(image);\n                image.removeAttribute('src');\n            }\n            return;\n        }\n\n        showEmbedded = false;\n\n        // Inline embedded images does not have an attachment.\n        if (attachment) {\n            image.setAttribute('alt', attachment.Name);\n        }\n    });\n\n    return { document: message.document, showEmbeddedImages: showEmbedded };\n};\n","export const transformWelcome = ({ document }) => {\n    // For the welcome email, we need to change the path to the welcome image lock\n    const images = [...document.querySelectorAll('img[src=\"/img/app/welcome_lock.gif\"]')];\n\n    if (images.length > 0) {\n        images.forEach((image) => {\n            image.src = '/assets/img/emails/welcome_lock.gif';\n        });\n    }\n\n    return { document };\n};\n","import { c } from 'ttag';\n\nconst BLOCKQUOTE_SELECTORS = [\n    '.protonmail_quote',\n    '.gmail_quote',\n    '.yahoo_quoted',\n    '.gmail_extra',\n    '.moz-cite-prefix',\n    // '.WordSection1',\n    '#isForwardContent',\n    '#isReplyContent',\n    '#mailcontent:not(table)',\n    '#origbody',\n    '#reply139content',\n    '#oriMsgHtmlSeperator',\n    'blockquote[type=\"cite\"]'\n];\n\nconst quotes = BLOCKQUOTE_SELECTORS.map((selector) => `${selector}:not(:empty)`).join(',');\n\nexport const transformBlockquotes = ({ document: doc }) => {\n    const blockquotes = [...doc.querySelectorAll(quotes)];\n    const parent = doc.textContent;\n    let found = false;\n\n    blockquotes.forEach((blockquote) => {\n        if (!found) {\n            const child = blockquote.textContent;\n            const [before = '', after = ''] = parent.split(child);\n\n            if (child.length < parent.length && before.length && !after.length) {\n                const button = document.createElement('button');\n                const title = c('Title').t`Show previous message`;\n\n                button.className = 'pm-button pm-button--small more proton-message-blockquote-toggle';\n                button.textContent = '...'; // perf issue we can't use <icon> as we don't want to compile.\n                button.setAttribute('title', title);\n\n                // For some messages, the content of the message before <button> is not inside <div>\n                blockquote.parentNode.insertBefore(document.createElement('BR'), blockquote);\n                blockquote.parentNode.insertBefore(button, blockquote);\n\n                found = true;\n            }\n        }\n    });\n\n    return { document };\n};\n","import { flow, filter, reduce } from 'lodash/fp';\n\nimport { SHOW_IMAGES } from 'proton-shared/lib/constants';\n\nconst WHITELIST = ['notify@protonmail.com'];\n\n// const { dispatcher } = dispatchers(['message.open']);\n\nconst ATTRIBUTES = ['url', 'xlink:href', 'srcset', 'src', 'svg', 'background', 'poster'].map(\n    (name) => `proton-${name}`\n);\n\nconst REGEXP_FIXER = (() => {\n    const str = ATTRIBUTES.map((key) => {\n        if (key === 'proton-src') {\n            return `${key}=(?!\"(cid|data):)`;\n        }\n        return key;\n    }).join('|');\n    return `(${str})`;\n})();\n\n/**\n * Find inside the current parser DOM every content escaped\n * and build a list of Object <attribute>:<value> but don't parse them if\n * it is an embedded content.\n * As we have many differents attributes we create a list\n * @param  {Node} html parser\n * @return {Array}\n */\nfunction prepareInjection(html) {\n    // Query selector\n    const selector = ATTRIBUTES.map((attr) => {\n        const [key] = attr.split(':');\n        return `[${key}]`;\n    })\n        .concat('[style]')\n        .join(', ');\n\n    /**\n     * Create a map of every proton-x attribute and its value\n     * @param  {Node} node Current element\n     * @return {Object}\n     */\n    const mapAttributes = (node) => {\n        return flow(\n            filter((attr) => ATTRIBUTES.indexOf(attr.name) !== -1),\n            reduce((acc, attr) => ((acc[`${attr.name}`] = attr.value), acc), {})\n        )(node.attributes);\n    };\n\n    const $list = [].slice.call(html.querySelectorAll(selector));\n\n    // Create a list containing a map of every attributes (proton-x) per node\n    const attributes = $list.reduce((acc, node) => {\n        if (node.hasAttribute('proton-src')) {\n            const src = node.getAttribute('proton-src');\n\n            // We don't want to unescape attachments or inline embedded as we are going to process them later\n            if (src.indexOf('cid:') !== -1) {\n                return acc;\n            }\n            if (src.indexOf('data:') !== -1) {\n                return acc;\n            }\n        }\n        acc.push(mapAttributes(node));\n        return acc;\n    }, []);\n\n    return attributes;\n}\n\nexport const transformRemote = (\n    { data: message = {}, document = null, showRemoteImages: inputShowImages = false },\n    { action = null, mailSettings }\n) => {\n    const regex = new RegExp(REGEXP_FIXER, 'g');\n    const showImages =\n        inputShowImages ||\n        !!(mailSettings.ShowImages & SHOW_IMAGES.REMOTE || WHITELIST.includes(message.Sender.Address));\n    const content = document.innerHTML;\n    const hasImages = regex.test(content);\n\n    if (showImages) {\n        // If load:manual we use a custom directive to inject the content\n        if (action === 'user.inject') {\n            // TODO: uncoment this block\n            // const list = prepareInjection(html);\n            prepareInjection(document);\n            // const hasSVG = /svg/.test(html.innerHTML);\n            // if (list.length || hasSVG) {\n            //     dispatcher['message.open']('remote.injected', { action, list, message, hasSVG });\n            // }\n        } else {\n            document.innerHTML = content.replace(regex, (match, $1) => $1.substring(7));\n        }\n    }\n    return { document, showRemoteImages: hasImages ? showImages : undefined };\n};\n","export const transformStylesheet = ({ document }) => {\n    const firstElement = document.firstElementChild;\n\n    /**\n     * Some emails from ex: tripit contains a position absolute on the container\n     * => hack to prevent margin on android/ios\n     * @{@link https://twitter.com/HTeuMeuLeu/status/852110032045035520}\n     * Gmail changes the dom too.\n     */\n    if (firstElement && /absolute/.test(firstElement.style.position)) {\n        firstElement.style.position = 'inherit';\n    }\n    return { document };\n};\n","const ELEMENTS = [\n    {\n        selector: 'a:not([href^=\"http\"])',\n        attribute: 'href'\n    },\n    {\n        selector: 'img:not([src^=\"http\"]):not([proton-src^=\"cid\"])',\n        attribute: 'proton-src'\n    }\n];\n\nconst getBaseURL = (base) => {\n    // Make sure base has trailing slash\n    const baseUrl = base.getAttribute('href');\n    if (baseUrl.substr(-1, 1) !== '/') {\n        return `${baseUrl}/`;\n    }\n    return baseUrl;\n};\n\n/**\n * Append base url to any href/src if we need to\n * @param  {Node} html HTML document from DOMPurify\n * @return {Node}      Dom based\n */\nexport const transformBase = ({ document }) => {\n    const base = document.querySelector('base');\n\n    if (!base || !base.getAttribute('href')) {\n        return { document };\n    }\n\n    // Make sure base has trailing slash\n    const BASE_URL = getBaseURL(base);\n\n    const bindAttribute = (node, key, value = '') => {\n        if (!value.startsWith('http')) {\n            node.setAttribute(key, BASE_URL + value);\n        }\n    };\n\n    ELEMENTS.forEach(({ selector, attribute }) => {\n        [...document.querySelectorAll(selector)].forEach((el) => {\n            const keyproton = `proton-${attribute}`;\n            const value = el.getAttribute(attribute) || '';\n            const ptValue = el.getAttribute(keyproton) || '';\n            // Ensure we don't add a useless / if we already have one\n            const url = value.charAt(0) === '/' ? value.slice(1) : value;\n\n            /*\n                Bind the value only when we need, if there is a proton-src we don't need\n                to add the src else it will generate a request to the domain\n             */\n            !ptValue && bindAttribute(el, attribute, url);\n            ptValue && bindAttribute(el, keyproton, ptValue);\n        });\n    });\n\n    return { document };\n};\n","import React, { useLayoutEffect, createContext } from 'react';\nimport { useInstance, useEventManager } from 'react-components';\nimport createCache from 'proton-shared/lib/helpers/cache';\nimport createLRU from 'proton-shared/lib/helpers/lru';\nimport { EVENT_ACTIONS } from 'proton-shared/lib/constants';\nimport { Message, MessageExtended } from '../models/message';\n\ninterface Props {\n    children: JSX.Element;\n}\n\ninterface Event {\n    Messages?: MessageEvent[];\n}\n\ninterface MessageEvent {\n    ID: string;\n    Action: number;\n    Message: Message;\n}\n\nexport interface Cache<Key, Value> {\n    has: (key: Key) => boolean;\n    get: (key: Key) => Value;\n    set: (key: Key, value: Value) => void;\n    delete: (key: Key) => void;\n    subscribe: (handler: (key: Key) => void) => () => void;\n}\n\nexport type MessageCache = Cache<string, MessageExtended>;\n\nexport const MessageContext = createContext<MessageCache>(null as any /* Just to please TS */);\n\n/**\n * The purpose of this provider is to synchronize individual message fetches with updates from the event manager,\n * and to have a separate LRU cache for it.\n */\nconst MessageProvider = ({ children }: Props) => {\n    const { subscribe } = useEventManager();\n    const cache: MessageCache = useInstance(() => {\n        return createCache(createLRU({ max: 50 } as any));\n    });\n\n    useLayoutEffect(() => {\n        return subscribe(({ Messages }: Event) => {\n            if (!Array.isArray(Messages)) {\n                return;\n            }\n            for (const { ID, Action } of Messages) {\n                // Ignore updates for non-fetched messages.\n                if (!cache.has(ID)) {\n                    continue;\n                }\n                if (Action === EVENT_ACTIONS.DELETE) {\n                    cache.delete(ID);\n                }\n                if (Action === EVENT_ACTIONS.UPDATE_DRAFT) {\n                    // TODO: Try to do something smart\n                    cache.delete(ID);\n                }\n                if (Action === EVENT_ACTIONS.UPDATE_FLAGS) {\n                    // TODO: Try to do something smart\n                }\n            }\n        });\n    }, []);\n\n    return <MessageContext.Provider value={cache}>{children}</MessageContext.Provider>;\n};\n\nexport default MessageProvider;\n","import { useContext, useEffect, useCallback, useState, useMemo } from 'react';\nimport { transformEscape } from '../helpers/transforms/transformEscape';\nimport { transformLinks } from '../helpers/transforms/transformLinks';\nimport { transformEmbedded } from '../helpers/transforms/transformEmbedded';\nimport { transformWelcome } from '../helpers/transforms/transformWelcome';\nimport { transformBlockquotes } from '../helpers/transforms/transformBlockquotes';\nimport { transformStylesheet } from '../helpers/transforms/transformStylesheet';\nimport { transformRemote } from '../helpers/transforms/transformRemote';\nimport { transformBase } from '../helpers/transforms/transformBase';\nimport { useDecryptMessage } from './useDecryptMessage';\nimport { useTransformAttachments } from './useAttachments';\nimport { MessageContext } from '../containers/MessageProvider';\nimport { Message, MessageExtended } from '../models/message';\nimport { getMessage, markMessageAsRead } from 'proton-shared/lib/api/messages';\nimport { useApi, useEventManager } from 'react-components';\n\ninterface ComputationOption {\n    action?: string;\n    cache: any;\n    mailSettings: any;\n}\n\ninterface Computation {\n    (message: MessageExtended, options: ComputationOption):\n        | Promise<Partial<MessageExtended>>\n        | Partial<MessageExtended>;\n}\n\ninterface MessageActions {\n    load: () => Promise<void>;\n    initialize: () => Promise<void>;\n    loadRemoteImages: () => Promise<void>;\n    loadEmbeddedImages: () => Promise<void>;\n}\n\nexport const useMessage = (inputMessage: Message, mailSettings: any): [MessageExtended, MessageActions] => {\n    const messageID = inputMessage.ID || '';\n\n    const api = useApi();\n    const { call } = useEventManager();\n    const cache = useContext(MessageContext);\n    const computeCache = useMemo(() => new Map(), []);\n    const [message, setMessage] = useState<MessageExtended>(\n        cache.has(messageID) ? cache.get(messageID) : { data: inputMessage }\n    );\n\n    const decrypt = useDecryptMessage();\n    const transformAttachements = useTransformAttachments();\n\n    // Listen to cache for updates on the current message\n    useEffect(\n        () =>\n            cache.subscribe((changedMessageID) => {\n                if (changedMessageID === messageID) {\n                    setMessage(cache.get(messageID));\n                }\n            }),\n        [messageID, cache]\n    );\n\n    const transforms = [\n        transformEscape,\n        transformBase,\n        transformLinks,\n        transformEmbedded,\n        transformWelcome,\n        transformBlockquotes,\n        transformStylesheet,\n        transformAttachements,\n        transformRemote\n    ];\n\n    const loadData = useCallback(\n        async ({ data: message = {} }: MessageExtended) => {\n            // If the Body is already there, no need to send a request\n            if (!message.Body) {\n                const { Message } = await api(getMessage(message.ID));\n                return { data: Message as Message };\n            }\n            return {} as MessageExtended;\n        },\n        [api]\n    );\n\n    const markAsRead = useCallback(\n        async ({ data: message = {} }: MessageExtended) => {\n            const markAsRead = async () => {\n                await api(markMessageAsRead([message.ID || '']));\n                call();\n            };\n\n            if (message.Unread) {\n                markAsRead(); // No await to not slow down the UX\n                return { data: { ...message, Unread: 0 } } as MessageExtended;\n            }\n\n            return {} as MessageExtended;\n        },\n        [api]\n    );\n\n    /**\n     * Run a computation on a message, wait until it finish\n     * Return the message extanded with the result of the computation\n     */\n    const runSingle = useCallback(\n        async (message: MessageExtended, compute: Computation, action?: string) => {\n            const result = (await compute(message, { action, cache: computeCache, mailSettings })) || {};\n\n            if (result.document) {\n                result.content = result.document.innerHTML;\n            }\n\n            return { ...message, ...result } as MessageExtended;\n        },\n        [cache]\n    );\n\n    /**\n     * Run a list of computation sequentially\n     */\n    const run = useCallback(\n        async (message: MessageExtended, computes: Computation[], action?: string) => {\n            return computes.reduce(async (messagePromise: Promise<MessageExtended>, compute: Computation) => {\n                return runSingle(await messagePromise, compute, action);\n            }, Promise.resolve(message));\n        },\n        [runSingle, cache]\n    );\n\n    const load = useCallback(async () => {\n        const newMessage = await run(message, [loadData]);\n        cache.set(messageID, { ...newMessage, loaded: true });\n    }, [messageID, run, cache]);\n\n    const initialize = useCallback(\n        async (action?) => {\n            const newMessage = await run(\n                message,\n                [loadData, markAsRead, decrypt, ...transforms] as Computation[],\n                action\n            );\n            cache.set(messageID, { ...newMessage, initialized: true });\n        },\n        [messageID, run, cache]\n    );\n\n    const loadRemoteImages = useCallback(\n        async (action?) => {\n            const newMessage = await run(\n                { ...message, showRemoteImages: true },\n                [transformRemote as Computation],\n                action\n            );\n            cache.set(messageID, newMessage);\n        },\n        [messageID, run, cache]\n    );\n\n    const loadEmbeddedImages = useCallback(\n        async (action?) => {\n            const newMessage = await run(\n                { ...message, showEmbeddedImages: true },\n                [transformEmbedded, transformAttachements] as Computation[],\n                action\n            );\n            cache.set(messageID, newMessage);\n        },\n        [messageID, run, cache]\n    );\n\n    return [\n        message,\n        {\n            load,\n            initialize,\n            loadRemoteImages,\n            loadEmbeddedImages\n        }\n    ];\n};\n","import { useCallback } from 'react';\nimport { useGetPublicKeys, useGetAddressKeys } from 'react-components';\nimport { decryptMessageLegacy } from 'pmcrypto';\nimport { splitKeys } from 'proton-shared/lib/keys/keys';\nimport { VERIFICATION_STATUS } from '../constants';\nimport { MessageExtended } from '../models/message';\nimport { isMIME } from '../helpers/message';\n\n// Reference: Angular/src/app/message/factories/messageModel.js decryptBody\n\nexport const useDecryptMessage = () => {\n    const getPublicKeys = useGetPublicKeys();\n    const getAddressKeys = useGetAddressKeys();\n\n    // TODO: Cache result\n    return useCallback(\n        async ({ data: message }: MessageExtended): Promise<MessageExtended> => {\n            message = message || {};\n            message.Sender = message.Sender || {};\n\n            const [{ publicKeys = [] }, addressKeys] = await Promise.all([\n                getPublicKeys(message.Sender.Address),\n                getAddressKeys(message.AddressID)\n            ]);\n            const { privateKeys } = splitKeys(addressKeys) as any;\n\n            // TODO: filter out compromised addresses (if not done already)\n\n            if (isMIME(message)) {\n                // TODO: decrypt mime message\n            } else {\n                const {\n                    data,\n                    verified: pmcryptoVerified = VERIFICATION_STATUS.NOT_SIGNED\n                } = (await decryptMessageLegacy({\n                    message: message.Body,\n                    messageDate: new Date((message.Time || 0) * 1000), // getDate(this),\n                    privateKeys,\n                    publicKeys\n                })) as any;\n\n                const signedInvalid = VERIFICATION_STATUS.SIGNED_AND_INVALID;\n                const signedPubkey = VERIFICATION_STATUS.SIGNED_NO_PUB_KEY;\n                const verified =\n                    !publicKeys.length && pmcryptoVerified === signedInvalid ? signedPubkey : pmcryptoVerified;\n\n                return { raw: data, verified, publicKeys, privateKeys };\n            }\n\n            return {};\n        },\n        [getPublicKeys, getAddressKeys]\n    );\n};\n","import React, { useEffect, useRef } from 'react';\nimport { useToggle, Loader, classnames } from 'react-components';\n\nimport { hasAttachments } from '../../helpers/message';\nimport { Label } from '../../models/label';\n\nimport MessageBody from './MessageBody';\nimport HeaderCollapsed from './header/HeaderCollapsed';\nimport HeaderExpanded from './header/HeaderExpanded';\nimport MessageFooter from './MessageFooter';\nimport { Message } from '../../models/message';\nimport { useMessage } from '../../hooks/useMessage';\n\ninterface Props {\n    labels: Label[];\n    message: Message;\n    mailSettings: any;\n    initialExpand?: boolean;\n    conversationIndex?: number;\n}\n\nconst MessageView = ({\n    labels = [],\n    message: inputMessage,\n    mailSettings,\n    initialExpand = true,\n    conversationIndex = 0\n}: Props) => {\n    const { state: expanded, set: setExpanded } = useToggle(initialExpand);\n    const elementRef = useRef<HTMLElement>(null);\n    const [message, { initialize, loadRemoteImages, loadEmbeddedImages }] = useMessage(inputMessage, mailSettings);\n\n    const loaded = !!message.initialized;\n\n    const prepareMessage = async () => {\n        await initialize();\n        // Don't scroll if it's the first message of the conversation and only on the first automatic expand\n        if (conversationIndex !== 0 && initialExpand) {\n            elementRef.current && elementRef.current.scrollIntoView({ behavior: 'smooth', block: 'start' });\n        }\n    };\n\n    useEffect(() => {\n        if (!loaded && expanded) {\n            prepareMessage();\n        }\n    }, [loaded, expanded]);\n\n    const handleLoadRemoteImages = async () => {\n        await loadRemoteImages();\n    };\n\n    const handleLoadEmbeddedImages = async () => {\n        await loadEmbeddedImages();\n    };\n\n    const handleExpand = (value: boolean) => () => {\n        setExpanded(value);\n    };\n\n    return (\n        <article ref={elementRef} className={classnames(['message-container mb2', expanded && 'is-opened'])}>\n            {expanded ? (\n                <>\n                    <HeaderExpanded\n                        message={message}\n                        messageLoaded={loaded}\n                        onLoadRemoteImages={handleLoadRemoteImages}\n                        onLoadEmbeddedImages={handleLoadEmbeddedImages}\n                        labels={labels}\n                        mailSettings={mailSettings}\n                        onCollapse={handleExpand(false)}\n                    />\n                    {loaded ? (\n                        <>\n                            <MessageBody message={message} />\n                            {hasAttachments(message.data) ? <MessageFooter message={message} /> : null}\n                        </>\n                    ) : (\n                        <Loader />\n                    )}\n                </>\n            ) : (\n                <HeaderCollapsed message={message} labels={labels} onExpand={handleExpand(true)} />\n            )}\n        </article>\n    );\n};\n\nexport default MessageView;\n","import React from 'react';\nimport { Loader, useLabels } from 'react-components';\n\nimport MessageView from '../message/MessageView';\nimport ItemStar from '../list/ItemStar';\nimport { ELEMENT_TYPES } from '../../constants';\nimport NumMessages from './NumMessages';\nimport ItemLabels from '../list/ItemLabels';\nimport { useConversation } from '../../hooks/useConversation';\n\ninterface Props {\n    conversationID: string;\n    messageID?: string;\n    mailSettings: any;\n}\n\nconst ConversationView = ({ conversationID, mailSettings }: Props) => {\n    const [labels] = useLabels();\n    const [conversationData, loading] = useConversation(conversationID);\n\n    if (loading) {\n        return <Loader />;\n    }\n\n    const { Conversation: conversation, Messages: messages = [] } = conversationData;\n    const initialExpand = messages.length > 0 ? messages[messages.length - 1].ID : null;\n\n    if (!conversation) {\n        return null;\n    }\n\n    return (\n        <>\n            <header className=\"flex flex-nowrap flex-spacebetween flex-items-center mb1\">\n                <h2 className=\"mb0\">\n                    <NumMessages className=\"mr0-25\" conversation={conversation} />\n                    {conversation.Subject}\n                </h2>\n                <div>\n                    <ItemLabels labels={labels} max={4} element={conversation} type={ELEMENT_TYPES.CONVERSATION} />\n                    <ItemStar element={conversation} type={ELEMENT_TYPES.CONVERSATION} />\n                </div>\n            </header>\n            {messages.map((message, index) => (\n                <MessageView\n                    key={message.ID}\n                    message={message}\n                    initialExpand={message.ID === initialExpand}\n                    labels={labels}\n                    mailSettings={mailSettings}\n                    conversationIndex={index}\n                />\n            ))}\n        </>\n    );\n};\n\nexport default ConversationView;\n","import { useContext, useCallback } from 'react';\nimport { getConversation } from 'proton-shared/lib/api/conversations';\nimport { useCachedModelResult, useApi } from 'react-components';\n\nimport { MessageContext, Cache } from '../containers/MessageProvider';\nimport { Conversation } from '../models/conversation';\nimport { Message } from '../models/message';\n\nexport type ConversationCache = Cache<string, Conversation>;\n\ninterface ConversationResult {\n    Conversation: Conversation;\n    Messages?: Message[];\n}\n\nconst getKey = (ID: string) => `Conversation-${ID}`;\n\nexport const useConversation = (conversationID: string): [ConversationResult, boolean, any] => {\n    // Pretty ugly \"reuse\" of the MessageCache\n    // TODO: either use a different cache or properly handle mix types\n    const cache = (useContext(MessageContext) as any) as ConversationCache;\n    const api = useApi();\n\n    const miss = useCallback(() => {\n        return api(getConversation(conversationID));\n    }, [conversationID, api, cache]);\n\n    return useCachedModelResult(cache as any, getKey(conversationID), miss);\n};\n","import React from 'react';\nimport { useUser, useModals, LinkButton, AuthenticatedBugModal } from 'react-components';\nimport { c, ngettext, msgid } from 'ttag';\nimport { capitalize } from 'proton-shared/lib/helpers/string';\n\nimport welcomeMessageSvg from 'design-system/assets/img/shared/welcome-message.svg';\nimport { LabelCount } from '../../models/label';\n\ninterface Props {\n    labelCount: LabelCount;\n}\n\nconst WelcomePane = ({ labelCount }: Props) => {\n    const [user] = useUser();\n    const { createModal } = useModals();\n\n    const Unread = labelCount.Unread || 0;\n\n    const unreadsLabel = (\n        <strong key=\"unreads-label\">\n            {ngettext(msgid`${Unread} unread email`, `${Unread} unread emails`, Unread)}\n        </strong>\n    );\n\n    const reportBugButton = (\n        <LinkButton key=\"report-bug-btn\" onClick={() => createModal(<AuthenticatedBugModal />)}>{c('Action')\n            .t`report a bug`}</LinkButton>\n    );\n\n    return (\n        <div className=\"flex-item-fluid aligncenter p3\">\n            <h1>\n                {user.DisplayName ? c('Title').t`Welcome, ${capitalize(user.DisplayName)}!` : c('Title').t`Welcome`}\n            </h1>\n            {Unread ? <p>{c('Info').jt`You have ${unreadsLabel} in this folder`}</p> : null}\n            {user.hasPaidMail ? (\n                <>\n                    <p className=\"mw40e center mb2\">\n                        {c('Info')\n                            .jt`Having trouble sending or receiving emails? Interested in helping us improve our service? Feel free to ${reportBugButton}.`}\n                    </p>\n                    <img src={welcomeMessageSvg} alt={c('Alternative text for welcome image').t`Welcome`} />\n                </>\n            ) : (\n                <>\n                    <p>{c('Info')\n                        .t`Upgrade to a paid plan starting from $4/month only and get additional storage capacity and more addresses with ProtonMail Plus.`}</p>\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default WelcomePane;\n","import React, { useMemo } from 'react';\nimport { Button, useLabels } from 'react-components';\nimport { c, ngettext, msgid } from 'ttag';\n\nimport conversationSingleSvg from 'design-system/assets/img/shared/selected-conversation-single.svg';\nimport conversationManySvg from 'design-system/assets/img/shared/selected-conversation-many.svg';\nimport { LabelCount } from '../../models/label';\nimport { getLabelName } from '../../helpers/labels';\n\ninterface Props {\n    labelCount: LabelCount;\n    checkedIDs?: string[];\n    onUncheckAll: () => void;\n}\n\nconst SelectionPane = ({ labelCount, checkedIDs = [], onUncheckAll }: Props) => {\n    const [labels] = useLabels();\n\n    const total = labelCount.Total || 0;\n    const checkeds = checkedIDs.length;\n\n    const labelName = useMemo(() => getLabelName(labelCount.LabelID || '', labels), [labels, labelCount]);\n\n    return (\n        <div className=\"flex-item-fluid aligncenter p3\">\n            {checkeds === 0 && labelName && <h3 className=\"bold\">{labelName}</h3>}\n            <p className=\"mb2\">\n                {checkeds === 0\n                    ? ngettext(\n                          msgid`You have ${total} stored in this folder`,\n                          `You have ${total} stored in this folder`,\n                          total\n                      )\n                    : ngettext(\n                          msgid`You selected ${checkeds} element from this folder`,\n                          `You selected ${checkeds} elements from this folder`,\n                          checkeds\n                      )}\n            </p>\n            <div className=\"mb2\">\n                <img\n                    src={checkeds > 1 ? conversationManySvg : conversationSingleSvg}\n                    alt={c('Alternative text for conversation image').t`Conversation`}\n                />\n            </div>\n            {checkeds > 0 && <Button onClick={onUncheckAll}>{c('Action').t`Deselect`}</Button>}\n        </div>\n    );\n};\n\nexport default SelectionPane;\n","import React, { useEffect, useMemo } from 'react';\n\nimport WelcomePane from './WelcomePane';\nimport SelectionPane from './SelectionPane';\nimport { ELEMENT_TYPES } from '../../constants';\nimport { useConversationCounts, useMessageCounts } from 'react-components';\nimport { getCurrentType } from '../../helpers/elements';\nimport { LabelCount } from '../../models/label';\n\ninterface Props {\n    labelID: string;\n    checkedIDs?: string[];\n    onUncheckAll: () => void;\n    welcomeRef: any;\n    mailSettings: any;\n}\n\nconst PlaceholderView = ({ labelID = '', checkedIDs = [], onUncheckAll, welcomeRef, mailSettings }: Props) => {\n    const [conversationCounts] = useConversationCounts();\n    const [messageCounts] = useMessageCounts();\n    const type = getCurrentType({ mailSettings, labelID });\n\n    useEffect(\n        () => () => {\n            welcomeRef.current = true;\n        },\n        []\n    );\n\n    const labelCount: LabelCount = useMemo(() => {\n        const counters = type === ELEMENT_TYPES.CONVERSATION ? conversationCounts : messageCounts;\n\n        if (!Array.isArray(counters)) {\n            return 0;\n        }\n\n        return counters.find((counter) => counter.LabelID === labelID) || { LabelID: '', Unread: 0, Total: 0 };\n    }, [conversationCounts, messageCounts]);\n\n    return welcomeRef.current || checkedIDs.length > 0 ? (\n        <SelectionPane labelCount={labelCount} checkedIDs={checkedIDs} onUncheckAll={onUncheckAll} />\n    ) : (\n        <WelcomePane labelCount={labelCount} />\n    );\n};\n\nexport default PlaceholderView;\n","import React, { useEffect } from 'react';\nimport { Loader, useLabels } from 'react-components';\n\nimport MessageView from '../message/MessageView';\nimport ItemStar from '../list/ItemStar';\nimport { ELEMENT_TYPES } from '../../constants';\nimport ItemLabels from '../list/ItemLabels';\nimport { useMessage } from '../../hooks/useMessage';\n\ninterface Props {\n    messageID: string;\n    mailSettings: any;\n}\n\nconst MessageOnlyView = ({ messageID, mailSettings }: Props) => {\n    const [labels] = useLabels();\n\n    const [{ data: message, loaded }, { load }] = useMessage({ ID: messageID }, mailSettings);\n    const loading = !loaded;\n\n    useEffect(() => {\n        if (!loaded) {\n            load();\n        }\n    }, [messageID, loaded]);\n\n    if (loading) {\n        return <Loader />;\n    }\n\n    if (!message) {\n        return null;\n    }\n\n    return (\n        <>\n            <header className=\"flex flex-nowrap flex-spacebetween flex-items-center mb1\">\n                <h2 className=\"mb0\">{message.Subject}</h2>\n                <div>\n                    <ItemLabels labels={labels} max={4} element={message} type={ELEMENT_TYPES.MESSAGE} />\n                    <ItemStar element={message} type={ELEMENT_TYPES.MESSAGE} />\n                </div>\n            </header>\n            <MessageView message={message} initialExpand={true} labels={labels} mailSettings={mailSettings} />\n        </>\n    );\n};\n\nexport default MessageOnlyView;\n","import React, { useState, useMemo, useRef, useEffect } from 'react';\nimport { Loader, classnames } from 'react-components';\nimport { History, Location } from 'history';\n\nimport { Element } from '../models/element';\nimport { Sort, Filter, Page } from '../models/tools';\n\nimport { useMailboxPageTitle } from '../hooks/useMailboxPageTitle';\nimport { useElements } from '../hooks/useElements';\n\nimport { isColumnMode, isConversationMode } from '../helpers/mailSettings';\nimport { getSearchParams } from '../helpers/url';\nimport {\n    pageFromUrl,\n    sortFromUrl,\n    filterFromUrl,\n    setPageInUrl,\n    setSortInUrl,\n    setFilterInUrl,\n    setPathInUrl\n} from '../helpers/mailboxUrl';\n\nimport Toolbar from '../components/toolbar/Toolbar';\nimport List from '../components/list/List';\nimport ConversationView from '../components/conversation/ConversationView';\nimport PlaceholderView from '../components/view/PlaceholderView';\nimport MessageOnlyView from '../components/message/MessageOnlyView';\n\nimport { PAGE_SIZE } from '../constants';\n\nimport './main-area.scss';\n\ninterface Props {\n    labelID: string;\n    mailSettings: any;\n    elementID?: string;\n    location: Location;\n    history: History;\n}\n\nconst MailboxContainer = ({ labelID, mailSettings, elementID: inputElementID, location, history }: Props) => {\n    const columnMode = isColumnMode(mailSettings);\n    const conversationMode = isConversationMode(mailSettings);\n\n    // Page state is hybrid: page number is handled by the url, total computed in useElements, size and limit are constants\n    // Yet, it is simpler to co-localize all these data in one object\n    const [page, setPage] = useState<Page>({\n        page: pageFromUrl(location),\n        total: 0,\n        size: PAGE_SIZE,\n        limit: PAGE_SIZE\n    });\n\n    const searchParams = getSearchParams(location);\n\n    const sort = useMemo<Sort>(() => sortFromUrl(location), [searchParams.sort]);\n    const filter = useMemo<Filter>(() => filterFromUrl(location), [searchParams.filter]);\n\n    const [checkedElements, setCheckedElements] = useState(Object.create(null));\n    const [checkAll, setCheckAll] = useState(false);\n    const welcomeRef = useRef(false);\n\n    const [elements, loading, total] = useElements({\n        conversationMode: isConversationMode(mailSettings),\n        labelID,\n        page,\n        sort,\n        filter\n    });\n\n    useEffect(() => setPage({ ...page, page: pageFromUrl(location) }), [searchParams.page]);\n    useEffect(() => setPage({ ...page, total }), [total]);\n\n    useMailboxPageTitle(labelID);\n\n    const checkedIDs = useMemo(() => {\n        return Object.entries(checkedElements).reduce((acc, [elementID, isChecked]) => {\n            if (!isChecked) {\n                return acc;\n            }\n            acc.push(elementID);\n            return acc;\n        }, [] as string[]);\n    }, [checkedElements]);\n\n    const elementID = useMemo(() => {\n        if (checkedIDs.length > 0) {\n            return undefined;\n        }\n        return inputElementID;\n    }, [inputElementID, checkedIDs]);\n\n    const selectedIDs = useMemo(() => {\n        if (checkedIDs.length) {\n            return checkedIDs;\n        }\n        if (elementID) {\n            return [elementID];\n        }\n        return [];\n    }, [checkedIDs, elementID]);\n\n    const handleElement = (elementID: string) => history.push(setPathInUrl(location, labelID, elementID));\n    const handleBack = () => history.push(setPathInUrl(location, labelID));\n    const handlePage = (pageNumber: number) => history.push(setPageInUrl(location, pageNumber));\n    const handleSort = (sort: Sort) => history.push(setSortInUrl(location, sort));\n    const handleFilter = (filter: Filter) => history.push(setFilterInUrl(location, filter));\n\n    const handleCheck = (IDs: string[] = [], checked = false) => {\n        const update = IDs.reduce((acc, contactID) => {\n            acc[contactID] = checked;\n            return acc;\n        }, Object.create(null));\n        setCheckedElements({ ...checkedElements, ...update });\n        setCheckAll(checked && IDs.length === elements.length);\n    };\n\n    const handleCheckAll = (checked = false) =>\n        handleCheck(\n            elements.map(({ ID = '' }: Element) => ID),\n            checked\n        );\n\n    const handleUncheckAll = () => handleCheckAll(false);\n\n    return (\n        <>\n            <Toolbar\n                labelID={labelID}\n                elementID={elementID}\n                selectedIDs={selectedIDs}\n                mailSettings={mailSettings}\n                checkAll={checkAll}\n                onCheckAll={handleCheckAll}\n                page={page}\n                onPage={handlePage}\n                sort={sort}\n                onSort={handleSort}\n                filter={filter}\n                onFilter={handleFilter}\n                onBack={handleBack}\n            />\n            <div\n                className={classnames([\n                    'main-area--withToolbar flex-item-fluid flex reset4print',\n                    !columnMode && 'main-area--rowMode'\n                ])}\n            >\n                <div className=\"items-column-list scroll-if-needed scroll-smooth-touch\">\n                    {loading ? (\n                        <div className=\"flex flex-justify-center h100\">\n                            <Loader />\n                        </div>\n                    ) : (\n                        (columnMode || !elementID) && (\n                            <List\n                                labelID={labelID}\n                                mailSettings={mailSettings}\n                                elementID={elementID}\n                                elements={elements}\n                                // selectedIDs={selectedIDs}\n                                checkedIDs={checkedIDs}\n                                onCheck={handleCheck}\n                                onClick={handleElement}\n                            />\n                        )\n                    )}\n                </div>\n                {(columnMode || elementID) && (\n                    <section className=\"view-column-detail p2 flex-item-fluid scroll-if-needed\">\n                        {elementID ? (\n                            conversationMode ? (\n                                <ConversationView mailSettings={mailSettings} conversationID={elementID} />\n                            ) : (\n                                <MessageOnlyView mailSettings={mailSettings} messageID={elementID} />\n                            )\n                        ) : (\n                            <PlaceholderView\n                                labelID={labelID}\n                                mailSettings={mailSettings}\n                                welcomeRef={welcomeRef}\n                                checkedIDs={checkedIDs}\n                                onUncheckAll={handleUncheckAll}\n                            />\n                        )}\n                    </section>\n                )}\n            </div>\n        </>\n    );\n};\n\nexport default MailboxContainer;\n","import { useEffect } from 'react';\nimport { useLabels, useUser, useConversationCounts, useMessageCounts, useMailSettings } from 'react-components';\nimport { getLabelName } from '../helpers/labels';\nimport { isConversationMode } from '../helpers/mailSettings';\nimport { toMap } from 'proton-shared/lib/helpers/object';\nimport { LabelCount } from '../models/label';\n\nexport const useMailboxPageTitle = (labelID: string) => {\n    const [mailSettings, loadingMailSettings] = useMailSettings();\n    const [labels, loadingLabels] = useLabels();\n    const [user, loadingUser] = useUser();\n    const [conversationCounts, loadingConversationCounts] = useConversationCounts() as [LabelCount[], boolean];\n    const [messageCounts, loadingMessageCounts] = useMessageCounts() as [LabelCount[], boolean];\n\n    const loadings = [loadingMailSettings, loadingLabels, loadingUser, loadingConversationCounts, loadingMessageCounts];\n\n    useEffect(() => {\n        if (loadings.every((loading) => !loading)) {\n            const conversationMode = isConversationMode(mailSettings);\n            const counters = conversationMode ? conversationCounts : messageCounts;\n            const countersMap = toMap(counters, 'LabelID') as { [labelID: string]: LabelCount };\n            const unreads = (countersMap[labelID] || {}).Unread || 0;\n            const unreadString = unreads > 0 ? `(${unreads}) ` : '';\n            const labelName = getLabelName(labelID, labels);\n            const address = user.Email;\n            document.title = `${unreadString}${labelName} | ${address} | ProtonMail`;\n        }\n    }, [labelID, ...loadings]);\n};\n","import React from 'react';\nimport { match } from 'react-router';\nimport { Location, History } from 'history';\nimport { ErrorBoundary, useMailSettings, Loader } from 'react-components';\n\nimport PrivateLayout from '../components/layout/PrivateLayout';\nimport MailboxContainer from './MailboxContainer';\nimport { HUMAN_TO_LABEL_IDS } from '../constants';\n\ninterface Props {\n    match: match<{ elementID?: string; labelID: string }>;\n    location: Location;\n    history: History;\n}\n\nconst PageContainer = ({ match, location, history }: Props) => {\n    const [mailSettings, loadingMailSettings] = useMailSettings();\n\n    const { elementID, labelID: currentLabelID } = match.params;\n    const labelID = HUMAN_TO_LABEL_IDS[currentLabelID] || currentLabelID;\n\n    return (\n        <PrivateLayout labelID={labelID} location={location} history={history}>\n            <ErrorBoundary>\n                {loadingMailSettings ? (\n                    <Loader />\n                ) : (\n                    <MailboxContainer\n                        labelID={labelID}\n                        mailSettings={mailSettings}\n                        elementID={elementID}\n                        location={location}\n                        history={history}\n                    />\n                )}\n            </ErrorBoundary>\n        </PrivateLayout>\n    );\n};\n\nexport default PageContainer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Route } from 'react-router-dom';\nimport { StandardPrivateApp } from 'react-components';\n\nimport {\n    UserModel,\n    MailSettingsModel,\n    UserSettingsModel,\n    SubscriptionModel,\n    OrganizationModel,\n    LabelsModel,\n    AddressesModel,\n    ConversationCountsModel,\n    MessageCountsModel\n} from 'proton-shared/lib/models';\n\nimport locales from './locales';\nimport PageContainer from './containers/PageContainer';\nimport MessageProvider from './containers/MessageProvider';\n\nconst PrivateApp = ({ onLogout }) => {\n    return (\n        <StandardPrivateApp\n            onLogout={onLogout}\n            locales={locales}\n            preloadModels={[UserModel, UserSettingsModel]}\n            eventModels={[\n                UserModel,\n                AddressesModel,\n                ConversationCountsModel,\n                MessageCountsModel,\n                MailSettingsModel,\n                UserSettingsModel,\n                LabelsModel,\n                SubscriptionModel,\n                OrganizationModel\n            ]}\n        >\n            <MessageProvider>\n                <Route path=\"/:labelID/:elementID?\" component={PageContainer} />\n            </MessageProvider>\n        </StandardPrivateApp>\n    );\n};\n\nPrivateApp.propTypes = {\n    onLogout: PropTypes.func.isRequired\n};\n\nexport default PrivateApp;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icons } from 'react-components';\n\nconst PublicLayout = ({ children }) => {\n    return (\n        <>\n            <main className=\"main-full flex flex-column flex-nowrap reset4print\">{children}</main>\n            <Icons />\n        </>\n    );\n};\n\nPublicLayout.propTypes = {\n    children: PropTypes.node.isRequired\n};\n\nexport default PublicLayout;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { c } from 'ttag';\nimport { LoginForm, Href, SimpleDropdown, DropdownMenu, SignInLayout } from 'react-components';\n\nconst LoginContainer = ({ stopRedirect, history, onLogin }) => {\n    const handleLogin = (...args) => {\n        stopRedirect();\n        history.push('/inbox');\n        onLogin(...args);\n    };\n    return (\n        <SignInLayout title={c('Title').t`Log in`}>\n            <h2>{c('Title').t`User log in`}</h2>\n            <LoginForm\n                onLogin={handleLogin}\n                needHelp={\n                    <SimpleDropdown content={c('Dropdown button').t`Need help?`} className=\"pm-button--link\">\n                        <DropdownMenu>\n                            <div className=\"inbl w100 pt0-5 pb0-5 ellipsis\">\n                                <Link to=\"/reset-password\">{c('Link').t`Reset password`}</Link>\n                            </div>\n                            <div className=\"inbl w100 pt0-5 pb0-5 ellipsis\">\n                                <Link to=\"/forgot-username\">{c('Link').t`Forgot username?`}</Link>\n                            </div>\n                            <div className=\"inbl w100 pt0-5 pb0-5 ellipsis\">\n                                <Href url=\"https://protonmail.com/support/knowledge-base/common-login-problems/\">{c(\n                                    'Link'\n                                ).t`Common login problems`}</Href>\n                            </div>\n                            <div className=\"inbl w100 pt0-5 pb0-5 ellipsis\">\n                                <Href url=\"https://protonmail.com/support/\">{c('Link').t`Contact support`}</Href>\n                            </div>\n                        </DropdownMenu>\n                    </SimpleDropdown>\n                }\n            />\n        </SignInLayout>\n    );\n};\n\nLoginContainer.propTypes = {\n    history: PropTypes.object.isRequired,\n    location: PropTypes.object.isRequired,\n    onLogin: PropTypes.func.isRequired,\n    stopRedirect: PropTypes.func.isRequired\n};\n\nexport default LoginContainer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// eslint-disable-next-line\nconst SignupContainer = ({ match, history, onLogin, stopRedirect }) => {\n    return <>SignupContainer</>;\n};\n\nSignupContainer.propTypes = {\n    stopRedirect: PropTypes.func.isRequired,\n    onLogin: PropTypes.func.isRequired,\n    match: PropTypes.shape({\n        params: PropTypes.shape({\n            step: PropTypes.string\n        })\n    }).isRequired,\n    history: PropTypes.shape({\n        push: PropTypes.func.isRequired,\n        location: PropTypes.shape({\n            search: PropTypes.string.isRequired,\n            state: PropTypes.oneOfType([\n                PropTypes.shape({\n                    selector: PropTypes.string.isRequired,\n                    token: PropTypes.string.isRequired\n                }),\n                PropTypes.shape({\n                    Coupon: PropTypes.shape({ Code: PropTypes.string })\n                })\n            ])\n        }).isRequired\n    }).isRequired\n};\n\nexport default SignupContainer;\n","import React, { useState, useRef, useLayoutEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Route, Switch } from 'react-router-dom';\nimport { Loader, ModalsChildren, ResetPasswordContainer, ForgotUsernameContainer } from 'react-components';\nimport { loadOpenPGP } from 'proton-shared/lib/openpgp';\n\nimport PublicLayout from './components/layout/PublicLayout';\nimport LoginContainer from './containers/LoginContainer';\nimport SignupContainer from './containers/SignupContainer';\nimport { Redirect } from 'react-router';\n\nconst PublicApp = ({ onLogin }) => {\n    const hasStopRedirect = useRef(false);\n    const stopRedirect = () => (hasStopRedirect.current = true);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(false);\n\n    useLayoutEffect(() => {\n        (async () => {\n            await Promise.all([loadOpenPGP()]);\n        })()\n            .then(() => setLoading(false))\n            .catch(() => setError(true));\n    }, []);\n\n    if (error) {\n        return 'OpenPGP failed to load. Handle better.';\n    }\n\n    if (loading) {\n        return <Loader />;\n    }\n\n    return (\n        <>\n            <ModalsChildren />\n            <PublicLayout>\n                <Switch>\n                    <Route path=\"/reset-password\" render={() => <ResetPasswordContainer onLogin={onLogin} />} />\n                    <Route path=\"/forgot-username\" component={ForgotUsernameContainer} />\n                    <Route\n                        path=\"/login\"\n                        render={({ history, location }) => (\n                            <LoginContainer\n                                stopRedirect={stopRedirect}\n                                history={history}\n                                location={location}\n                                onLogin={onLogin}\n                            />\n                        )}\n                    />\n                    <Route\n                        path=\"/signup/:step?\"\n                        render={({ history, match }) => (\n                            <SignupContainer\n                                stopRedirect={stopRedirect}\n                                history={history}\n                                match={match}\n                                onLogin={onLogin}\n                            />\n                        )}\n                    />\n                    <Route\n                        render={({ location }) => {\n                            /**\n                             * Needed due to the race condition between onLogin and history.push\n                             * A state on the location is not possible because the location is not changed when logging out.\n                             */\n                            if (hasStopRedirect.current) {\n                                return null;\n                            }\n                            return (\n                                <Redirect\n                                    to={{\n                                        pathname: '/login',\n                                        state: { from: location }\n                                    }}\n                                />\n                            );\n                        }}\n                    />\n                </Switch>\n            </PublicLayout>\n        </>\n    );\n};\n\nPublicApp.propTypes = {\n    onLogin: PropTypes.func.isRequired\n};\n\nexport default PublicApp;\n","import { hot } from 'react-hot-loader/root';\nimport React from 'react';\nimport { ProtonApp, useAuthentication } from 'react-components';\n\nimport * as config from './config';\nimport PrivateApp from './PrivateApp';\nimport PublicApp from './PublicApp';\n\nimport './app.scss';\n\nconst Setup = () => {\n    const { UID, login, logout } = useAuthentication();\n    if (UID) {\n        return <PrivateApp onLogout={logout} />;\n    }\n    return <PublicApp onLogin={login} />;\n};\n\nconst App = () => {\n    return (\n        <ProtonApp config={config}>\n            <Setup />\n        </ProtonApp>\n    );\n};\n\nexport default hot(App);\n","import ReactDOM from 'react-dom';\nimport React from 'react';\nimport 'core-js/stable';\nimport 'regenerator-runtime/runtime';\nimport 'yetch/polyfill';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.querySelector('.app-root'));\n","var map = {\n\t\"./3-d-secure.svg\": \"0gKn\",\n\t\"./american-express-safekey.svg\": \"Jui7\",\n\t\"./cc-american-express.svg\": \"/qD2\",\n\t\"./cc-dankort.svg\": \"0T0d\",\n\t\"./cc-diners-club.svg\": \"vuvo\",\n\t\"./cc-discover.svg\": \"AZZk\",\n\t\"./cc-forbrugs.svg\": \"k2eZ\",\n\t\"./cc-jcb.svg\": \"7Amw\",\n\t\"./cc-maestro.svg\": \"lXKh\",\n\t\"./cc-mastercard.svg\": \"ZUPP\",\n\t\"./cc-paypal.svg\": \"egYP\",\n\t\"./cc-unionpay.svg\": \"ma7A\",\n\t\"./cc-visa.svg\": \"vO2o\",\n\t\"./cc-visaelectron.svg\": \"RMFI\",\n\t\"./discover-protectbuy.svg\": \"qsy5\",\n\t\"./mastercard-securecode.svg\": \"6Bn0\",\n\t\"./verified-by-visa.svg\": \"Q7qE\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"5FMj\";","var map = {\n\t\"./af/index.js\": [\n\t\t\"IqAn\",\n\t\t11\n\t],\n\t\"./ar-DZ/index.js\": [\n\t\t\"JVC1\",\n\t\t12\n\t],\n\t\"./ar-SA/index.js\": [\n\t\t\"xMju\",\n\t\t13\n\t],\n\t\"./be/index.js\": [\n\t\t\"YEhR\",\n\t\t3\n\t],\n\t\"./bg/index.js\": [\n\t\t\"isx8\",\n\t\t4\n\t],\n\t\"./bn/index.js\": [\n\t\t\"+b7I\",\n\t\t14\n\t],\n\t\"./ca/index.js\": [\n\t\t\"Vwa+\",\n\t\t15\n\t],\n\t\"./cs/index.js\": [\n\t\t\"dvhP\",\n\t\t16\n\t],\n\t\"./cy/index.js\": [\n\t\t\"HQUR\",\n\t\t17\n\t],\n\t\"./da/index.js\": [\n\t\t\"7ur/\",\n\t\t18\n\t],\n\t\"./de/index.js\": [\n\t\t\"bgw5\",\n\t\t19\n\t],\n\t\"./el/index.js\": [\n\t\t\"dH0v\",\n\t\t20\n\t],\n\t\"./en-AU/index.js\": [\n\t\t\"VHew\",\n\t\t21\n\t],\n\t\"./en-CA/index.js\": [\n\t\t\"wXhn\",\n\t\t22\n\t],\n\t\"./en-GB/index.js\": [\n\t\t\"nwJ3\",\n\t\t23\n\t],\n\t\"./en-US/index.js\": [\n\t\t\"IogR\",\n\t\t24\n\t],\n\t\"./eo/index.js\": [\n\t\t\"UB7v\",\n\t\t25\n\t],\n\t\"./es/index.js\": [\n\t\t\"/S0t\",\n\t\t26\n\t],\n\t\"./et/index.js\": [\n\t\t\"Br0m\",\n\t\t27\n\t],\n\t\"./fa-IR/index.js\": [\n\t\t\"gEFy\",\n\t\t28\n\t],\n\t\"./fi/index.js\": [\n\t\t\"ndVD\",\n\t\t29\n\t],\n\t\"./fr-CA/index.js\": [\n\t\t\"KTij\",\n\t\t30\n\t],\n\t\"./fr/index.js\": [\n\t\t\"LKA2\",\n\t\t31\n\t],\n\t\"./gl/index.js\": [\n\t\t\"4bge\",\n\t\t32\n\t],\n\t\"./gu/index.js\": [\n\t\t\"3t4y\",\n\t\t33\n\t],\n\t\"./he/index.js\": [\n\t\t\"75M+\",\n\t\t34\n\t],\n\t\"./hi/index.js\": [\n\t\t\"CUe2\",\n\t\t35\n\t],\n\t\"./hr/index.js\": [\n\t\t\"L9Jq\",\n\t\t36\n\t],\n\t\"./hu/index.js\": [\n\t\t\"Nm+E\",\n\t\t37\n\t],\n\t\"./hy/index.js\": [\n\t\t\"netp\",\n\t\t38\n\t],\n\t\"./id/index.js\": [\n\t\t\"A6C3\",\n\t\t39\n\t],\n\t\"./is/index.js\": [\n\t\t\"N4bE\",\n\t\t40\n\t],\n\t\"./it/index.js\": [\n\t\t\"hmb4\",\n\t\t41\n\t],\n\t\"./ja/index.js\": [\n\t\t\"uAXs\",\n\t\t42\n\t],\n\t\"./ka/index.js\": [\n\t\t\"pwL5\",\n\t\t43\n\t],\n\t\"./kk/index.js\": [\n\t\t\"zGPi\",\n\t\t5\n\t],\n\t\"./ko/index.js\": [\n\t\t\"iW8+\",\n\t\t44\n\t],\n\t\"./lt/index.js\": [\n\t\t\"xj+b\",\n\t\t45\n\t],\n\t\"./lv/index.js\": [\n\t\t\"x5pY\",\n\t\t6\n\t],\n\t\"./ms/index.js\": [\n\t\t\"gUWk\",\n\t\t46\n\t],\n\t\"./nb/index.js\": [\n\t\t\"73vv\",\n\t\t47\n\t],\n\t\"./nl/index.js\": [\n\t\t\"hCQt\",\n\t\t48\n\t],\n\t\"./nn/index.js\": [\n\t\t\"vORL\",\n\t\t49\n\t],\n\t\"./pl/index.js\": [\n\t\t\"B6yL\",\n\t\t7\n\t],\n\t\"./pt-BR/index.js\": [\n\t\t\"2dYp\",\n\t\t50\n\t],\n\t\"./pt/index.js\": [\n\t\t\"gdks\",\n\t\t51\n\t],\n\t\"./ro/index.js\": [\n\t\t\"r2yp\",\n\t\t52\n\t],\n\t\"./ru/index.js\": [\n\t\t\"nz/o\",\n\t\t8\n\t],\n\t\"./sk/index.js\": [\n\t\t\"Wqan\",\n\t\t9\n\t],\n\t\"./sl/index.js\": [\n\t\t\"KYSo\",\n\t\t53\n\t],\n\t\"./sr/index.js\": [\n\t\t\"7mU3\",\n\t\t54\n\t],\n\t\"./sv/index.js\": [\n\t\t\"hxgj\",\n\t\t55\n\t],\n\t\"./ta/index.js\": [\n\t\t\"1ssA\",\n\t\t56\n\t],\n\t\"./te/index.js\": [\n\t\t\"SGoj\",\n\t\t57\n\t],\n\t\"./th/index.js\": [\n\t\t\"Pk+z\",\n\t\t58\n\t],\n\t\"./tr/index.js\": [\n\t\t\"3ZWG\",\n\t\t59\n\t],\n\t\"./ug/index.js\": [\n\t\t\"yT3n\",\n\t\t60\n\t],\n\t\"./uk/index.js\": [\n\t\t\"LCGg\",\n\t\t10\n\t],\n\t\"./vi/index.js\": [\n\t\t\"dGQT\",\n\t\t61\n\t],\n\t\"./zh-CN/index.js\": [\n\t\t\"UJqf\",\n\t\t62\n\t],\n\t\"./zh-TW/index.js\": [\n\t\t\"zn9v\",\n\t\t63\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"YO3j\";\nmodule.exports = webpackAsyncContext;","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"dTS7\";"],"sourceRoot":""}