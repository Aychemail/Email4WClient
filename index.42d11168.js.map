{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/app/config.ts","webpack:///./src/app/locales.js","webpack:///./src/app/helpers/url.ts","webpack:///./src/app/constants.ts","webpack:///./src/app/helpers/labels.ts","webpack:///./src/app/helpers/contacts.ts","webpack:///./src/app/helpers/addresses.ts","webpack:///./src/app/components/composer/addresses/AddressesRecipientItem.tsx","webpack:///./src/app/hooks/useEventListener.ts","webpack:///./src/app/components/composer/addresses/AddressesAutocomplete.tsx","webpack:///./src/app/components/composer/addresses/AddressesGroupModal.tsx","webpack:///./src/app/components/composer/addresses/AddressesGroupItem.tsx","webpack:///./src/app/components/composer/addresses/AddressesInput.tsx","webpack:///./src/app/helpers/mailboxUrl.ts","webpack:///./src/app/components/header/AdvancedSearchDropdown.js","webpack:///./src/app/components/header/PrivateHeader.js","webpack:///./src/app/components/sidebar/LocationAside.tsx","webpack:///./src/app/helpers/mailSettings.ts","webpack:///./src/app/helpers/message/messages.ts","webpack:///./src/app/helpers/parserHtml.ts","webpack:///./src/app/helpers/elements.ts","webpack:///./src/app/components/sidebar/PrivateSidebar.tsx","webpack:///./src/app/components/layout/PrivateLayout.tsx","webpack:///./src/app/helpers/paging.ts","webpack:///./src/app/hooks/useElements.ts","webpack:///./src/app/components/toolbar/ToolbarSeparator.tsx","webpack:///./src/app/components/toolbar/ToolbarButton.tsx","webpack:///./src/app/components/toolbar/ReadUnreadButtons.tsx","webpack:///./src/app/components/toolbar/ToolbarDropdown.tsx","webpack:///./src/app/components/toolbar/LayoutDropdown.tsx","webpack:///./src/app/components/toolbar/MoveButtons.tsx","webpack:///./src/app/components/toolbar/DeleteButton.tsx","webpack:///./src/app/components/toolbar/SortDropdown.tsx","webpack:///./src/app/components/toolbar/FilterDropdown.tsx","webpack:///./src/app/components/toolbar/SelectAll.tsx","webpack:///./src/app/components/dropdown/MoveDropdown.tsx","webpack:///./src/app/components/dropdown/LabelDropdown.tsx","webpack:///./src/app/components/toolbar/BackButton.tsx","webpack:///./src/app/components/toolbar/PagingControls.tsx","webpack:///./src/app/components/toolbar/Toolbar.tsx","webpack:///./src/app/components/list/ItemCheckbox.tsx","webpack:///./src/app/components/list/ItemStar.tsx","webpack:///./src/app/components/list/ItemLabels.tsx","webpack:///./src/app/components/list/ItemAttachmentIcon.tsx","webpack:///./src/app/helpers/conversation.ts","webpack:///./src/app/components/list/ItemLocation.tsx","webpack:///./src/app/helpers/date.js","webpack:///./src/app/components/list/ItemDate.tsx","webpack:///./src/app/components/conversation/NumMessages.tsx","webpack:///./src/app/components/list/ItemColumnLayout.tsx","webpack:///./src/app/components/list/ItemRowLayout.tsx","webpack:///./src/app/components/list/Item.tsx","webpack:///./src/app/components/view/EmptyView.tsx","webpack:///./src/app/hooks/useContactGroups.ts","webpack:///./src/app/components/list/List.tsx","webpack:///./src/app/components/message/MessageBody.tsx","webpack:///./src/app/helpers/displaySignature.js","webpack:///./src/app/helpers/encryptionType.js","webpack:///./src/app/components/message/MessageLock.tsx","webpack:///./src/app/components/message/header/HeaderCollapsed.tsx","webpack:///./src/app/components/message/extras/ExtraImages.tsx","webpack:///./src/app/components/message/extras/ExtraUnsubscribe.tsx","webpack:///./src/app/components/message/header/HeaderExtra.tsx","webpack:///./src/app/components/message/header/HeaderRecipientsSimple.tsx","webpack:///./src/app/components/message/header/HeaderRecipientsDetails.tsx","webpack:///./src/app/components/message/header/HeaderDropdown.tsx","webpack:///./src/app/components/message/header/HeaderExpanded.tsx","webpack:///./src/app/helpers/attachment/attachments.ts","webpack:///./src/app/api/attachments.ts","webpack:///./src/app/helpers/attachment/attachmentLoader.ts","webpack:///./src/app/helpers/attachment/attachmentDownloader.ts","webpack:///./src/app/hooks/useAttachments.ts","webpack:///./src/app/components/message/MessageAttachment.tsx","webpack:///./src/app/components/message/MessageFooter.tsx","webpack:///./src/app/helpers/string.ts","webpack:///./src/app/helpers/purify.ts","webpack:///./src/app/helpers/dom.ts","webpack:///./src/app/helpers/transforms/transformEscape.js","webpack:///./src/app/helpers/transforms/transformLinks.js","webpack:///./src/app/helpers/embedded/embeddedUtils.ts","webpack:///./src/app/helpers/embedded/embeddedStoreCids.ts","webpack:///./src/app/helpers/embedded/embeddedFinder.ts","webpack:///./src/app/helpers/embedded/embeddedStoreBlobs.ts","webpack:///./src/app/helpers/image.ts","webpack:///./src/app/helpers/embedded/embeddedParser.ts","webpack:///./src/app/helpers/transforms/transformEmbedded.ts","webpack:///./src/app/helpers/transforms/transformWelcome.js","webpack:///./src/app/helpers/transforms/transformBlockquotes.js","webpack:///./src/app/helpers/transforms/transformRemote.js","webpack:///./src/app/helpers/transforms/transformStylesheet.js","webpack:///./src/app/helpers/transforms/transformBase.js","webpack:///./src/app/helpers/attachment/attachmentConverter.ts","webpack:///./src/app/helpers/message/messageDecrypt.ts","webpack:///./src/app/hooks/useDecryptMessage.ts","webpack:///./src/app/helpers/base64.ts","webpack:///./src/app/helpers/send/sendPreferences.ts","webpack:///./src/app/helpers/send/sendMimeBuilder.ts","webpack:///./src/app/helpers/send/sendTopPackages.ts","webpack:///./src/app/helpers/send/sendSubPackages.ts","webpack:///./src/app/helpers/send/sendEncrypt.ts","webpack:///./src/app/hooks/useSendMessage.ts","webpack:///./src/app/helpers/message/messageEncrypt.ts","webpack:///./src/app/hooks/useEncryptMessage.ts","webpack:///./src/app/containers/MessageProvider.tsx","webpack:///./src/app/hooks/useMessage.ts","webpack:///./src/app/components/message/MessageView.tsx","webpack:///./src/app/containers/ConversationProvider.tsx","webpack:///./src/app/helpers/message/messageExpandable.ts","webpack:///./src/app/components/conversation/TrashWarning.tsx","webpack:///./src/app/components/conversation/ConversationView.tsx","webpack:///./src/app/hooks/useConversation.ts","webpack:///./src/app/components/view/WelcomePane.tsx","webpack:///./src/app/components/view/SelectionPane.tsx","webpack:///./src/app/components/view/PlaceholderView.tsx","webpack:///./src/app/components/message/MessageOnlyView.tsx","webpack:///./src/app/containers/MailboxContainer.tsx","webpack:///./src/app/hooks/useMailboxPageTitle.ts","webpack:///./src/app/containers/PageContainer.tsx","webpack:///./src/app/components/composer/ComposerTitleBar.tsx","webpack:///./src/app/components/composer/addresses/AddressesContactsModal.tsx","webpack:///./src/app/components/composer/addresses/AddressesEditor.tsx","webpack:///./src/app/models/address.ts","webpack:///./src/app/components/composer/addresses/AddressesSummary.tsx","webpack:///./src/app/components/composer/addresses/Addresses.tsx","webpack:///./src/app/components/composer/ComposerMeta.tsx","webpack:///./src/app/components/composer/attachments/AttachmensList.tsx","webpack:///./src/app/components/composer/ComposerContent.tsx","webpack:///./src/app/components/composer/attachments/AttachmentsButton.tsx","webpack:///./src/app/components/composer/ComposerActions.tsx","webpack:///./src/app/helpers/attachment/attachmentUploader.ts","webpack:///./src/app/hooks/useSlowChanges.ts","webpack:///./src/app/helpers/file.ts","webpack:///./src/app/components/composer/Composer.tsx","webpack:///./src/app/helpers/dedent.ts","webpack:///./src/app/helpers/message/messageSignature.ts","webpack:///./src/app/helpers/message/messageDraft.ts","webpack:///./src/app/containers/ComposerContainer.tsx","webpack:///./src/app/hooks/useDraft.ts","webpack:///./src/app/PrivateApp.tsx","webpack:///./src/app/components/layout/PublicLayout.js","webpack:///./src/app/containers/LoginContainer.js","webpack:///./src/app/containers/SignupContainer.js","webpack:///./src/app/PublicApp.js","webpack:///./src/app/App.js","webpack:///./src/app/index.js","webpack:///./node_modules/design-system/assets/img/shared/bank-icons sync .svg$","webpack:///./node_modules/date-fns/locale lazy ^\\.\\/[a-z]{2}(-([A-Z]{2}))","webpack:///./src/i18n lazy .json$"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","sriHashes","exports","module","l","e","promises","installedChunkData","promise","Promise","resolve","reject","onScriptComplete","script","document","createElement","charset","timeout","nc","setAttribute","src","p","jsonpScriptSrc","indexOf","window","location","origin","crossOrigin","error","Error","event","onerror","onload","clearTimeout","chunk","errorType","type","realSrc","target","message","name","request","undefined","setTimeout","integrity","head","appendChild","all","m","c","d","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","oe","err","console","jsonpArray","oldJsonpFunction","slice","CLIENT_ID","CLIENT_TYPE","CLIENT_SECRET","APP_VERSION","APP_NAME","API_URL","SECURE_URL","LOCALES","API_VERSION","DATE_VERSION","CHANGELOG_PATH","VERSION_PATH","SENTRY_RELEASE","SENTRY_DSN","locales","require","keys","reduce","acc","getSearchParams","params","URLSearchParams","search","forEach","changeSearchParams","newParams","delete","set","queryString","toString","urlFragment","pathname","ENCRYPTED_STATUS","ELEMENT_TYPES","LABEL_IDS_TO_HUMAN","MAILBOX_LABEL_IDS","INBOX","ALL_DRAFTS","ALL_SENT","TRASH","SPAM","ALL_MAIL","ARCHIVE","SENT","DRAFTS","STARRED","HUMAN_TO_LABEL_IDS","entries","LABEL_IDS_TO_I18N","VERIFICATION_STATUS","MESSAGE_FLAGS","MESSAGE_ACTIONS","getHumanLabelID","labelID","getLabelName","labels","getI18nLabelID","labelsMap","toMap","Name","isCustomLabel","values","includes","isFolder","Exclusive","LABEL_EXCLUSIVE","FOLDER","getLabelsWithoutFolders","filter","label","findEmailInCache","cache","email","find","Email","normalizeEmail","getContactsOfGroup","contacts","groupID","contact","LabelIDs","REGEX_RECIPIENT","validateAddress","address","REGEX_EMAIL","test","toLowerCase","removeEmailAlias","replace","addPlusAlias","plus","atIndex","plusIndex","substring","domain","getByEmail","addresses","cleanEmail","isFallbackAddress","Receive","isOwnAddress","inputToRecipient","input","match","exec","Address","recipientToInput","recipient","contactToRecipient","groupPath","Group","contactToInput","recipientsWithoutGroup","recipients","getRecipientLabel","getRecipientGroupLabel","recipientGroup","contactsInGroup","count","members","group","getRecipientOrGroupLabel","allContacts","ID","recipientsToRecipientOrGroup","groups","existingGroup","recipientsOrGroup","Path","getAddressFromPlusAlias","Status","Send","plusPart","findSender","AddressID","enabledAddresses","sort","a1","a2","Order","originalAddress","AddressesRecipientItem","onChange","noop","onRemove","useState","model","setModel","editableRef","useRef","validate","valid","setValid","useEffect","current","textContent","handleChange","className","classnames","contentEditable","onKeyUp","onPaste","onBlur","ref","onClick","Icon","size","useEventListener","eventName","handler","addEventListener","removeEventListener","AddressesAutocomplete","inputRef","contactGroups","onSelect","currentValue","children","awesomplete","setAwesomplete","containerRef","awesompleteInstance","Awesomplete","container","minChars","autoFirst","destroy","contactList","map","groupList","list","item","text","itemId","ITEM","close","contactID","open","AddressesGroupModal","onSubmit","onClose","rest","generateUID","uid","isChecked","newValue","checked","title","FormModal","submit","id","Checkbox","Label","htmlFor","AddressesGroupItem","createModal","useModals","handleGroupModal","a","newRecipientGroup","AddressesInput","addressesFocusRef","placeholder","inputModel","setInputModel","recipientsOrGroups","confirmInput","focus","handleRecipientRemove","toRemove","handleGroupChange","toChange","handleGroupRemove","groupContacts","closest","stopPropagation","Input","onKeyDown","keyCode","preventDefault","last","trim","setPathInUrl","elementID","stringToInt","string","isNumber","parseInt","sortToString","desc","filterToString","Unread","keywordToString","keyword","trimmed","pageFromUrl","pageNumber","isNaN","stringToPage","page","extractSearchParameters","from","to","begin","end","attachments","wildcard","setKeywordInUrl","ALL_ADDRESSES","DEFAULT_MODEL","getRecipients","split","isEmail","formatRecipients","join","AdvancedSearchDropdown","fullInput","history","useMailSettings","mailSettings","loadingMailSettings","usePopperAnchor","anchorRef","isOpen","toggle","useLabels","loadingLabels","useContactEmails","contactEmails","loadingContactEmails","useAddresses","loadingAddresses","updateModel","start","fromUnixTime","Loader","labelIDOptions","hasBit","ShowMoved","SHOW_MOVED","concat","LABEL","addressOptions","DropdownButton","buttonRef","hasCaret","Dropdown","originalPlacement","autoClose","getUnixTime","onReset","Toggle","Href","url","Select","options","DateInput","isBefore","isAfter","Radio","Button","disabled","PrimaryButton","PrivateHeader","expanded","onToggleExpand","onSearch","useUser","hasPaidMail","updateValue","MainLogo","Hamburger","onToggle","Searchbox","delay","advanced","TopNavbar","UpgradeButton","external","TopNavbarLink","icon","aria-current","SupportDropdown","LocationAside","counterMap","currentLabelID","refreshLabelID","unread","fill","isColumnMode","ViewLayout","VIEW_LAYOUT","COLUMN","isConversationMode","ViewMode","VIEW_MODE","GROUP","alwaysMessageLabels","searchParams","some","FLAG_RECEIVED","FLAG_SENT","FLAG_RECEIPT_REQUEST","FLAG_IMPORTED","FLAG_REPLIED","FLAG_REPLIEDALL","FLAG_FORWARDED","FLAG_INTERNAL","FLAG_AUTO","FLAG_E2E","FLAG_SIGN","FLAG_PUBLIC_KEY","PLAINTEXT","MIME_TYPES","hasMimeType","MIMEType","isMIME","MIME","isPlainText","isHTML","DEFAULT","hasFlag","flag","Flags","isImported","isInternal","isExternal","isAuto","isReceived","isSent","isSentAndReceived","isDraft","isE2E","isSentEncrypted","isInternalEncrypted","isSign","isPGPEncrypted","inSigningPeriod","Time","isEO","Password","addReceived","setBit","getSender","Sender","ToList","CCList","BCCList","getRecipientsAddresses","identity","getDate","Date","getParsedHeaders","parameter","ParsedHeaders","getAttachments","Attachments","hasAttachments","attachmentsSize","Size","isSentAutoReply","h","k","v","getHTML","content","exportPlainText","html","appendLines","convertImages","turndownService","TurndownService","bulletListMarker","hr","protonSignature","node","classList","contains","replacement","replaceBreakLine","parentElement","nodeName","childElementCount","lastElementChild","replaceImg","element","image","attribute","alt","replaceAnchor","replaceDiv","use","addRule","escape","output","turndown","startsWith","toText","getPlainText","downconvert","getCurrentType","isMessage","ConversationID","ContextTime","hasLabel","Labels","getTime","getLabel","getSize","elements","getValue","e1","e2","b","valueA","valueB","getLabelIDs","PrivateSidebar","onCompose","refresh","setRefresh","useConversationCounts","conversationCounts","loadingConversationCounts","useMessageCounts","messageCounts","loadingMessageCounts","useEventManager","useMemo","conversationCounters","messageCounters","labelIDs","conversationCountersMap","messageCountersMap","countersMap","getCounterMap","getItemParams","link","ariaCurrent","aside","redirectTo","Color","color","data-expanded","action","NEW","NavMenu","PrivateLayout","mainAreaRef","setExpand","AppsSidebar","items","StorageSpaceStatus","upgradeButton","Provider","pageCount","Math","ceil","total","emptyCache","pages","useElements","conversationMode","api","useApi","subscribe","loading","setLoading","localCache","setLocalCache","minPage","startIndex","endIndex","filtered","sortElements","isExpectedLength","expectedPageLength","shouldResetCache","shouldSendRequest","queryElement","query","getConversation","getMessage","Conversation","Message","queryElements","queryConversations","queryMessageMetadata","Page","PageSize","Limit","limit","LabelID","Sort","Desc","Begin","End","Keyword","To","From","AutoWildcard","Total","Elements","Conversations","Messages","load","ConversationCounts","MessageCounts","Action","Element","EVENT_ACTIONS","DELETE","toDelete","UPDATE_DRAFT","UPDATE_FLAGS","toUpdate","CREATE","toCreate","existingElement","toUpdateCompleted","newReplacements","newElements","ToolbarSeparator","ToolbarButton","ReadUnreadButtons","selectedIDs","MessageButtons","MESSAGE_BUTTONS","READ_UNREAD","useLoading","withLoading","markAs","status","isUnread","markConversationsAsUnread","markConversationsAsRead","markMessageAsUnread","markMessageAsRead","buttons","UNREAD_READ","reverse","ToolbarDropdown","lock","setLock","caretClassName","autoCloseOutside","onLock","LayoutDropdown","currentLayoutIcon","updateLayout","viewLayout","updateViewLayout","DropdownMenu","DropdownMenuButton","ROW","MoveButtons","createNotification","useNotifications","handleMove","labelConversations","labelMessages","IDs","displayTrash","displayInbox","displayArchive","displaySpam","DeleteButton","displayDelete","displayEmpty","handleDelete","Confirm","ngettext","msgid","confirm","ErrorButton","onConfirm","Alert","deleteConversations","deleteMessages","handleEmpty","emptyLabel","TIME","SIZE","ICONS","SortDropdown","onSort","FilterDropdown","onFilter","SelectAll","onCheck","SearchInput","UntypedSearchInput","MoveDropdown","updateSearch","normSearch","normalize","typeIsMessage","folders","getFolders","Boolean","folder","Tooltip","newLabel","LABEL_COLORS","randomIntFromInterval","autoFocus","index","LabelState","LabelDropdown","lastChecked","setLastChecked","alsoArchive","updateAlsoArchive","selectedLabelIDs","updateSelectedLabelIDs","Off","On","Indeterminate","getInitialState","handleApply","selection","labelAction","unlabelAction","unlabelMessages","unlabelConversations","applyCheck","selected","update","handleAddNewLabel","onAdd","lineId","indeterminate","shiftKey","nativeEvent","findIndex","min","max","BackButton","PagingControls","onPage","setPage","String","Array","_","newPage","Toolbar","checkAll","onCheckAll","onBack","columnMode","selectedElements","ItemCheckbox","ItemStar","isConversation","isConversationTest","isStarred","iconName","handleClick","ItemLabels","onUnlabel","labelsObjects","labelsToShow","orderBy","style","backgroundColor","borderColor","Link","ItemAttachmentIcon","messageHasAttachments","ContextNumAttachments","conversationHasAttachments","ItemLocation","formatSimpleDate","date","format","isToday","locale","dateLocale","formatFullDate","FORMATERS","simple","full","distance","dateFnsFormatDistanceToNow","addSuffix","ItemDate","formattedDate","setFormattedDate","formater","intervalID","setInterval","clearInterval","NumMessages","conversation","ItemColumnLayout","senders","Subject","ItemRowLayout","humanSize","Item","displayRecipients","Senders","getSenders","sendersLabels","recipientsLabels","recipientOrGroup","ItemLayout","NumUnread","getInitial","EmptyView","isInbox","noResultSearchSvg","noResultInboxSvg","data-if","useContactGroups","useCache","useCachedModelResult","useCallback","getContactGroupsModel","List","checkedIDs","loadingContacts","loadingGroups","handleCheck","elementIDs","MessageBody","plain","dangerouslySetInnerHTML","__html","SIGNED_AND_INVALID","SIGNED_AND_VALID","I18N","pm","pgp","clear","sentEncrypted","auto","sentClear","draft","getFromType","isExternalEncrypted","MessageLock","inputClassName","displaySignature","verified","displaySignatureStatus","pgpEncrypted","tooltip","encType","getEncryptionType","href","internal","HeaderCollapsed","onExpand","inOutClass","ExtraImages","showRemoteImages","showEmbeddedImages","onLoadImages","ExtraUnsubscribe","getListUnsubscribe","HeaderExtra","onLoadRemoteImages","onLoadEmbeddedImages","HeaderRecipientsSimple","RecipientsList","HeaderRecipientsDetails","HeaderDropdown","HeaderExpanded","messageLoaded","onCollapse","useToggle","showDetails","state","toggleDetails","handleCompose","referenceMessage","handleRemoveLabel","ButtonGroup","REPLY","REPLY_ALL","FORWARD","embeddableTypes","isEmbeddable","fileType","getAttachment","attachmentID","method","uploadAttachment","decrypt","encryptedBinaryBuffer","sessionKey","encryptedBinary","Uint8Array","decryptMessage","sessionKeys","getRequest","getSessionKey","attachment","keyPackets","binaryStringToArray","decodeBase64","KeyPackets","privateKeys","decryptSessionKey","getDecryptedAttachment","blob","concatArrays","binary","getAndVerify","Preview","filename","signatures","has","attachmentdata","reverify","formatDownload","isError","generateDownload","download","downloadFile","Blob","formatDownloadAll","att","splitExtension","fileName","ext","newName","getZipAttachmentName","downloadAll","zip","JSZip","file","generateAsync","useAttachmentsCache","globalCache","Map","blobs","cids","OUTER_MAP_CLASSNAME","mp3","javascript","vcard","xls","mov","pdf","power","word","INNER_MAP_CLASSNAME","MessageAttachment","showLoader","setShowLoader","showInstant","setShowInstant","humanAttachmentSize","outerIcon","single","getInnerFileIconType","isEmbedded","Headers","disposition","embedded","Number","isEmbeddedLocal","classNames","clickHandler","showInner","aria-busy","MessageFooter","humanAttachmentsSize","numAttachments","numEmbedded","numPureAttachments","handleDownloadAll","OPEN_TAG_AUTOCOMPLETE","CLOSE_TAG_AUTOCOMPLETE","OPEN_TAG_AUTOCOMPLETE_RAW","CLOSE_TAG_AUTOCOMPLETE_RAW","ucFirst","charAt","toUpperCase","replaceLineBreaks","REGEXP_URL_ATTR","RegExp","attr","LIST_PROTON_ATTR","MAP_PROTON_ATTR","CONFIG","default","ALLOWED_URI_REGEXP","ADD_TAGS","ADD_ATTR","FORBID_TAGS","FORBID_ATTR","raw","WHOLE_DOCUMENT","RETURN_DOM","protonizer","ALLOW_UNKNOWN_PROTOCOLS","RETURN_DOM_FRAGMENT","escapeURLinStyle","handleEscape","unescapedEncoding","radix","ignored","val","fromCodePoint","char","escapeFlag","escapedStyle","beforeSanitizeElements","nodeType","attributes","getAttribute","removeAttribute","escaped","purifyHTMLHooks","active","DOMPurify","addHook","removeHook","getConfig","clean","config","clearConfig","sanitize","attachHooks","process","matches","selector","msMatchesSelector","parseInDiv","div","innerHTML","FORBIDDEN_SVG","HTML_STRING","VERIFY_ELEMENT_END","REGEXP_SVG_BREAK","removeBase64","activeCache","hash","random","now","put","escapeSVG","transformEscape","activeHooks","purifyHTML","PROTOCOLS","ALL_PROTOCOLS","MAP","getNormalizedHref","sanitizeRelativeHttpLinks","proto","linkUsesProtocols","disableAnchors","isEmptyAnchor","pointerEvents","transformLinks","querySelectorAll","hasHTTP","isRelative","httpInNewTab","noReferrerInfo","REGEXP_CID_START","getBodyParser","isDocument","trimQuotes","substr","readCID","findEmbedded","cid","extractEmbedded","convertMimeHeaders","headers","formatted","mimemessage","factory","CIDList","getMessageCIDs","embeddedAttachments","addMessageCID","listInlineAttachments","MAP_CID","contentId","contentName","contentDisposition","getAttachementName","urlCreator","URL","webkitURL","Blobs","MAP_BLOBS","getHashKey","msg","store","imageUrl","createObjectURL","isContentLocation","getBlob","hasBlob","isInlineEmbedded","wrapImage","img","wrapper","firstChild","outerHTML","parentNode","insertBefore","remove","wrap","getUrl","srcToCID","prepareImages","show","isReplyForward","isOutside","showEmbedded","add","removeChild","triggerSigVerification","wait","actionDirection","nodes","mutateHTML","direction","escapeSrc","unescapeSrc","Encrypted","PGP_MIME","storeAttachement","buffer","transformEmbedded","attachmentsCache","ShowImages","SHOW_IMAGES","EMBEDDED","transformWelcome","images","str","quotes","transformBlockquotes","doc","blockquotes","parent","found","blockquote","child","before","after","button","transformStylesheet","firstElement","firstElementChild","position","WHITELIST","ATTRIBUTES","REGEXP_FIXER","prepareInjection","hasAttribute","mapAttributes","transformRemote","inputShowImages","regex","showImages","REMOTE","hasImages","$1","ELEMENTS","transformBase","base","querySelector","BASE_URL","baseUrl","getBaseURL","bindAttribute","el","keyproton","ptValue","convert","number","parsedAttachment","generatedFileName","transferEncoding","contentType","filenameOption","checksum","getId","JSON","stringify","Signature","attachmentData","convertSingle","getVerifiedStatus","pmcryptoVerified","publicKeys","signedInvalid","signedPubkey","decryptMimeMessage","headerFilename","sender","decryptMIMEMessage","Body","messageDate","getBody","body","mimetype","verify","getEncryptedSubject","encryptedSubject","decryptLegacyMessage","decryptMessageLegacy","useDecryptMessage","getPublicKeys","useGetPublicKeys","getAddressKeys","useGetAddressKeys","addressKeys","splitKeys","arrayToBase64","encodeBase64","arrayToBinaryString","emailInExtrInfo","contactEmail","ContactID","getInExtrInfo","usesDefaults","Defaults","encryptionEnabled","KEY_FLAGS","ENABLE_ENCRYPTION","getDefaultInfo","defaultMimeType","eoEnabled","globalSign","RecipientType","Keys","Warnings","warnings","RECIPIENT_TYPE","TYPE_INTERNAL","TYPE_EXTERNAL","settingsScheme","PGPScheme","settingsMime","PACKAGE_TYPE","SEND_PGP_MIME","ownAddress","fallbackAddress","getKeys","PublicKey","SEND_PM","encrypt","sign","publickeys","primaryPinned","scheme","pinned","isVerified","SEND_EO","SEND_CLEAR","mimetypeLogic","defaultMimetype","SEND_PGP_INLINE","isPrimaryPinned","base64Keys","sendKeys","sendKeyObjects","pinnedKey","pinnedFingerprint","getFingerprint","extractInfo","keyData","encryptFlag","signFlag","inputMimetype","emailKeys","inputScheme","isExternalWithKeys","pmKey","then","isExpiredKey","isExpired","keyObjs","keyObjects","getApiInfo","normalizedEmail","info","getCacheInfo","inCache","emails","contactEmailList","every","inExtractedInfoCache","getInfo","getSendPreferences","catchErrors","Sign","normEmails","unique","normInfos","normMap","assign","cur","extractContentValue","semicolonIndex","buildEmbeddedHtml","htmlEntity","contentTransferEncoding","log","relatedBody","buildPlaintextEntity","plaintext","buildBodyEntity","buildAlternateEntity","build","bodyEntity","attachmentEntities","attachmentName","contentTypeValue","contentDispositionValue","entity","header","buildAttachments","testDiv","getNormalAttachments","fetchMimeDependencies","constructMime","generateMimePackage","Addresses","generatePlainTextPackage","generateHTMLPackage","generateTopPackages","sendPrefs","packagesStatus","packages","demandedPackages","sendPM","Type","sendPMEncryptedOutside","warn","sendPGPMime","sendPGPInline","sendClear","attachSubPackages","bindPackageSet","pack","packageToUpdate","packageType","packToBase64","algorithm","Algorithm","Key","encryptKeyPacket","passwords","encryptSessionKey","packets","write","encryptAttachmentKeys","attachmentKeys","isEo","SessionKey","AttachmentKeyPackets","Attachment","AttachmentKeys","generateSessionKeyHelper","generateSessionKey","encryptBodyPackage","ownKeys","cleanPublicKeys","encryptMessage","returnSessionKey","compression","splitMessage","asymmetric","encrypted","encryptDraftBodyPackage","ownPublicKeys","flat","armorBytes","encryptBody","publicKeysList","encryptPack","counter","publicKey","BodyKeyPacket","subPack","BodyKey","encryptPackage","getAttachmentKeys","encryptPackages","packageList","useSendMessage","uniqueEmails","sendMessage","Packages","Sent","useEncryptMessage","MessageContext","createContext","MessageProvider","useInstance","createCache","createLRU","isArray","messageEventData","diff","LabelIDsRemoved","LabelIDsAdded","MessageToUpdate","omit","messageListener","mergeMessages","messageState","messageModel","mergeSavedMessage","messageSaved","messageReturned","ParentID","useMessage","inputMessage","useContext","computeCache","messageID","setMessageID","setMessage","messageActivity","setMessageActivity","changedMessageID","transforms","loadData","markAsRead","createDraftApi","updateDraft","deleteRequest","activities","transform","runSingle","compute","simpleUpdateCache","newMessage","run","computes","updateCacheCallback","messagePromise","initialize","initialized","loadRemoteImages","loadEmbeddedImages","createDraft","saveDraft","send","deleteDraft","MessageView","initialExpand","conversationIndex","setExpanded","elementRef","loaded","prepareMessage","scrollIntoView","behavior","block","handleLoadRemoteImages","handleLoadEmbeddedImages","handleExpand","existingDraft","ConversationContext","ConversationProvider","conversationListener","getFirstMessageToRead","messages","getLast","TrashWarning","inTrash","ConversationView","conversationID","setConversation","changedId","useConversation","conversationData","toggleFilter","filteredMessages","messagesToShow","showTrashWarning","realMessages","latest","findMessageToExpand","WelcomePane","labelCount","user","unreadsLabel","reportBugButton","LinkButton","AuthenticatedBugModal","DisplayName","capitalize","jt","unreadEmailsSvg","SelectionPane","onUncheckAll","checkeds","labelName","conversationManySvg","conversationSingleSvg","PlaceholderView","welcomeRef","counters","MessageOnlyView","MailboxContainer","inputLabelID","inputElementID","searchParameters","stringToSort","sortFromUrl","stringToFilter","filterFromUrl","checkedElements","setCheckedElements","setCheckAll","loadingUser","loadings","unreads","unreadString","useMailboxPageTitle","handleCheckAll","setPageInUrl","setSortInUrl","setFilterInUrl","PageContainer","useLayoutEffect","ErrorBoundary","TitleBarButton","ComposerTitleBar","minimized","maximized","toggleMinimized","toggleMaximized","SearchInputUntyped","AddressesContactsModal","inputValue","setValue","setContacts","handleChangeCheckbox","searchInput","Table","TableHeader","cells","TableBody","colSpan","TableRow","AddressesEditor","toggleExpanded","handleContactModal","recipientTypes","AddressesSummary","onFocus","recipientOrGroups","addressesBlurRef","loadingContactGroups","editor","setEditor","ComposerMeta","addressesOptions","originalTo","plusAddress","unshift","getFromAdresses","AttachmentsList","Block","Quill","import","tagName","register","ComposerContent","onRemoveAttachment","contentFocusRef","readOnly","delta","source","AttachmentsButton","onAddAttachments","multiple","files","ATTACHMENT_ACTION","ComposerActions","activityInput","activity","onSave","onSend","onDelete","time","stack","setStack","setTimeoutState","runTimeout","first","useSlowChanges","dateMessage","dateString","readFileAsBuffer","reader","FileReader","onabort","readAsArrayBuffer","inline","armor","detached","signature","Filename","FileSize","Inline","encryptFile","pubKeys","privKey","TypeError","uploadFile","titleImage","tempPacket","uploading","ContentID","MessageID","DataPacket","upload","ATTACHMENT","INLINE","uploads","m1","m2","Composer","inputStyle","opening","setOpening","modelMessage","setModelMessage","syncedMessage","syncLock","syncActivity","useWindowSize","width","height","COMPOSER_VERTICAL_GUTTER","HEADER_HEIGHT","COMPOSER_HEIGHT","COMPOSER_SWITCH_MODE","autoSave","debounce","newModelMessage","save","messageToSave","handleAddAttachments","handleSave","handleSend","handleClose","right","COMPOSER_GUTTER","APP_BAR_WIDTH","computeStyle","dedentTpl","callSite","args","getProtonSignature","PMSignature","PM_SIGNATURE","isEmptyUserSignature","createSpace","tagOpen","getSpaces","isReply","isUserEmpty","isEmptySignature","between","getClassNamesSignature","isProtonEmpty","userClass","protonClass","containerClass","templateBuilder","noSpace","space","template","insertSignature","insertAdjacentHTML","RE_PREFIX","FW_PREFIX","formatSubject","subject","prefix","hasPrefix","newCopy","useEncrypted","reply","ReplyTos","replyAll","userAddresses","CCListWithoutUserAddresses","forward","handleActions","generateBlockquote","previously","newContent","createNewDraft","DraftMIMEType","RightToLeft","AttachPublicKey","senderAddress","PasswordHint","ExpirationTime","ExpiresIn","hasFocus","rightPositions","maxHeight","zIndex","COMPOSER_ZINDEX","getComposeExisting","composeArgs","getComposeNew","ComposerContainer","loadingSettings","setMessages","focusedMessage","setFocusedMessage","useDraft","newMessages","handleFocus","range","share","computeRightPositions","composeExisting","composeNew","getComposeArgs","existingMessage","oldMessage","PrivateApp","onLogout","StandardPrivateApp","preloadModels","UserModel","UserSettingsModel","eventModels","AddressesModel","ConversationCountsModel","MessageCountsModel","MailSettingsModel","LabelsModel","SubscriptionModel","OrganizationModel","Route","path","render","routeProps","PublicLayout","Icons","LoginContainer","stopRedirect","onLogin","SignInLayout","LoginForm","needHelp","SimpleDropdown","SignupContainer","propTypes","PropTypes","func","isRequired","shape","step","oneOfType","token","Coupon","Code","PublicApp","hasStopRedirect","setError","loadOpenPGP","catch","Switch","ResetPasswordContainer","component","ForgotUsernameContainer","Redirect","Setup","useAuthentication","UID","login","logout","hot","ProtonApp","ReactDOM","webpackContext","req","webpackContextResolve","code","webpackAsyncContext","ids","webpackEmptyAsyncContext"],"mappings":"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mBACH/xD,EAEP,OAAOmQ,EAAI0hD,GAEZD,EAAersD,KAAO,WACrB,OAAOjH,OAAOiH,KAAK4K,IAEpByhD,EAAevxD,QAAUyxD,EACzBhyD,EAAOD,QAAU+xD,EACjBA,EAAengD,GAAK,Q,qECtCpB,IAAItB,EAAM,CACT,gBAAiB,CAChB,OACA,IAED,mBAAoB,CACnB,OACA,IAED,mBAAoB,CACnB,OACA,IAED,mBAAoB,CACnB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,GAED,gBAAiB,CAChB,OACA,GAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,mBAAoB,CACnB,OACA,IAED,mBAAoB,CACnB,OACA,IAED,mBAAoB,CACnB,OACA,IAED,mBAAoB,CACnB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,mBAAoB,CACnB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,mBAAoB,CACnB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,GAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,GAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,GAED,mBAAoB,CACnB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,GAED,gBAAiB,CAChB,OACA,GAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,mBAAoB,CACnB,OACA,IAED,mBAAoB,CACnB,OACA,KAGF,SAAS6hD,EAAoBH,GAC5B,IAAIryD,EAAoBuD,EAAEoN,EAAK0hD,GAC9B,OAAOzxD,QAAQC,UAAU0xC,MAAK,WAC7B,IAAI/xC,EAAI,IAAIwB,MAAM,uBAAyBqwD,EAAM,KAEjD,MADA7xD,EAAE+xD,KAAO,mBACH/xD,KAIR,IAAIiyD,EAAM9hD,EAAI0hD,GAAMpgD,EAAKwgD,EAAI,GAC7B,OAAOzyD,EAAoBQ,EAAEiyD,EAAI,IAAIlgB,MAAK,WACzC,OAAOvyC,EAAoBiS,MAG7BugD,EAAoBzsD,KAAO,WAC1B,OAAOjH,OAAOiH,KAAK4K,IAEpB6hD,EAAoBvgD,GAAK,OACzB3R,EAAOD,QAAUmyD,G,mEChRjB,SAASE,EAAyBL,GAGjC,OAAOzxD,QAAQC,UAAU0xC,MAAK,WAC7B,IAAI/xC,EAAI,IAAIwB,MAAM,uBAAyBqwD,EAAM,KAEjD,MADA7xD,EAAE+xD,KAAO,mBACH/xD,KAGRkyD,EAAyB3sD,KAAO,WAAa,MAAO,IACpD2sD,EAAyB7xD,QAAU6xD,EACnCpyD,EAAOD,QAAUqyD,EACjBA,EAAyBzgD,GAAK,Q","file":"index.42d11168.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// script path function\n \tfunction jsonpScriptSrc(chunkId) {\n \t\treturn __webpack_require__.p + \"\" + ({}[chunkId]||chunkId) + \".\" + {\"3\":\"c4110b0e\",\"4\":\"5748a625\",\"5\":\"d002b3b8\",\"6\":\"07acf1a8\",\"7\":\"7ad516d7\",\"8\":\"33928503\",\"9\":\"ae19bd00\",\"10\":\"8a208c96\",\"11\":\"877e3a7c\",\"12\":\"ff1aceda\",\"13\":\"25cb02e2\",\"14\":\"1a1e5032\",\"15\":\"14e81f6b\",\"16\":\"a9f7ed5b\",\"17\":\"b8a42e45\",\"18\":\"f1fc393a\",\"19\":\"f85e0da2\",\"20\":\"0eca0fa2\",\"21\":\"c710fa30\",\"22\":\"be043dcc\",\"23\":\"21a633e0\",\"24\":\"fe9d2c12\",\"25\":\"afe5354a\",\"26\":\"180da2c2\",\"27\":\"a583cf43\",\"28\":\"35eb7050\",\"29\":\"dd5d965c\",\"30\":\"9f5e9f6f\",\"31\":\"8ac4cff8\",\"32\":\"ecd51f02\",\"33\":\"f8bc733f\",\"34\":\"d08f2f2d\",\"35\":\"07a524d4\",\"36\":\"bd767790\",\"37\":\"0472a548\",\"38\":\"313ea7bb\",\"39\":\"ecd2b080\",\"40\":\"1d96dbee\",\"41\":\"9f7ce9e7\",\"42\":\"d7847233\",\"43\":\"a1e44c77\",\"44\":\"d4dd47a4\",\"45\":\"b8cdd3d2\",\"46\":\"118c5c6c\",\"47\":\"d21a0563\",\"48\":\"3456478a\",\"49\":\"448429bf\",\"50\":\"6c69c91b\",\"51\":\"7372a16e\",\"52\":\"6aaafc7a\",\"53\":\"5821bf6b\",\"54\":\"002e92c5\",\"55\":\"c1890cd2\",\"56\":\"72f9ea33\",\"57\":\"45fe19e8\",\"58\":\"f8968b27\",\"59\":\"c974f643\",\"60\":\"22b8c74c\",\"61\":\"8abf3a45\",\"62\":\"a72fc9e8\",\"63\":\"d8ceb1c9\",\"64\":\"02a35823\",\"65\":\"691e1fd1\",\"66\":\"eaefa986\"}[chunkId] + \".chunk.js\"\n \t}\n \tvar sriHashes = {\"3\":\"sha384-9934ABN6uqPEPFosQLqxuVhvYUV4okLUNbM0wPFOjE32xxR0586aPIAfPwsnK0aM\",\"4\":\"sha384-c8lzpMfT7HLNH/GninvVmldA6MAz78U7S67XgZ0sL1zC/XsvbAc1sk/8WCbo5DRm\",\"5\":\"sha384-lv7AR2bqV8OenkumNTiZZdadAbQfO2XuJbYqEt9AzFdGlC10pFrN3Cs+aZUgjPcD\",\"6\":\"sha384-zGs+rCNJ2ybc4gZG6rllZSyRoPEPzHKQsQdmg5Ct1obpLbhfrgY0Eh8xKnaVYAWQ\",\"7\":\"sha384-pYGHH3VUsYMwA4BAKILHXmvGjpaxZlX7K4Of8Vf0TpR1zS6KDsgHFNzDpzirDyBf\",\"8\":\"sha384-ACeUJuCEJ59IYImLrUenrF6deSrpeWezxLcOsBAQyORKzdpa17wYYLC3/lu9FXfx\",\"9\":\"sha384-i0T45goKd5FtPV6EQM7mrJpda8H8zPWOz5tjU9ymETt7xBC6jUjwNqHloDdlm24u\",\"10\":\"sha384-8jUnc1d4TZkeepUWsacU28Ba3xjVZQC+DhOPOUgsOujkW4AH00aKevnp3eALoF96\",\"11\":\"sha384-DArCUJcqJmVbAYO1HmaQBxRDAd1LhtMG3EtURSQnKJtwDiZ1YwnP2rwfkK69PMf4\",\"12\":\"sha384-XS0QUhEY75QdhPe6i1rnrb4KAI4vmxXrsCsUmdIWSbx+ZzXXqOOWQouR+Hua6ukg\",\"13\":\"sha384-m+5HhZASMNDlwdTS4rbCfY+uMTLoDEBuHkgo2eRz1U72aRnXBRtcFNIpYN8UcOw0\",\"14\":\"sha384-lRW/huJoiN9BopHCZ2RcPCpNHFtWg3585yWFpWhv+DHGLlUB9fgLWMA1V/Roj1+b\",\"15\":\"sha384-irOAQuzwBISkvtz8hzaB0WP9TNhpfAYByjaJsV8JxgV+2F+3umYIZtxCJDfclqux\",\"16\":\"sha384-BRfHejCiWsn28LbRHzgaPHBmWBeqhz+loh+/rXH2QTedcz0OMFYxD7pvQch4Maq8\",\"17\":\"sha384-UP9yAZvoLx3uOKiaRwDd8CnL+TG6XnvmCQ/dqZUmuxDfNZimQYs6mhtwaDm1mC/E\",\"18\":\"sha384-ES8l1C4+eGYE3gz5iokugFlvGNUc3Jkl+RqsyPcNNYjnbugjT4OPnWttCcelmjC/\",\"19\":\"sha384-zuIZQSzznBcH/aeP6dj/cfl9tnmBnFZ5OvQWlFuj6zTniPXSJ825U++zKvplDaFc\",\"20\":\"sha384-jKcgQSWZyXXAHZ7g5WNU6glCJtd1tVX4BAcyO+Qo4PJMWFI7EIYYfbb1ieSu4Eob\",\"21\":\"sha384-8kzw/z8VFEI4cFXKzDPIhxdSEz3rcKu7VL7Hb8dm/1jP9WDy3G/6Pq1sk0DwdlUQ\",\"22\":\"sha384-vQaEGDUlI+f05Zln/tyPRJX7Q+EH6KpzX5B+1Ksqeq6smzvDMRw/VcuU7WO/9UWo\",\"23\":\"sha384-AoehfZkceTHXRM5ePhp5CSnOVH2PoqIeL8gzUpv5R1Vw2lZJrXIDuzUsxp4KZgq3\",\"24\":\"sha384-hMnh3w0w1iPOFlEhpEHjBAlGJVlowHPzeZ0M2IgBRwTD2htzyWAa5MRvVPkTzdJA\",\"25\":\"sha384-W/vYvDOgjWSw6gxJmVjoKKQmMwfR9dWhEORiTWcPGpDRuwQORazeQfeyxzfjoXdW\",\"26\":\"sha384-l0G9EBxQrDdTWOPdCuYSNETCg5O6AtKYekF47wIyiTjGwE04QYa8SLMSFxd8o71d\",\"27\":\"sha384-6OO7XYx9E3QXkIhdIlHQVH8Ue44DVJp6nrwTvFmrbXg9Nli+uRZgKGomg8WeiR5q\",\"28\":\"sha384-kf5ojG+WPoIphDkrlnR3D8popMDAnND5JLIltB7TQ3ye6zb8uOGYlF9AbKB08a9+\",\"29\":\"sha384-tnX0KN/cE5IZdJclcW7QcVbgrkg9mJrThT3/qxojXwCgrikX9kQaSLV7HtGWEp0J\",\"30\":\"sha384-WkkBR/2HPdRYZvC42rOkNplMBjlRLXlN6PHAN44T7C/py4oriEnv33Ze51S6Rd82\",\"31\":\"sha384-UNRa2ZGZ41ii/29/KnlYViDgvnb2hA6l3XuLrgDQLwLazM8VuaURvhQ02mJeICwL\",\"32\":\"sha384-AsuQU0y81OeHG6H/atJuFNibNJ5XjvuskJjC8MqHRThMTaVPAmIOVriCK+2vvchr\",\"33\":\"sha384-LgLJ3EvoZtIH0CDV7fGICHlQSeplOQ91vtIYNNJDdA0ENr/Q8yHfcxRMibTRv2lT\",\"34\":\"sha384-hb/lMcKNyJvXHCaXxXXmGClN2mW6KRgbY+U2PjU1kOm93RG9Om+r8pX3Kpdnnqh4\",\"35\":\"sha384-z+Zv2ZTMH6JCh48NoXvxPueez9w8XAHZlpPDMY1Y7I/pt1eJSgxgxDwf0PK0JIOR\",\"36\":\"sha384-XSYUc6dvyA7SajIlM8GwH5oqi7VeUAjVBcc+vQzlmJa7ttnN2oEJLsCphFHkS5C0\",\"37\":\"sha384-5h0AJiBbQmnmdLoIV6T3+wDDvPlyPQt8iwni+MkRZDnYXO26pMsmc4d/l9zZV3N3\",\"38\":\"sha384-W8sU1K3akH3iR1b2CgC0NjRHd2navx73bLUlbH/kxAxjm80AEJ9+GkNHEwiGvtS8\",\"39\":\"sha384-VzYMHzEL3iG47djGZ8oFdSxk2k88lejaAAXa9j9sP8JFkQ9KO6juZrjnv0Qt+Qhv\",\"40\":\"sha384-T4PpKTsD9/LYiH7irzAx7ZNGJbC/5RGjEpsq+i/Sov/Ok3YDK/L6soiemAuLjJIN\",\"41\":\"sha384-PPuiSgLVtm9dKVr7s5Yf2+MmSsnBNsQizBIyR1tTgVclLmyp8M/+LaANz/QaZl4w\",\"42\":\"sha384-fjyvCz3D+xT+Y1DiQ1DXBeYM/yVCjVhkIMJIK7Hmj2KRnh/JgCmUS9Y3BchRLHKE\",\"43\":\"sha384-9cRxEJRfWCr3NJOWD5RWORkImWu7NhRUbdWmKRL4O30QZt5YHGWqGAHdu3nm6iJN\",\"44\":\"sha384-ojzmhdPobWffn3uS7YlXq8nUjrFSKnIEo5igI9VmsV0hf5sML1vuqo3WNQ8cVTd0\",\"45\":\"sha384-zx8A2SLhiOzCrp0YsZI3L67f601RtYZkG+T8Ypn7cEIxMb/5kfyjlu0AncxNsqRl\",\"46\":\"sha384-orcgeC+mhWxY99KH2JApmjOshTEcJ8ndZzOdUKfttrMZQPDlTULjWPOarYsXRrbC\",\"47\":\"sha384-nJ0DaYc5GWnwssOIfk5YahTBrNISX+r0xmSvJ0bF4pAIQejpnw1KPc2LOAKkK5x3\",\"48\":\"sha384-jzEKNGMf5XBJm1srqq8UZsYGD+XNEsV5YBMeGRWR0udJC4N3pC8R8pttnubZVHtk\",\"49\":\"sha384-WahoBLbM74PGDr/7/fXrnbvs2TwiYihLfkiAnqvHOqFsnZNmEasRBasd43J3F4X7\",\"50\":\"sha384-C4bS4nSOgnJlFMdjHgoFhiVjA+XiFeet6Tqtfgg7zRxg/kBVdibpD/2as6vLDNrA\",\"51\":\"sha384-wRNAFACmiKh7qvcPXQkjdrU2MwDDvwci1sZepkaQDh9RAPWI7RNjPoHAZGV5FYlW\",\"52\":\"sha384-a0b3xhuXCCBxCKwbP5wjNQc9ZCzDHmH+TTVVkdrpNKO4OwbDLA5UyJTJ90l9nGv8\",\"53\":\"sha384-XP0rQY7SqZIC5f/uxurYuYi0a8MNVdxarSV8Vb6nscMsXpLRjrUREf2siCZ6KvBM\",\"54\":\"sha384-VQiGyLj12mnQv4Gbq262pqG3ClZUAWoI4cOiClzNf9fqBd66eAI+Jp+I149+8Qe5\",\"55\":\"sha384-rV6u8eshKm1ESH0MK6LYeqyY5+8C2Nt/qVn8ooBr+GcZSUnFi2c9aXdddVrU/wIp\",\"56\":\"sha384-zaGeszS8oQHGzgMlYL0/wQkNyuEvpbswRtityiuS4y0GzxCjy+d+NIL3CNRSg4cn\",\"57\":\"sha384-hS/5RVkIw66sQdEqjl66X/YjLX3eBqWBSce7sbXdSbLGiEpb8nGbrj9SNx8hRqwy\",\"58\":\"sha384-s763XtDuYj/NBS8L6/uXd3TCBhjsztgBv2SZPbX/QtpaDiv0LgKLxIx2astqjLY5\",\"59\":\"sha384-TzW2aFz9aLA54S/yPUzTlCBuh1+hJ2iPVNdgtZIAP1LzEfKwF8ZvBhzWTpmz8CPr\",\"60\":\"sha384-skCRYdZpBI4T0RUlwriRgXKe5LNXomfke5BxGWyCbQJw5i3xUe3AFrEM/7F63s/0\",\"61\":\"sha384-Q4E0teznn7Aj66mYA9mT7JRn+zOhBcDvsEjxSOoAoV52jtiBsKJh7Tlh0MejtUB/\",\"62\":\"sha384-GZV2VNVAzNi975g0cLQQ/DKnCiLUkNI7Ooc00P42VLsnwOdxRt0e8DaO754mBJ6K\",\"63\":\"sha384-eU8Nu5+9hDL+VCxDT9Kl2XnXb08gLe5740xMLlDmOcE06oBYmO3l9Lwv0EelIyDy\",\"64\":\"sha384-XoiKA1IU2zJPo8CPBM/oQVuTJcij0q5Xr5oQMtlJLP4ArWl/A05zMuLZ03LCVVsy\",\"65\":\"sha384-kXB35rsIAZeMHgTP/xXQrOmSFKNEQDSBKGtmjjlmqhBXUgF+PKa+pxl6qci6xDuj\",\"66\":\"sha384-s7PoTREiuCZ+KKMKA3+C0mTUZc1eud5YmvkraUbSV6GUMSQVytJbp3jz0sro9HnC\"};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n\n\n \t\t// JSONP chunk loading for javascript\n\n \t\tvar installedChunkData = installedChunks[chunkId];\n \t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n \t\t\t// a Promise means \"currently loading\".\n \t\t\tif(installedChunkData) {\n \t\t\t\tpromises.push(installedChunkData[2]);\n \t\t\t} else {\n \t\t\t\t// setup Promise in chunk cache\n \t\t\t\tvar promise = new Promise(function(resolve, reject) {\n \t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n \t\t\t\t});\n \t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n \t\t\t\t// start chunk loading\n \t\t\t\tvar script = document.createElement('script');\n \t\t\t\tvar onScriptComplete;\n\n \t\t\t\tscript.charset = 'utf-8';\n \t\t\t\tscript.timeout = 120;\n \t\t\t\tif (__webpack_require__.nc) {\n \t\t\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n \t\t\t\t}\n \t\t\t\tscript.src = jsonpScriptSrc(chunkId);\n \t\t\t\tif (script.src.indexOf(window.location.origin + '/') !== 0) {\n \t\t\t\t\tscript.crossOrigin = \"anonymous\";\n \t\t\t\t}\n \t\t\t\t// create error before stack unwound to get useful stacktrace later\n \t\t\t\tvar error = new Error();\n \t\t\t\tonScriptComplete = function (event) {\n \t\t\t\t\t// avoid mem leaks in IE.\n \t\t\t\t\tscript.onerror = script.onload = null;\n \t\t\t\t\tclearTimeout(timeout);\n \t\t\t\t\tvar chunk = installedChunks[chunkId];\n \t\t\t\t\tif(chunk !== 0) {\n \t\t\t\t\t\tif(chunk) {\n \t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n \t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n \t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n \t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n \t\t\t\t\t\t\terror.type = errorType;\n \t\t\t\t\t\t\terror.request = realSrc;\n \t\t\t\t\t\t\tchunk[1](error);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tinstalledChunks[chunkId] = undefined;\n \t\t\t\t\t}\n \t\t\t\t};\n \t\t\t\tvar timeout = setTimeout(function(){\n \t\t\t\t\tonScriptComplete({ type: 'timeout', target: script });\n \t\t\t\t}, 120000);\n \t\t\t\tscript.onerror = script.onload = onScriptComplete;\n \t\t\t\tscript.integrity = sriHashes[chunkId];\n \t\t\t\tscript.crossOrigin = \"anonymous\";\n \t\t\t\tdocument.head.appendChild(script);\n \t\t\t}\n \t\t}\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// on error function for async loading\n \t__webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,2]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","export const CLIENT_ID = 'WebMail';\nexport const CLIENT_TYPE = 1;\nexport const CLIENT_SECRET = '';\nexport const APP_VERSION = '1.0.0';\nexport const APP_NAME = 'proton-mail';\nexport const API_URL = 'https://protonmail.blue/api';\nexport const SECURE_URL = 'https://secure.protonmail.blue';\nexport const LOCALES = {};\nexport const API_VERSION = '3';\nexport const DATE_VERSION = 'Mon, 03 Feb 2020 09:08:38 GMT';\nexport const CHANGELOG_PATH = 'assets/changelog.tpl.html';\nexport const VERSION_PATH = 'assets/version.json';\nexport const SENTRY_RELEASE = '';\nexport const SENTRY_DSN = '';","const locales = require.context('../i18n', true, /.json$/, 'lazy');\n\nexport default locales.keys().reduce((acc, key) => {\n    acc[key.slice(2, key.length - 5)] = () => locales(key);\n    return acc;\n}, {});\n","import { Location } from 'history';\n\nexport const getSearchParams = (location: Location): { [key: string]: string } => {\n    const params = new URLSearchParams(location.search);\n\n    const result: { [key: string]: string } = {};\n\n    params.forEach((value, key) => {\n        result[key] = value;\n    });\n\n    return result;\n};\n\nexport const changeSearchParams = (location: Location, newParams: { [key: string]: string | undefined }) => {\n    const params = new URLSearchParams(location.search);\n\n    for (const key in newParams) {\n        if (newParams[key] === undefined) {\n            params.delete(key);\n        } else {\n            params.set(key, newParams[key] as string);\n        }\n    }\n\n    const queryString = params.toString();\n    const urlFragment = (queryString === '' ? '' : '?') + queryString;\n\n    return location.pathname + urlFragment;\n};\n","import { c } from 'ttag';\nimport { MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\n\nexport const PAGE_SIZE = 50;\n\nexport const ELEMENT_TYPES = {\n    MESSAGE: 'message',\n    CONVERSATION: 'conversation'\n};\n\nexport const LABEL_IDS_TO_HUMAN = {\n    [MAILBOX_LABEL_IDS.INBOX]: 'inbox',\n    [MAILBOX_LABEL_IDS.ALL_DRAFTS]: 'all-drafts',\n    [MAILBOX_LABEL_IDS.ALL_SENT]: 'all-sent',\n    [MAILBOX_LABEL_IDS.TRASH]: 'trash',\n    [MAILBOX_LABEL_IDS.SPAM]: 'spam',\n    [MAILBOX_LABEL_IDS.ALL_MAIL]: 'all-mail',\n    [MAILBOX_LABEL_IDS.ARCHIVE]: 'archive',\n    [MAILBOX_LABEL_IDS.SENT]: 'sent',\n    [MAILBOX_LABEL_IDS.DRAFTS]: 'drafts',\n    [MAILBOX_LABEL_IDS.STARRED]: 'starred'\n};\n\nexport const HUMAN_TO_LABEL_IDS = Object.entries(LABEL_IDS_TO_HUMAN).reduce((acc, [key, value]) => {\n    acc[value] = key;\n    return acc;\n}, Object.create(null));\n\nexport const LABEL_IDS_TO_I18N = {\n    [MAILBOX_LABEL_IDS.INBOX]: c('Link').t`Inbox`,\n    [MAILBOX_LABEL_IDS.ALL_DRAFTS]: c('Link').t`Drafts`,\n    [MAILBOX_LABEL_IDS.ALL_SENT]: c('Link').t`Sent`,\n    [MAILBOX_LABEL_IDS.TRASH]: c('Link').t`Trash`,\n    [MAILBOX_LABEL_IDS.SPAM]: c('Link').t`Spam`,\n    [MAILBOX_LABEL_IDS.ALL_MAIL]: c('Link').t`All mail`,\n    [MAILBOX_LABEL_IDS.ARCHIVE]: c('Link').t`Archive`,\n    [MAILBOX_LABEL_IDS.SENT]: c('Link').t`Sent`,\n    [MAILBOX_LABEL_IDS.DRAFTS]: c('Link').t`Drafts`,\n    [MAILBOX_LABEL_IDS.STARRED]: c('Link').t`Starred`\n};\n\nexport const SIGNATURE_START = 1546300800; // January 1, 2019\n\nexport const VERIFICATION_STATUS = {\n    NOT_VERIFIED: -1,\n    NOT_SIGNED: 0,\n    SIGNED_AND_VALID: 1,\n    SIGNED_AND_INVALID: 2,\n    SIGNED_NO_PUB_KEY: 3\n};\n\nexport const MESSAGE_FLAGS = {\n    FLAG_RECEIVED: 1, // whether a message is received\n    FLAG_SENT: 2, // whether a message is sent\n    FLAG_INTERNAL: 4, // whether the message is between ProtonMail recipients\n    FLAG_E2E: 8, // whether the message is end-to-end encrypted\n    FLAG_AUTO: 16, // whether the message is an autoresponse\n    FLAG_REPLIED: 32, // whether the message is replied to\n    FLAG_REPLIEDALL: 64, // whether the message is replied all to\n    FLAG_FORWARDED: 128, // whether the message is forwarded\n    FLAG_AUTOREPLIED: 256, // whether the message has been responded to with an autoresponse\n    FLAG_IMPORTED: 512, // whether the message is an import\n    FLAG_OPENED: 1024, // whether the message has ever been opened by the user\n    FLAG_RECEIPT_SENT: 2048, // whether a read receipt has been sent in response to the message\n    // For drafts only\n    FLAG_RECEIPT_REQUEST: 65536, // whether to request a read receipt for the message\n    FLAG_PUBLIC_KEY: 131072, // whether to attach the public key\n    FLAG_SIGN: 262144 // whether to sign the message\n};\n\nexport enum ENCRYPTED_STATUS {\n    PGP_MIME = 8 // Used for attachment\n}\n\nexport const AES256 = 'aes256';\n\nexport enum MESSAGE_ACTIONS {\n    NEW = -1,\n    REPLY = 0,\n    REPLY_ALL = 1,\n    FORWARD = 2\n}\n","import { LABEL_IDS_TO_HUMAN, LABEL_IDS_TO_I18N } from '../constants';\nimport { MAILBOX_LABEL_IDS, LABEL_EXCLUSIVE } from 'proton-shared/lib/constants';\nimport { Label } from '../models/label';\nimport { toMap } from 'proton-shared/lib/helpers/object';\n\nexport const getHumanLabelID = (labelID: string) => LABEL_IDS_TO_HUMAN[labelID as MAILBOX_LABEL_IDS] || labelID;\n\nexport const getI18nLabelID = (labelID: string) => LABEL_IDS_TO_I18N[labelID as MAILBOX_LABEL_IDS] || labelID;\n\nexport const getLabelName = (labelID: string, labels: Label[]): string => {\n    if (labelID in LABEL_IDS_TO_HUMAN) {\n        return getI18nLabelID(labelID);\n    }\n\n    const labelsMap: { [key: string]: Label } = toMap(labels) as any;\n    if (labelID in labelsMap) {\n        return labelsMap[labelID].Name || labelID;\n    }\n\n    return labelID;\n};\n\nexport const isCustomLabel = (labelID: string) =>\n    !Object.values(MAILBOX_LABEL_IDS).includes(labelID as MAILBOX_LABEL_IDS);\n\nexport const isFolder = ({ Exclusive = 0 }: Label = {}) => Exclusive === LABEL_EXCLUSIVE.FOLDER;\n\nexport const getLabelsWithoutFolders = (labels: Label[] = []) => labels.filter((label) => !isFolder(label));\n\nexport const getFolders = (labels: Label[] = []) => labels.filter((label) => isFolder(label));\n","import { ContactEmailCache, ContactEmail } from '../models/contact';\nimport { normalizeEmail } from './addresses';\n\nexport const findEmailInCache = (cache: ContactEmailCache, email: string): ContactEmail =>\n    [...cache.values()].find(({ Email }) => {\n        return email === normalizeEmail(Email);\n    }) || {};\n\nexport const getContactsOfGroup = (contacts: ContactEmail[] = [], groupID = ''): ContactEmail[] =>\n    contacts.filter((contact) => contact.LabelIDs?.includes(groupID));\n","import { c } from 'ttag';\nimport { REGEX_EMAIL } from 'proton-shared/lib/constants';\n\nimport { Address, Recipient, RecipientGroup, RecipientOrGroup } from '../models/address';\nimport { Key } from '../models/key';\nimport { Message } from '../models/message';\nimport { ContactEmail, ContactGroup } from '../models/contact';\nimport { getContactsOfGroup } from './contacts';\n\nexport const REGEX_RECIPIENT = /(.*)\\s*<([^>]*)>/;\n\nexport const validateAddress = (address = '') => REGEX_EMAIL.test(address);\n\nexport const validateAddresses = (addresses: string[]) => addresses.every(validateAddress);\n\n/**\n * Transform value to be normalized (lowercase)\n */\nexport const normalizeEmail = (email = '') => email.toLowerCase();\n\n/**\n * Remove plus alias part present in the email value\n */\nexport const removeEmailAlias = (email = '') => {\n    return normalizeEmail(email)\n        .replace(/(\\+[^@]*)@/, '@')\n        .replace(/[._-](?=[^@]*@)/g, '');\n};\n\n/**\n * Add plus alias part for an email\n */\nexport const addPlusAlias = (email = '', plus = '') => {\n    const atIndex = email.indexOf('@');\n    const plusIndex = email.indexOf('+');\n\n    if (atIndex === -1 || plusIndex > -1) {\n        return email;\n    }\n\n    const name = email.substring(0, atIndex);\n    const domain = email.substring(atIndex, email.length);\n\n    return `${name}+${plus}${domain}`;\n};\n\n/**\n * Get address from email\n * Remove + alias and transform to lower case\n */\nexport const getByEmail = (addresses: Address[], email = '') => {\n    const cleanEmail = removeEmailAlias(email);\n    return addresses.find(({ Email }) => removeEmailAlias(Email) === cleanEmail);\n};\n\n/**\n * Check if the address is fallback (Can't receive but has keys)\n */\nexport const isFallbackAddress = (address?: Address, keys: Key[] = []) =>\n    !!address && !address.Receive && !!keys.length;\n\nexport const isOwnAddress = (address?: Address, keys: Key[] = []) => !!address && !isFallbackAddress(address, keys);\n\nexport const inputToRecipient = (input: string): Recipient => {\n    const match = REGEX_RECIPIENT.exec(input);\n\n    if (match !== null) {\n        return {\n            Name: match[1],\n            Address: match[2]\n        };\n    }\n    return {\n        Name: input,\n        Address: input\n    };\n};\n\nexport const recipientToInput = (recipient: Recipient = {}): string => {\n    if (recipient.Address && recipient.Name && recipient.Address !== recipient.Name) {\n        return `${recipient.Name} <${recipient.Address}>`;\n    }\n\n    if (recipient.Address === recipient.Name) {\n        return recipient.Address || '';\n    }\n\n    return `${recipient.Name} ${recipient.Address}`;\n};\n\nexport const contactToRecipient = (contact: ContactEmail = {}, groupPath?: string): Recipient => ({\n    Name: contact.Name,\n    Address: contact.Email,\n    Group: groupPath\n});\n\nexport const contactToInput = (contact: ContactEmail = {}): string => recipientToInput(contactToRecipient(contact));\n\nexport const recipientsWithoutGroup = (recipients: Recipient[], groupPath?: string) =>\n    recipients.filter((recipient) => recipient.Group !== groupPath);\n\nexport const getRecipientLabel = ({ Address, Name }: Recipient) => Name || Address || '';\n\nexport const getRecipientGroupLabel = (recipientGroup?: RecipientGroup, contactsInGroup = 0) => {\n    const count = recipientGroup?.recipients.length;\n    const members = c('Info').t`Members`;\n    return `${recipientGroup?.group?.Name} (${count}/${contactsInGroup} ${members})`;\n};\n\nexport const getRecipientOrGroupLabel = ({ recipient, group }: RecipientOrGroup, allContacts: ContactEmail[]) =>\n    recipient\n        ? getRecipientLabel(recipient)\n        : getRecipientGroupLabel(group, getContactsOfGroup(allContacts, group?.group?.ID).length);\n\nexport const recipientsToRecipientOrGroup = (recipients: Recipient[], groups: ContactGroup[]) =>\n    recipients.reduce((acc, value) => {\n        if (value.Group) {\n            const existingGroup = acc.find((recipientsOrGroup) => recipientsOrGroup.group?.group?.Path === value.Group);\n            if (existingGroup) {\n                existingGroup.group?.recipients.push(value);\n            } else {\n                const group = groups.find((group) => group.Path === value.Group);\n                if (group) {\n                    acc.push({ group: { group, recipients: [value] } });\n                } else {\n                    acc.push({ recipient: value });\n                }\n            }\n        } else {\n            acc.push({ recipient: value });\n        }\n        return acc;\n    }, [] as RecipientOrGroup[]);\n\n/**\n * Detect if the email address is a valid plus alias and returns the address model appropriate\n */\nexport const getAddressFromPlusAlias = (addresses: Address[], email = ''): Address | undefined => {\n    const plusIndex = email.indexOf('+');\n    const atIndex = email.indexOf('@');\n\n    if (plusIndex === -1 || atIndex === -1) {\n        return;\n    }\n\n    // Remove the plus alias part to find a match with existing addresses\n    const address = getByEmail(addresses, removeEmailAlias(email));\n    const { Status, Receive, Send } = address || {};\n\n    if (!Status || !Receive || !Send) {\n        // pm.me addresses on free accounts (Send = 0)\n        return;\n    }\n\n    const plusPart = email.substring(plusIndex + 1, atIndex);\n\n    // Returns an address where the Email is build to respect the exising capitalization and add the plus part\n    return { ...address, Email: addPlusAlias(address?.Email, plusPart) };\n};\n\n/**\n * Return list of addresses available in the FROM select\n * Reference: Angular/src/app/composer/factories/composerFromModel.js\n */\nexport const getFromAdresses = (addresses: Address[], originalTo = '') => {\n    const result = addresses\n        .filter(({ Status, Receive }) => Status === 1 && Receive === 1)\n        .sort((a1, a2) => (a1.Order || 0) - (a2.Order || 0));\n\n    const plusAddress = getAddressFromPlusAlias(addresses, originalTo);\n\n    if (plusAddress) {\n        // It's important to unshift the plus address to be found first with find()\n        result.unshift(plusAddress);\n    }\n\n    return result;\n};\n\n/**\n * Find the current sender for a message\n */\nexport const findSender = (addresses: Address[] = [], { AddressID = '' }: Message = {}): Address | undefined => {\n    const enabledAddresses = addresses\n        .filter((address) => address.Status === 1)\n        .sort((a1, a2) => (a1.Order || 0) - (a2.Order || 0));\n\n    if (AddressID) {\n        const originalAddress = enabledAddresses.find((address) => address.ID === AddressID);\n        if (originalAddress) {\n            return originalAddress;\n        }\n    }\n\n    return enabledAddresses[0];\n};\n","import React, { SyntheticEvent, useState, useEffect, useRef } from 'react';\nimport { Icon, classnames } from 'react-components';\nimport { noop } from 'proton-shared/lib/helpers/function';\n\nimport { validateAddress, recipientToInput, inputToRecipient } from '../../../helpers/addresses';\nimport { Recipient } from '../../../models/address';\n\ninterface Props {\n    recipient: Recipient;\n    onChange?: (value: Recipient) => void;\n    onRemove: () => void;\n}\n\nconst AddressesRecipientItem = ({ recipient, onChange = noop, onRemove }: Props) => {\n    const [model, setModel] = useState(recipientToInput(recipient));\n    const editableRef = useRef<HTMLSpanElement>(null);\n\n    const validate = () => {\n        // TODO: Check server\n        const recipient = inputToRecipient(model);\n        return validateAddress(recipient.Address);\n    };\n\n    const [valid, setValid] = useState(validate());\n\n    useEffect(() => {\n        // TODO: Manage recipient names\n        const value = recipientToInput(recipient);\n\n        if (editableRef.current) {\n            editableRef.current.textContent = value;\n        }\n        setModel(value);\n    }, [recipient]);\n\n    const handleChange = (event: SyntheticEvent) => {\n        setModel((event.target as HTMLSpanElement).textContent || '');\n    };\n    const handleBlur = () => {\n        setValid(validate());\n        onChange(inputToRecipient(model));\n    };\n\n    return (\n        <div\n            className={classnames([\n                'composer-addresses-item bordered-container flex flex-items-center flex-nowrap flex-row mw80 stop-propagation',\n                !valid && 'invalid'\n            ])}\n        >\n            {/* TODO: Icon lock */}\n            <span\n                className=\"composer-addresses-item-label mtauto mbauto pl0-5 ellipsis pr0-5\"\n                contentEditable={onChange !== noop}\n                onKeyUp={handleChange}\n                onPaste={handleChange}\n                onBlur={handleBlur}\n                ref={editableRef}\n            />\n            <button\n                type=\"button\"\n                className=\"composer-addresses-item-remove inline-flex pl0-5 pr0-5 no-pointer-events-children h100\"\n                onClick={onRemove}\n            >\n                <Icon name=\"off\" size={12} className=\"mauto\" />\n            </button>\n        </div>\n    );\n};\n\nexport default AddressesRecipientItem;\n","import { useEffect, MutableRefObject } from 'react';\n\nconst useEventListener = (\n    ref: MutableRefObject<Element | null | undefined>,\n    eventName: string,\n    handler: EventListenerOrEventListenerObject\n) => {\n    useEffect(() => {\n        ref.current?.addEventListener(eventName, handler);\n        return () => ref.current?.removeEventListener(eventName, handler);\n    }, [ref.current, handler]);\n};\n\nexport default useEventListener;\n","import React, { useState, useEffect, MutableRefObject, useRef, ReactNode } from 'react';\nimport Awesomplete from 'awesomplete';\n\nimport { contactToInput } from '../../../helpers/addresses';\nimport { ContactEmail, ContactGroup, ContactOrGroup } from '../../../models/contact';\nimport useEventListener from '../../../hooks/useEventListener';\nimport { Recipient } from '../../../models/address';\n\ninterface Props {\n    inputRef: MutableRefObject<HTMLInputElement | undefined>;\n    contacts: ContactEmail[];\n    contactGroups: ContactGroup[];\n    children: ReactNode;\n    onSelect: (value: ContactOrGroup) => void;\n    currentValue: Recipient[];\n}\n\nconst AddressesAutocomplete = ({ inputRef, contacts, contactGroups, onSelect, currentValue, children }: Props) => {\n    const [awesomplete, setAwesomplete] = useState<Awesomplete>();\n    const containerRef = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        const awesompleteInstance = new Awesomplete(\n            inputRef.current as HTMLElement,\n            {\n                container: () => containerRef.current as HTMLElement,\n                minChars: 0,\n                autoFirst: true\n            } as Awesomplete.Options\n        );\n        setAwesomplete(awesompleteInstance);\n\n        return () => awesompleteInstance.destroy();\n    }, []);\n\n    useEffect(() => {\n        if (awesomplete) {\n            const contactList = contacts\n                .filter((contact) => !currentValue.find((recipient) => recipient.Address === contact.Email))\n                .map((contact) => ({\n                    label: contactToInput(contact),\n                    value: `Contact:${contact.ID}`\n                }));\n\n            const groupList = contactGroups\n                .filter((group) => !currentValue.find((recipient) => recipient.Group === group.Path))\n                .map((group) => ({\n                    label: group.Name,\n                    value: `Group:${group.ID}`\n                }));\n\n            awesomplete.list = [...contactList, ...groupList];\n\n            (awesomplete as any).item = (text: string, input: string, itemId: string) =>\n                (Awesomplete.ITEM as any)(text.replace('<', '&lt;'), input, itemId);\n\n            // Prevent Awesomplete to open immediately\n            awesomplete.close();\n        }\n    }, [awesomplete, contacts, contactGroups, currentValue]);\n\n    const handleSelect = (event: any) => {\n        const value = event.text.value;\n        const contactID = /Contact:(.*)/.exec(value)?.[1];\n        const contact = contacts.find((contact) => contact.ID === contactID);\n        const groupID = /Group:(.*)/.exec(value)?.[1];\n        const group = contactGroups.find((group) => group.ID === groupID);\n        if (contact || group) {\n            onSelect({ contact, group });\n        }\n        awesomplete?.close();\n    };\n\n    useEventListener(inputRef, 'awesomplete-selectcomplete', handleSelect);\n\n    useEventListener(inputRef, 'click', () => {\n        if (awesomplete) {\n            awesomplete.open();\n        }\n    });\n\n    return (\n        <div className=\"composer-addresses-autocomplete flex-item-fluid relative\" ref={containerRef}>\n            {children}\n        </div>\n    );\n};\n\nexport default AddressesAutocomplete;\n","import React, { useState, ChangeEvent } from 'react';\nimport { c } from 'ttag';\nimport { Checkbox, FormModal, generateUID, Label } from 'react-components';\n\nimport { ContactEmail } from '../../../models/contact';\nimport { contactToInput } from '../../../helpers/addresses';\nimport { RecipientGroup } from '../../../models/address';\n\ninterface Props {\n    recipientGroup?: RecipientGroup;\n    contacts: ContactEmail[];\n    onClose?: () => void;\n    onSubmit: (recipientGroup: RecipientGroup) => void;\n}\n\nconst AddressesGroupModal = ({ onSubmit, onClose, recipientGroup, contacts, ...rest }: Props) => {\n    const [uid] = useState(generateUID('addresses-group-modal'));\n    const [model, setModel] = useState(recipientGroup as RecipientGroup);\n\n    const isChecked = (contact: ContactEmail) =>\n        !!model?.recipients.find((recipient) => contact.Email === recipient.Address);\n\n    const handleChange = (contact: ContactEmail) => (event: ChangeEvent<HTMLInputElement>) => {\n        const checked = event.target.checked;\n        const recipients = model.recipients || [];\n        let newValue;\n        if (checked) {\n            newValue = [\n                ...recipients,\n                { Name: contact.Name, Address: contact.Email, Group: recipientGroup?.group?.Path }\n            ];\n        } else {\n            newValue = recipients.filter((recipient) => recipient.Address !== contact.Email);\n        }\n        setModel({ group: model?.group, recipients: newValue });\n    };\n\n    const handleSubmit = () => {\n        onSubmit(model);\n        onClose?.();\n    };\n\n    const members = c('Info').t`Members`;\n    const title = `${recipientGroup?.group?.Name} (${contacts.length} ${members})`;\n\n    return (\n        <FormModal submit={c('Action').t`Save`} title={title} onSubmit={handleSubmit} onClose={onClose} {...rest}>\n            <ul className=\"unstyled\">\n                {contacts.map((contact) => {\n                    const id = `${uid}-${contact.ID}`;\n                    return (\n                        <li key={contact.ID} className=\"mb0-5\">\n                            <Checkbox id={id} checked={isChecked(contact)} onChange={handleChange(contact)} />\n                            <Label htmlFor={id} className=\"pt0 pl0-5\">\n                                {contactToInput(contact)}\n                            </Label>\n                        </li>\n                    );\n                })}\n            </ul>\n        </FormModal>\n    );\n};\n\nexport default AddressesGroupModal;\n","import React from 'react';\nimport { Icon, useModals } from 'react-components';\n\nimport { ContactEmail } from '../../../models/contact';\nimport AddressesGroupModal from './AddressesGroupModal';\nimport { getRecipientGroupLabel } from '../../../helpers/addresses';\nimport { RecipientGroup } from '../../../models/address';\nimport { getContactsOfGroup } from '../../../helpers/contacts';\n\ninterface Props {\n    recipientGroup?: RecipientGroup;\n    contacts: ContactEmail[];\n    onChange: (value: RecipientGroup) => void;\n    onRemove: () => void;\n}\n\nconst AddressesGroupItem = ({ recipientGroup, contacts, onChange, onRemove }: Props) => {\n    const { createModal } = useModals();\n\n    const contactsInGroup = getContactsOfGroup(contacts, recipientGroup?.group?.ID);\n    const label = getRecipientGroupLabel(recipientGroup, contactsInGroup.length);\n\n    const handleGroupModal = async () => {\n        const newRecipientGroup = (await new Promise((resolve) => {\n            createModal(\n                <AddressesGroupModal recipientGroup={recipientGroup} contacts={contactsInGroup} onSubmit={resolve} />\n            );\n        })) as RecipientGroup;\n\n        onChange(newRecipientGroup);\n    };\n\n    return (\n        <div className=\"composer-addresses-item bordered-container flex flex-items-center flex-nowrap flex-row mw80 stop-propagation\">\n            <span className=\"inline-flex pl0-5 pr0-5 no-pointer-events-children h100\">\n                <Icon name=\"contacts-groups\" size={12} className=\"mauto\" />\n            </span>\n            <span\n                className=\"composer-addresses-item-label mtauto mbauto pl0-5 ellipsis pr0-5\"\n                onClick={handleGroupModal}\n            >\n                {label}\n            </span>\n            <button\n                type=\"button\"\n                className=\"composer-addresses-item-remove inline-flex pl0-5 pr0-5 no-pointer-events-children h100\"\n                onClick={onRemove}\n            >\n                <Icon name=\"off\" size={12} className=\"mauto\" />\n            </button>\n        </div>\n    );\n};\n\nexport default AddressesGroupItem;\n","import React, { useState, useEffect, ChangeEvent, MutableRefObject, useRef, MouseEvent } from 'react';\nimport { Input } from 'react-components';\nimport { noop } from 'proton-shared/lib/helpers/function';\n\nimport AddressesRecipientItem from './AddressesRecipientItem';\nimport {\n    inputToRecipient,\n    contactToRecipient,\n    recipientsWithoutGroup,\n    recipientsToRecipientOrGroup\n} from '../../../helpers/addresses';\nimport { ContactEmail, ContactGroup, ContactOrGroup } from '../../../models/contact';\nimport AddressesAutocomplete from './AddressesAutocomplete';\nimport AddressesGroupItem from './AddressesGroupItem';\nimport { RecipientGroup, Recipient } from '../../../models/address';\n\ninterface Props {\n    id: string;\n    recipients?: Recipient[];\n    onChange: (value: Recipient[]) => void;\n    addressesFocusRef?: MutableRefObject<() => void>;\n    contacts: ContactEmail[];\n    contactGroups: ContactGroup[];\n    placeholder?: string;\n}\n\nconst AddressesInput = ({\n    id,\n    recipients = [],\n    onChange,\n    addressesFocusRef,\n    contacts,\n    contactGroups,\n    placeholder\n}: Props) => {\n    const [inputModel, setInputModel] = useState('');\n    const inputRef = useRef<HTMLInputElement>();\n\n    const recipientsOrGroups = recipientsToRecipientOrGroup(recipients, contactGroups);\n\n    const confirmInput = () => {\n        onChange([...recipients, inputToRecipient(inputModel)]);\n        setInputModel('');\n    };\n\n    useEffect(() => {\n        if (addressesFocusRef) {\n            addressesFocusRef.current = inputRef.current?.focus.bind(inputRef.current) || noop;\n        }\n    }, []);\n\n    const handleInputChange = (event: ChangeEvent) => {\n        const input = event.target as HTMLInputElement;\n        setInputModel(input.value);\n    };\n\n    const handleBlur = () => {\n        if (inputModel.trim().length > 0) {\n            confirmInput();\n        }\n    };\n\n    const handleClick = (event: MouseEvent) => {\n        if ((event.target as HTMLElement).closest('.stop-propagation')) {\n            event.stopPropagation();\n            return;\n        }\n\n        inputRef.current?.focus();\n    };\n\n    const handleRecipientChange = (toChange: Recipient) => (value: Recipient) => {\n        onChange(recipients.map((recipient) => (recipient === toChange ? value : recipient)));\n    };\n\n    const handleRecipientRemove = (toRemove: Recipient) => () => {\n        onChange(recipients.filter((recipient) => recipient !== toRemove));\n    };\n\n    const handleGroupChange = (toChange?: RecipientGroup) => (value: RecipientGroup) => {\n        onChange([...recipientsWithoutGroup(recipients, toChange?.group?.Path), ...value.recipients]);\n    };\n\n    const handleGroupRemove = (toRemove?: RecipientGroup) => () => {\n        onChange(recipientsWithoutGroup(recipients, toRemove?.group?.Path));\n    };\n\n    const handleInputKey = (event: KeyboardEvent) => {\n        // Enter or Tab\n        if ((event.keyCode === 13 || event.keyCode === 9) && inputModel.length !== 0) {\n            confirmInput();\n            event.preventDefault(); // Prevent tab to switch field\n        }\n        // Backspace\n        if (event.keyCode === 8 && inputModel.length === 0 && recipientsOrGroups.length > 0) {\n            const last = recipientsOrGroups[recipientsOrGroups.length - 1];\n            if (last.recipient) {\n                handleRecipientRemove(last.recipient)();\n            } else {\n                handleGroupRemove(last.group)();\n            }\n        }\n    };\n\n    const handleAutocompleteSelect = ({ contact, group }: ContactOrGroup) => {\n        if (contact) {\n            onChange([...recipients, contactToRecipient(contact)]);\n        }\n        if (group) {\n            const groupContacts = contacts\n                .filter((contact) => contact.LabelIDs?.includes(group.ID || ''))\n                .map((contact) => contactToRecipient(contact, group.Path));\n            onChange([...recipients, ...groupContacts]);\n        }\n        setInputModel('');\n    };\n\n    return (\n        <AddressesAutocomplete\n            inputRef={inputRef}\n            contacts={contacts}\n            contactGroups={contactGroups}\n            onSelect={handleAutocompleteSelect}\n            currentValue={recipients}\n        >\n            <div\n                className=\"composer-addresses-container flex-item-fluid bordered-container pl1-25 pr1-25\"\n                onClick={handleClick}\n            >\n                {recipientsOrGroups.map((recipientsOrGroup, i) =>\n                    recipientsOrGroup.recipient ? (\n                        <AddressesRecipientItem\n                            key={i}\n                            recipient={recipientsOrGroup.recipient}\n                            onChange={handleRecipientChange(recipientsOrGroup.recipient)}\n                            onRemove={handleRecipientRemove(recipientsOrGroup.recipient)}\n                        />\n                    ) : (\n                        <AddressesGroupItem\n                            key={i}\n                            recipientGroup={recipientsOrGroup.group}\n                            contacts={contacts}\n                            onChange={handleGroupChange(recipientsOrGroup.group)}\n                            onRemove={handleGroupRemove(recipientsOrGroup.group)}\n                        />\n                    )\n                )}\n                <div className=\"flex-item-fluid\">\n                    <Input\n                        id={id}\n                        value={inputModel}\n                        onChange={handleInputChange}\n                        onKeyDown={handleInputKey}\n                        onBlur={handleBlur}\n                        ref={inputRef}\n                        placeholder={placeholder}\n                    />\n                </div>\n            </div>\n        </AddressesAutocomplete>\n    );\n};\n\nexport default AddressesInput;\n","import { Sort, Filter, SearchParameters } from '../models/tools';\nimport { getSearchParams, changeSearchParams } from './url';\nimport { Location } from 'history';\nimport { getHumanLabelID } from './labels';\nimport { isNumber } from 'proton-shared/lib/helpers/validators';\n\nexport const setPathInUrl = (location: Location, labelID: string, elementID?: string): Location => {\n    const urlFragment = elementID === undefined ? '' : `/${elementID}`;\n    return {\n        ...location,\n        pathname: `/${getHumanLabelID(labelID)}${urlFragment}`\n    };\n};\n\nconst stringToPage = (string: string | undefined): number => {\n    if (string === undefined) {\n        return 0;\n    }\n    const pageNumber = parseInt(string, 10);\n    if (!isNaN(pageNumber)) {\n        return pageNumber - 1;\n    }\n    return 0;\n};\n\nconst stringToSort = (string: string | undefined): Sort => {\n    switch (string) {\n        case '-size':\n            return { sort: 'Size', desc: true };\n        case 'size':\n            return { sort: 'Size', desc: false };\n        case 'date':\n            return { sort: 'Time', desc: false };\n        default:\n            return { sort: 'Time', desc: true };\n    }\n};\n\nconst stringToInt = (string: string | undefined): number | undefined => {\n    if (string === undefined) {\n        return undefined;\n    }\n    return isNumber(string) ? parseInt(string, 10) : undefined;\n};\n\nconst sortToString = (sort: Sort): string | undefined =>\n    sort.sort === 'Time' ? (sort.desc ? undefined : 'date') : sort.desc ? '-size' : 'size';\n\nconst stringToFilter = (string: string | undefined): Filter => {\n    switch (string) {\n        case 'read':\n            return { Unread: 0 };\n        case 'unread':\n            return { Unread: 1 };\n        default:\n            return {};\n    }\n};\n\nconst filterToString = (filter: Filter): string | undefined =>\n    filter.Unread === undefined ? undefined : filter.Unread === 0 ? 'read' : 'unread';\n\nexport const keywordToString = (keyword: string): string | undefined => {\n    const trimmed = keyword.trim();\n    return trimmed ? trimmed : undefined;\n};\n\nexport const pageFromUrl = (location: Location) => stringToPage(getSearchParams(location).page);\n\nexport const sortFromUrl = (location: Location) => stringToSort(getSearchParams(location).sort);\n\nexport const filterFromUrl = (location: Location) => stringToFilter(getSearchParams(location).filter);\n\nexport const extractSearchParameters = (location: Location): SearchParameters => {\n    const { address, from, to, keyword, begin, end, attachments, wildcard } = getSearchParams(location);\n    return {\n        address,\n        from,\n        to,\n        keyword,\n        begin: stringToInt(begin),\n        end: stringToInt(end),\n        attachments: stringToInt(attachments),\n        wildcard: stringToInt(wildcard)\n    };\n};\n\nexport const setPageInUrl = (location: Location, page: number) =>\n    changeSearchParams(location, { page: page === 0 ? undefined : String(page + 1) });\n\nexport const setSortInUrl = (location: Location, sort: Sort) =>\n    changeSearchParams(location, { sort: sortToString(sort) });\n\nexport const setFilterInUrl = (location: Location, filter: Filter) =>\n    changeSearchParams(location, { filter: filterToString(filter) });\n\nexport const setKeywordInUrl = (location: Location, keyword: string) =>\n    changeSearchParams(location, { keyword: keywordToString(keyword) });\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    classnames,\n    generateUID,\n    usePopperAnchor,\n    DropdownButton,\n    Dropdown,\n    Icon,\n    Href,\n    DateInput,\n    Radio,\n    Toggle,\n    Button,\n    PrimaryButton,\n    Label,\n    Select,\n    useLabels,\n    useAddresses,\n    useContactEmails,\n    useMailSettings,\n    Loader\n} from 'react-components';\nimport { MAILBOX_LABEL_IDS, LABEL_EXCLUSIVE, SHOW_MOVED } from 'proton-shared/lib/constants';\nimport { c } from 'ttag';\nimport { getUnixTime, fromUnixTime, isBefore, isAfter } from 'date-fns';\nimport { isEmail } from 'proton-shared/lib/helpers/validators';\nimport { hasBit } from 'proton-shared/lib/helpers/bitset';\n\nimport { changeSearchParams } from '../../helpers/url';\nimport { getHumanLabelID } from '../../helpers/labels';\nimport AddressesInput from '../composer/addresses/AddressesInput';\n\nimport './AdvancedSearchDropdown.scss';\nimport { extractSearchParameters, keywordToString } from '../../helpers/mailboxUrl';\n\nconst UNDEFINED = undefined;\nconst AUTO_WILDCARD = undefined;\nconst ALL_ADDRESSES = 'all';\nconst NO_WILDCARD = 0;\nconst NO_ATTACHMENTS = 0;\nconst WITH_ATTACHMENTS = 1;\nconst { INBOX, TRASH, SPAM, ARCHIVE, ALL_MAIL, ALL_SENT, SENT, ALL_DRAFTS, DRAFTS } = MAILBOX_LABEL_IDS;\nconst DEFAULT_MODEL = {\n    from: [],\n    to: [],\n    labelID: ALL_MAIL,\n    address: ALL_ADDRESSES,\n    attachments: UNDEFINED,\n    wildcard: AUTO_WILDCARD\n};\n\nconst getRecipients = (value = '') =>\n    value\n        .split(',')\n        .filter(isEmail)\n        .map((Address) => ({ Address }));\nconst formatRecipients = (recipients = []) => recipients.map(({ Address }) => Address).join(',');\n\nconst AdvancedSearchDropdown = ({ labelID, keyword: fullInput = '', location, history }) => {\n    const [uid] = useState(generateUID('advanced-search-dropdown'));\n    const [mailSettings, loadingMailSettings] = useMailSettings();\n    const { anchorRef, isOpen, toggle, close } = usePopperAnchor();\n    const [labels, loadingLabels] = useLabels();\n    const [contactEmails, loadingContactEmails] = useContactEmails();\n    const [addresses, loadingAddresses] = useAddresses();\n    const [model, updateModel] = useState(DEFAULT_MODEL);\n\n    const handleSubmit = (event) => {\n        event.preventDefault(); // necessary to not run a basic submission\n        event.stopPropagation(); // necessary to not submit normal search from header\n\n        const { labelID, address, start, end, wildcard, from, to, attachments } = model;\n\n        history.push(\n            changeSearchParams(\n                {\n                    ...location,\n                    pathname: `/${getHumanLabelID(labelID)}`\n                },\n                {\n                    keyword: keywordToString(fullInput),\n                    address: address === ALL_ADDRESSES ? UNDEFINED : address,\n                    from: from.length ? formatRecipients(from) : UNDEFINED,\n                    to: to.length ? formatRecipients(to) : UNDEFINED,\n                    start: start ? getUnixTime(start) : UNDEFINED,\n                    end: end ? getUnixTime(end) : UNDEFINED,\n                    attachments,\n                    wildcard\n                }\n            )\n        );\n\n        close();\n    };\n\n    const handleReset = (event) => {\n        event.preventDefault();\n        close();\n    };\n\n    useEffect(() => {\n        if (isOpen) {\n            updateModel(() => {\n                if (!fullInput) {\n                    return {\n                        ...DEFAULT_MODEL,\n                        labelID\n                    };\n                }\n\n                const { address, attachments, wildcard, from, to, start, end } = extractSearchParameters(location);\n\n                return {\n                    ...DEFAULT_MODEL,\n                    labelID,\n                    address,\n                    attachments,\n                    wildcard,\n                    from: getRecipients(from),\n                    to: getRecipients(to),\n                    start: start ? fromUnixTime(start) : UNDEFINED,\n                    end: end ? fromUnixTime(end) : UNDEFINED\n                };\n            });\n        }\n    }, [isOpen]);\n\n    if (loadingLabels || loadingAddresses || loadingContactEmails || loadingMailSettings) {\n        return <Loader />;\n    }\n\n    const labelIDOptions = [\n        { value: ALL_MAIL, text: c('Mailbox').t`All` },\n        { value: INBOX, text: c('Mailbox').t`Inbox` },\n        {\n            value: hasBit(mailSettings.ShowMoved, SHOW_MOVED.DRAFTS) ? ALL_DRAFTS : DRAFTS,\n            text: c('Mailbox').t`Drafts`\n        },\n        { value: hasBit(mailSettings.ShowMoved, SHOW_MOVED.SENT) ? ALL_SENT : SENT, text: c('Mailbox').t`Sent` },\n        { value: ARCHIVE, text: c('Mailbox').t`Archive` },\n        { value: SPAM, text: c('Mailbox').t`Spam` },\n        { value: TRASH, text: c('Mailbox').t`Trash` }\n    ]\n        .concat(\n            labels\n                .filter(({ Exclusive }) => Exclusive === LABEL_EXCLUSIVE.FOLDER)\n                .map(({ ID: value, Name: text }) => ({ value, text }))\n        )\n        .concat(\n            labels\n                .filter(({ Exclusive }) => Exclusive === LABEL_EXCLUSIVE.LABEL)\n                .map(({ ID: value, Name: text }) => ({ value, text }))\n        );\n\n    const addressOptions = [{ value: ALL_ADDRESSES, text: c('Option').t`All` }].concat(\n        addresses.map(({ ID: value, Email: text }) => ({ value, text }))\n    );\n\n    return (\n        <>\n            <DropdownButton\n                className=\"searchbox-advanced-search-button\"\n                buttonRef={anchorRef}\n                isOpen={isOpen}\n                onClick={toggle}\n                hasCaret={false}\n            >\n                <Icon\n                    name=\"caret\"\n                    className={classnames(['fill-white searchbox-advanced-search-icon', isOpen && 'rotateX-180'])}\n                />\n            </DropdownButton>\n            <Dropdown\n                id={uid}\n                originalPlacement=\"bottom-right\"\n                size=\"wide\"\n                autoClose={false}\n                isOpen={isOpen}\n                anchorRef={anchorRef}\n                onClose={close}\n            >\n                <form name=\"advanced-search\" className=\"p1\" onSubmit={handleSubmit} onReset={handleReset}>\n                    <div className=\"mb1 flex flex-nowrap onmobile-flex-column\">\n                        <Label className=\"advancedSearch-label\" htmlFor=\"exact-match\">{c('Label')\n                            .t`Exact match`}</Label>\n                        <div className=\"flex-item-fluid flex flex-items-center flex-spacebetween\">\n                            <Toggle\n                                id=\"exact-match\"\n                                checked={model.wildcard === AUTO_WILDCARD}\n                                onChange={({ target }) =>\n                                    updateModel({ ...model, wildcard: target.checked ? AUTO_WILDCARD : NO_WILDCARD })\n                                }\n                            />\n                            <Href url=\"https://protonmail.com/support/knowledge-base/search/\">{c('Link')\n                                .t`Learn more`}</Href>\n                        </div>\n                    </div>\n                    <div className=\"mb1 flex flex-nowrap onmobile-flex-column\">\n                        <Label className=\"advancedSearch-label\" htmlFor=\"labelID\">{c('Label').t`Location`}</Label>\n                        <Select\n                            id=\"labelID\"\n                            value={model.labelID}\n                            options={labelIDOptions}\n                            onChange={({ target }) => updateModel({ ...model, labelID: target.value })}\n                        />\n                    </div>\n                    <div className=\"mb1 flex flex-nowrap onmobile-flex-column\">\n                        <Label className=\"advancedSearch-label\" htmlFor=\"address\">{c('Label').t`Address`}</Label>\n                        <Select\n                            id=\"address\"\n                            value={model.address}\n                            options={addressOptions}\n                            onChange={({ target }) => updateModel({ ...model, address: target.value })}\n                        />\n                    </div>\n                    <div className=\"mb1 flex flex-nowrap onmobile-flex-column\">\n                        <Label title={c('Label').t`Sender`} className=\"advancedSearch-label\" htmlFor=\"from\">{c('Label')\n                            .t`From`}</Label>\n                        <div className=\"flex-item-fluid\">\n                            <AddressesInput\n                                contacts={contactEmails}\n                                contactGroups={[]}\n                                id=\"from\"\n                                recipients={model.from}\n                                onChange={(from) => updateModel({ ...model, from })}\n                                placeholder={c('Placeholder').t`Name or email address`}\n                            />\n                        </div>\n                    </div>\n                    <div className=\"mb1 flex flex-nowrap onmobile-flex-column\">\n                        <Label title={c('Label').t`Recipient`} className=\"advancedSearch-label\" htmlFor=\"to\">{c('Label')\n                            .t`To`}</Label>\n                        <div className=\"flex-item-fluid\">\n                            <AddressesInput\n                                contacts={contactEmails}\n                                contactGroups={[]}\n                                id=\"to\"\n                                recipients={model.to}\n                                onChange={(to) => updateModel({ ...model, to })}\n                                placeholder={c('Placeholder').t`Name or email address`}\n                            />\n                        </div>\n                    </div>\n                    <div className=\"mb1 flex flex-nowrap onmobile-flex-column\">\n                        <Label className=\"advancedSearch-label\" htmlFor=\"start-date\">{c('Label').t`Between`}</Label>\n                        <div className=\"flex-item-fluid\">\n                            <DateInput\n                                placeholder={c('Placeholder').t`Start date`}\n                                id=\"start-date\"\n                                value={model.start}\n                                onChange={(start) =>\n                                    (!model.end || isBefore(start, model.end)) && updateModel({ ...model, start })\n                                }\n                            />\n                        </div>\n                    </div>\n                    <div className=\"mb1 flex flex-nowrap onmobile-flex-column\">\n                        <Label className=\"advancedSearch-label\" htmlFor=\"end-date\">{c('Label').t`And`}</Label>\n                        <div className=\"flex-item-fluid\">\n                            <DateInput\n                                placeholder={c('Placeholder').t`End date`}\n                                id=\"end-date\"\n                                value={model.end}\n                                onChange={(end) =>\n                                    (!model.start || isAfter(end, model.start)) && updateModel({ ...model, end })\n                                }\n                            />\n                        </div>\n                    </div>\n                    <div className=\"mb2 flex flex-nowrap onmobile-flex-column\">\n                        <Label className=\"advancedSearch-label\">{c('Label').t`Attachments`}</Label>\n                        <div className=\"flex-item-fluid\">\n                            <Radio\n                                onChange={() => updateModel({ ...model, attachments: UNDEFINED })}\n                                checked={model.attachments === UNDEFINED}\n                                className=\"mr1\"\n                            >{c('Attachment radio advanced search').t`All`}</Radio>\n                            <Radio\n                                onChange={() => updateModel({ ...model, attachments: WITH_ATTACHMENTS })}\n                                checked={model.attachments === WITH_ATTACHMENTS}\n                                className=\"mr1\"\n                            >{c('Attachment radio advanced search').t`Yes`}</Radio>\n                            <Radio\n                                onChange={() => updateModel({ ...model, attachments: NO_ATTACHMENTS })}\n                                checked={model.attachments === NO_ATTACHMENTS}\n                            >{c('Attachment radio advanced search').t`No`}</Radio>\n                        </div>\n                    </div>\n                    <div className=\"flex flex-spacebetween\">\n                        <Button disabled={!Object.keys(model).length} type=\"reset\">{c('Action').t`Clear`}</Button>\n                        <PrimaryButton type=\"submit\">{c('Action').t`Search`}</PrimaryButton>\n                    </div>\n                </form>\n            </Dropdown>\n        </>\n    );\n};\n\nAdvancedSearchDropdown.propTypes = {\n    labelID: PropTypes.string.isRequired,\n    keyword: PropTypes.string,\n    history: PropTypes.object.isRequired,\n    location: PropTypes.object.isRequired\n};\n\nexport default AdvancedSearchDropdown;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    MainLogo,\n    SupportDropdown,\n    Hamburger,\n    TopNavbar,\n    TopNavbarLink,\n    UpgradeButton,\n    Searchbox,\n    useUser\n} from 'react-components';\nimport { c } from 'ttag';\n\nimport AdvancedSearchDropdown from './AdvancedSearchDropdown';\nimport { extractSearchParameters } from '../../helpers/mailboxUrl';\n\nconst PrivateHeader = ({ labelID, location, history, expanded, onToggleExpand, onSearch }) => {\n    const [{ hasPaidMail }] = useUser();\n    const { keyword = '' } = extractSearchParameters(location);\n    const [value, updateValue] = useState(keyword);\n\n    return (\n        <header className=\"header flex flex-nowrap reset4print\">\n            <MainLogo url=\"/inbox\" className=\"nomobile\" />\n            <Hamburger expanded={expanded} onToggle={onToggleExpand} />\n            <Searchbox\n                delay={0}\n                placeholder={c('Placeholder').t`Search messages`}\n                onSearch={onSearch}\n                onChange={updateValue}\n                value={value}\n                advanced={\n                    <AdvancedSearchDropdown labelID={labelID} keyword={value} location={location} history={history} />\n                }\n            />\n            <TopNavbar>\n                {hasPaidMail ? null : <UpgradeButton external={true} />}\n                <TopNavbarLink to=\"/inbox\" icon=\"mailbox\" text={c('Title').t`Mailbox`} aria-current={true} />\n                <TopNavbarLink external={true} to=\"/settings\" icon=\"settings-master\" text={c('Title').t`Settings`} />\n                <SupportDropdown />\n            </TopNavbar>\n        </header>\n    );\n};\n\nPrivateHeader.propTypes = {\n    labelID: PropTypes.string.isRequired,\n    location: PropTypes.object.isRequired,\n    history: PropTypes.object.isRequired,\n    onSearch: PropTypes.func.isRequired,\n    expanded: PropTypes.bool,\n    onToggleExpand: PropTypes.func.isRequired\n};\n\nexport default PrivateHeader;\n","import React from 'react';\nimport { LabelCount } from '../../models/label';\nimport { Icon, classnames } from 'react-components';\n\nimport './RefreshRotation.scss';\n\ninterface Props {\n    labelID: string;\n    counterMap: { [labelID: string]: LabelCount | undefined };\n    currentLabelID: string;\n    refreshLabelID?: string;\n}\n\nconst LocationAside = ({ labelID, counterMap, currentLabelID, refreshLabelID }: Props) => {\n    const unread = counterMap[labelID]?.Unread;\n\n    return (\n        <>\n            {labelID === currentLabelID && (\n                <Icon\n                    className={classnames(['mr0-5', labelID === refreshLabelID && 'location-refresh-rotate'])}\n                    fill=\"light\"\n                    name=\"reload\"\n                />\n            )}\n            {unread ? <span className=\"navigation__counterItem flex-item-noshrink rounded\">{unread}</span> : null}\n        </>\n    );\n};\n\nexport default LocationAside;\n","import { Location } from 'history';\nimport { VIEW_LAYOUT, VIEW_MODE, MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\n\nimport { extractSearchParameters } from './mailboxUrl';\n\ninterface MailSettings {\n    ViewLayout?: number;\n    ViewMode?: number;\n}\n\nexport const isColumnMode = ({ ViewLayout = VIEW_LAYOUT.COLUMN }: MailSettings = {}) =>\n    ViewLayout === VIEW_LAYOUT.COLUMN;\n\nexport const isConversationMode = (\n    labelID = '',\n    { ViewMode = VIEW_MODE.GROUP }: MailSettings = {},\n    location: Location\n) => {\n    const alwaysMessageLabels = [\n        MAILBOX_LABEL_IDS.DRAFTS,\n        MAILBOX_LABEL_IDS.ALL_DRAFTS,\n        MAILBOX_LABEL_IDS.SENT,\n        MAILBOX_LABEL_IDS.ALL_SENT\n    ];\n    const searchParams = extractSearchParameters(location);\n\n    return (\n        !alwaysMessageLabels.includes(labelID as MAILBOX_LABEL_IDS) &&\n        ViewMode === VIEW_MODE.GROUP &&\n        !Object.entries(searchParams).some(([, value]) => typeof value !== 'undefined')\n    );\n};\n","import { MIME_TYPES } from 'proton-shared/lib/constants';\nimport { hasBit, setBit } from 'proton-shared/lib/helpers/bitset';\nimport { identity } from 'proton-shared/lib/helpers/function';\n\nimport { MESSAGE_FLAGS, SIGNATURE_START } from '../../constants';\nimport { Message, MessageExtended } from '../../models/message';\nimport { toText } from '../parserHtml';\n\nconst {\n    FLAG_RECEIVED,\n    FLAG_SENT,\n    FLAG_RECEIPT_REQUEST,\n    FLAG_IMPORTED,\n    FLAG_REPLIED,\n    FLAG_REPLIEDALL,\n    FLAG_FORWARDED,\n    FLAG_INTERNAL,\n    FLAG_AUTO,\n    FLAG_E2E,\n    FLAG_SIGN,\n    FLAG_PUBLIC_KEY\n} = MESSAGE_FLAGS;\n\nconst { PLAINTEXT, MIME } = MIME_TYPES;\n\n/**\n * Check if a message has a mime type\n */\nconst hasMimeType = (type: MIME_TYPES) => ({ MIMEType }: Message = {}) => MIMEType === type;\n\nexport const isMIME = hasMimeType(MIME);\nexport const isPlainText = hasMimeType(PLAINTEXT);\nexport const isHTML = hasMimeType(MIME_TYPES.DEFAULT);\n\n/**\n * Check if a message has a flag in the flags bitmap\n */\nexport const hasFlag = (flag: number) => ({ Flags = 0 }: Message = {}) => hasBit(Flags, flag);\n\nexport const isRequestReadReceipt = hasFlag(FLAG_RECEIPT_REQUEST);\nexport const isImported = hasFlag(FLAG_IMPORTED);\nexport const isInternal = hasFlag(FLAG_INTERNAL);\nexport const isExternal = (message: Message) => !isInternal(message);\nexport const isAuto = hasFlag(FLAG_AUTO);\nexport const isReceived = hasFlag(FLAG_RECEIVED);\nexport const isSent = hasFlag(FLAG_SENT);\nexport const isReplied = hasFlag(FLAG_REPLIED);\nexport const isRepliedAll = hasFlag(FLAG_REPLIEDALL);\nexport const isForwarded = hasFlag(FLAG_FORWARDED);\nexport const isSentAndReceived = hasFlag(FLAG_SENT | FLAG_RECEIVED);\nexport const isDraft = (message: Message = {}) => !isSent(message) && !isReceived(message);\nexport const isE2E = hasFlag(FLAG_E2E);\nexport const isSentEncrypted = hasFlag(FLAG_E2E | FLAG_SENT);\nexport const isInternalEncrypted = hasFlag(FLAG_E2E | FLAG_INTERNAL);\nexport const isSign = hasFlag(FLAG_SIGN);\nexport const isAttachPublicKey = hasFlag(FLAG_PUBLIC_KEY);\nexport const isExternalEncrypted = (message: Message) => isE2E(message) && !isInternal(message);\nexport const isPGPEncrypted = (message: Message = {}) => isExternal(message) && isReceived(message) && isE2E(message);\nexport const inSigningPeriod = ({ Time = 0 }: Message) => Time >= SIGNATURE_START;\n\nexport const isPGPInline = (message: Message) => isPGPEncrypted(message) && !isMIME(message);\n\nexport const isEO = (message: Message = {}) => !!message.Password;\n\nexport const addReceived = (Flags = 0) => setBit(Flags, MESSAGE_FLAGS.FLAG_RECEIVED);\n\nexport const getSender = ({ Sender = {} }: Message = {}) => Sender;\nexport const getRecipients = ({ ToList = [], CCList = [], BCCList = [] }: Message = {}) => [\n    ...ToList,\n    ...CCList,\n    ...BCCList\n];\n// export const getRecipientsLabels = (message: Message = {}) => getRecipients(message).map(getRecipientLabel);\nexport const getRecipientsAddresses = (message: Message = {}) =>\n    getRecipients(message)\n        .map(({ Address }) => Address || '')\n        .filter(identity);\n\n/**\n * Extract and normalize recipients\n * @param {Object} message\n * @return {Array<String>}\n */\n// export const normalizeRecipients = (message = {}) => {\n//     return getRecipients(message).map(({ Address }) => normalizeEmail(Address));\n// };\n\n/**\n * Decrypt simple message body with password\n * @param {String} message.Body\n * @param {String} password\n * @return {String} body\n */\n// export async function decrypt({ Body = '' } = {}, password) {\n//     const message = await getMessage(Body);\n//     const { data: body } = await decryptMessage({\n//         message,\n//         passwords: [password]\n//     });\n//     return body;\n// }\n\n/**\n * Get the label ids to add for a message that has moved.\n *\n * Types definition\n *   - 1: a draft\n * if you move it to trash and back to inbox, it will go to draft instead\n *   - 2: is sent\n *  if you move it to trash and back, it will go back to sent\n *   - 3: is inbox and sent (a message sent to yourself)\n * if you move it from trash to inbox, it will acquire both the inbox and sent labels ( 0 and 2 ).\n *\n * @param {Message} message\n * @param {String} labelID label id to which it is moved\n * @returns {Array}\n */\n// export const getLabelIDsMoved = (message, labelID) => {\n//     const toInbox = labelID === MAILBOX_IDENTIFIERS.inbox;\n\n//     if (toInbox) {\n//         // This message is a draft, if you move it to trash and back to inbox, it will go to draft instead\n//         if (message.isDraft()) {\n//             return [MAILBOX_IDENTIFIERS.allDrafts, MAILBOX_IDENTIFIERS.drafts];\n//         }\n\n//         // If you move it from trash to inbox, it will acquire both the inbox and sent labels ( 0 and 2 ).\n//         if (message.isSentAndReceived()) {\n//             return [MAILBOX_IDENTIFIERS.inbox, MAILBOX_IDENTIFIERS.allSent, MAILBOX_IDENTIFIERS.sent];\n//         }\n\n//         // This message is sent, if you move it to trash and back, it will go back to sent\n//         if (message.isSent()) {\n//             return [MAILBOX_IDENTIFIERS.allSent, MAILBOX_IDENTIFIERS.sent];\n//         }\n//     }\n\n//     return [labelID];\n// };\n\n/**\n * Get date from message\n */\nexport const getDate = ({ Time = 0 }: Message = {}) => new Date(Time * 1000);\n\n/**\n * Check if these all messages shared the same sender (by email address)\n * @param {Array<message>} messages\n * @return {Boolean}\n */\n// export const sameSender = (messages = []) => {\n//     if (!messages.length) {\n//         return false;\n//     }\n\n//     const [{ Sender: firstSender } = {}] = messages;\n//     const firstAddress = normalizeEmail(firstSender.Address);\n\n//     return (\n//         messages.length ===\n//         messages.filter(({ Sender = {} }) => {\n//             return normalizeEmail(Sender.Address) === firstAddress;\n//         }).length\n//     );\n// };\n\nexport const getParsedHeaders = (message: Message, parameter: string) => {\n    const { ParsedHeaders = {} } = message;\n\n    if (parameter) {\n        return ParsedHeaders[parameter];\n    }\n\n    return ParsedHeaders;\n};\n\nexport const getListUnsubscribe = (message: Message) => {\n    return getParsedHeaders(message, 'List-Unsubscribe') || '';\n};\n\nexport const getListUnsubscribePost = (message: Message) => {\n    return getParsedHeaders(message, 'List-Unsubscribe-Post') || '';\n};\n\nexport const getAttachments = (message: Message = {}) => message.Attachments || [];\nexport const hasAttachments = (message: Message = {}) => getAttachments(message).length > 0;\nexport const attachmentsSize = (message: Message = {}) =>\n    getAttachments(message).reduce((acc, { Size = 0 } = {}) => acc + +Size, 0);\n\nexport const isSentAutoReply = ({ Flags, ParsedHeaders = {} }: Message) => {\n    if (!isSent({ Flags })) {\n        return false;\n    }\n\n    if (isAuto({ Flags })) {\n        return true;\n    }\n\n    const autoReplyHeaders = ['X-Autoreply', 'X-Autorespond', 'X-Autoreply-From', 'X-Mail-Autoreply'];\n    const autoReplyHeaderValues = [\n        ['Auto-Submitted', 'auto-replied'],\n        ['Precedence', 'auto_reply'],\n        ['X-Precedence', 'auto_reply'],\n        ['Delivered-To', 'autoresponder']\n    ];\n    // These headers are not always available. But we should check them to support\n    // outlook / mail autoresponses.\n    return (\n        autoReplyHeaders.some((h) => h in ParsedHeaders) ||\n        autoReplyHeaderValues.some(([k, v]) => k in ParsedHeaders && ParsedHeaders[k].toLowerCase() === v)\n    );\n};\n\n/**\n * We NEVER upconvert, if the user wants html: plaintext is actually fine as well\n */\nexport const getHTML = (message: MessageExtended) => (isHTML(message.data) ? message.content : undefined);\n\nexport const exportPlainText = (message: MessageExtended) => {\n    /*\n     * The replace removes any characters that are produced by the copying process (like zero width characters)\n     * See: http://www.berklix.org/help/majordomo/#quoted we want to avoid sending unnecessary quoted printable encodings\n     */\n    if (message.data?.MIMEType !== MIME_TYPES.DEFAULT) {\n        return message.content?.replace(/\\u200B/g, '');\n    }\n    return toText(message.content || '', true, true).replace(/\\u200B/g, '');\n};\n\n/**\n * Generates/Gets the plaintext body from the message. If the message is not composed in plaintext, it will downconvert\n * the html body to plaintext if downconvert is set. If downconvert is disabled it will return false.\n */\nexport const getPlainText = (message: MessageExtended, downconvert: boolean) => {\n    if (!isPlainText(message.data) && !downconvert) {\n        return undefined;\n    }\n    return exportPlainText(message);\n};\n","import TurndownService from 'turndown';\n\nimport { identity } from 'proton-shared/lib/helpers/function';\n\n/**\n * Transform HTML to text\n * Append lines before the content if it starts with a Signature\n */\nexport const toText = (html: string, appendLines = true, convertImages = false) => {\n    const turndownService = new TurndownService({\n        bulletListMarker: '-',\n        // strongDelimiter: '',\n        // emDelimiter: '',\n        hr: ''\n    });\n\n    const protonSignature = {\n        filter: (node: HTMLElement) => node.classList.contains('protonmail_signature_block'),\n        replacement(content: string) {\n            return `\\u200B${content.trim()}\\u200B`;\n        }\n    };\n\n    const replaceBreakLine = {\n        filter: 'br',\n        replacement(content: string, node: HTMLElement) {\n            // It matches the new line of a signature\n            if (node.parentElement?.nodeName === 'DIV' && node.parentElement.childElementCount === 1) {\n                return !node.parentElement.textContent ? '\\n\\n' : '\\n';\n            }\n\n            // ex <li>monique<br></li>\n            if (node.parentElement?.lastElementChild?.nodeName === 'BR' && node.parentElement.textContent) {\n                return node.parentElement.nodeName !== 'LI' ? '\\n' : '';\n            }\n\n            return '\\n\\n';\n        }\n    } as TurndownService.Rule;\n\n    const replaceImg = {\n        filter: 'img',\n        replacement(content: string, element: HTMLElement) {\n            if (!convertImages) {\n                return '';\n            }\n\n            const image = element as HTMLImageElement;\n\n            // needed for the automatic conversion done by pgp/inline, otherwise the conversion happens and people forget that they have selected this for some contacts\n            const attribute = image.alt || image.src;\n            return attribute ? `[${attribute}]` : '';\n        }\n    } as TurndownService.Rule;\n\n    const replaceAnchor = {\n        filter: 'a',\n        replacement(content: string, node: HTMLElement) {\n            return node.textContent;\n        }\n    } as TurndownService.Rule;\n\n    const replaceDiv = {\n        filter: ['div'],\n        replacement(content: string) {\n            return content;\n        }\n    } as TurndownService.Rule;\n\n    turndownService.use([\n        () => turndownService.addRule('replaceAnchor', replaceAnchor),\n        () => turndownService.addRule('replaceDiv', replaceDiv),\n        () => turndownService.addRule('replaceImg', replaceImg),\n        () => turndownService.addRule('replaceBreakLine', replaceBreakLine),\n        () => turndownService.addRule('protonSignature', protonSignature)\n    ]);\n\n    /**\n     * Override turndown to NOT escape any HTML. For example MONO_TLS_PROVIDER -> MONO\\_TLS\\_PROVIDER.\n     * Just return the value that is passed in.\n     * Fixes https://github.com/ProtonMail/Angular/issues/6556\n     */\n    turndownService.escape = identity;\n\n    const output = turndownService.turndown(html);\n\n    // It's the signature, we need some space\n    if (output.startsWith('\\u200B') && appendLines) {\n        return `\\n\\n\\n${output}\\n\\n`;\n    }\n\n    return output;\n};\n","import { Location } from 'history';\nimport { formatRelative, format } from 'date-fns';\nimport { toMap } from 'proton-shared/lib/helpers/object';\n\nimport { ELEMENT_TYPES } from '../constants';\nimport { Element } from '../models/element';\nimport { Sort } from '../models/tools';\nimport { Message } from '../models/message';\nimport { isConversationMode } from './mailSettings';\nimport { LabelCount, Label } from '../models/label';\nimport { MailSettings } from '../models/utils';\nimport { MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\nimport { hasAttachments as messageHasAttachments } from './message/messages';\nimport { hasAttachments as conversationHasAttachments } from './conversation';\n\nexport interface TypeParams {\n    labelID?: string;\n    mailSettings?: any;\n    location: Location;\n}\n\nexport const getCurrentType = ({ labelID, mailSettings, location }: TypeParams) =>\n    isConversationMode(labelID, mailSettings, location) ? ELEMENT_TYPES.CONVERSATION : ELEMENT_TYPES.MESSAGE;\n\nexport const isMessage = (element: Element = {}): boolean => typeof (element as Message).ConversationID === 'string';\nexport const isConversation = (element: Element = {}): boolean => !isMessage(element);\n\nexport const getDate = ({ Time = 0, ContextTime = 0 }: Element = {}) => new Date((ContextTime || Time) * 1000);\n\n/**\n * Get readable time to display from message / conversation\n * @param {Integer} element.Time\n * @return {String} Jan 17, 2016\n */\nexport const getReadableTime = ({ Time = 0, ContextTime = 0 }: Element = {}) => {\n    const date = new Date((ContextTime || Time) * 1000);\n    const now = new Date();\n    return formatRelative(date, now);\n};\n\nexport const getReadableFullTime = ({ Time = 0, ContextTime = 0 }: Element = {}) => {\n    const date = new Date((ContextTime || Time) * 1000);\n    return format(date, 'Ppp');\n};\n\nexport const isUnread = (element: Element) => {\n    if ('NumUnread' in element) {\n        return element.NumUnread !== 0;\n    }\n    if ('Unread' in element) {\n        return element.Unread !== 0;\n    }\n    return false;\n};\n\nexport const getLabel = ({ Labels = [] }: Element, labelID: string) => Labels.find(({ ID = '' }) => ID === labelID);\n\nexport const getLabelIds = ({ Labels, LabelIDs }: Element) =>\n    Labels ? Labels.map(({ ID }) => ID || '') : LabelIDs || [];\n\nexport const hasLabel = (element: Element, labelID?: string) => {\n    return getLabelIds(element).some((ID) => labelID === ID);\n};\n\nexport const getTime = (element: Element, labelID: string) =>\n    element.ContextTime || element.Time || (getLabel(element, labelID) || {}).ContextTime || 0;\n\nexport const getSize = ({ Size = 0 }: Element) => Size;\n\nexport const sort = (elements: Element[], sort: Sort, labelID: string) => {\n    const getValue = {\n        Time: getTime,\n        Size: getSize\n    }[sort.sort];\n    const compare = (a: Element, b: Element) => {\n        const valueA = getValue(a, labelID);\n        const valueB = getValue(b, labelID);\n        if (valueA === valueB) {\n            return (a.Order || 0) - (b.Order || 0);\n        }\n        return sort.desc ? valueB - valueA : valueA - valueB;\n    };\n    return [...elements].sort((e1, e2) => compare(e1, e2));\n};\n\nexport const getCounterMap = (\n    labels: Label[],\n    conversationCounters: LabelCount[],\n    messageCounters: LabelCount[],\n    mailSettings: MailSettings,\n    location: Location\n) => {\n    const labelIDs = [...Object.values(MAILBOX_LABEL_IDS), ...labels.map((label) => label.ID || '')];\n    const conversationCountersMap = toMap(conversationCounters, 'LabelID') as { [labelID: string]: LabelCount };\n    const messageCountersMap = toMap(messageCounters, 'LabelID') as { [labelID: string]: LabelCount };\n\n    return labelIDs.reduce((acc, labelID) => {\n        const conversationMode = isConversationMode(labelID, mailSettings, location);\n        const countersMap = conversationMode ? conversationCountersMap : messageCountersMap;\n        acc[labelID] = countersMap[labelID];\n        return acc;\n    }, {} as { [labelID: string]: LabelCount | undefined });\n};\n\nexport const hasAttachments = (element: Element) =>\n    isMessage(element) ? messageHasAttachments(element) : conversationHasAttachments(element);\n\nexport const getLabelIDs = (element: Element) =>\n    isMessage(element) ? element.LabelIDs : element.Labels?.map(({ ID }) => ID || '');\n","import React, { useMemo, useState } from 'react';\nimport { c } from 'ttag';\nimport { Location } from 'history';\nimport {\n    NavMenu,\n    MainLogo,\n    Loader,\n    useMailSettings,\n    useLabels,\n    useConversationCounts,\n    useMessageCounts,\n    PrimaryButton,\n    useEventManager\n} from 'react-components';\nimport { SHOW_MOVED, LABEL_EXCLUSIVE, MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\nimport { redirectTo } from 'proton-shared/lib/helpers/browser';\n\nimport LocationAside from './LocationAside';\nimport { LABEL_IDS_TO_HUMAN, MESSAGE_ACTIONS } from '../../constants';\nimport { Label } from '../../models/label';\nimport { OnCompose } from '../../containers/ComposerContainer';\nimport { getCounterMap } from '../../helpers/elements';\n\ninterface Props {\n    labelID: string;\n    expanded?: boolean;\n    location: Location;\n    onCompose: OnCompose;\n}\n\nconst PrivateSidebar = ({ labelID: currentLabelID, expanded = false, location, onCompose }: Props) => {\n    const [refresh, setRefresh] = useState<string>();\n    const [conversationCounts, loadingConversationCounts] = useConversationCounts();\n    const [messageCounts, loadingMessageCounts] = useMessageCounts();\n    const [mailSettings, loadingMailSettings] = useMailSettings();\n    const [labels, loadingLabels]: [Label[], boolean] = useLabels();\n    const { call } = useEventManager();\n    const { ShowMoved } = mailSettings || {};\n\n    const counterMap = useMemo(() => {\n        if (!mailSettings || !labels || !conversationCounts || !messageCounts) {\n            return {};\n        }\n\n        return getCounterMap(labels, conversationCounts, messageCounts, mailSettings, location);\n    }, [mailSettings, labels, conversationCounts, messageCounts]);\n\n    if (loadingMailSettings || loadingLabels || loadingConversationCounts || loadingMessageCounts) {\n        return <Loader />;\n    }\n\n    const getItemParams = (labelID: MAILBOX_LABEL_IDS | string) => {\n        const humanID = LABEL_IDS_TO_HUMAN[labelID as MAILBOX_LABEL_IDS]\n            ? LABEL_IDS_TO_HUMAN[labelID as MAILBOX_LABEL_IDS]\n            : labelID;\n        const link = `/${humanID}`;\n        return {\n            type: 'link',\n            link,\n            ariaCurrent: labelID === currentLabelID ? 'page' : undefined,\n            aside: (\n                <LocationAside\n                    labelID={labelID}\n                    counterMap={counterMap}\n                    currentLabelID={currentLabelID}\n                    refreshLabelID={refresh}\n                />\n            ),\n            onClick: async () => {\n                if (link === location.pathname) {\n                    setRefresh(labelID);\n                    await call();\n                    setRefresh(undefined);\n                }\n            }\n        };\n    };\n\n    const list = [\n        {\n            icon: 'inbox',\n            text: c('Link').t`Inbox`,\n            ...getItemParams(MAILBOX_LABEL_IDS.INBOX)\n        },\n        {\n            icon: 'drafts',\n            text: c('Link').t`Drafts`,\n            ...getItemParams(ShowMoved & SHOW_MOVED.DRAFTS ? MAILBOX_LABEL_IDS.ALL_DRAFTS : MAILBOX_LABEL_IDS.DRAFTS)\n        },\n        {\n            icon: 'sent',\n            text: c('Link').t`Sent`,\n            ...getItemParams(ShowMoved & SHOW_MOVED.SENT ? MAILBOX_LABEL_IDS.ALL_SENT : MAILBOX_LABEL_IDS.SENT)\n        },\n        {\n            icon: 'star',\n            text: c('Link').t`Starred`,\n            ...getItemParams(MAILBOX_LABEL_IDS.STARRED)\n        },\n        {\n            icon: 'archive',\n            text: c('Link').t`Archive`,\n            ...getItemParams(MAILBOX_LABEL_IDS.STARRED)\n        },\n        {\n            icon: 'spam',\n            text: c('Link').t`Spam`,\n            ...getItemParams(MAILBOX_LABEL_IDS.SPAM)\n        },\n        {\n            icon: 'trash',\n            text: c('Link').t`Trash`,\n            ...getItemParams(MAILBOX_LABEL_IDS.TRASH)\n        },\n        {\n            icon: 'all-emails',\n            text: c('Link').t`All mail`,\n            ...getItemParams(MAILBOX_LABEL_IDS.ALL_MAIL)\n        },\n        {\n            icon: 'folder-label',\n            text: c('Link').t`Folders/labels`,\n            className: 'alignleft',\n            type: 'button',\n            onClick() {\n                redirectTo('/settings/labels');\n            }\n        },\n        ...labels.map(({ ID = '', Name, Exclusive, Color }) => ({\n            icon: Exclusive === LABEL_EXCLUSIVE.LABEL ? 'label' : 'folder',\n            text: Name,\n            color: Color,\n            ...getItemParams(ID)\n        }))\n    ];\n\n    const handleCompose = () => {\n        onCompose({ action: MESSAGE_ACTIONS.NEW });\n    };\n\n    return (\n        <div className=\"sidebar flex flex-column noprint\" data-expanded={expanded}>\n            <div className=\"nodesktop notablet\">\n                <MainLogo url=\"/inbox\" />\n            </div>\n            <div className=\"pl1 pr1 mb1\">\n                <PrimaryButton className=\"w100 bold\" onClick={handleCompose}>{c('Action').t`Compose`}</PrimaryButton>\n            </div>\n            <nav className=\"navigation mw100 flex-item-fluid scroll-if-needed\">\n                <NavMenu list={list} className=\"mt0\" />\n            </nav>\n        </div>\n    );\n};\n\nexport default PrivateSidebar;\n","import React, { useRef, useState, useEffect, ReactNode } from 'react';\nimport { c } from 'ttag';\nimport { AppsSidebar, StorageSpaceStatus, MainAreaContext, Href } from 'react-components';\nimport { MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\n\nimport PrivateHeader from '../header/PrivateHeader';\nimport PrivateSidebar from '../sidebar/PrivateSidebar';\nimport { Location, History } from 'history';\nimport { OnCompose } from '../../containers/ComposerContainer';\nimport { getHumanLabelID } from '../../helpers/labels';\nimport { setKeywordInUrl } from '../../helpers/mailboxUrl';\n\ninterface Props {\n    children: ReactNode;\n    location: Location;\n    history: History;\n    labelID: string;\n    onCompose: OnCompose;\n}\n\nconst PrivateLayout = ({ children, location, history, labelID, onCompose }: Props) => {\n    const mainAreaRef = useRef<HTMLDivElement>(null);\n    const [expanded, setExpand] = useState(false);\n\n    const handleSearch = (keyword = '', labelID = MAILBOX_LABEL_IDS.ALL_MAIL) => {\n        history.push(setKeywordInUrl({ ...location, pathname: `/${getHumanLabelID(labelID)}` }, keyword));\n    };\n\n    useEffect(() => {\n        setExpand(false);\n    }, [location.pathname]);\n\n    return (\n        <div className=\"flex flex-nowrap no-scroll\">\n            <AppsSidebar\n                items={[\n                    <StorageSpaceStatus\n                        key=\"storage\"\n                        upgradeButton={\n                            <Href\n                                url=\"/settings/subscription\"\n                                target=\"_self\"\n                                className=\"pm-button pm-button--primary pm-button--small\"\n                            >\n                                {c('Action').t`Upgrade`}\n                            </Href>\n                        }\n                    ></StorageSpaceStatus>\n                ]}\n            />\n            <div className=\"content flex-item-fluid reset4print\">\n                <PrivateHeader\n                    labelID={labelID}\n                    location={location}\n                    history={history}\n                    expanded={expanded}\n                    onToggleExpand={() => setExpand(!expanded)}\n                    onSearch={handleSearch}\n                />\n                <div className=\"flex flex-nowrap\">\n                    <PrivateSidebar labelID={labelID} expanded={expanded} location={location} onCompose={onCompose} />\n                    <div className=\"main flex-item-fluid scroll-smooth-touch\" ref={mainAreaRef}>\n                        <div className=\"flex-item-fluid\">\n                            <MainAreaContext.Provider value={mainAreaRef}>{children}</MainAreaContext.Provider>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default PrivateLayout;\n","import { Page } from '../models/tools';\n\nexport const pageCount = (page: Page) => Math.ceil(page.total / page.size);\n\nexport const expectedPageLength = (page: Page) => {\n    if (page.total === 0) {\n        return 0;\n    }\n    if (page.total % page.size === 0) {\n        return page.size;\n    }\n    if (pageCount(page) - 1 === page.page) {\n        return page.total % page.size;\n    }\n    return page.size;\n};\n","import { useState, useEffect, useMemo } from 'react';\nimport { useApi, useEventManager } from 'react-components';\nimport { queryConversations, getConversation } from 'proton-shared/lib/api/conversations';\nimport { queryMessageMetadata, getMessage } from 'proton-shared/lib/api/messages';\nimport { EVENT_ACTIONS } from 'proton-shared/lib/constants';\nimport { toMap } from 'proton-shared/lib/helpers/object';\n\nimport { Conversation } from '../models/conversation';\nimport { sort as sortElements, hasLabel } from '../helpers/elements';\nimport { Element } from '../models/element';\nimport { Page, Filter, Sort, SearchParameters } from '../models/tools';\nimport { expectedPageLength } from '../helpers/paging';\nimport { ElementEvent, Event, ElementCountEvent, ConversationEvent, MessageEvent } from '../models/event';\n\ninterface Options {\n    conversationMode: boolean;\n    labelID: string;\n    page: Page;\n    sort: Sort;\n    filter: Filter;\n    search: SearchParameters;\n}\n\ninterface CacheParams {\n    labelID: string;\n    sort: Sort;\n    filter: Filter;\n    address?: string;\n    from?: string;\n    to?: string;\n    keyword?: string;\n    begin?: number;\n    end?: number;\n    attachments?: number;\n    wildcard?: number;\n}\n\ninterface Cache {\n    params: CacheParams;\n    page: Page;\n    pages: number[];\n    elements: { [ID: string]: Element };\n}\n\nconst emptyCache = (page: Page, params: CacheParams): Cache => ({ params, page, elements: {}, pages: [] });\n\nexport const useElements = ({\n    conversationMode,\n    labelID,\n    search,\n    page,\n    sort,\n    filter\n}: Options): [string, Conversation[], boolean, number] => {\n    const api = useApi();\n    const { subscribe } = useEventManager();\n    const [loading, setLoading] = useState(false);\n    const [localCache, setLocalCache] = useState<Cache>(\n        emptyCache(page, {\n            labelID,\n            sort,\n            filter,\n            ...search\n        })\n    );\n\n    // Compute the conversations list from the cache\n    const elements = useMemo(() => {\n        // Getting all params from the cache and not from scoped params\n        // To prevent any desynchronization between cache and the output of the memo\n        const {\n            params: { labelID, sort },\n            page\n        } = localCache;\n        const minPage = localCache.pages.reduce((acc, page) => (page < acc ? page : acc), localCache.pages[0]);\n        const startIndex = (page.page - minPage) * page.size;\n        const endIndex = startIndex + page.size;\n        const elementsArray = Object.values(localCache.elements);\n        const filtered = elementsArray.filter((element) => hasLabel(element, labelID));\n        const sorted = sortElements(filtered, sort, labelID);\n        return sorted.slice(startIndex, endIndex);\n    }, [localCache]);\n\n    const total = useMemo(() => localCache.page.total, [localCache.page.total]);\n\n    const paramsChanged = () =>\n        labelID !== localCache.params.labelID ||\n        sort !== localCache.params.sort ||\n        filter !== localCache.params.filter ||\n        search.address !== localCache.params.address ||\n        search.from !== localCache.params.from ||\n        search.to !== localCache.params.to ||\n        search.keyword !== localCache.params.keyword ||\n        search.begin !== localCache.params.begin ||\n        search.end !== localCache.params.end ||\n        search.attachments !== localCache.params.attachments ||\n        search.wildcard !== localCache.params.wildcard;\n\n    const pageCached = () => localCache.pages.includes(page.page);\n\n    const pageIsConsecutive = () =>\n        localCache.pages.some((p) => p === page.page || p === page.page - 1 || p === page.page + 1);\n\n    const isExpectedLength = () => elements.length === expectedPageLength({ ...page, total });\n\n    const shouldResetCache = () => !loading && (paramsChanged() || !pageIsConsecutive());\n\n    const shouldSendRequest = () => !loading && (shouldResetCache() || !pageCached() || !isExpectedLength());\n\n    const queryElement = async (elementID: string): Promise<Element> => {\n        const query = conversationMode ? getConversation : getMessage;\n        const result = await api(query(elementID));\n        return conversationMode ? result.Conversation : result.Message;\n    };\n\n    const queryElements = async (): Promise<{ Total: number; Elements: Element[] }> => {\n        const query = conversationMode ? queryConversations : queryMessageMetadata;\n        const result = await api(\n            query({\n                Page: page.page,\n                PageSize: page.size,\n                Limit: page.limit,\n                LabelID: labelID,\n                Sort: sort.sort,\n                Desc: sort.desc ? 1 : 0,\n                Begin: search.begin,\n                End: search.end,\n                // BeginID,\n                // EndID,\n                Keyword: search.keyword,\n                To: search.to,\n                From: search.from,\n                // Subject,\n                Attachments: search.attachments,\n                Unread: filter.Unread,\n                AddressID: search.address,\n                // ID,\n                AutoWildcard: search.wildcard\n            } as any)\n        );\n        return {\n            Total: result.Total,\n            Elements: conversationMode ? result.Conversations : result.Messages\n        };\n    };\n\n    const resetCache = () =>\n        setLocalCache(\n            emptyCache(page, {\n                labelID,\n                sort,\n                filter,\n                ...search\n            })\n        );\n\n    const load = async () => {\n        setLoading(true);\n        try {\n            const { Total, Elements } = await queryElements();\n            setLocalCache(\n                (localCache: Cache): Cache => {\n                    return {\n                        ...localCache,\n                        page: {\n                            ...localCache.page,\n                            page: page.page,\n                            total: Total\n                        },\n                        pages: [...localCache.pages, page.page],\n                        elements: {\n                            ...localCache.elements,\n                            ...(toMap(Elements, 'ID') as { [ID: string]: Element })\n                        }\n                    };\n                }\n            );\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    // Main effect watching all inputs and responsible to trigger actions on the cache\n    useEffect(() => {\n        shouldResetCache() && resetCache();\n        shouldSendRequest() && load();\n    }, [\n        labelID,\n        page,\n        sort,\n        filter,\n        search.address,\n        search.from,\n        search.to,\n        search.keyword,\n        search.begin,\n        search.end,\n        search.attachments,\n        search.wildcard\n    ]);\n\n    // Listen to event manager and update de cache\n    useEffect(\n        () => {\n            return subscribe(\n                async ({ Conversations = [], Messages = [], ConversationCounts = [], MessageCounts = [] }: Event) => {\n                    const Elements: ElementEvent[] = conversationMode ? Conversations : Messages;\n                    const Counts: ElementCountEvent[] = conversationMode ? ConversationCounts : MessageCounts;\n\n                    const count = Counts.find((count) => count.LabelID === labelID);\n\n                    const { toDelete, toUpdate, toCreate } = Elements.reduce(\n                        (acc, event) => {\n                            const { ID, Action } = event;\n                            const Element = conversationMode\n                                ? (event as ConversationEvent).Conversation\n                                : (event as MessageEvent).Message;\n                            switch (Action) {\n                                case EVENT_ACTIONS.DELETE:\n                                    acc.toDelete.push(ID);\n                                    break;\n                                case EVENT_ACTIONS.UPDATE_DRAFT:\n                                case EVENT_ACTIONS.UPDATE_FLAGS:\n                                    acc.toUpdate.push({ ID, ...Element });\n                                    break;\n                                case EVENT_ACTIONS.CREATE:\n                                    acc.toCreate.push(Element);\n                                    break;\n                            }\n                            return acc;\n                        },\n                        { toDelete: [] as string[], toUpdate: [] as Element[], toCreate: [] as Element[] }\n                    );\n\n                    const toUpdateCompleted = await Promise.all(\n                        toUpdate.map(async (element) => {\n                            const elementID = element.ID || '';\n                            const existingElement = localCache.elements[elementID];\n\n                            return existingElement ? { ...existingElement, ...element } : queryElement(elementID);\n                        })\n                    );\n\n                    setLocalCache((localCache) => {\n                        const newReplacements: { [ID: string]: Element } = {};\n\n                        [...toCreate, ...toUpdateCompleted].forEach((element) => {\n                            newReplacements[element.ID || ''] = element;\n                        });\n                        const newElements = {\n                            ...localCache.elements,\n                            ...newReplacements\n                        };\n                        toDelete.forEach((elementID) => {\n                            delete newElements[elementID];\n                        });\n\n                        return {\n                            ...localCache,\n                            elements: newElements,\n                            page: {\n                                ...localCache.page,\n                                total: count ? count.Total : localCache.page.total\n                            }\n                        };\n                    });\n                }\n            );\n        },\n        // Having the cache in dependency will subscribe / unsubscribe to the eventmanager many times\n        // But it's mandatory for the function to have the reference of the current localCache\n        [localCache]\n    );\n\n    return [localCache.params.labelID, elements, loading, localCache.page.total];\n};\n","import React from 'react';\n\nconst ToolbarSeparator = () => <span className=\"toolbar-separator\" />;\n\nexport default ToolbarSeparator;\n","import React, { ReactNode } from 'react';\nimport { classnames } from 'react-components';\n\ninterface Props {\n    disabled?: boolean;\n    loading?: boolean;\n    children: ReactNode;\n    className?: string;\n    title?: string;\n    [rest: string]: any;\n}\n\nconst ToolbarButton = ({ children, loading = false, disabled = false, className = '', ...rest }: Props) => {\n    return (\n        <button\n            type=\"button\"\n            disabled={disabled || loading}\n            className={classnames(['toolbar-button', className])}\n            {...rest}\n        >\n            {children}\n        </button>\n    );\n};\n\nexport default ToolbarButton;\n","import React from 'react';\nimport { Location } from 'history';\nimport { MESSAGE_BUTTONS } from 'proton-shared/lib/constants';\nimport { Icon, useApi, useEventManager, useLoading } from 'react-components';\nimport { markMessageAsRead, markMessageAsUnread } from 'proton-shared/lib/api/messages';\nimport { markConversationsAsRead, markConversationsAsUnread } from 'proton-shared/lib/api/conversations';\nimport { c } from 'ttag';\n\nimport ToolbarButton from './ToolbarButton';\nimport { getCurrentType } from '../../helpers/elements';\nimport { ELEMENT_TYPES } from '../../constants';\n\nconst UNREAD = 0;\nconst READ = 1;\n\ninterface Props {\n    mailSettings: any;\n    selectedIDs: string[];\n    labelID: string;\n    location: Location;\n}\n\nconst ReadUnreadButtons = ({ mailSettings, labelID, selectedIDs = [], location }: Props) => {\n    const api = useApi();\n    const { call } = useEventManager();\n    const { MessageButtons = MESSAGE_BUTTONS.READ_UNREAD } = mailSettings;\n    const type = getCurrentType({ mailSettings, labelID, location });\n    const [loading, withLoading] = useLoading();\n\n    const markAs = async (status = UNREAD) => {\n        const isUnread = status === UNREAD;\n        const action =\n            type === ELEMENT_TYPES.CONVERSATION\n                ? isUnread\n                    ? markConversationsAsUnread\n                    : markConversationsAsRead\n                : isUnread\n                ? markMessageAsUnread\n                : markMessageAsRead;\n        await api(action(selectedIDs));\n        await call();\n    };\n\n    const buttons = [\n        <ToolbarButton\n            key=\"read\"\n            title={c('Action').t`Mark as read`}\n            loading={loading}\n            disabled={!selectedIDs.length}\n            onClick={() => withLoading(markAs(READ))}\n        >\n            <Icon className=\"toolbar-icon mauto\" name=\"read\" />\n        </ToolbarButton>,\n        <ToolbarButton\n            key=\"unread\"\n            title={c('Action').t`Mark as unread`}\n            loading={loading}\n            disabled={!selectedIDs.length}\n            onClick={() => withLoading(markAs(UNREAD))}\n        >\n            <Icon className=\"toolbar-icon mauto\" name=\"unread\" />\n        </ToolbarButton>\n    ];\n\n    if (MessageButtons === MESSAGE_BUTTONS.UNREAD_READ) {\n        buttons.reverse();\n    }\n\n    // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/20356\n    return <>{buttons}</>;\n};\n\nexport default ReadUnreadButtons;\n","import React, { ReactNode, useState } from 'react';\nimport { classnames, usePopperAnchor, DropdownButton, Dropdown, generateUID } from 'react-components';\n\ninterface LockableDropdownProps {\n    onClose: () => void;\n    onLock: (lock: boolean) => void;\n}\n\ninterface Props {\n    autoClose?: boolean;\n    title?: string;\n    className?: string;\n    content?: ReactNode;\n    children: (props: LockableDropdownProps) => ReactNode;\n    disabled?: boolean;\n    size?: string;\n    [rest: string]: any;\n}\n\nconst ToolbarDropdown = ({\n    title,\n    content,\n    className,\n    children,\n    autoClose = true,\n    disabled = false,\n    size = 'normal',\n    ...rest\n}: Props) => {\n    const [uid] = useState(generateUID('dropdown'));\n    const [lock, setLock] = useState(false);\n\n    const { anchorRef, isOpen, toggle, close } = usePopperAnchor();\n\n    return (\n        <>\n            <DropdownButton\n                title={title}\n                buttonRef={anchorRef}\n                isOpen={isOpen}\n                onClick={toggle}\n                hasCaret={true}\n                disabled={disabled}\n                caretClassName=\"toolbar-icon\"\n                className={classnames(['flex-item-noshrink toolbar-button toolbar-button--dropdown', className])}\n                {...rest}\n            >\n                {content}\n            </DropdownButton>\n            <Dropdown\n                id={uid}\n                size={size}\n                autoClose={autoClose}\n                autoCloseOutside={!lock}\n                isOpen={isOpen}\n                anchorRef={anchorRef}\n                onClose={close}\n                className=\"toolbar-dropdown\"\n            >\n                {children({ onClose: close, onLock: setLock })}\n            </Dropdown>\n        </>\n    );\n};\n\nexport default ToolbarDropdown;\n","import React from 'react';\nimport { Icon, DropdownMenu, DropdownMenuButton, useApi, useEventManager, useLoading } from 'react-components';\nimport { VIEW_LAYOUT } from 'proton-shared/lib/constants';\nimport { updateViewLayout } from 'proton-shared/lib/api/mailSettings';\nimport { c } from 'ttag';\n\nimport ToolbarDropdown from './ToolbarDropdown';\n\ninterface Props {\n    mailSettings: any;\n}\n\nconst LayoutDropdown = ({ mailSettings = {} }: Props) => {\n    const { ViewLayout = VIEW_LAYOUT.COLUMN } = mailSettings;\n\n    const api = useApi();\n    const { call } = useEventManager();\n    const [loading, withLoading] = useLoading();\n    const currentLayoutIcon = ViewLayout === VIEW_LAYOUT.COLUMN ? 'layout-columns' : 'layout-rows';\n\n    const updateLayout = async (viewLayout: number) => {\n        await api(updateViewLayout(viewLayout));\n        await call();\n    };\n\n    return (\n        <ToolbarDropdown\n            title={c('Action').t`Change layout`}\n            content={<Icon className=\"toolbar-icon\" name={currentLayoutIcon} />}\n        >\n            {() => (\n                <DropdownMenu>\n                    <DropdownMenuButton\n                        disabled={ViewLayout === VIEW_LAYOUT.COLUMN}\n                        loading={loading}\n                        className=\"alignleft\"\n                        onClick={() => withLoading(updateLayout(VIEW_LAYOUT.COLUMN))}\n                    >\n                        <Icon name=\"layout-columns\" className=\"mr0-5\" />\n                        {c('Action').t`Column layout`}\n                    </DropdownMenuButton>\n                    <DropdownMenuButton\n                        disabled={ViewLayout === VIEW_LAYOUT.ROW}\n                        loading={loading}\n                        className=\"alignleft\"\n                        onClick={() => withLoading(updateLayout(VIEW_LAYOUT.ROW))}\n                    >\n                        <Icon name=\"layout-rows\" className=\"mr0-5\" />\n                        {c('Action').t`Row layout`}\n                    </DropdownMenuButton>\n                </DropdownMenu>\n            )}\n        </ToolbarDropdown>\n    );\n};\n\nexport default LayoutDropdown;\n","import React from 'react';\nimport { Location } from 'history';\nimport { Icon, useLoading, useNotifications, useEventManager, useApi } from 'react-components';\nimport { MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\nimport { labelMessages } from 'proton-shared/lib/api/messages';\nimport { labelConversations } from 'proton-shared/lib/api/conversations';\nimport { c } from 'ttag';\n\nimport ToolbarButton from './ToolbarButton';\nimport { getCurrentType } from '../../helpers/elements';\nimport { ELEMENT_TYPES } from '../../constants';\n\nconst { TRASH, SPAM, DRAFTS, ARCHIVE, SENT, INBOX, ALL_DRAFTS, ALL_SENT } = MAILBOX_LABEL_IDS;\n\ninterface Props {\n    labelID: string;\n    mailSettings: any;\n    selectedIDs: string[];\n    location: Location;\n}\n\nconst MoveButtons = ({ labelID = '', mailSettings = {}, selectedIDs = [], location }: Props) => {\n    const { createNotification } = useNotifications();\n    const { call } = useEventManager();\n    const api = useApi();\n    const [loading, withLoading] = useLoading();\n    const type = getCurrentType({ mailSettings, labelID, location });\n\n    const handleMove = async (LabelID: string) => {\n        const action = type === ELEMENT_TYPES.CONVERSATION ? labelConversations : labelMessages;\n        await api(action({ LabelID, IDs: selectedIDs }));\n        await call();\n        createNotification({ text: c('Success').t`Elements moved` });\n    };\n\n    const displayTrash = ![DRAFTS, ALL_DRAFTS, TRASH].includes(labelID as MAILBOX_LABEL_IDS);\n    const displayInbox = ![SENT, ALL_SENT, DRAFTS, ALL_DRAFTS].includes(labelID as MAILBOX_LABEL_IDS);\n    const displayArchive = ![DRAFTS, ALL_DRAFTS, ARCHIVE].includes(labelID as MAILBOX_LABEL_IDS);\n    const displaySpam = ![SENT, ALL_SENT, SPAM].includes(labelID as MAILBOX_LABEL_IDS);\n\n    return (\n        <>\n            {displayTrash ? (\n                <ToolbarButton\n                    loading={loading}\n                    title={c('Action').t`Move to trash`}\n                    onClick={() => withLoading(handleMove(TRASH))}\n                >\n                    <Icon className=\"toolbar-icon mauto\" name=\"trash\" />\n                </ToolbarButton>\n            ) : null}\n            {displayInbox ? (\n                <ToolbarButton\n                    loading={loading}\n                    title={c('Action').t`Move to inbox`}\n                    onClick={() => withLoading(handleMove(INBOX))}\n                >\n                    <Icon className=\"toolbar-icon mauto\" name=\"inbox\" />\n                </ToolbarButton>\n            ) : null}\n            {displayArchive ? (\n                <ToolbarButton\n                    loading={loading}\n                    title={c('Action').t`Move to archive`}\n                    onClick={() => withLoading(handleMove(ARCHIVE))}\n                >\n                    <Icon className=\"toolbar-icon mauto\" name=\"archive\" />\n                </ToolbarButton>\n            ) : null}\n            {displaySpam ? (\n                <ToolbarButton\n                    loading={loading}\n                    title={c('Action').t`Move to spam`}\n                    onClick={() => withLoading(handleMove(SPAM))}\n                >\n                    <Icon className=\"toolbar-icon mauto\" name=\"spam\" />\n                </ToolbarButton>\n            ) : null}\n        </>\n    );\n};\n\nexport default MoveButtons;\n","import React from 'react';\nimport { Location } from 'history';\nimport {\n    Icon,\n    useLoading,\n    useNotifications,\n    useEventManager,\n    useApi,\n    ConfirmModal,\n    ErrorButton,\n    useModals,\n    Alert\n} from 'react-components';\nimport { MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\nimport { deleteMessages, emptyLabel } from 'proton-shared/lib/api/messages';\nimport { deleteConversations } from 'proton-shared/lib/api/conversations';\nimport { c, msgid } from 'ttag';\n\nimport ToolbarButton from './ToolbarButton';\nimport { getCurrentType } from '../../helpers/elements';\nimport { ELEMENT_TYPES } from '../../constants';\n\nconst { TRASH, SPAM, DRAFTS, ALL_DRAFTS, ALL_MAIL, INBOX, SENT, ALL_SENT, ARCHIVE } = MAILBOX_LABEL_IDS;\n\ninterface Props {\n    labelID: string;\n    mailSettings: any;\n    selectedIDs: string[];\n    location: Location;\n}\n\nconst DeleteButton = ({ labelID = '', mailSettings = {}, selectedIDs = [], location }: Props) => {\n    const { createNotification } = useNotifications();\n    const { createModal } = useModals();\n    const { call } = useEventManager();\n    const api = useApi();\n    const [loading, withLoading] = useLoading();\n    const displayDelete = [TRASH, SPAM, DRAFTS, ALL_DRAFTS, SENT, ALL_SENT].includes(labelID as MAILBOX_LABEL_IDS);\n    const displayEmpty = ![INBOX, SENT, ALL_SENT, ARCHIVE, ALL_MAIL].includes(labelID as MAILBOX_LABEL_IDS);\n    const type = getCurrentType({ mailSettings, labelID, location });\n\n    const handleDelete = async () => {\n        await new Promise((resolve, reject) => {\n            createModal(\n                <ConfirmModal\n                    title={c('Title').ngettext(msgid`Delete email`, `Delete emails`, selectedIDs.length)}\n                    confirm={(<ErrorButton type=\"submit\" icon={null}>{c('Action').t`Delete`}</ErrorButton>) as any}\n                    onConfirm={resolve}\n                    onClose={reject}\n                >\n                    <Alert type=\"warning\">\n                        {c('Info').ngettext(\n                            msgid`This action will permanently delete the selected email. Are you sure you want to delete this email?`,\n                            `This action will permanently delete the selected emails. Are you sure you want to delete these emails?`,\n                            selectedIDs.length\n                        )}\n                    </Alert>\n                </ConfirmModal>\n            );\n        });\n        const action = type === ELEMENT_TYPES.CONVERSATION ? deleteConversations : deleteMessages;\n        await api(action(selectedIDs));\n        await call();\n        createNotification({ text: c('Success').t`Elements deleted` });\n    };\n\n    const handleEmpty = async () => {\n        await new Promise((resolve, reject) => {\n            createModal(\n                <ConfirmModal\n                    title={c('Title').t`Empty folder`}\n                    confirm={(<ErrorButton type=\"submit\" icon={null}>{c('Action').t`Empty`}</ErrorButton>) as any}\n                    onConfirm={resolve}\n                    onClose={reject}\n                >\n                    <Alert type=\"warning\">{c('Info')\n                        .t`This action will permanently delete your emails. Are you sure you want to empty this folder?`}</Alert>\n                </ConfirmModal>\n            );\n        });\n        c;\n        await api(emptyLabel({ LabelID: labelID, AddressID: undefined }));\n        await call();\n        createNotification({ text: c('Success').t`Folder cleared` });\n    };\n\n    return (\n        <>\n            {displayDelete ? (\n                <ToolbarButton\n                    loading={loading}\n                    title={c('Action').t`Delete`}\n                    onClick={() => withLoading(handleDelete())}\n                >\n                    <Icon className=\"toolbar-icon mauto\" name=\"delete\" />\n                </ToolbarButton>\n            ) : null}\n            {displayEmpty ? (\n                <ToolbarButton\n                    loading={loading}\n                    title={c('Action').t`Empty folder`}\n                    onClick={() => withLoading(handleEmpty())}\n                >\n                    <Icon className=\"toolbar-icon mauto\" name=\"empty-folder\" />\n                </ToolbarButton>\n            ) : null}\n        </>\n    );\n};\n\nexport default DeleteButton;\n","import React from 'react';\nimport { DropdownMenu, DropdownMenuButton, Icon } from 'react-components';\nimport { c } from 'ttag';\n\nimport ToolbarDropdown from './ToolbarDropdown';\nimport { Sort } from '../../models/tools';\n\nconst ASC = 0;\nconst DESC = 1;\nconst TIME = 'Time';\nconst SIZE = 'Size';\n\nconst ICONS = {\n    [SIZE]: {\n        [ASC]: 'sort-small-large',\n        [DESC]: 'sort-large-small'\n    },\n    [TIME]: {\n        [ASC]: 'sort-old-new',\n        [DESC]: 'sort-new-old'\n    }\n};\n\ninterface Props {\n    loading?: boolean;\n    sort: Sort;\n    onSort: (sort: Sort) => void;\n}\n\nconst SortDropdown = ({ loading, sort: { sort, desc }, onSort }: Props) => {\n    return (\n        <ToolbarDropdown content={<Icon className=\"toolbar-icon\" name={ICONS[sort][desc ? DESC : ASC]} />}>\n            {() => (\n                <DropdownMenu>\n                    <DropdownMenuButton\n                        disabled={sort === SIZE && !desc}\n                        className=\"alignleft\"\n                        loading={loading}\n                        onClick={() => onSort({ sort: SIZE, desc: false })}\n                    >\n                        <Icon name={ICONS[SIZE][ASC]} className=\"mr0-5\" />\n                        {c('Action').t`Size: small to large`}\n                    </DropdownMenuButton>\n                    <DropdownMenuButton\n                        disabled={sort === SIZE && desc}\n                        className=\"alignleft\"\n                        loading={loading}\n                        onClick={() => onSort({ sort: SIZE, desc: true })}\n                    >\n                        <Icon name={ICONS[SIZE][DESC]} className=\"mr0-5\" />\n                        {c('Action').t`Size: large to small`}\n                    </DropdownMenuButton>\n                    <DropdownMenuButton\n                        disabled={sort === TIME && desc}\n                        className=\"alignleft\"\n                        loading={loading}\n                        onClick={() => onSort({ sort: TIME, desc: true })}\n                    >\n                        <Icon name={ICONS[TIME][DESC]} className=\"mr0-5\" />\n                        {c('Action').t`Date: new to old`}\n                    </DropdownMenuButton>\n                    <DropdownMenuButton\n                        disabled={sort === TIME && !desc}\n                        className=\"alignleft\"\n                        loading={loading}\n                        onClick={() => onSort({ sort: TIME, desc: false })}\n                    >\n                        <Icon name={ICONS[TIME][ASC]} className=\"mr0-5\" />\n                        {c('Action').t`Date: old to new`}\n                    </DropdownMenuButton>\n                </DropdownMenu>\n            )}\n        </ToolbarDropdown>\n    );\n};\n\nexport default SortDropdown;\n","import React from 'react';\nimport { DropdownMenu, DropdownMenuButton, Icon } from 'react-components';\nimport { c } from 'ttag';\n\nimport ToolbarDropdown from './ToolbarDropdown';\nimport { Filter } from '../../models/tools';\n\ninterface Props {\n    loading?: boolean;\n    filter: Filter;\n    onFilter: (filter: Filter) => void;\n}\n\nconst FilterDropdown = ({ loading, filter = {}, onFilter }: Props) => {\n    return (\n        <ToolbarDropdown content={<Icon className=\"toolbar-icon\" name=\"bullet-points\" />}>\n            {() => (\n                <DropdownMenu>\n                    <DropdownMenuButton\n                        disabled={Object.values(filter).length === 0}\n                        className=\"alignleft\"\n                        loading={loading}\n                        onClick={() => onFilter({})}\n                    >\n                        <Icon name=\"bullet-points\" className=\"mr0-5\" />\n                        {c('Action').t`Show all`}\n                    </DropdownMenuButton>\n                    <DropdownMenuButton\n                        disabled={filter.Unread === 1}\n                        className=\"alignleft\"\n                        loading={loading}\n                        onClick={() => onFilter({ Unread: 1 })}\n                    >\n                        <Icon name=\"unread\" className=\"mr0-5\" />\n                        {c('Action').t`Show unread`}\n                    </DropdownMenuButton>\n                    <DropdownMenuButton\n                        disabled={filter.Unread === 0}\n                        className=\"alignleft\"\n                        loading={loading}\n                        onClick={() => onFilter({ Unread: 0 })}\n                    >\n                        <Icon name=\"read\" className=\"mr0-5\" />\n                        {c('Action').t`Show read`}\n                    </DropdownMenuButton>\n                </DropdownMenu>\n            )}\n        </ToolbarDropdown>\n    );\n};\n\nexport default FilterDropdown;\n","import React from 'react';\nimport { Checkbox, DropdownMenu, DropdownMenuButton, Icon } from 'react-components';\nimport { c } from 'ttag';\n\nimport ToolbarDropdown from './ToolbarDropdown';\n\ninterface Props {\n    loading?: boolean;\n    disabled?: boolean;\n    checked: boolean;\n    onCheck: (checked?: boolean) => void;\n}\n\nconst SelectAll = ({ loading, disabled, checked, onCheck }: Props) => {\n    return (\n        <>\n            <Checkbox\n                className=\"flex pl1\"\n                checked={checked}\n                disabled={disabled}\n                loading={loading}\n                onChange={({ target }) => onCheck(target.checked)}\n            />\n            <ToolbarDropdown\n                disabled={disabled}\n                loading={loading}\n                title={c('Title').t`Open actions dropdown`}\n                content=\"\"\n            >\n                {() => (\n                    <DropdownMenu>\n                        <DropdownMenuButton className=\"alignleft\" onClick={() => onCheck()}>\n                            <Icon name=\"show-all-emails\" className=\"mr0-5\" />\n                            {c('Action').t`Select all`}\n                        </DropdownMenuButton>\n                        <DropdownMenuButton className=\"alignleft\" onClick={() => onCheck()}>\n                            <Icon name=\"unread\" className=\"mr0-5\" />\n                            {c('Action').t`All unread`}\n                        </DropdownMenuButton>\n                        <DropdownMenuButton className=\"alignleft\" onClick={() => onCheck()}>\n                            <Icon name=\"read\" className=\"mr0-5\" />\n                            {c('Action').t`All read`}\n                        </DropdownMenuButton>\n                        <DropdownMenuButton className=\"alignleft\" onClick={() => onCheck()}>\n                            <Icon name=\"star\" className=\"mr0-5\" />\n                            {c('Action').t`All unstarred`}\n                        </DropdownMenuButton>\n                        <DropdownMenuButton className=\"alignleft\" onClick={() => onCheck()}>\n                            <Icon name=\"starfull\" className=\"mr0-5\" />\n                            {c('Action').t`All starred`}\n                        </DropdownMenuButton>\n                    </DropdownMenu>\n                )}\n            </ToolbarDropdown>\n        </>\n    );\n};\n\nexport default SelectAll;\n","import React, { useState } from 'react';\nimport {\n    LabelModal,\n    SearchInput as UntypedSearchInput,\n    Icon,\n    useLabels,\n    useModals,\n    PrimaryButton,\n    classnames,\n    Tooltip,\n    useLoading,\n    useApi,\n    useNotifications,\n    useEventManager\n} from 'react-components';\nimport { MAILBOX_LABEL_IDS, LABEL_COLORS } from 'proton-shared/lib/constants';\nimport { c } from 'ttag';\nimport { normalize } from 'proton-shared/lib/helpers/string';\nimport { labelMessages } from 'proton-shared/lib/api/messages';\nimport { labelConversations } from 'proton-shared/lib/api/conversations';\nimport { randomIntFromInterval } from 'proton-shared/lib/helpers/function';\n\nimport { Label } from '../../models/label';\nimport { getFolders } from '../../helpers/labels';\nimport { isMessage } from '../../helpers/elements';\nimport { Element } from '../../models/element';\n\nimport './MoveDropdown.scss';\n\nconst SearchInput = UntypedSearchInput as any;\n\nconst { INBOX, TRASH, SPAM, ARCHIVE } = MAILBOX_LABEL_IDS;\n\ntype LabelWithIcon = Label & { icon?: string };\n\ninterface Props {\n    elements: Element[];\n    onClose: () => void;\n    onLock: (lock: boolean) => void;\n}\n\nconst MoveDropdown = ({ elements, onClose, onLock }: Props) => {\n    const { createNotification } = useNotifications();\n    const [loading, withLoading] = useLoading();\n    const api = useApi();\n    const { call } = useEventManager();\n    const { createModal } = useModals();\n    const [labels = []]: [Label[]] = useLabels();\n    const [search, updateSearch] = useState('');\n    const normSearch = normalize(search);\n\n    if (!elements || !elements.length || !labels || !labels.length) {\n        return null;\n    }\n\n    const typeIsMessage = isMessage(elements[0]);\n\n    const folders: LabelWithIcon[] = getFolders(labels)\n        .concat(\n            [\n                { ID: INBOX, Name: c('Mailbox').t`Inbox`, icon: 'inbox' },\n                { ID: ARCHIVE, Name: c('Mailbox').t`Archive`, icon: 'archive' },\n                { ID: SPAM, Name: c('Mailbox').t`Spam`, icon: 'spam' },\n                { ID: TRASH, Name: c('Mailbox').t`Trash`, icon: 'trash' }\n            ].filter(Boolean)\n        )\n        .filter(({ Name = '' }) => {\n            if (!search) {\n                return true;\n            }\n            const normName = normalize(Name);\n            return normName.includes(normSearch);\n        });\n\n    const handleMove = async (folder?: Label) => {\n        const action = typeIsMessage ? labelMessages : labelConversations;\n        const selectedIDs = elements.map((element) => element.ID || '');\n\n        await api(action({ LabelID: folder?.ID, IDs: selectedIDs }));\n        await call();\n        onClose();\n        createNotification({ text: c('Success').t`Elements moved to ${folder?.Name}` });\n    };\n\n    const handleCreate = () => {\n        onLock(true);\n        const newLabel = {\n            Name: search,\n            Color: LABEL_COLORS[randomIntFromInterval(0, LABEL_COLORS.length - 1)],\n            Exclusive: true\n        };\n        createModal(<LabelModal type=\"folder\" label={newLabel} onClose={() => onLock(false)} />);\n    };\n\n    return (\n        <div className=\"p1\">\n            <div className=\"flex flex-spacebetween flex-items-center mb1\">\n                <label htmlFor=\"filter-folders\" className=\"bold\">{c('Label').t`Move to`}</label>\n                <Tooltip title={c('Title').t`Create folder`}>\n                    <PrimaryButton className=\"pm-button--small pm-button--for-smallicon\" onClick={handleCreate}>\n                        <Icon name=\"folder\" fill=\"light\" className=\"flex-item-noshrink mr0-25\" />+\n                    </PrimaryButton>\n                </Tooltip>\n            </div>\n            <div className=\"mb1\">\n                <SearchInput\n                    autoFocus={true}\n                    value={search}\n                    onChange={updateSearch}\n                    id=\"filter-folders\"\n                    placeholder={c('Placeholder').t`Filter folders`}\n                />\n            </div>\n            <div className=\"scroll-if-needed scroll-smooth-touch moveDropdown-list-container\">\n                <ul className=\"unstyled mt0 mb0\">\n                    {folders.map((folder, index) => {\n                        return (\n                            <li key={folder.ID} className={classnames([index < folders.length - 1 && 'border-bottom'])}>\n                                <button\n                                    type=\"button\"\n                                    disabled={loading}\n                                    className=\"w100 flex flex-nowrap flex-items-center pt0-5 pb0-5\"\n                                    onClick={() => withLoading(handleMove(folder))}\n                                >\n                                    <Icon\n                                        name={folder.icon || 'folder'}\n                                        color={folder.Color}\n                                        className=\"flex-item-noshrink mr0-5\"\n                                    />\n                                    <span className=\"ellipsis\" title={folder.Name}>\n                                        {folder.Name}\n                                    </span>\n                                </button>\n                            </li>\n                        );\n                    })}\n                    {folders.length === 0 && (\n                        <li\n                            key=\"empty\"\n                            className=\"w100 flex flex-nowrap flex-spacebetween flex-items-center pt0-5 pb0-5\"\n                        >\n                            {c('Info').t`No folder found`}\n                        </li>\n                    )}\n                </ul>\n            </div>\n        </div>\n    );\n};\n\nexport default MoveDropdown;\n","import React, { useState, ChangeEvent, useEffect } from 'react';\nimport { c } from 'ttag';\nimport {\n    SearchInput as UntypedSearchInput,\n    Icon,\n    useLabels,\n    useModals,\n    PrimaryButton,\n    LabelModal,\n    classnames,\n    Tooltip,\n    useLoading,\n    useApi,\n    useNotifications,\n    Checkbox,\n    useEventManager,\n    generateUID\n} from 'react-components';\nimport { labelMessages, unlabelMessages } from 'proton-shared/lib/api/messages';\nimport { labelConversations, unlabelConversations } from 'proton-shared/lib/api/conversations';\nimport { normalize } from 'proton-shared/lib/helpers/string';\nimport { LABEL_COLORS } from 'proton-shared/lib/constants';\nimport { randomIntFromInterval } from 'proton-shared/lib/helpers/function';\n\nimport { Label } from '../../models/label';\nimport { Element } from '../../models/element';\nimport { hasLabel, isMessage } from '../../helpers/elements';\nimport { getLabelsWithoutFolders } from '../../helpers/labels';\n\nimport './LabelDropdown.scss';\n\nconst SearchInput = UntypedSearchInput as any;\n\nenum LabelState {\n    On,\n    Off,\n    Indeterminate\n}\n\ntype SelectionState = { [labelID: string]: LabelState };\n\nconst getInitialState = (labels: Label[] = [], elements: Element[] = []) => {\n    const result: SelectionState = {};\n    getLabelsWithoutFolders(labels).forEach(({ ID = '' }) => {\n        const count = elements.filter((element) => hasLabel(element, ID)).length;\n        result[ID] =\n            count === 0 ? LabelState.Off : count === elements.length ? LabelState.On : LabelState.Indeterminate;\n    });\n    return result;\n};\n\ninterface Props {\n    elements: Element[];\n    onClose: () => void;\n    onLock: (lock: boolean) => void;\n}\n\nconst LabelDropdown = ({ elements, onClose, onLock }: Props) => {\n    const [uid] = useState(generateUID('label-dropdown'));\n    const { createNotification } = useNotifications();\n    const [loading, withLoading] = useLoading();\n    const api = useApi();\n    const { call } = useEventManager();\n    const { createModal } = useModals();\n    const [labels = []]: [Label[]] = useLabels();\n    const [search, updateSearch] = useState('');\n    const [lastChecked, setLastChecked] = useState(''); // Store ID of the last label ID checked\n    const [alsoArchive, updateAlsoArchive] = useState(false);\n    const [selectedLabelIDs, updateSelectedLabelIDs] = useState<SelectionState>({});\n\n    useEffect(() => {\n        updateSelectedLabelIDs(getInitialState(labels, elements));\n    }, [elements, labels.length]);\n\n    if (!elements || !elements.length || !labels || !labels.length) {\n        return null;\n    }\n\n    const typeIsMessage = isMessage(elements[0]);\n\n    const normSearch = normalize(search);\n    const list = getLabelsWithoutFolders(labels).filter(({ Name = '' }) => {\n        if (!search) {\n            return true;\n        }\n        const normName = normalize(Name);\n        return normName.includes(normSearch);\n    });\n\n    const handleApply = async (selection = selectedLabelIDs) => {\n        const labelAction = typeIsMessage ? labelMessages : labelConversations;\n        const unlabelAction = typeIsMessage ? unlabelMessages : unlabelConversations;\n        const selectedIDs = elements.map((element) => element.ID || '');\n\n        // TODO to improve: we call label / unlabel too much\n        const promises = Object.keys(selection).map((LabelID) => {\n            if (selection[LabelID] === LabelState.On) {\n                return api(labelAction({ LabelID, IDs: selectedIDs }));\n            }\n            if (selection[LabelID] === LabelState.Off) {\n                return api(unlabelAction({ LabelID, IDs: selectedIDs }));\n            }\n        });\n        await Promise.all(promises);\n        await call();\n        onClose();\n        createNotification({ text: c('Success').t`Labels applied` });\n    };\n\n    const applyCheck = (labelIDs: string[], selected: boolean) => {\n        const update = labelIDs.reduce((acc, ID) => {\n            acc[ID] = selected ? LabelState.On : LabelState.Off;\n            return acc;\n        }, {} as SelectionState);\n\n        updateSelectedLabelIDs({ ...selectedLabelIDs, ...update });\n    };\n\n    const handleCheck = (labelID: string) => ({ target, nativeEvent }: ChangeEvent<HTMLInputElement>) => {\n        const { shiftKey } = nativeEvent as any;\n        const labelIDs = [labelID];\n\n        if (lastChecked && shiftKey) {\n            const start = list.findIndex(({ ID }) => ID === labelID);\n            const end = list.findIndex(({ ID }) => ID === lastChecked);\n            labelIDs.push(...list.slice(Math.min(start, end), Math.max(start, end) + 1).map(({ ID = '' }) => ID));\n        }\n\n        setLastChecked(labelID);\n\n        applyCheck(labelIDs, target.checked);\n    };\n\n    const handleAddNewLabel = (label?: Label) => {\n        applyCheck([label?.ID || ''], true);\n    };\n\n    const handleCreate = () => {\n        onLock(true);\n        const newLabel = {\n            Name: search,\n            Color: LABEL_COLORS[randomIntFromInterval(0, LABEL_COLORS.length - 1)],\n            Exclusive: false\n        };\n        createModal(\n            <LabelModal type=\"label\" label={newLabel} onAdd={handleAddNewLabel} onClose={() => onLock(false)} />\n        );\n    };\n\n    return (\n        <div className=\"p1\">\n            <div className=\"flex flex-spacebetween flex-items-center mb1\">\n                <label htmlFor=\"filter-labels\" className=\"bold\">{c('Label').t`Label as`}</label>\n                <Tooltip title={c('Title').t`Create label`}>\n                    <PrimaryButton className=\"pm-button--small pm-button--for-smallicon\" onClick={handleCreate}>\n                        <Icon name=\"label\" fill=\"light\" className=\"flex-item-noshrink mr0-25\" />+\n                    </PrimaryButton>\n                </Tooltip>\n            </div>\n            <div className=\"mb1\">\n                <SearchInput\n                    autoFocus={true}\n                    value={search}\n                    onChange={updateSearch}\n                    id=\"filter-labels\"\n                    placeholder={c('Placeholder').t`Filter labels`}\n                />\n            </div>\n            <div className=\"scroll-if-needed scroll-smooth-touch mb1 labelDropdown-list-container\">\n                <ul className=\"unstyled mt0 mb0\">\n                    {list.map(({ ID = '', Name = '', Color = '' }, index) => {\n                        // The dropdown is several times in the view, native html ids has to be different each time\n                        const lineId = `${uid}-${ID}`;\n                        return (\n                            <li\n                                key={lineId}\n                                className={classnames([\n                                    'w100 flex flex-nowrap flex-spacebetween flex-items-center pt0-5 pb0-5',\n                                    index < list.length - 1 && 'border-bottom'\n                                ])}\n                            >\n                                <div className=\"flex flex-nowrap flex-spacebetween flex-items-center\">\n                                    <Icon name=\"label\" color={Color} className=\"flex-item-noshrink mr0-5\" />\n                                    <label htmlFor={lineId} title={Name} className=\"ellipsis\">\n                                        {Name}\n                                    </label>\n                                </div>\n                                <Checkbox\n                                    className=\"flex-item-noshrink\"\n                                    id={lineId}\n                                    checked={selectedLabelIDs[ID] === LabelState.On}\n                                    indeterminate={selectedLabelIDs[ID] === LabelState.Indeterminate}\n                                    onChange={handleCheck(ID)}\n                                />\n                            </li>\n                        );\n                    })}\n                    {list.length === 0 && (\n                        <li\n                            key=\"empty\"\n                            className=\"w100 flex flex-nowrap flex-spacebetween flex-items-center pt0-5 pb0-5\"\n                        >\n                            {c('Info').t`No label found`}\n                        </li>\n                    )}\n                </ul>\n            </div>\n            <div className=\"mb1 flex flex-spacebetween\">\n                <label htmlFor=\"alsoArchive\">{c('Label').t`Also archive`}</label>\n                <Checkbox\n                    id=\"alsoArchive\"\n                    checked={alsoArchive}\n                    onChange={({ target }) => updateAlsoArchive(target.checked)}\n                />\n            </div>\n            <div>\n                <PrimaryButton className=\"w100\" loading={loading} onClick={() => withLoading(handleApply())}>\n                    {c('Action').t`Apply`}\n                </PrimaryButton>\n            </div>\n        </div>\n    );\n};\n\nexport default LabelDropdown;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon } from 'react-components';\n\nimport ToolbarButton from './ToolbarButton';\n\ninterface Props {\n    onClick: () => void;\n}\n\nconst BackButton = ({ onClick }: Props) => {\n    return (\n        <ToolbarButton onClick={onClick}>\n            <Icon className=\"toolbar-icon mauto\" name=\"arrow-left\" />\n        </ToolbarButton>\n    );\n};\n\nBackButton.propTypes = {\n    onClick: PropTypes.func.isRequired\n};\n\nexport default BackButton;\n","import React from 'react';\nimport { Icon, DropdownMenu, DropdownMenuButton } from 'react-components';\nimport { c } from 'ttag';\n\nimport ToolbarButton from './ToolbarButton';\nimport ToolbarDropdown from './ToolbarDropdown';\n\nimport { Page } from '../../models/tools';\nimport { pageCount } from '../../helpers/paging';\n\ninterface Props {\n    loading: boolean;\n    page: Page;\n    onPage: (page: number) => void;\n}\n\nconst PagingControls = ({ loading, page, onPage }: Props) => {\n    const setPage = (pageNumber: number) => onPage(pageNumber);\n    const handleNext = () => setPage(page.page + 1);\n    const handlePrevious = () => setPage(page.page - 1);\n    const handlePage = (newPage: number) => () => setPage(newPage);\n    const count = pageCount(page);\n\n    return (\n        <>\n            <ToolbarButton\n                loading={loading}\n                disabled={page.page <= 0}\n                title={c('Action').t`Previous`}\n                onClick={handlePrevious}\n            >\n                <Icon className=\"toolbar-icon rotateZ-90 mauto\" name=\"caret\" />\n            </ToolbarButton>\n            <ToolbarDropdown\n                title={c('Action').t`Change layout`}\n                content={String(page.page + 1)}\n                disabled={count <= 1}\n                size=\"narrow\"\n            >\n                {() => (\n                    <DropdownMenu>\n                        {[...Array(count)].map((_, i) => (\n                            <DropdownMenuButton\n                                key={i}\n                                loading={loading}\n                                disabled={page.page === i}\n                                onClick={handlePage(i)}\n                            >\n                                {i + 1}\n                            </DropdownMenuButton>\n                        ))}\n                    </DropdownMenu>\n                )}\n            </ToolbarDropdown>\n            <ToolbarButton\n                loading={loading}\n                disabled={page.page >= count - 1}\n                title={c('Action').t`Next`}\n                onClick={handleNext}\n            >\n                <Icon className=\"toolbar-icon rotateZ-270 mauto\" name=\"caret\" />\n            </ToolbarButton>\n        </>\n    );\n};\n\nexport default PagingControls;\n","import React, { useMemo } from 'react';\nimport { Location } from 'history';\nimport { Icon } from 'react-components';\nimport { identity } from 'proton-shared/lib/helpers/function';\n\nimport ToolbarSeparator from './ToolbarSeparator';\nimport ReadUnreadButtons from './ReadUnreadButtons';\nimport ToolbarDropdown from './ToolbarDropdown';\nimport LayoutDropdown from './LayoutDropdown';\nimport MoveButtons from './MoveButtons';\nimport DeleteButton from './DeleteButton';\nimport SortDropdown from './SortDropdown';\nimport FilterDropdown from './FilterDropdown';\nimport SelectAll from './SelectAll';\nimport MoveDropdown from '../dropdown/MoveDropdown';\nimport LabelDropdown from '../dropdown/LabelDropdown';\nimport BackButton from './BackButton';\nimport PagingControls from './PagingControls';\nimport { isColumnMode } from '../../helpers/mailSettings';\nimport { Page, Sort, Filter } from '../../models/tools';\nimport { Element } from '../../models/element';\n\nimport './Toolbar.scss';\n\ninterface Props {\n    location: Location;\n    loading?: boolean;\n    checkAll: boolean;\n    onCheckAll: () => void;\n    labelID: string;\n    elementID?: string;\n    elements: Element[];\n    selectedIDs: string[];\n    mailSettings: any;\n    page: Page;\n    onPage: (page: number) => void;\n    sort: Sort;\n    onSort: (sort: Sort) => void;\n    filter: Filter;\n    onFilter: (filter: Filter) => void;\n    onBack: () => void;\n}\n\nconst Toolbar = ({\n    location,\n    labelID = '',\n    elementID,\n    elements,\n    checkAll,\n    onCheckAll,\n    mailSettings = {},\n    selectedIDs = [],\n    loading = false,\n    onSort,\n    sort,\n    onFilter,\n    filter,\n    onBack,\n    page,\n    onPage\n}: Props) => {\n    const columnMode = isColumnMode(mailSettings);\n\n    const selectedElements = useMemo(\n        () =>\n            selectedIDs\n                .map((elementID) => elements.find((element) => element.ID === elementID) as Element)\n                .filter(identity),\n        [elements, selectedIDs]\n    );\n\n    return (\n        <nav className=\"toolbar flex noprint flex-spacebetween\">\n            <div className=\"flex\">\n                {columnMode || !elementID ? (\n                    <SelectAll checked={checkAll} onCheck={onCheckAll} loading={loading} />\n                ) : (\n                    <BackButton onClick={onBack} />\n                )}\n                <ToolbarSeparator />\n                <ReadUnreadButtons\n                    labelID={labelID}\n                    mailSettings={mailSettings}\n                    selectedIDs={selectedIDs}\n                    location={location}\n                />\n                <ToolbarSeparator />\n                <MoveButtons\n                    labelID={labelID}\n                    mailSettings={mailSettings}\n                    selectedIDs={selectedIDs}\n                    location={location}\n                />\n                <DeleteButton\n                    labelID={labelID}\n                    mailSettings={mailSettings}\n                    selectedIDs={selectedIDs}\n                    location={location}\n                />\n                <ToolbarSeparator />\n                <ToolbarDropdown\n                    autoClose={false}\n                    disabled={!selectedIDs.length}\n                    content={<Icon className=\"toolbar-icon\" name=\"folder\" />}\n                >\n                    {({ onClose, onLock }) => (\n                        <MoveDropdown elements={selectedElements} onClose={onClose} onLock={onLock} />\n                    )}\n                </ToolbarDropdown>\n                <ToolbarDropdown\n                    autoClose={false}\n                    disabled={!selectedIDs.length}\n                    content={<Icon className=\"toolbar-icon\" name=\"label\" />}\n                >\n                    {({ onClose, onLock }) => (\n                        <LabelDropdown elements={selectedElements} onClose={onClose} onLock={onLock} />\n                    )}\n                </ToolbarDropdown>\n            </div>\n            <div className=\"flex\">\n                <FilterDropdown loading={loading} filter={filter} onFilter={onFilter} />\n                <SortDropdown loading={loading} sort={sort} onSort={onSort} />\n                <LayoutDropdown mailSettings={mailSettings} />\n                <ToolbarSeparator />\n                <PagingControls loading={loading} page={page} onPage={onPage} />\n            </div>\n        </nav>\n    );\n};\n\nexport default Toolbar;\n","import React, { ReactElement, ChangeEvent } from 'react';\nimport { Icon, classnames } from 'react-components';\n\ninterface Props {\n    children: ReactElement | string;\n    className: string;\n    checked: boolean;\n    onChange: (event: ChangeEvent) => void;\n}\n\nconst ItemCheckbox = ({ children, className, ...rest }: Props) => {\n    return (\n        <label className={classnames(['relative stop-propagation', className])}>\n            <input type=\"checkbox\" className=\"item-checkbox inner-ratio-container cursor-pointer m0\" {...rest} />\n            <span className=\"item-icon flex-item-noshrink rounded50 bg-white inline-flex\">\n                <span className=\"mauto item-abbr\">{children}</span>\n                <span className=\"item-icon-fakecheck mauto\">\n                    <Icon name=\"on\" className=\"fill-white\" />\n                </span>\n            </span>\n        </label>\n    );\n};\n\nexport default ItemCheckbox;\n","import React from 'react';\nimport { Icon, useLoading, useApi, useEventManager, classnames } from 'react-components';\nimport { MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\nimport { labelMessages, unlabelMessages } from 'proton-shared/lib/api/messages';\nimport { labelConversations, unlabelConversations } from 'proton-shared/lib/api/conversations';\n\nimport { Element } from '../../models/element';\nimport { isConversation as isConversationTest, getLabelIDs } from '../../helpers/elements';\n\ninterface Props {\n    element?: Element;\n}\n\nconst ItemStar = ({ element = {} }: Props) => {\n    const api = useApi();\n    const isConversation = isConversationTest(element);\n    const { call } = useEventManager();\n    const [loading, withLoading] = useLoading();\n    const labelIDs = getLabelIDs(element);\n    const isStarred = labelIDs?.includes(MAILBOX_LABEL_IDS.STARRED);\n    const iconName = isStarred ? 'starfull' : 'star';\n\n    const handleClick = async () => {\n        const action = isConversation\n            ? isStarred\n                ? unlabelConversations\n                : labelConversations\n            : isStarred\n            ? unlabelMessages\n            : labelMessages;\n        await api(action({ LabelID: MAILBOX_LABEL_IDS.STARRED, IDs: [element.ID] }));\n        await call();\n    };\n\n    return (\n        <button\n            disabled={loading}\n            type=\"button\"\n            className={classnames(['starbutton item-star inline-flex', isStarred && 'starbutton--is-starred'])}\n            onClick={() => withLoading(handleClick())}\n        >\n            <Icon name={iconName} fill=\"\" />\n        </button>\n    );\n};\n\nexport default ItemStar;\n","import React from 'react';\nimport { toMap } from 'proton-shared/lib/helpers/object';\nimport { orderBy } from 'proton-shared/lib/helpers/array';\nimport { noop } from 'proton-shared/lib/helpers/function';\nimport { Link } from 'react-router-dom';\nimport { Icon, classnames } from 'react-components';\n\nimport { c } from 'ttag';\nimport { Label } from '../../models/label';\nimport { Element } from '../../models/element';\nimport { getLabelIDs } from '../../helpers/elements';\nimport { getLabelsWithoutFolders } from '../../helpers/labels';\n\ninterface Props {\n    element?: Element;\n    labels?: Label[];\n    max?: number;\n    onUnlabel?: (labelID: string) => void;\n    className?: string;\n}\n\nconst ItemLabels = ({ element = {}, onUnlabel = noop, max = 99, labels = [], className = '' }: Props) => {\n    const labelIDs = getLabelIDs(element) || [];\n    const labelsMap = toMap(getLabelsWithoutFolders(labels)) as { [labelID: string]: Label };\n    const labelsObjects: Label[] = labelIDs.map((ID) => labelsMap[ID]).filter(Boolean);\n    const labelsSorted: Label[] = orderBy(labelsObjects, 'Order');\n    const labelsToShow = labelsSorted.slice(0, max);\n\n    return (\n        <div\n            className={classnames([\n                'inline-flex flew-row flex-items-center pm-badgeLabel-container stop-propagation',\n                className\n            ])}\n        >\n            {labelsToShow.map(({ ID = '', Name = '', Color = '' }) => (\n                <span\n                    className=\"badgeLabel flex flex-row flex-items-center ml0-25\"\n                    style={{\n                        backgroundColor: Color,\n                        borderColor: Color\n                    }}\n                    key={ID}\n                >\n                    <Link\n                        to={`/${ID}`}\n                        className=\"pm-badgeLabel-link color-white nodecoration\"\n                        title={c('Action').t`Display emails labelled with ${Name}`}\n                    >\n                        {Name}\n                    </Link>\n                    {onUnlabel !== noop ? (\n                        <button\n                            type=\"button\"\n                            className=\"flex pm-badgeLabel-button flex-item-noshrink\"\n                            onClick={() => onUnlabel(ID)}\n                            title={c('Action').t`Remove this label`}\n                        >\n                            <Icon name=\"off\" size={12} color=\"white\" />\n                            <span className=\"sr-only\">{c('Action').t`Remove this label`}</span>\n                        </button>\n                    ) : null}\n                </span>\n            ))}\n        </div>\n    );\n};\n\nexport default ItemLabels;\n","import React from 'react';\nimport { Icon, classnames } from 'react-components';\n\nimport { hasAttachments } from '../../helpers/elements';\nimport { Element } from '../../models/element';\n\ninterface Props {\n    element?: Element;\n    className?: string;\n}\n\nconst ItemAttachmentIcon = ({ element = {}, className }: Props) => {\n    if (!hasAttachments(element)) {\n        return null;\n    }\n\n    return <Icon name=\"attach\" fill=\"\" className={classnames(['fill-global-success', className])} />;\n};\n\nexport default ItemAttachmentIcon;\n","import { Conversation } from '../models/conversation';\n\nexport const getSenders = ({ Senders = [] }: Conversation = {}) => Senders;\n\nexport const getRecipients = ({ Recipients = [] }: Conversation) => Recipients;\n\nexport const hasAttachments = ({ ContextNumAttachments }: Conversation = {}) => !!ContextNumAttachments;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Icon } from 'react-components';\nimport { MAILBOX_LABEL_IDS, SHOW_MOVED } from 'proton-shared/lib/constants';\nimport { c } from 'ttag';\n\nimport { LABEL_IDS_TO_HUMAN } from '../../constants';\nimport { Message } from '../../models/message';\nimport { MailSettings } from '../../models/utils';\n\nconst { INBOX, TRASH, SPAM, ARCHIVE, SENT, DRAFTS } = MAILBOX_LABEL_IDS;\n\ninterface FolderMap {\n    [id: string]: {\n        icon: string;\n        name: string;\n        to: string;\n    };\n}\n\nconst getFolders = ({ ShowMoved }: MailSettings): FolderMap => ({\n    [INBOX]: {\n        icon: 'inbox',\n        name: c('Mailbox').t`Inbox`,\n        to: '/inbox'\n    },\n    [TRASH]: {\n        icon: 'trash',\n        name: c('Mailbox').t`Trash`,\n        to: '/trash'\n    },\n    [SPAM]: {\n        icon: 'spam',\n        name: c('Mailbox').t`Spam`,\n        to: '/spam'\n    },\n    [ARCHIVE]: {\n        icon: 'archive',\n        name: c('Mailbox').t`Archive`,\n        to: '/archive'\n    },\n    [SENT]: {\n        icon: 'sent',\n        name: c('Mailbox').t`Sent`,\n        to:\n            ShowMoved & SHOW_MOVED.SENT\n                ? `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.ALL_SENT]}`\n                : `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.SENT]}`\n    },\n    [DRAFTS]: {\n        icon: 'drafts',\n        name: c('Mailbox').t`Drafts`,\n        to:\n            ShowMoved & SHOW_MOVED.DRAFTS\n                ? `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.ALL_DRAFTS]}`\n                : `/${LABEL_IDS_TO_HUMAN[MAILBOX_LABEL_IDS.DRAFTS]}`\n    }\n});\n\ninterface Props {\n    message?: Message;\n    mailSettings: MailSettings;\n}\n\nconst ItemLocation = ({ message = {}, mailSettings }: Props) => {\n    const { LabelIDs = [] } = message;\n    const folders = getFolders(mailSettings);\n\n    return (\n        <>\n            {LabelIDs.filter((labelID) => folders[labelID]).map((labelID) => {\n                const { icon, name, to } = folders[labelID];\n                return (\n                    <Link to={to} className=\"mr0-25 flex-item-noshrink\" key={labelID} title={name}>\n                        <Icon name={icon} />\n                    </Link>\n                );\n            })}\n        </>\n    );\n};\n\nexport default ItemLocation;\n","import { format, formatDistanceToNow as dateFnsFormatDistanceToNow, isToday } from 'date-fns';\nimport { dateLocale } from 'proton-shared/lib/i18n';\n\nexport const formatSimpleDate = (date) => format(date, isToday(date) ? 'p' : 'PP', { locale: dateLocale });\n\nexport const formatFullDate = (date) => format(date, 'PPPPp', { locale: dateLocale });\n\nexport const formatDistanceToNow = (date) => dateFnsFormatDistanceToNow(date, { locale: dateLocale, addSuffix: true });\n","import React, { useState, useEffect } from 'react';\nimport { classnames } from 'react-components';\n\nimport { getDate } from '../../helpers/elements';\nimport { formatSimpleDate, formatFullDate, formatDistanceToNow } from '../../helpers/date';\nimport { Element } from '../../models/element';\n\nconst REFRESH_DATE_INTERVAL = 1000;\n\ntype FormaterType = 'simple' | 'full' | 'distance';\n\nconst FORMATERS = {\n    simple: formatSimpleDate,\n    full: formatFullDate,\n    distance: formatDistanceToNow\n};\n\n// TODO: Update with a setInterval?\n\ninterface Props {\n    element?: Element;\n    className?: string;\n    mode?: FormaterType;\n}\n\nconst ItemDate = ({ element = {}, className, mode = 'simple' }: Props) => {\n    const [formattedDate, setFormattedDate] = useState('');\n\n    const formater = FORMATERS[mode] || FORMATERS.distance;\n\n    useEffect(() => {\n        const update = () => setFormattedDate(formater(getDate(element)));\n\n        update();\n\n        if (mode === 'distance') {\n            const intervalID = setInterval(update, REFRESH_DATE_INTERVAL);\n            return () => clearInterval(intervalID);\n        }\n    }, [element, mode]);\n\n    return <span className={classnames(['item-date', className])}>{formattedDate}</span>;\n};\n\nexport default ItemDate;\n","import React from 'react';\nimport { Conversation } from '../../models/conversation';\n\ninterface Props {\n    conversation: Conversation;\n    className?: string;\n}\n\nconst NumMessages = ({ conversation, className }: Props) => {\n    // ContextNumMessages shoud not be used\n    const { NumMessages = 0 } = conversation;\n\n    if (NumMessages <= 1) {\n        return null;\n    }\n\n    return <span className={className}>({NumMessages})</span>;\n};\n\nexport default NumMessages;\n","import React from 'react';\nimport { classnames } from 'react-components';\n\nimport ItemStar from './ItemStar';\nimport { ELEMENT_TYPES } from '../../constants';\nimport ItemLabels from './ItemLabels';\nimport ItemAttachmentIcon from './ItemAttachmentIcon';\nimport ItemLocation from './ItemLocation';\nimport ItemDate from './ItemDate';\nimport NumMessages from '../conversation/NumMessages';\nimport { Label } from '../../models/label';\nimport { Element } from '../../models/element';\n\ninterface Props {\n    labels?: Label[];\n    element: Element;\n    mailSettings: any;\n    type: string;\n    senders: string;\n    unread: boolean;\n}\n\nconst ItemColumnLayout = ({ labels, element, mailSettings = {}, type, senders, unread }: Props) => {\n    const { Subject } = element;\n    const isConversation = type === ELEMENT_TYPES.CONVERSATION;\n\n    return (\n        <div className=\"flex-item-fluid flex flex-nowrap flex-column flex-spacebetween item-titlesender\">\n            <div className=\"flex\">\n                <div className=\"flex-item-fluid flex w0 pr1\">\n                    {isConversation ? (\n                        <NumMessages className={classnames(['mr0-25', unread && 'bold'])} conversation={element} />\n                    ) : (\n                        <ItemLocation message={element} mailSettings={mailSettings} />\n                    )}\n                    <span className={classnames(['inbl mw100 ellipsis', unread && 'bold'])}>{Subject}</span>\n                </div>\n                <ItemDate element={element} className={unread ? 'bold' : undefined} />\n            </div>\n            <div className=\"flex\">\n                <div className=\"flex-item-fluid flex pr1\">\n                    <span className={classnames(['inbl mw100 ellipsis', unread && 'bold'])}>{senders}</span>\n                </div>\n                <div className=\"item-icons\">\n                    <ItemLabels max={4} labels={labels} element={element} />\n                    {' ' /* This space is important to keep a small space between elements */}\n                    <ItemAttachmentIcon element={element} />\n                    {' ' /* This space is important to keep a small space between elements */}\n                    <ItemStar element={element} />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ItemColumnLayout;\n","import React from 'react';\nimport { classnames } from 'react-components';\n\nimport ItemStar from './ItemStar';\nimport { ELEMENT_TYPES } from '../../constants';\nimport ItemLabels from './ItemLabels';\nimport ItemAttachmentIcon from './ItemAttachmentIcon';\nimport ItemLocation from './ItemLocation';\nimport ItemDate from './ItemDate';\nimport NumMessages from '../conversation/NumMessages';\nimport humanSize from 'proton-shared/lib/helpers/humanSize';\nimport { Label } from '../../models/label';\nimport { Element } from '../../models/element';\n\ninterface Props {\n    labels?: Label[];\n    element: Element;\n    mailSettings: any;\n    type: string;\n    senders: string;\n    unread: boolean;\n}\n\nconst ItemRowLayout = ({ labels, element, mailSettings = {}, type, senders, unread }: Props) => {\n    const { Subject, Size } = element;\n    const isConversation = type === ELEMENT_TYPES.CONVERSATION;\n    const size = humanSize(Size);\n\n    return (\n        <div className=\"flex-item-fluid flex flex-nowrap flex-row flex-spacebetween item-titlesender\">\n            <div className={classnames(['w20 flex mauto pr1', unread && 'bold'])}>{senders}</div>\n            <div className=\"flex-item-fluid flex mauto\">\n                {isConversation ? (\n                    <NumMessages className={classnames(['mr0-25', unread && 'bold'])} conversation={element} />\n                ) : (\n                    <ItemLocation message={element} mailSettings={mailSettings} />\n                )}\n                <span className={classnames(['inbl mw100 ellipsis', unread && 'bold'])}>{Subject}</span>\n                <ItemLabels max={4} labels={labels} element={element} />\n                <ItemAttachmentIcon element={element} className=\"ml0-5\" />\n            </div>\n            <span className=\"mtauto mbauto mr1 ml1 ng-binding\">{size}</span>\n            <span className=\"mauto\">\n                <ItemDate element={element} className={unread ? 'bold' : undefined} />\n            </span>\n            <div className=\"mtauto mbauto ml0-5\">\n                <ItemStar element={element} />\n            </div>\n        </div>\n    );\n};\n\nexport default ItemRowLayout;\n","import React, { ChangeEvent } from 'react';\nimport { Location } from 'history';\nimport { classnames } from 'react-components';\nimport { getInitial } from 'proton-shared/lib/helpers/string';\nimport { MAILBOX_LABEL_IDS, VIEW_LAYOUT } from 'proton-shared/lib/constants';\n\nimport ItemCheckbox from './ItemCheckbox';\nimport { getRecipients as getMessageRecipients, getSender, getRecipients } from '../../helpers/message/messages';\nimport { getCurrentType, isUnread } from '../../helpers/elements';\nimport ItemColumnLayout from './ItemColumnLayout';\nimport ItemRowLayout from './ItemRowLayout';\nimport { Label } from '../../models/label';\nimport { Element } from '../../models/element';\nimport { ELEMENT_TYPES } from '../../constants';\nimport { getSenders } from '../../helpers/conversation';\nimport { getRecipientLabel, recipientsToRecipientOrGroup, getRecipientOrGroupLabel } from '../../helpers/addresses';\nimport { ContactEmail, ContactGroup } from '../../models/contact';\n\nconst { SENT, ALL_SENT, DRAFTS, ALL_DRAFTS } = MAILBOX_LABEL_IDS;\n\ninterface Props {\n    location: Location;\n    labels?: Label[];\n    labelID: string;\n    elementID?: string;\n    mailSettings: any;\n    element: Element;\n    checked?: boolean;\n    contacts: ContactEmail[];\n    contactGroups: ContactGroup[];\n    onCheck: (event: ChangeEvent) => void;\n    onClick: (element: Element) => void;\n}\n\nconst Item = ({\n    location,\n    labelID,\n    labels,\n    element,\n    elementID,\n    mailSettings = {},\n    checked = false,\n    contacts,\n    contactGroups,\n    onCheck,\n    onClick\n}: Props) => {\n    const { ID = '' } = element;\n    const displayRecipients = [SENT, ALL_SENT, DRAFTS, ALL_DRAFTS].includes(labelID as MAILBOX_LABEL_IDS);\n    const type = getCurrentType({ mailSettings, labelID, location });\n    const isConversation = type === ELEMENT_TYPES.CONVERSATION;\n    const senders = isConversation ? getSenders(element) : [getSender(element)];\n    const recipients = isConversation ? getRecipients(element) : getMessageRecipients(element);\n    const sendersLabels = senders.map(getRecipientLabel);\n    const recipientsOrGroup = recipientsToRecipientOrGroup(recipients, contactGroups);\n    const recipientsLabels = recipientsOrGroup.map((recipientOrGroup) =>\n        getRecipientOrGroupLabel(recipientOrGroup, contacts)\n    );\n\n    const { ViewLayout = VIEW_LAYOUT.COLUMN } = mailSettings;\n    const isColumnMode = ViewLayout === VIEW_LAYOUT.COLUMN;\n    const ItemLayout = isColumnMode ? ItemColumnLayout : ItemRowLayout;\n    const unread = isUnread(element);\n\n    const clickHandler = (event: React.MouseEvent) => {\n        const target = event.target as HTMLElement;\n        if (target.closest('.stop-propagation')) {\n            event.stopPropagation();\n            return;\n        }\n        onClick(element);\n    };\n\n    return (\n        <div\n            onClick={clickHandler}\n            className={classnames([\n                'flex flex-nowrap cursor-pointer',\n                isColumnMode ? 'item-container' : 'item-container-row',\n                elementID === ID && 'item-is-selected',\n                !unread && 'read'\n            ])}\n        >\n            <ItemCheckbox className=\"mr1 item-checkbox\" checked={checked} onChange={onCheck}>\n                {getInitial(displayRecipients ? recipientsLabels[0] : sendersLabels[0])}\n            </ItemCheckbox>\n            <ItemLayout\n                labels={labels}\n                element={element}\n                mailSettings={mailSettings}\n                type={type}\n                senders={(displayRecipients ? recipientsLabels : sendersLabels).join(', ')}\n                unread={unread}\n            />\n        </div>\n    );\n};\n\nexport default Item;\n","import React from 'react';\nimport { c } from 'ttag';\n\nimport { MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\nimport noResultSearchSvg from 'design-system/assets/img/shared/no-result-search.svg';\nimport noResultInboxSvg from 'design-system/assets/img/shared/no-result-inbox.svg';\n\ninterface Props {\n    labelID: string;\n}\n\nconst EmptyView = ({ labelID }: Props) => {\n    const isInbox = labelID === MAILBOX_LABEL_IDS.INBOX;\n    const isFolder = !isInbox;\n    const isSearch = false; // TODO: when the search will be implemented\n\n    return (\n        <div className=\"m2\">\n            <figure className=\"flex-item-fluid aligncenter p3\">\n                {isSearch && <img src={noResultSearchSvg} alt={c('Search - no results').t`No results found`} />}\n                {isFolder && <img src={noResultSearchSvg} alt={c('Search - no results').t`No messages found`} />}\n                {isInbox && <img src={noResultInboxSvg} alt={c('Search - no results').t`No messages found`} />}\n\n                <figcaption className=\"mt2\">\n                    <h3 className=\"bold\">\n                        {isSearch\n                            ? c('Search - no results').t`No results found`\n                            : isFolder\n                            ? c('Search - no results').t`No messages found`\n                            : c('Search - no results').t`No messages found`}\n                    </h3>\n                    <p data-if=\"folder\">\n                        {isSearch\n                            ? // TODO: Add a link on clear it when search will work\n                              c('Info').t`Search - no results: You can either update your search query or clear it`\n                            : isFolder\n                            ? c('Info').t`You do not have any messages here`\n                            : c('Info').t`Seems like you are all caught up for now`}\n                    </p>\n                </figcaption>\n            </figure>\n        </div>\n    );\n};\n\nexport default EmptyView;\n","import { useCallback } from 'react';\nimport { useApi, useCache, useCachedModelResult } from 'react-components';\nimport { getContactGroupsModel } from 'proton-shared/lib/models/contactGroupsModel';\nimport { ContactGroup } from '../models/contact';\n\n/**\n * Temporary hook waiting for a solution about cache overriding in proton-shared\n * https://github.com/ProtonMail/proton-shared/pull/107\n * Workaround: manual use of the cache\n */\nexport const useContactGroups = () => {\n    const api = useApi();\n    const cache = useCache();\n\n    return useCachedModelResult(\n        cache,\n        'ContactGroups',\n        useCallback(() => getContactGroupsModel(api), [api])\n    ) as [ContactGroup[], boolean, any];\n};\n","import React, { useState, ChangeEvent } from 'react';\nimport { Location } from 'history';\nimport { useLabels, useContactEmails } from 'react-components';\n\nimport Item from './Item';\nimport { Element } from '../../models/element';\nimport EmptyView from '../view/EmptyView';\nimport { ContactEmail } from '../../models/contact';\nimport { useContactGroups } from '../../hooks/useContactGroups';\n\ninterface Props {\n    labelID: string;\n    elementID?: string;\n    mailSettings: any;\n    elements?: Element[];\n    checkedIDs?: string[];\n    onCheck: (IDs?: string[], checked?: boolean) => void;\n    onClick: (element: Element) => void;\n    location: Location;\n}\n\nconst List = ({\n    labelID,\n    elementID,\n    mailSettings = {},\n    elements = [],\n    checkedIDs = [],\n    onCheck,\n    onClick,\n    location\n}: Props) => {\n    const [contacts, loadingContacts]: [ContactEmail[], boolean] = useContactEmails();\n    const [contactGroups, loadingGroups] = useContactGroups();\n    const [labels] = useLabels();\n    const [lastChecked, setLastChecked] = useState(); // Store ID of the last element ID checked\n\n    if (loadingContacts || loadingGroups) {\n        return null;\n    }\n\n    const handleCheck = (elementID: string) => (event: ChangeEvent) => {\n        const target = event.target as HTMLInputElement;\n        const { shiftKey } = event.nativeEvent as any;\n        const elementIDs = [elementID];\n\n        if (lastChecked && shiftKey) {\n            const start = elements.findIndex(({ ID }) => ID === elementID);\n            const end = elements.findIndex(({ ID }) => ID === lastChecked);\n            elementIDs.push(\n                ...elements.slice(Math.min(start, end), Math.max(start, end) + 1).map(({ ID }) => ID || '')\n            );\n        }\n\n        setLastChecked(elementID);\n        onCheck(elementIDs, target.checked);\n    };\n\n    return elements.length === 0 ? (\n        <EmptyView labelID={labelID} />\n    ) : (\n        <>\n            {elements.map((element) => {\n                return (\n                    <Item\n                        location={location}\n                        labels={labels}\n                        labelID={labelID}\n                        key={element.ID}\n                        elementID={elementID}\n                        element={element}\n                        checked={checkedIDs.includes(element.ID || '')}\n                        contacts={contacts}\n                        contactGroups={contactGroups}\n                        onCheck={handleCheck(element.ID || '')}\n                        onClick={onClick}\n                        mailSettings={mailSettings}\n                    />\n                );\n            })}\n        </>\n    );\n};\n\nexport default List;\n","import React from 'react';\nimport { classnames } from 'react-components';\n\nimport { isPlainText } from '../../helpers/message/messages';\nimport { MessageExtended } from '../../models/message';\n\nimport './MessageBody.scss';\n\ninterface Props {\n    message: MessageExtended;\n}\n\nconst MessageBody = ({ message: { content = '', data: message = {} } }: Props) => {\n    const plain = isPlainText(message);\n    return (\n        <div\n            className={classnames(['message-content bodyDecrypted', plain && 'plain'])}\n            dangerouslySetInnerHTML={{ __html: content }}\n        />\n    );\n};\n\nexport default MessageBody;\n","import { VERIFICATION_STATUS } from '../constants';\n\nimport { isAuto, isImported, inSigningPeriod } from './message/messages';\n\nconst { SIGNED_AND_INVALID, SIGNED_AND_VALID, NOT_SIGNED } = VERIFICATION_STATUS;\n\n/**\n * Some complicated logic after internal discussions.\n * This function returns whether we should display a lock with check / warning (indicating the signature status)\n * or we just display a lock.\n * The following logic is applied:\n *  1. Old SENT messages (not imported, not autoresponse) are not signed\n *  2. If a SENT message has been correctly verified, a lonesome lock is displayed, unaccompanied by its check\n *      (because we don't consciously do key pinning here)\n *  3. If a SENT message doesn't have a signature, but should have, we display a warning. A SENT message should have a signature if:\n *      - it is not an autoreply AND\n *      - it is not an import AND\n *      - it is send after the time when we started signing all messages\n *  4. If a message fails the signature check, we display a warning\n *  5. If a (non-sent) message has been correctly verified, we display a check.\n *  6. Else we just display the appropriate lock.\n *      - this happens when there is no signature or it hasn't been verified (meaning unverified SENT message fall in this case).\n *  This logic is caused by sent message's signatures always being verified without requiring the user to enable key pinning\n *  (key pinning for your own keys happens as a consequence of our authentication method).\n *  Thus we don't want to display this check for people that don't understand key pinning, but still keep the\n *  same security.\n *  @return {() => boolean} whether to display the signature status\n */\nexport const displaySignatureStatus = ({ data: message = {}, verified = 0 }) => {\n    // TODO: const isSentByMe = message.isSentByMe();\n    const isSentByMe = false;\n\n    // Rule 4 + 5 + 6 for non-SENT messages\n    if (!isSentByMe) {\n        return verified === SIGNED_AND_INVALID || verified === SIGNED_AND_VALID;\n    }\n    // SENT messages\n    const imported = isImported(message.data);\n    const auto = isAuto(message.data);\n    const period = inSigningPeriod(message.data.Time);\n    // Rule 1:\n    if (!auto && !imported && !period) {\n        return false;\n    }\n    // Rule 2:\n    if (verified === SIGNED_AND_VALID) {\n        return false;\n    }\n    // Rule 3:\n    if (verified === NOT_SIGNED && !auto && !imported && period) {\n        // warning\n        return true;\n    }\n    // Rule 4 + 6:\n    return verified === SIGNED_AND_INVALID;\n};\n","import { c } from 'ttag';\n\nimport {\n    isSentEncrypted,\n    isAuto,\n    isSent,\n    isDraft,\n    isInternalEncrypted,\n    isExternalEncrypted,\n    inSigningPeriod,\n    isImported\n} from './message/messages';\n\nconst I18N = {\n    pm: [\n        c('Message encryption status').t`End-to-end encrypted message`,\n        // gettextCatalog.getString('End-to-end encrypted message', null, 'Message encryption status'),\n        c('Message encryption status').t`End-to-end encrypted message from verified address`,\n        // gettextCatalog.getString(\n        //     'End-to-end encrypted message from verified address',\n        //     null,\n        //     'Message encryption status'\n        // ),\n        c('Message encryption status').t`Sender verification failed`\n        // gettextCatalog.getString('Sender verification failed', null, 'Message encryption status')\n    ],\n    pgp: [\n        c('Message encryption status').t`PGP-encrypted message`,\n        // gettextCatalog.getString('PGP-encrypted message', null, 'Message encryption status'),\n        c('Message encryption status').t`PGP-encrypted message from verified address`,\n        // gettextCatalog.getString('PGP-encrypted message from verified address', null, 'Message encryption status'),\n        c('Message encryption status').t`Sender verification failed`\n        // gettextCatalog.getString('Sender verification failed', null, 'Message encryption status')\n    ],\n    clear: [\n        c('Message encryption status').t`Stored with zero access encryption`,\n        // gettextCatalog.getString('Stored with zero access encryption', null, 'Message encryption status'),\n        c('Message encryption status').t`PGP-signed message from verified address`,\n        // gettextCatalog.getString('PGP-signed message from verified address', null, 'Message encryption status'),\n        c('Message encryption status').t`Sender verification failed`\n        // gettextCatalog.getString('Sender verification failed', null, 'Message encryption status')\n    ],\n    sentEncrypted: [\n        c('Message encryption status').t`Sent by you with end-to-end encryption`,\n        // gettextCatalog.getString('Sent by you with end-to-end encryption', null, 'Message encryption status'),\n        c('Message encryption status').t`Sent by you with end-to-end encryption`,\n        // gettextCatalog.getString('Sent by you with end-to-end encryption', null, 'Message encryption status'),\n        c('Message encryption status').t`Sender verification failed`\n        // gettextCatalog.getString('Sender verification failed', null, 'Message encryption status')\n    ],\n    auto: [\n        c('Message encryption status').t`Sent by ProtonMail with zero access encryption`\n        // gettextCatalog.getString('Sent by ProtonMail with zero access encryption', null, 'Message encryption status')\n    ],\n    sentClear: [\n        c('Message encryption status').t`Stored with zero access encryption`,\n        // gettextCatalog.getString('Stored with zero access encryption', null, 'Message encryption status'),\n        c('Message encryption status').t`Stored with zero access encryption`,\n        // gettextCatalog.getString('Stored with zero access encryption', null, 'Message encryption status'),\n        c('Message encryption status').t`Sender verification failed`\n        // gettextCatalog.getString('Sender verification failed', null, 'Message encryption status')\n    ],\n    draft: [\n        c('Message encryption status').t`Encrypted message`\n        //gettextCatalog.getString('Encrypted message', null, 'Message encryption status')\n    ]\n};\n\nconst getFromType = (message) => {\n    if (isSentEncrypted(message)) {\n        return I18N.sentEncrypted;\n    }\n\n    if (isAuto(message)) {\n        return I18N.auto;\n    }\n\n    if (isSent(message)) {\n        return I18N.sentClear;\n    }\n\n    if (isDraft(message)) {\n        return I18N.draft;\n    }\n\n    if (isInternalEncrypted(message)) {\n        return I18N.pm;\n    }\n\n    if (isExternalEncrypted(message)) {\n        return I18N.pgp;\n    }\n\n    return I18N.clear;\n};\n\nexport const getEncryptionType = ({ data: message = {}, verified = 0 }) => {\n    const encType = getFromType(message);\n\n    if (encType.length > verified) {\n        // Old messages are not signed, so missing sender signatures should be treated like external missing signatures, no warning\n        if (!inSigningPeriod(message) && isSentEncrypted(message) && !isImported(message)) {\n            return encType[0];\n        }\n\n        return encType[verified];\n    }\n\n    return encType[0];\n};\n","import React from 'react';\nimport { Icon, Tooltip, Href, classnames } from 'react-components';\nimport { displaySignatureStatus } from '../../helpers/displaySignature';\nimport { isPGPEncrypted, isInternal, isSentEncrypted, isDraft, isAuto } from '../../helpers/message/messages';\nimport { getEncryptionType } from '../../helpers/encryptionType';\nimport { MessageExtended } from '../../models/message';\n\n// Reference: Angular/src/templates/message/encryptionStatus.tpl.html\n\ninterface Props {\n    message: MessageExtended;\n    className?: string;\n}\n\nconst MessageLock = ({ message, className: inputClassName }: Props) => {\n    const displaySignature = displaySignatureStatus(message);\n    const pgpEncrypted = isPGPEncrypted(message.data);\n\n    const tooltip = getEncryptionType(message);\n    const href = displaySignature\n        ? 'https://protonmail.com/support/knowledge-base/digital-signature/'\n        : pgpEncrypted\n        ? 'https://protonmail.com/support/knowledge-base/how-to-use-pgp'\n        : 'https://protonmail.com/support/knowledge-base/what-is-encrypted/';\n    // TODO: add lock-signed lock-warning in design system\n    // const icon = displaySignature ? (message.verified ? 'lock-signed' : 'lock-warning') : 'lock';\n    const icon = 'lock';\n    const internal =\n        isInternal(message.data) || isSentEncrypted(message.data) || isDraft(message.data) || isAuto(message.data);\n    const className = classnames([\n        inputClassName,\n        'no-pointer-events-children',\n        ...(displaySignature\n            ? [\n                  message.verified === 1 && 'valid-sig',\n                  message.verified !== 1 && 'invalid-sig',\n                  internal && 'color-pm-blue', // 'internal',\n                  pgpEncrypted && 'pgp'\n              ]\n            : ['nodecoration color-global-grey flex', internal && 'color-pm-blue'])\n    ]);\n\n    return (\n        <Tooltip title={tooltip} className=\"inbl\">\n            <Href className={className} href={href}>\n                <Icon name={icon} className=\"fill-currentColor\" />\n            </Href>\n        </Tooltip>\n    );\n};\n\nexport default MessageLock;\n","import React, { MouseEvent } from 'react';\nimport { c } from 'ttag';\n\nimport ItemStar from '../../list/ItemStar';\nimport ItemDate from '../../list/ItemDate';\nimport MessageLock from '../MessageLock';\nimport { isSent, isDraft } from '../../../helpers/message/messages';\nimport ItemLabels from '../../list/ItemLabels';\nimport ItemAttachmentIcon from '../../list/ItemAttachmentIcon';\nimport { MessageExtended } from '../../../models/message';\nimport { Label } from '../../../models/label';\n\ninterface Props {\n    message: MessageExtended;\n    labels: Label[];\n    onExpand: () => void;\n}\n\nconst HeaderCollapsed = ({ message, labels, onExpand }: Props) => {\n    const { Name, Address } = (message.data || {}).Sender || {};\n\n    const handleClick = (event: MouseEvent) => {\n        const target = event.target as HTMLElement;\n        if (target.classList.contains('item-star') || target.closest('.item-star')) {\n            event.stopPropagation();\n            return;\n        }\n\n        onExpand();\n    };\n\n    const inOutClass = isSent(message.data) ? 'is-outbound' : 'is-inbound';\n\n    return (\n        <div\n            className={`message-header message-header-collapsed flex flex-nowrap flex-items-center flex-spacebetween cursor-pointer ${inOutClass}`}\n            onClick={handleClick}\n        >\n            <div>\n                <span className=\"mr0-5\">{c('Label').t`From:`}</span>\n                <span className=\"bold mr0-5\" title={Name}>\n                    {Name}\n                </span>\n                <i title={Address}>&lt;{Address}&gt;</i>\n                <MessageLock message={message} />\n            </div>\n            <div>\n                {isDraft(message.data) && <span className=\"badgeLabel-success\">{c('Info').t`Draft`}</span>}\n                <ItemAttachmentIcon element={message.data} />\n                <ItemLabels element={message.data} labels={labels} className=\"mr1\" />\n                <ItemDate className=\"mr1\" element={message.data} mode=\"distance\" />\n                <ItemStar element={message.data} />\n            </div>\n        </div>\n    );\n};\n\nexport default HeaderCollapsed;\n","import React from 'react';\nimport { Icon } from 'react-components';\nimport { c } from 'ttag';\nimport { MessageExtended } from '../../../models/message';\n\ninterface Props {\n    message: MessageExtended;\n    type: string;\n    onLoadImages: () => void;\n}\n\nconst ExtraImages = ({\n    message: { showRemoteImages = true, showEmbeddedImages = true },\n    type,\n    onLoadImages\n}: Props) => {\n    // Flags will not be setted if there is no images\n    if ((type === 'remote' && showRemoteImages !== false) || (type === 'embedded' && showEmbeddedImages !== false)) {\n        return null;\n    }\n\n    return (\n        <div className=\"bg-white rounded bordered-container p0-5 mb0-5 flex flex-nowrap\">\n            <Icon name=\"insert-image\" className=\"fill-global-grey mtauto mbauto\" />\n            <span className=\"pl0-5 pr0-5 flex-item-fluid\">\n                {type === 'remote'\n                    ? c('Action').t`This message contains remote content`\n                    : c('Action').t`This message contains embedded images`}\n            </span>\n            <a onClick={onLoadImages} className=\"bold\">\n                {c('Action').t`Load`}\n            </a>\n        </div>\n    );\n};\n\nexport default ExtraImages;\n","import React from 'react';\nimport { Icon, Href } from 'react-components';\nimport { c } from 'ttag';\nimport { getListUnsubscribe } from '../../../helpers/message/messages';\nimport { MessageExtended } from '../../../models/message';\n\ninterface Props {\n    message: MessageExtended;\n}\n\nconst ExtraUnsubscribe = ({ message: { data: message = {} } }: Props) => {\n    if (/*unsubscribed || */ !getListUnsubscribe(message)) {\n        return null;\n    }\n\n    return (\n        <div className=\"bg-white rounded bordered-container p0-5 mb0-5 flex flex-nowrap\">\n            <Icon name=\"email\" className=\"flex-item-noshrink fill-global-grey mtauto mbauto\" />\n            <span className=\"pl0-5 pr0-5 flex-item-fluid\">{c('Info').t`This message is from a mailing list`}</span>\n            <span className=\"flex-item-noshrink flex\">\n                <Href\n                    className=\"bold mr1 pl0-5 pr0-5\"\n                    href=\"https://protonmail.com/support/knowledge-base/auto-unsubscribe\"\n                >\n                    {c('Info').t`Learn more`}\n                </Href>\n                <a className=\"bold\">{c('Action').t`Unsubscribe`}</a>\n            </span>\n        </div>\n    );\n};\n\nexport default ExtraUnsubscribe;\n","import React from 'react';\nimport ExtraImages from '../extras/ExtraImages';\nimport ExtraUnsubscribe from '../extras/ExtraUnsubscribe';\nimport { MessageExtended } from '../../../models/message';\n\ninterface Props {\n    message: MessageExtended;\n    onLoadRemoteImages: () => void;\n    onLoadEmbeddedImages: () => void;\n}\n\nconst HeaderExtra = ({ message, onLoadRemoteImages, onLoadEmbeddedImages }: Props) => {\n    return (\n        <section className=\"ml1 mr1 mt0-5\">\n            {/* TODO: ExpirationTime */}\n            {/* TODO: SpamScore */}\n            {/* TODO: MIMEParsingFailed */}\n            {/* TODO: hasError */}\n            <ExtraUnsubscribe message={message} />\n            {/* TODO: requireReadReceiptConfirmation */}\n            {/* TODO: isAutoReply */}\n            {/* TODO: attachedPublicKey */}\n            {/* TODO: promptKeyPinning */}\n            {/* TODO: askResign */}\n            <ExtraImages message={message} type=\"remote\" onLoadImages={onLoadRemoteImages} />\n            <ExtraImages message={message} type=\"embedded\" onLoadImages={onLoadEmbeddedImages} />\n        </section>\n    );\n};\n\nexport default HeaderExtra;\n","import React from 'react';\nimport { c } from 'ttag';\nimport { Message } from '../../../models/message';\nimport { getRecipients } from '../../../helpers/message/messages';\nimport { recipientsToRecipientOrGroup, getRecipientOrGroupLabel } from '../../../helpers/addresses';\nimport { ContactGroup, ContactEmail } from '../../../models/contact';\n\ninterface Props {\n    message?: Message;\n    contacts: ContactEmail[];\n    contactGroups: ContactGroup[];\n}\n\nconst HeaderRecipientsSimple = ({ message = {}, contacts, contactGroups }: Props) => {\n    const recipients = getRecipients(message);\n    const recipientsOrGroup = recipientsToRecipientOrGroup(recipients, contactGroups);\n\n    return (\n        <div className=\"flex\">\n            <span className=\"opacity-50 flex-self-vcenter container-to\">{c('Label').t`To:`}</span>\n            <span className=\"flex-self-vcenter mr1\">\n                {recipientsOrGroup.map((recipientOrGroup, index) => {\n                    const label = getRecipientOrGroupLabel(recipientOrGroup, contacts);\n                    return (\n                        <span key={index} className=\"mr0-5\" title={label}>\n                            {label}\n                            {index < recipientsOrGroup.length - 1 && ','}\n                        </span>\n                    );\n                })}\n            </span>\n        </div>\n    );\n};\n\nexport default HeaderRecipientsSimple;\n","import React from 'react';\nimport { c } from 'ttag';\nimport { Message } from '../../../models/message';\nimport { Recipient } from '../../../models/address';\nimport { ContactEmail, ContactGroup } from '../../../models/contact';\nimport { recipientsToRecipientOrGroup, getRecipientLabel, getRecipientGroupLabel } from '../../../helpers/addresses';\nimport { getContactsOfGroup } from '../../../helpers/contacts';\n\ninterface Props {\n    message?: Message;\n    contacts: ContactEmail[];\n    contactGroups: ContactGroup[];\n}\n\ninterface ListProps {\n    list: Recipient[];\n    contacts: ContactEmail[];\n    contactGroups: ContactGroup[];\n}\n\nconst RecipientsList = ({ list, contacts, contactGroups }: ListProps) => {\n    const recipientsOrGroup = recipientsToRecipientOrGroup(list, contactGroups);\n\n    return (\n        <span className=\"flex-self-vcenter flex flex-column\">\n            {recipientsOrGroup.map((recipientOrGroup, index) =>\n                recipientOrGroup.recipient ? (\n                    <span key={index}>\n                        {getRecipientLabel(recipientOrGroup.recipient)}{' '}\n                        <span className=\"opacity-50\">&lt;{recipientOrGroup.recipient.Address}&gt;</span>{' '}\n                    </span>\n                ) : (\n                    <span key={index}>\n                        {getRecipientGroupLabel(\n                            recipientOrGroup?.group,\n                            getContactsOfGroup(contacts, recipientOrGroup?.group?.group?.ID).length\n                        )}\n                    </span>\n                )\n            )}\n        </span>\n    );\n};\n\nconst HeaderRecipientsDetails = ({ message = {}, contacts, contactGroups }: Props) => {\n    const { ToList = [], CCList = [], BCCList = [] } = message;\n\n    return (\n        <div className=\"flex flex-column\">\n            {ToList.length > 0 && (\n                <span className=\"flex\">\n                    <span className=\"opacity-50 container-to\">{c('Label').t`To:`}</span>\n                    <span className=\"flex-self-vcenter mr1\">\n                        <RecipientsList list={ToList} contacts={contacts} contactGroups={contactGroups} />\n                    </span>\n                </span>\n            )}\n            {CCList.length > 0 && (\n                <span className=\"flex\">\n                    <span className=\"opacity-50 container-to\">{c('Label').t`CC:`}</span>\n                    <span className=\"flex-self-vcenter mr1\">\n                        <RecipientsList list={CCList} contacts={contacts} contactGroups={contactGroups} />\n                    </span>\n                </span>\n            )}\n            {BCCList.length > 0 && (\n                <span className=\"flex\">\n                    <span className=\"opacity-50 container-to\">{c('Label').t`BCC:`}</span>\n                    <span className=\"flex-self-vcenter mr1\">\n                        <RecipientsList list={BCCList} contacts={contacts} contactGroups={contactGroups} />\n                    </span>\n                </span>\n            )}\n        </div>\n    );\n};\n\nexport default HeaderRecipientsDetails;\n","import React, { useState, ReactNode } from 'react';\nimport { generateUID, usePopperAnchor, DropdownButton, Dropdown } from 'react-components';\n\ninterface LockableDropdownProps {\n    onClose: () => void;\n    onLock: (lock: boolean) => void;\n}\n\ninterface Props {\n    content?: ReactNode;\n    children: (props: LockableDropdownProps) => ReactNode;\n    autoClose?: boolean;\n    [rest: string]: any;\n}\n\nconst HeaderDropdown = ({ content, children, autoClose, ...rest }: Props) => {\n    const [uid] = useState(generateUID('dropdown'));\n    const [lock, setLock] = useState(false);\n\n    const { anchorRef, isOpen, toggle, close } = usePopperAnchor();\n\n    return (\n        <>\n            <DropdownButton {...rest} buttonRef={anchorRef} isOpen={isOpen} onClick={toggle} caretClassName={null}>\n                {content}\n            </DropdownButton>\n            <Dropdown\n                id={uid}\n                autoClose={autoClose}\n                autoCloseOutside={!lock}\n                isOpen={isOpen}\n                anchorRef={anchorRef}\n                onClose={close}\n            >\n                {children({ onClose: close, onLock: setLock })}\n            </Dropdown>\n        </>\n    );\n};\n\nexport default HeaderDropdown;\n","import React, { MouseEvent, useMemo } from 'react';\nimport { c } from 'ttag';\nimport { Icon, Group, ButtonGroup, useToggle, useContactEmails, useApi, useEventManager } from 'react-components';\nimport humanSize from 'proton-shared/lib/helpers/humanSize';\nimport { unlabelMessages } from 'proton-shared/lib/api/messages';\n\nimport ItemStar from '../../list/ItemStar';\nimport ItemDate from '../../list/ItemDate';\nimport { MESSAGE_ACTIONS } from '../../../constants';\nimport ItemLabels from '../../list/ItemLabels';\nimport ItemLocation from '../../list/ItemLocation';\nimport MoveDropdown from '../../dropdown/MoveDropdown';\nimport LabelDropdown from '../../dropdown/LabelDropdown';\nimport HeaderExtra from './HeaderExtra';\nimport MessageLock from '../MessageLock';\nimport { isSent } from '../../../helpers/message/messages';\nimport HeaderRecipientsSimple from './HeaderRecipientsSimple';\nimport HeaderRecipientsDetails from './HeaderRecipientsDetails';\nimport ItemAttachmentIcon from '../../list/ItemAttachmentIcon';\nimport { MessageExtended } from '../../../models/message';\nimport { Label } from '../../../models/label';\nimport HeaderDropdown from './HeaderDropdown';\nimport { OnCompose } from '../../../containers/ComposerContainer';\nimport { ContactEmail } from '../../../models/contact';\nimport { useContactGroups } from '../../../hooks/useContactGroups';\n\nimport './MessageHeader.scss';\n\ninterface Props {\n    labels?: Label[];\n    mailSettings: any;\n    message: MessageExtended;\n    messageLoaded: boolean;\n    onLoadRemoteImages: () => void;\n    onLoadEmbeddedImages: () => void;\n    onCollapse: () => void;\n    onCompose: OnCompose;\n}\n\nconst HeaderExpanded = ({\n    labels,\n    message,\n    messageLoaded,\n    onLoadRemoteImages,\n    onLoadEmbeddedImages,\n    mailSettings,\n    onCollapse,\n    onCompose\n}: Props) => {\n    const [contacts]: [ContactEmail[]] = useContactEmails();\n    const [contactGroups] = useContactGroups();\n    const { state: showDetails, toggle: toggleDetails } = useToggle();\n    const api = useApi();\n    const { call } = useEventManager();\n\n    const { Name, Address } = (message.data || {}).Sender || {};\n    const inOutClass = isSent(message.data) ? 'is-outbound' : 'is-inbound';\n\n    const handleClick = (event: MouseEvent) => {\n        if ((event.target as HTMLElement).closest('.stop-propagation')) {\n            event.stopPropagation();\n            return;\n        }\n\n        onCollapse();\n    };\n    const handleCompose = (action: MESSAGE_ACTIONS) => () => {\n        onCompose({\n            action,\n            referenceMessage: message\n        });\n    };\n\n    const elements = useMemo(() => [message.data || {}], [message]);\n\n    const handleRemoveLabel = async (labelID: string) => {\n        await api(unlabelMessages({ LabelID: labelID, IDs: [message.data?.ID] }));\n        await call();\n    };\n\n    return (\n        <div className={`message-header message-header-expanded ${inOutClass}`}>\n            <div\n                className=\"flex flex-nowrap flex-items-center flex-spacebetween pt1 pl1 pr1 pb0-5 cursor-pointer\"\n                onClick={handleClick}\n            >\n                <div>\n                    <span className=\"mr0-5\">{c('Label').t`From:`}</span>\n                    <span className=\"bold mr0-5\" title={Name}>\n                        {Name}\n                    </span>\n                    <i title={Address}>&lt;{Address}&gt;</i>\n                    <MessageLock message={message} className=\"stop-propagation\" />\n                </div>\n                <div>\n                    <ItemDate element={message.data || {}} mode=\"distance\" />\n                </div>\n            </div>\n            <div className=\"flex flex-nowrap flex-items-start flex-spacebetween ml1 mr1 mb0-5\">\n                {showDetails ? (\n                    <HeaderRecipientsDetails message={message.data} contacts={contacts} contactGroups={contactGroups} />\n                ) : (\n                    <HeaderRecipientsSimple message={message.data} contacts={contacts} contactGroups={contactGroups} />\n                )}\n                <div>\n                    <ItemAttachmentIcon element={message.data} />\n                    {' ' /* This space is important to keep a small space between elements */}\n                    <ItemLabels max={4} element={message.data} labels={labels} onUnlabel={handleRemoveLabel} />\n                    {' ' /* This space is important to keep a small space between elements */}\n                    <ItemLocation message={message.data} mailSettings={mailSettings} />\n                    {' ' /* This space is important to keep a small space between elements */}\n                    <ItemStar element={message.data} />\n                </div>\n            </div>\n            {showDetails ? (\n                <>\n                    <div className=\"ml1 mr1 mb0-5\">\n                        <span className=\"mr0-5\">{c('Label').t`Size:`}</span>\n                        <span>{humanSize((message.data || {}).Size || 0)}</span>\n                    </div>\n                    <div className=\"ml1 mr1 mb0-5\">\n                        <ItemDate element={message.data || {}} mode=\"full\" />\n                    </div>\n                </>\n            ) : null}\n            <div className=\"flex flex-spacebetween ml1 mr1 mb1 flex-nowrap\">\n                <a onClick={toggleDetails} className=\"bold flex-self-vcenter\">\n                    {showDetails ? c('Action').t`Hide details` : c('Action').t`Show details`}\n                </a>\n                <div>\n                    <Group className=\"mr1\">\n                        <HeaderDropdown autoClose={false} content={<Icon name=\"folder\" />}>\n                            {({ onClose, onLock }) => (\n                                <MoveDropdown elements={elements} onClose={onClose} onLock={onLock} />\n                            )}\n                        </HeaderDropdown>\n                        <HeaderDropdown autoClose={false} content={<Icon name=\"label\" />}>\n                            {({ onClose, onLock }) => (\n                                <LabelDropdown elements={elements} onClose={onClose} onLock={onLock} />\n                            )}\n                        </HeaderDropdown>\n                    </Group>\n\n                    <Group>\n                        <ButtonGroup disabled={!messageLoaded} onClick={handleCompose(MESSAGE_ACTIONS.REPLY)}>\n                            <Icon name=\"reply\" />\n                        </ButtonGroup>\n                        <ButtonGroup disabled={!messageLoaded} onClick={handleCompose(MESSAGE_ACTIONS.REPLY_ALL)}>\n                            <Icon name=\"reply-all\" />\n                        </ButtonGroup>\n                        <ButtonGroup disabled={!messageLoaded} onClick={handleCompose(MESSAGE_ACTIONS.FORWARD)}>\n                            <Icon name=\"forward\" />\n                        </ButtonGroup>\n                    </Group>\n                </div>\n            </div>\n            <HeaderExtra\n                message={message}\n                onLoadRemoteImages={onLoadRemoteImages}\n                onLoadEmbeddedImages={onLoadEmbeddedImages}\n            />\n        </div>\n    );\n};\n\nexport default HeaderExpanded;\n","import { Attachment } from '../../models/attachment';\n\nexport const embeddableTypes = ['image/gif', 'image/jpeg', 'image/png', 'image/bmp'];\n\nexport const isEmbeddedLocal = ({\n    Headers: { 'content-disposition': disposition, embedded } = {}\n}: Attachment = {}) => {\n    return disposition === 'inline' || Number(embedded) === 1;\n};\n\nexport const isEmbeddable = (fileType: string) => embeddableTypes.includes(fileType);\n","export const getAttachment = (attachmentID: string) => ({\n    method: 'get',\n    url: `attachments/${attachmentID}`,\n    output: 'arrayBuffer'\n});\n\nexport const uploadAttachment = (data: {\n    Filename: string;\n    MessageID: string;\n    ContentID: string;\n    MIMEType: string;\n    KeyPackets: Blob;\n    DataPacket: Blob;\n    Signature?: Blob;\n}) => ({\n    method: 'post',\n    url: 'attachments',\n    input: 'form',\n    data\n});\n\nexport const removeAttachment = (attachmentID: string, messageID: string) => ({\n    method: 'delete',\n    url: `attachments/${attachmentID}`,\n    params: { MessageID: messageID }\n});\n","import {\n    binaryStringToArray,\n    concatArrays,\n    decodeBase64,\n    decryptMessage,\n    decryptSessionKey,\n    getMessage,\n    SessionKey,\n    BinaryResult\n} from 'pmcrypto';\n\nimport { getAttachment } from '../../api/attachments';\nimport { MessageExtended } from '../../models/message';\nimport { Attachment } from '../../models/attachment';\nimport { AttachmentsDataCache } from '../../hooks/useAttachments';\nimport { Api } from '../../models/utils';\n\n// Reference: Angular/src/app/attachments/services/AttachmentLoader.js\n\n// TODO: Handle isOutside()\n\nexport const decrypt = async (encryptedBinaryBuffer: ArrayBuffer, sessionKey: SessionKey): Promise<BinaryResult> => {\n    const encryptedBinary = new Uint8Array(encryptedBinaryBuffer);\n\n    try {\n        return decryptMessage({\n            message: await getMessage(encryptedBinary),\n            sessionKeys: [sessionKey],\n            format: 'binary'\n        }) as BinaryResult;\n    } catch (err) {\n        console.error(err);\n        throw err;\n    }\n};\n\nexport const getRequest = ({ ID = '' }: Attachment = {}, api: Api): Promise<ArrayBuffer> => {\n    // if (isOutside()) {\n    //     const decryptedToken = eoStore.getToken();\n    //     const token = $stateParams.tag;\n    //     return Eo.attachment(decryptedToken, token, ID);\n    // }\n\n    return api(getAttachment(ID));\n};\n\nexport const getSessionKey = async (attachment: Attachment, message: MessageExtended): Promise<SessionKey> => {\n    // if (attachment.sessionKey) {\n    //     return attachment;\n    // }\n\n    const keyPackets = binaryStringToArray(decodeBase64(attachment.KeyPackets) || '');\n    const options = { message: await getMessage(keyPackets), privateKeys: message.privateKeys as any };\n\n    // if (isOutside()) {\n    //     options.passwords = [eoStore.getPassword()];\n    // } else {\n    //     options.privateKeys = keysModel.getPrivateKeys(message.AddressID);\n    // }\n\n    const sessionKey = await decryptSessionKey(options);\n\n    if (sessionKey === undefined) {\n        throw new Error('Error while decrypting session keys');\n    }\n\n    return sessionKey;\n};\n\nexport const getDecryptedAttachment = async (\n    attachment: Attachment,\n    message: MessageExtended,\n    api: Api\n): Promise<BinaryResult> => {\n    const encryptedBinary = await getRequest(attachment, api);\n    try {\n        const sessionKey = await getSessionKey(attachment, message);\n        return await decrypt(encryptedBinary, sessionKey);\n    } catch (error) {\n        const blob = concatArrays([\n            binaryStringToArray(decodeBase64(attachment.KeyPackets) || ''),\n            new Uint8Array(encryptedBinary)\n        ]);\n        // Fallback download raw attachment\n        throw { data: attachment, binary: blob, error };\n    }\n};\n\nexport const getAndVerify = async (\n    attachment: Attachment = {},\n    message: MessageExtended = {},\n    reverify = false,\n    cache: AttachmentsDataCache,\n    api: Api\n): Promise<BinaryResult> => {\n    let attachmentdata: BinaryResult;\n\n    const attachmentID = attachment.ID || '';\n\n    if (attachment.Preview) {\n        return { data: attachment.Preview, filename: 'preview', signatures: [] };\n    }\n\n    if (cache.has(attachmentID)) {\n        attachmentdata = cache.get(attachmentID) as BinaryResult;\n    } else {\n        attachmentdata = await getDecryptedAttachment(attachment, message, api);\n\n        if (reverify) {\n            // await verify(attachment, newAttachment, message, signatures, signatureCache));\n        }\n    }\n\n    cache.set(attachmentID, attachmentdata);\n\n    return attachmentdata;\n};\n\nexport const get = (\n    attachment: Attachment = {},\n    message: MessageExtended = {},\n    cache: AttachmentsDataCache,\n    api: Api\n): Promise<BinaryResult> => {\n    const reverify = false;\n    return getAndVerify(attachment, message, reverify, cache, api);\n};\n\nexport const reverify = (\n    attachment: Attachment = {},\n    message: MessageExtended = {},\n    cache: AttachmentsDataCache,\n    api: Api\n): Promise<BinaryResult> => {\n    const reverify = true;\n    return getAndVerify(attachment, message, reverify, cache, api);\n};\n","import JSZip from 'jszip';\nimport downloadFile from 'proton-shared/lib/helpers/downloadFile';\nimport { splitExtension } from 'proton-shared/lib/helpers/file';\n\nimport { MessageExtended, Message } from '../../models/message';\nimport { Attachment } from '../../models/attachment';\nimport { getAndVerify } from './attachmentLoader';\nimport { AttachmentsDataCache } from '../../hooks/useAttachments';\nimport { Api, Binary } from '../../models/utils';\n\ninterface Download {\n    attachment: Attachment;\n    data: Binary;\n    isError?: boolean;\n}\n\n/**\n * Format attachment for the download\n */\nconst formatDownload = async (\n    attachment: Attachment,\n    message: MessageExtended,\n    cache: AttachmentsDataCache,\n    api: Api\n): Promise<Download> => {\n    try {\n        const { data } = await getAndVerify(attachment, message, false, cache, api);\n        return {\n            attachment,\n            data: data as Binary\n        };\n    } catch (e) {\n        // If the decryption fails we download the encrypted version\n        if (e.data) {\n            return {\n                attachment: {\n                    Name: `${attachment.Name}.pgp`,\n                    MIMEType: 'application/pgp',\n                    ID: attachment.ID\n                },\n                data: e.data,\n                isError: true\n            };\n        }\n        throw e;\n    }\n};\n\n/**\n * Generate a download for an attachment\n */\nconst generateDownload = async (download: Download /*, message: MessageExtended*/) => {\n    // TODO: uncomment\n    // try {\n    //     await checkAllSignatures(message, [attachment]);\n    // } catch (e) {\n    //     // swallow as the user is informed already by a confirmation and actually caused this error\n    //     return;\n    // }\n\n    downloadFile(new Blob([download.data], { type: download.attachment.MIMEType }), download.attachment.Name);\n};\n\n/**\n * Download an attachment\n */\nexport const download = async (\n    attachment: Attachment,\n    message: MessageExtended,\n    cache: AttachmentsDataCache,\n    api: Api\n): Promise<void> => {\n    const download = await formatDownload(attachment, message, cache, api);\n\n    // TODO: uncomment\n    // if (download.isError) {\n    //     if (!(await allowDownloadBrokenAtt())) {\n    //         return; // We don't want to download it\n    //     }\n    // }\n\n    return generateDownload(download);\n};\n\n/**\n * The attachment's Name is not unique we need a unique name in order to make the zip.\n * The lib doesn't allow duplicates\n */\nconst formatDownloadAll = async (\n    message: MessageExtended,\n    cache: AttachmentsDataCache,\n    api: Api\n): Promise<Download[]> => {\n    const { Attachments = [] } = message.data || {};\n    const { list }: { list: Attachment[] } = Attachments.reduce(\n        (acc: any, att) => {\n            const name = att.Name || '';\n            if (!acc.map[name]) {\n                acc.map[name] = { index: 0 };\n            } else {\n                acc.map[name].index++;\n                const [fileName, ext] = splitExtension(name);\n                const newName = `${fileName} (${acc.map[name].index}).${ext}`;\n                att.Name = newName;\n            }\n            acc.list.push(att);\n            return acc;\n        },\n        { list: [], map: {} }\n    );\n\n    return Promise.all(list.map((att) => formatDownload(att, message, cache, api)));\n};\n\nconst getZipAttachmentName = (message: Message = {}) => `Attachments-${message.Subject}.zip`;\n\n/**\n * Download all attachments as a zipfile\n */\nexport const downloadAll = async (\n    message: MessageExtended = {},\n    cache: AttachmentsDataCache,\n    api: Api\n): Promise<void> => {\n    const list = await formatDownloadAll(message, cache, api);\n\n    // TODO: uncomment\n    // try {\n    //     await checkAllSignatures(message, list);\n    // } catch (e) {\n    //     // swallow as the user is informed already by a confirmation and actually caused this error\n    //     return;\n    // }\n\n    // TODO: uncomment\n    // // Detect if we have at least one error\n    // if (list.some(({ isError }) => isError)) {\n    //     if (!(await allowDownloadBrokenAtt())) {\n    //         return; // We don't want to download it\n    //     }\n    // }\n\n    const zip = new JSZip();\n    list.forEach(({ attachment: { Name = '' }, data }) => zip.file(Name, data));\n    const content = await zip.generateAsync({ type: 'blob' });\n    downloadFile(content, getZipAttachmentName(message.data));\n};\n","import { useCache } from 'react-components';\nimport { BinaryResult } from 'pmcrypto';\nimport { Attachment } from '../models/attachment';\n\nconst CACHE_KEY = 'Attachments';\n\nexport interface BlobInfo {\n    url: string;\n    isContentLocation: boolean;\n}\n\nexport type AttachmentsDataCache = Map<string, BinaryResult>;\nexport type AttachmentsBlobsCache = Map<string, BlobInfo>;\nexport type AttachmentsCidsCache = Map<string, Map<string, Attachment>>;\n// export type AttachmentsUploadQueue = Map<string, File[]>;\n\nexport interface AttachmentsCache {\n    data: AttachmentsDataCache;\n    blobs: AttachmentsBlobsCache;\n    cids: AttachmentsCidsCache;\n    // uploads: AttachmentsUploadQueue;\n}\n\nexport const useAttachmentsCache = (): AttachmentsCache => {\n    const globalCache = useCache();\n\n    if (!globalCache.has(CACHE_KEY)) {\n        globalCache.set(CACHE_KEY, {\n            data: new Map(),\n            blobs: new Map(),\n            cids: new Map()\n            // uploads: []\n        });\n    }\n\n    return globalCache.get(CACHE_KEY);\n};\n","import React, { useState } from 'react';\nimport humanSize from 'proton-shared/lib/helpers/humanSize';\nimport { Icon, classnames, useApi } from 'react-components';\nimport { MessageExtended } from '../../models/message';\nimport { isEmbeddedLocal } from '../../helpers/attachment/attachments';\nimport { Attachment } from '../../models/attachment';\nimport { download } from '../../helpers/attachment/attachmentDownloader';\nimport { useAttachmentsCache } from '../../hooks/useAttachments';\n\n// Reference: Angular/src/templates/attachments/attachmentElement.tpl.html\n\nconst OUTER_MAP_CLASSNAME: { [key: string]: string } = {\n    zip: 'file-rar-zip',\n    mp3: 'file-video',\n    javascript: 'file-unknown',\n    vcard: 'file-unknown',\n    xls: 'file-xls',\n    mov: 'file-video',\n    pdf: 'file-pdf',\n    power: 'file-ppt',\n    word: 'file-doc'\n};\n\nconst INNER_MAP_CLASSNAME: { [key: string]: string } = {\n    'pgp-keys': 'fa-key'\n};\n\nconst getFileIconType = ({ MIMEType = '' }: Attachment) => {\n    const key = Object.keys(OUTER_MAP_CLASSNAME).find((key) => MIMEType.includes(key));\n    return OUTER_MAP_CLASSNAME[key || ''] || '';\n};\n\nconst getInnerFileIconType = ({ MIMEType = '' }: Attachment) => {\n    const key = Object.keys(INNER_MAP_CLASSNAME).find((key) => MIMEType.includes(key));\n    return INNER_MAP_CLASSNAME[key || ''] || '';\n};\n\ninterface Props {\n    attachment: Attachment;\n    message: MessageExtended;\n}\n\nconst MessageAttachment = ({ attachment, message }: Props) => {\n    const cache = useAttachmentsCache();\n    const api = useApi();\n    const [showLoader, setShowLoader] = useState(false);\n    const [showInstant, setShowInstant] = useState(false);\n\n    const humanAttachmentSize = humanSize(attachment.Size);\n\n    const outerIcon = getFileIconType(attachment) || 'file-image';\n    const single = !getInnerFileIconType(attachment);\n    const isEmbedded = isEmbeddedLocal(attachment);\n\n    const classNames = classnames([\n        'listAttachments-icon listAttachments-signature-icon mauto file-outer-icon',\n        single && 'single',\n        isEmbedded && 'is-embedded'\n    ]);\n\n    const clickHandler = async () => {\n        setShowLoader(true);\n        await download(attachment, message, cache.data, api);\n        setShowLoader(false);\n        setShowInstant(true);\n    };\n\n    const icon = showLoader ? '' : showInstant ? 'download' : outerIcon;\n    const showInner = !single && !showLoader && !showInstant;\n\n    return (\n        <li className=\"mr1 mb1\">\n            <a\n                className=\"message-attachment inline-flex flex-nowrap mw100 pm-button listAttachments-item relative no-pointer-events-children\"\n                title={`${attachment.Name} ${humanAttachmentSize}`}\n                onClick={clickHandler}\n            >\n                <span className=\"flex flex-item-noshrink message-attachmentIcon relative flex\">\n                    <Icon name={icon} size={20} className={classNames} aria-busy={showLoader} />\n                    {showInner && <Icon name=\"key\" className=\"file-inner-icon mauto\" />}\n                </span>\n                <span className=\"inbl ellipsis flex flex-column message-attachmentInfo\">\n                    <span className=\"bl ellipsis mw100\">{attachment.Name}</span>\n                    <span className=\"bl message-attachmentSize\">{humanAttachmentSize}</span>\n                </span>\n            </a>\n        </li>\n    );\n};\n\nexport default MessageAttachment;\n","import React, { useState } from 'react';\nimport { c, msgid } from 'ttag';\nimport { Icon, useApi } from 'react-components';\nimport humanSize from 'proton-shared/lib/helpers/humanSize';\n\nimport { attachmentsSize, getAttachments } from '../../helpers/message/messages';\nimport MessageAttachment from './MessageAttachment';\nimport { MessageExtended } from '../../models/message';\nimport { useAttachmentsCache } from '../../hooks/useAttachments';\nimport { downloadAll } from '../../helpers/attachment/attachmentDownloader';\n\ninterface Props {\n    message: MessageExtended;\n}\n\nconst MessageFooter = ({ message }: Props) => {\n    const cache = useAttachmentsCache();\n    const api = useApi();\n    const [showLoader, setShowLoader] = useState(false);\n    const [showInstant, setShowInstant] = useState(false);\n\n    const humanAttachmentsSize = humanSize(attachmentsSize(message.data));\n    const attachments = getAttachments(message.data);\n    const numAttachments = attachments.length;\n    const numEmbedded = message.numEmbedded || 0;\n    const numPureAttachments = numAttachments - numEmbedded;\n\n    const handleDownloadAll = async () => {\n        setShowLoader(true);\n        await downloadAll(message, cache.data, api);\n        setShowLoader(false);\n        setShowInstant(true);\n    };\n\n    return (\n        <div className=\"message-attachments\">\n            <div className=\"flex flex-spacebetween mb1\">\n                <span className=\"title\">\n                    <strong className=\"listAttachments-title-size mr0-5\">{humanAttachmentsSize}</strong>\n                    {numPureAttachments > 0 && (\n                        <span className=\"listAttachments-title-files mr0-5\">\n                            <Icon name=\"attach\" className=\"mr0-5\" />\n                            {c('Info').ngettext(\n                                msgid`${numPureAttachments} file attached`,\n                                `${numPureAttachments} files attached`,\n                                numPureAttachments\n                            )}\n                        </span>\n                    )}\n                    {numEmbedded > 0 && (\n                        <span className=\"listAttachments-title-embedded mr0-5\">\n                            {/* TODO: color=\"pm-blue\" */}\n                            <Icon name=\"file-image\" className=\"mr0-5\" />\n                            {c('Info').ngettext(\n                                msgid`${numEmbedded} embedded image`,\n                                `${numEmbedded} embedded images`,\n                                numEmbedded\n                            )}\n                        </span>\n                    )}\n                </span>\n                {numAttachments > 0 && (\n                    <div>\n                        <button type=\"button\" onClick={handleDownloadAll} className=\"link strong mr0-5\">\n                            {c('Download attachments').t`Download all`}\n                        </button>\n                        {(showInstant || showLoader) && (\n                            <Icon name={showInstant ? 'download' : ''} aria-busy={showLoader} />\n                        )}\n                    </div>\n                )}\n            </div>\n\n            <ul className=\"listAttachments-list unstyled flex mb0\">\n                {attachments.map((attachment) => (\n                    <MessageAttachment key={attachment.ID} attachment={attachment} message={message} />\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default MessageFooter;\n","// import getRandomValues from 'get-random-values';\n\n// import { EMAIL_FORMATING } from '../app/constants';\n\nexport const EMAIL_FORMATING = {\n    OPEN_TAG_AUTOCOMPLETE: '‹',\n    CLOSE_TAG_AUTOCOMPLETE: '›',\n    OPEN_TAG_AUTOCOMPLETE_RAW: '<',\n    CLOSE_TAG_AUTOCOMPLETE_RAW: '>'\n};\n\nconst {\n    OPEN_TAG_AUTOCOMPLETE,\n    CLOSE_TAG_AUTOCOMPLETE,\n    OPEN_TAG_AUTOCOMPLETE_RAW,\n    CLOSE_TAG_AUTOCOMPLETE_RAW\n} = EMAIL_FORMATING;\n\nexport const MAP_TAGS = {\n    [OPEN_TAG_AUTOCOMPLETE_RAW]: OPEN_TAG_AUTOCOMPLETE,\n    [CLOSE_TAG_AUTOCOMPLETE_RAW]: CLOSE_TAG_AUTOCOMPLETE,\n    [OPEN_TAG_AUTOCOMPLETE]: OPEN_TAG_AUTOCOMPLETE_RAW,\n    [CLOSE_TAG_AUTOCOMPLETE]: CLOSE_TAG_AUTOCOMPLETE_RAW\n};\n\nexport const escape = (string: string) => {\n    const UNESCAPE_HTML_REGEX = /[&<>\"']/g;\n    const HTML_ESCAPES = {\n        '&': '&amp;',\n        '<': '&lt;',\n        '>': '&gt;',\n        '\"': '&quot;',\n        \"'\": '&#39;'\n    };\n\n    return string.replace(UNESCAPE_HTML_REGEX, HTML_ESCAPES as any);\n};\n\nexport const unescape = (string: string) => {\n    const ESCAPED_HTML_REGEX = /&(?:amp|lt|gt|quot|#39);/g;\n    const HTML_UNESCAPES = {\n        '&amp;': '&',\n        '&lt;': '<',\n        '&gt;': '>',\n        '&quot;': '\"',\n        '&#39;': \"'\"\n    };\n\n    return string.replace(ESCAPED_HTML_REGEX, HTML_UNESCAPES as any);\n};\n\n/**\n * Replace custom unicode escape for chevrons by default\n * Replace <> (for a tag) via unicode or reverse it\n * mode undefined for toUnicode, reverse for unicode -> <|>\n */\nexport function unicodeTag(input = '', mode: 'reverse' | undefined) {\n    if (mode === 'reverse') {\n        const matchTagUnicodeOpenClose = () => new RegExp(`${OPEN_TAG_AUTOCOMPLETE}|${CLOSE_TAG_AUTOCOMPLETE}`, 'ig');\n\n        return input.replace(matchTagUnicodeOpenClose(), (match) => MAP_TAGS[match] || '');\n    }\n\n    const matchTagOpenClose = () => new RegExp(`${OPEN_TAG_AUTOCOMPLETE_RAW}|${CLOSE_TAG_AUTOCOMPLETE_RAW}`, 'ig');\n    return input.replace(matchTagOpenClose(), (match) => MAP_TAGS[match] || '');\n}\n\n/**\n * Converts the integer to a 32-bit base encoded string in 2s complement format, so that it doesn't contain a sign \"-\"\n * @param val The integer to be encoded\n * @param bits The amount of bits per character\n */\nexport const toUnsignedString = (val: number, bits: number) => {\n    const base = 1 << bits;\n    const wordCount = Math.ceil(32 / bits);\n    const bottomBits = (wordCount - 1) * bits;\n\n    const bottom = val & ((1 << bottomBits) - 1);\n    const top = val >>> bottomBits;\n    if (top === 0) {\n        return bottom.toString(base);\n    }\n    const topString = top.toString(base);\n    const bottomString = bottom.toString(base);\n    const padLength = wordCount - topString.length - bottomString.length;\n    const middleString = '0'.repeat(padLength);\n    return topString + middleString + bottomString;\n};\n\n/**\n * Unescape a string in hex or octal encoding.\n * See https://www.w3.org/International/questions/qa-escapes#css_other for all possible cases.\n */\nexport const unescapeCSSEncoding = (str: string) => {\n    // Regexp declared inside the function to reset its state (because of the global flag).\n    // cf https://stackoverflow.com/questions/1520800/why-does-a-regexp-with-global-flag-give-wrong-results\n    const UNESCAPE_CSS_ESCAPES_REGEX = /\\\\([0-9A-Fa-f]{1,6}) ?/g;\n    const UNESCAPE_HTML_DEC_REGEX = /&#(\\d+)(;|(?=[^\\d;]))/g;\n    const UNESCAPE_HTML_HEX_REGEX = /&#x([0-9A-Fa-f]+)(;|(?=[^\\d;]))/g;\n    const OTHER_ESC = /\\\\(.)/g;\n\n    const handleEscape = (radix: number) => (ignored: any, val: string) =>\n        String.fromCodePoint(Number.parseInt(val, radix));\n    /*\n     * basic unescaped named sequences: &amp; etcetera, lodash does not support a lot, but that is not a problem for our case.\n     * Actually handling all escaped sequences would mean keeping track of a very large and ever growing amount of named sequences\n     */\n    const namedUnescaped = unescape(str);\n    // lodash doesn't unescape &#160; or &#xA0; sequences, we have to do this manually:\n    const decUnescaped = namedUnescaped.replace(UNESCAPE_HTML_DEC_REGEX, handleEscape(10));\n    const hexUnescaped = decUnescaped.replace(UNESCAPE_HTML_HEX_REGEX, handleEscape(16));\n    // unescape css backslash sequences\n    const strUnescapedHex = hexUnescaped.replace(UNESCAPE_CSS_ESCAPES_REGEX, handleEscape(16));\n\n    return strUnescapedHex.replace(OTHER_ESC, (_, char) => char);\n};\n\nexport const ucFirst = (input = '') => {\n    return input.charAt(0).toUpperCase() + input.slice(1);\n};\n\n/**\n * Extract value between chevrons\n * @param str ex: Andy <andy@pm.me>\n * @return ex: andy@pm.me\n */\nexport const extractChevrons = (str = '') => {\n    const CHEVRONS_REGEX = /<([^>]+)>/g;\n    const [, match = ''] = CHEVRONS_REGEX.exec(str) || [];\n    return match;\n};\n\n/**\n * @{link https://css-tricks.com/snippets/javascript/htmlentities-for-javascript/}\n */\nexport const htmlEntities = (str = '') => {\n    return String(str)\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;');\n};\n\nexport const uniqID = () => {\n    return `pt${Math.random()\n        .toString(32)\n        .slice(2, 12)}-${Date.now()}`;\n};\n\n/**\n * Generates a contact UID of the form 'proton-web-uuid'\n * @return {String}\n */\nexport function generateUID() {\n    const s4 = () => {\n        return Math.floor((1 + Math.random()) * 0x10000)\n            .toString(16)\n            .substring(1);\n    };\n\n    return `proton-web-${s4()}${s4()}-${s4()}-${s4()}-${s4()}-${s4()}${s4()}${s4()}`;\n}\n\n/**\n * Generate a random string.\n * @param {Number} length\n * @return {string}\n */\n// export const getRandomString = (length) => {\n//     const charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n//     let i;\n//     let result = '';\n\n//     const values = getRandomValues(new Uint32Array(length));\n\n//     for (i = 0; i < length; i++) {\n//         result += charset[values[i] % charset.length];\n//     }\n\n//     return result;\n// };\n\nexport const replaceLineBreaks = (content: string) => {\n    return content.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />');\n};\n","import DOMPurify from 'dompurify';\n\nimport { unicodeTag, unescapeCSSEncoding, escape } from './string';\n\n/*\nThis is valid\n    - background:&#117;r&#108;(\n    - background:url&lpar;\n    - etc.\n*/\nconst CSS_URL = '((url)(\\\\(|&(#40|#x00028|lpar);))';\nconst REGEXP_URL_ATTR = new RegExp(CSS_URL, 'gi');\nconst { LIST_PROTON_ATTR, MAP_PROTON_ATTR } = [\n    'data-src',\n    'src',\n    'srcset',\n    'background',\n    'poster',\n    'xlink:href'\n].reduce(\n    (acc, attr) => {\n        acc.LIST_PROTON_ATTR.push(`proton-${attr}`);\n        acc.MAP_PROTON_ATTR[attr] = true;\n        return acc;\n    },\n    {\n        LIST_PROTON_ATTR: [] as string[],\n        MAP_PROTON_ATTR: Object.create(null)\n    }\n);\n\nconst CONFIG: { [key: string]: any } = {\n    default: {\n        ALLOWED_URI_REGEXP: /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|blob|xmpp|data):|[^a-z]|[a-z+.\\-]+(?:[^a-z+.\\-:]|$))/i, // eslint-disable-line no-useless-escape\n        ADD_TAGS: ['proton-src', 'base', 'proton-svg'],\n        ADD_ATTR: ['target', 'proton-src'],\n        FORBID_TAGS: ['style', 'input', 'form'],\n        FORBID_ATTR: ['srcset']\n    },\n    // When we display a message we need to be global and return more informations\n    raw: { WHOLE_DOCUMENT: true, RETURN_DOM: true },\n    html: { WHOLE_DOCUMENT: false, RETURN_DOM: true },\n    protonizer: {\n        FORBID_ATTR: {},\n        ADD_ATTR: ['target'].concat(LIST_PROTON_ATTR),\n        WHOLE_DOCUMENT: true,\n        RETURN_DOM: true\n    },\n    content: {\n        ALLOW_UNKNOWN_PROTOCOLS: true,\n        WHOLE_DOCUMENT: false,\n        RETURN_DOM: true,\n        RETURN_DOM_FRAGMENT: true\n    }\n};\n\n/**\n * Escape some WTF from the CSSParser, cf spec files\n * @param  {String} style\n * @return {String}\n */\nconst escapeURLinStyle = (style: string) => {\n    // handle the case where the value is html encoded, e.g.:\n    // background:&#117;rl(&quot;https://i.imgur.com/WScAnHr.jpg&quot;)\n\n    const unescapedEncoding = unescapeCSSEncoding(style);\n    const escapeFlag = unescapedEncoding !== style;\n\n    const escapedStyle = unescapedEncoding.replace(/\\\\r/g, 'r').replace(REGEXP_URL_ATTR, 'proton-url(');\n\n    if (escapedStyle === unescapedEncoding) {\n        // nothing escaped: just return input\n        return style;\n    }\n\n    return escapeFlag ? escape(escapedStyle) : escapedStyle;\n};\n\nfunction beforeSanitizeElements(node: Element) {\n    // We only work on elements\n    if (node.nodeType !== 1) {\n        return node;\n    }\n\n    Array.from(node.attributes).forEach((type) => {\n        const item = type.name;\n        if (MAP_PROTON_ATTR[item]) {\n            node.setAttribute('proton-' + item, node.getAttribute(item) || '');\n            node.removeAttribute(item);\n        }\n\n        if (item === 'style') {\n            const escaped = escapeURLinStyle(node.getAttribute('style') || '');\n            node.setAttribute('style', escaped);\n        }\n    });\n\n    return node;\n}\n\nexport const purifyHTMLHooks = (active: boolean) => {\n    if (active) {\n        return DOMPurify.addHook('beforeSanitizeElements', beforeSanitizeElements);\n    }\n\n    DOMPurify.removeHook('beforeSanitizeElements');\n};\n\nconst getConfig = (type: string) => ({ ...CONFIG.default, ...(CONFIG[type] || {}) });\n\nconst clean = (mode: string) => {\n    const config = getConfig(mode);\n\n    return (input: string | Node): string | Node => {\n        DOMPurify.clearConfig();\n        const value = DOMPurify.sanitize(input, config);\n        purifyHTMLHooks(false); // Always remove the hooks\n        if (mode === 'str') {\n            // When trusted types is available, DOMPurify returns a trustedHTML object and not a string, force cast it.\n            return value + '';\n        }\n        return value;\n    };\n};\n\n/**\n * Custom config only for messages\n */\nexport const message = clean('str') as (input: string) => string;\n\n/**\n * Sanitize input with a config similar than Squire + ours\n */\nexport const html = clean('raw') as (input: Node) => Node;\n\n/**\n * Sanitize input with a config similar than Squire + ours\n */\nexport const protonizer = (input: string, attachHooks: boolean): Node => {\n    const process = clean('protonizer');\n    purifyHTMLHooks(attachHooks);\n    return process(input) as Node;\n};\n\n/**\n * Sanitize input and returns the whole document\n\n */\nexport const content = clean('content') as (input: string) => Node;\n\n/**\n * Default config we don't want any custom behaviour\n */\nexport const input = (str: string) => DOMPurify.sanitize(str, {}) + '';\n\nexport const toTagUnicode = unicodeTag;\n","// const JUICE_OPTIONS = {\n//     applyAttributesTableElements: false\n// };\n\n// const DECLASSIFY_OPTIONS = {\n//     ignore: BLOCKQUOTE_SELECTORS.filter((selector) => selector.startsWith('.'))\n//         .map((selector) => selector.replace('.', ''))\n//         .concat(/proton-.*/)\n//         .concat(/protonmail.*/)\n// };\n\n/**\n * Iterates through all parent nodes (including current), comparing against cb.\n * @param {DOMNode} node\n * @param {Function} cb\n * @returns {*}\n */\n// eslint-disable-next-line import/prefer-default-export\n// export const findParent = (node, cb) => {\n//     let traverse = node;\n//     if (traverse && cb(traverse)) {\n//         return traverse;\n//     }\n//     while (traverse.parentNode) {\n//         traverse = traverse.parentNode;\n//         if (cb(traverse)) {\n//             return traverse;\n//         }\n//     }\n// };\n\n/**\n * Inline css into an element and remove all obsolete class names.\n * @param {String} html\n * @returns {String}\n */\n// export const inlineCss = (html = '') => {\n//     try {\n//         return declassify.process(juice(html, JUICE_OPTIONS), DECLASSIFY_OPTIONS);\n//     } catch (err) {\n//         console.error(err);\n//         return html;\n//     }\n// };\n\n/**\n * Set an element to be hidden.\n * @param {DOMNode} el\n * @param {Boolean} value Hidden or shown\n */\n// export const setHidden = (el, value = false) => {\n//     el.style.display = value ? 'none' : '';\n// };\n\n/**\n * Force redraw of an element.\n * Copied from https://stackoverflow.com/a/3485654\n * @param {HTMLElement} el\n */\n// export const forceRedraw = (el) => {\n//     el.style.display = 'none';\n//     // eslint-disable-next-line no-unused-expressions\n//     el.offsetHeight;\n//     el.style.display = '';\n// };\n\nexport const escapeSrc = (value = '') => value.replace(/ src=/g, ' data-src=');\nexport const unescapeSrc = (value = '') => value.replace(/ data-src=/g, ' src=');\n\n/**\n * Toggle class on element depending on conditon\n * @param {DOMNode} element\n * @param {String} className\n * @param {Boolean} value\n */\n// export const toggle = (element, className, value) => {\n//     element.classList.contains(className) === value || element.classList.toggle(className);\n// };\n\n/**\n * Returns whether the element is a node.\n * See {@link https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType}\n * @param {DOMNode} node\n * @returns {boolean}\n */\n// export const isElement = (node) => node && node.nodeType === 1;\n\n/**\n * Get children configuration for a node/fragment\n * As IE is not able to deal with the dom API we need to \"emulate it\"\n * @param  {Element} node Can be a fragment\n * @return {Object}      {children: <Array>, first:<Element>, last:<Element>}\n */\n// export const getChildrenElements = (node) => {\n//     if (!isIE11() || node.firstElementChild) {\n//         return {\n//             first: node.firstElementChild,\n//             last: node.lastElementChild,\n//             children: node.children\n//         };\n//     }\n//     const children = _.filter(node.childNodes, isElement);\n\n//     return {\n//         first: children[0],\n//         last: _.last(children),\n//         children\n//     };\n// };\n\n/**\n * Test if the string contains HTML data\n * It doesn't have loading resources side effects\n * @param {String} str\n * @return {Object}\n */\n// export const isHTML = (str = '') => {\n//     const doc = new DOMParser().parseFromString(str, 'text/html');\n//     const firstChild = doc.body.childNodes[0];\n//     return {\n//         isHtml: Array.from(doc.body.childNodes).some(isElement),\n//         isWrapped: !!isElement(firstChild)\n//     };\n// };\n\nexport const matches = (element: Element, selector: string) =>\n    (element.matches || (element as any).msMatchesSelector).call(element, selector);\n\nexport const wrap = (element: Element, html: string) => {\n    const container = document.createElement('div');\n    container.innerHTML = html;\n\n    const wrapper = container.firstChild as Element;\n\n    wrapper.innerHTML = element.outerHTML;\n\n    element.parentNode?.insertBefore(wrapper, element);\n    element.remove();\n};\n\nexport const parseInDiv = (content: string) => {\n    const div = document.createElement('div');\n    div.innerHTML = content;\n    return div;\n};\n","import { uniqID } from '../string';\nimport { protonizer as purifyHTML } from '../purify';\nimport { parseInDiv } from '../dom';\n\n/*\n * match attributes or elements with svg, xlink, srcset, src, background, poster.\n * the regex checks that the element/attribute is actually in an element by looking forward and seeing if it\n * ends properly with a >\n *\n * Another assumption in these regex are: all attributes use the \" quotes instead of the ' quote. This is satisfied\n * by the previous standardization steps\n */\nconst SVG_LIST = ['svg'];\nconst FORBIDDEN_SVG = `(${SVG_LIST.join('|')})`;\nconst NO_SPECIALS = '([^\"><\\\\\\\\]|\\\\\\\\[^><])';\nconst NO_QUOTS = '(\\\\\\\\.|[^\"\\\\\\\\])';\nconst HTML_STRING = `(\"${NO_QUOTS}*\")`;\nconst VERIFY_ELEMENT_END = `(?=(${NO_SPECIALS}|${HTML_STRING})*>)`;\nconst VERIFY_UNIQUE = '([^-])';\n\n// Ensure that the forbidden attributes are not already escaped with proton- by checking that there is no '-' character in front of them.\nconst REGEXP_SVG_BREAK = new RegExp(VERIFY_UNIQUE + FORBIDDEN_SVG + VERIFY_ELEMENT_END, 'gi');\n\n/**\n * Parsing base64 is expensive and can create a crash.\n * Here we can reduce input string from many Mb to less than 100kb, which is way easier to escape.\n * So instead of escaping everything with it too, we remove them from the HTML\n * and we replace it with an attribute with an uniq hash so we can load them\n * later for the user via injectMessageMedia component.\n * Store it inside inside a cache, an Angular Factory as we will need it for:\n *     - lazy load the image post render message\n *     - open the composer we need to lazy load it here too\n *\n * Source: regexp https://www.regextester.com/95505\n * @param  {String} input       Raw unescaped HTML\n * @param  {Object} cache       cacheBase64 factory\n * @param  {Boolean} activeCache\n * @return {String}\n */\nfunction removeBase64(input, cache, activeCache) {\n    /* eslint no-useless-escape: \"off\" */\n    return input.replace(/src=\"data:image\\/([a-zA-Z]*);base64,([^\\\"]*)\\\"/g, (match) => {\n        const hash = uniqID();\n        activeCache && cache.put(hash, match);\n        return `data-proton-replace-base=\"${hash}\"`;\n    });\n}\n\n/**\n * Parse the dom and find all matching base64 custom tags we added\n * then replace them by the valid SRC for the base64.\n * @param  {Element} node\n * @param  {Object} cache cacheBase64 service\n * @return {String}       HTML\n */\nexport function attachBase64Parser(node, cache) {\n    const nodes = [...node.querySelectorAll('[data-proton-replace-base]')];\n    nodes.forEach((node) => {\n        const hash = node.getAttribute('data-proton-replace-base');\n\n        // Clean the string and remove \\n else it won't load inside the browser\n        const src = (cache.get(hash) || '')\n            .replace(/^src=\"/, '')\n            .replace(/\"$/, '')\n            .replace(/\\n/, '');\n        src && node.setAttribute('src', src);\n        node.removeAttribute('data-proton-replace-base');\n    });\n    return node.innerHTML;\n}\n\n/**\n * Attach escaped base64 to the dom if the input is a txt\n * @param  {String} input HTML\n * @param  {Object} cache cacheBase64 service\n * @return {String}       HTML\n */\nexport function attachBase64(input, cache) {\n    // const [$parser] = $.parseHTML(`<div>${input}</div>`);\n    const div = parseInDiv(input);\n    return attachBase64Parser(div, cache);\n}\n\nfunction escapeSVG(input = '') {\n    return input.replace(REGEXP_SVG_BREAK, '$1proton-$2');\n}\n\n/**\n * Escape content for a message\n * Content can be a Document when we open a message, it's useful\n * in order to bind the base if it exists\n * @param  {MessageExtended} message         Content to escape\n * @param  {Options} options.action           Type of action\n * @return {MessageExtended}                            Parser\n */\nexport const transformEscape = async ({ raw, action }, { cache, activeCache = true } = {}) => {\n    const value = removeBase64(raw, cache, activeCache);\n    const activeHooks = action !== 'user.inject';\n    return { document: purifyHTML(escapeSVG(value), activeHooks) };\n};\n","import { matches } from '../dom';\n\nconst PROTOCOLS = ['ftp://', 'http://', 'https://', 'xmpp:', 'tel:', 'callto:'];\nconst ALL_PROTOCOLS = PROTOCOLS.concat(['mailto:']);\nconst MAP = PROTOCOLS.reduce((acc, key) => ((acc[key] = true), acc), {});\nconst EXCLUDE_ANCHORS = ':not([href=\"\"]):not([href^=\"#\"])';\n\nconst getNormalizedHref = (link) => {\n    return link\n        .getAttribute('href')\n        .trim()\n        .toLowerCase();\n};\n\nconst linkUsesProtocols = (link) => ALL_PROTOCOLS.some((proto) => getNormalizedHref(link).startsWith(proto));\n\nconst isEmptyAnchor = (link) => {\n    const href = getNormalizedHref(link);\n    return href === '' || MAP[href];\n};\n\nconst noReferrerInfo = (link) => {\n    link.setAttribute('rel', 'noreferrer nofollow noopener');\n};\n\n/**\n * make links open in a new tab\n * @param  {Array} links Collection of links\n * @return {Array}       links\n */\nconst httpInNewTab = (link) => {\n    if (matches(link, EXCLUDE_ANCHORS)) {\n        const href = link.getAttribute('href') || '';\n        const hasHTTP = href.indexOf('http') === 0;\n        const isRelative = href.indexOf('/') === 0;\n        // Prevent issue for Edge/IE A security problem cf https://jsfiddle.net/dpaoxoks/7/\n        if (hasHTTP || isRelative) {\n            link.setAttribute('target', '_blank');\n        }\n    }\n};\n\n/**\n * turn these relative links into absolute links\n * (example.com/a -> http://example.com)\n * @param  {Array} links Collection of links\n * @return {Array}       links\n */\nconst sanitizeRelativeHttpLinks = (link) => {\n    if (matches(link, EXCLUDE_ANCHORS) && !linkUsesProtocols(link) && link.nodeName === 'A') {\n        // link.href is the absolute value of the link: mail.protonmail.com is prepended, use getAttribute\n        const url = link.getAttribute('href');\n\n        link.setAttribute('href', `http://${url}`);\n    }\n};\n\n/*\n * Anchors will work on the whole protonmail page, so we need to disable them\n * opening them in a new tab will just open a empty page.\n */\nconst disableAnchors = (link) => {\n    isEmptyAnchor(link) && (link.style.pointerEvents = 'none');\n};\n\nexport const transformLinks = ({ document }) => {\n    const links = [...document.querySelectorAll('[href]')];\n\n    links.forEach((link) => {\n        httpInNewTab(link);\n        noReferrerInfo(link);\n        sanitizeRelativeHttpLinks(link);\n        disableAnchors(link);\n    });\n\n    return { document };\n};\n","import mimemessage from 'mimemessage';\n\nimport { ucFirst } from '../string';\nimport { Attachment } from '../../models/attachment';\nimport { transformEscape } from '../transforms/transformEscape';\n\nexport const REGEXP_CID_START = /^cid:/g;\n\n/**\n * Flush the container HTML and return the container\n */\nexport const getBodyParser = (content = '', activeCache = false) => {\n    return transformEscape(\n        { raw: content, action: '' },\n        {\n            activeCache,\n            isDocument: false,\n            cache: {}\n        }\n    );\n};\n\n/**\n * Removes enclosing quotes (\"\", '', &lt;&gt;) from a string\n */\nconst trimQuotes = (input: string) => {\n    const value = `${input || ''}`.trim(); // input can be a number\n\n    if (['\"', \"'\", '<'].indexOf(value.charAt(0)) > -1 && ['\"', \"'\", '>'].indexOf(value.charAt(value.length - 1)) > -1) {\n        return value.substr(1, value.length - 2);\n    }\n\n    return value;\n};\n\nexport const readCID = (Headers: any = {}) => {\n    if (Headers['content-id']) {\n        return trimQuotes(Headers['content-id']);\n    }\n\n    // We can find an image without cid so base64 the location\n    if (Headers['content-location']) {\n        return trimQuotes(Headers['content-location']);\n    }\n\n    return '';\n};\n\n/**\n * Find embedded element in div\n */\nexport const findEmbedded = (cid: string, document: Element) => {\n    // If cid is an empty string, it can give a false positive\n    if (!cid) {\n        return [];\n    }\n    const selector = [\n        `img[src=\"${cid}\"]`,\n        `img[src=\"cid:${cid}\"]`,\n        `img[data-embedded-img=\"${cid}\"]`,\n        `img[data-embedded-img=\"cid:${cid}\"]`,\n        `img[data-src=\"cid:${cid}\"]`,\n        `img[proton-src=\"cid:${cid}\"]`\n    ];\n    return [...document.querySelectorAll(selector.join(', '))];\n};\n\n/**\n * Extract embedded attachment from body\n */\nexport const extractEmbedded = (attachments: Attachment[] = [], document: Element) => {\n    return attachments.filter(({ Headers = {} }) => {\n        const cid = readCID(Headers);\n        const nodes = findEmbedded(cid, document);\n\n        return nodes.length;\n    });\n};\n\n/**\n * Convert raw headers to better format handled by the mimemessage lib\n */\nexport const convertMimeHeaders = (config: { [key: string]: string } = {}) => {\n    const headers = Object.keys(config)\n        .filter((key) => key.startsWith('content'))\n        .reduce((acc, key) => {\n            const [, type] = key.split('-');\n            acc[`content${ucFirst(type)}`] = config[key];\n            return acc;\n        }, Object.create(null));\n\n    return {\n        formatted: mimemessage.factory(headers),\n        headers\n    };\n};\n\nexport const getAttachementName = (Headers: { [key: string]: string } = {}) => {\n    if (Headers['content-disposition'] !== 'inline') {\n        const { formatted = {} as any } = convertMimeHeaders(Headers);\n        const { params: { filename = '' } = {} } = formatted.contentDisposition() || {};\n        if (filename) {\n            return filename.replace(/\"/g, '');\n        }\n    }\n\n    return '';\n};\n\n/**\n * Get the url for an embedded image\n */\nexport const srcToCID = (node: Element) => {\n    const attribute = node.getAttribute('data-embedded-img') || '';\n    return attribute.replace(REGEXP_CID_START, '');\n};\n","import { Message } from '../../models/message';\nimport { Attachment } from '../../models/attachment';\nimport { readCID } from './embeddedUtils';\n\nconst CIDList: { [ID: string]: { [cid: string]: Attachment } } = {};\n\nexport const getMessageCIDs = ({ ID = '' }: Message = {}) => CIDList[ID] || {};\n\nexport const containsMessageCIDs = ({ ID = '' }: Message = {}) => Object.keys(CIDList[ID] || {}).length > 0;\n\nexport const addMessageCID = ({ ID = '' }: Message, { Headers = {}, Name = '' }: Attachment) => {\n    !CIDList[ID] && (CIDList[ID] = {});\n    // !message.NumEmbedded && (message.NumEmbedded = 0);\n\n    const cid = readCID(Headers);\n    Headers.embedded = '1';\n    // message.NumEmbedded++;\n    CIDList[ID][cid] = { Headers, Name };\n};\n\n/**\n * Check if the cid exist for a specific message\n */\nexport const existMessageCID = (message: Message, cid: string) => {\n    return !!getMessageCIDs(message)[cid];\n};\n","import { MessageExtended, Message } from '../../models/message';\nimport { extractEmbedded, getAttachementName, REGEXP_CID_START } from '../embedded/embeddedUtils';\nimport { addMessageCID, getMessageCIDs } from './embeddedStoreCids';\nimport { Attachment } from '../../models/attachment';\n\nexport const getAttachment = (message: Message = {}, src = '') => {\n    const cid = src.replace(REGEXP_CID_START, '');\n    return getMessageCIDs(message)[cid] || {};\n};\n\nexport const find = (message: MessageExtended) => {\n    const list = (message.data || {}).Attachments || [];\n\n    if (!list.length || !message.document) {\n        return [];\n    }\n\n    const embeddedAttachments = extractEmbedded(list, message.document);\n\n    embeddedAttachments.forEach((attachment) => {\n        addMessageCID(message.data || {}, attachment);\n    });\n\n    return embeddedAttachments;\n};\n\n/**\n * Find all attachements inline\n */\nexport const listInlineAttachments = (message: MessageExtended) => {\n    const list = (message.data || {}).Attachments || [];\n    const MAP_CID = getMessageCIDs(message.data);\n\n    return Object.keys(MAP_CID).reduce((acc, cid) => {\n        // Extract current attachement content-id\n        const contentId = ((MAP_CID[cid] || {}).Headers || {})['content-id'];\n        const contentName = getAttachementName(MAP_CID[cid].Headers);\n\n        // Find the matching attachement\n        const attachment = list.find(({ Headers = {}, Name = '' } = {}) => {\n            if (Headers['content-id']) {\n                return Headers['content-id'] === contentId;\n            }\n\n            if (Headers['content-location']) {\n                return Name === contentName;\n            }\n\n            return false;\n        });\n\n        attachment && acc.push({ cid, attachment });\n        return acc;\n    }, [] as { cid: string; attachment: Attachment }[]);\n};\n","import { Message } from '../../models/message';\nimport { isDraft } from '../message/messages';\nimport { getMessageCIDs } from './embeddedStoreCids';\n\nexport interface BlobInfo {\n    url: string;\n    isContentLocation: boolean;\n}\n\nconst PREFIX_DRAFT = 'draft_';\n\nconst urlCreator = () => window.URL || window.webkitURL;\n\nconst Blobs: { [cid: string]: BlobInfo } = {};\nconst MAP_BLOBS: { [key: string]: string[] } = {};\n\nconst getHashKey = (msg: Message) => {\n    const draft = isDraft(msg);\n    const prefix = draft ? PREFIX_DRAFT : '';\n    return `${prefix}${msg.ConversationID || msg.ID}`.trim();\n};\n\n/**\n * The URL.revokeObjectURL() static method releases an existing object URL\n * which was previously created by calling URL.createObjectURL().\n * Call this method when you've finished using a object URL, in order to let\n * the browser know it doesn't need to keep the reference to the file\n * any longer.\n */\nfunction deallocateList(key: string) {\n    const list = MAP_BLOBS[key] || [];\n    list.forEach((cid) => {\n        if (Blobs[cid]) {\n            urlCreator().revokeObjectURL(Blobs[cid].url);\n            // Remove the Blob ref from our store\n            delete Blobs[cid];\n        }\n    });\n    delete MAP_BLOBS[key];\n}\n\n/**\n * blob URLs never get deallocated automatically--\n * we manage deallocation to avoid a massive memory leak\n * once we navigate away from a conversation\n * eg. this can be triggered from the conversations controller\n */\nexport function deallocate(message: Message = {}) {\n    const key = getHashKey(message);\n    Object.keys(MAP_BLOBS)\n        .filter((k) => k !== key && k.indexOf(PREFIX_DRAFT) !== 0) // Do nothing for draft and itself\n        .forEach(deallocateList);\n}\n\n/**\n * Use the Blobs array to store CIDs url reference\n * once the attachment has been decrypted\n * so we can re-use the blob instead of decrypting\n * this should be rewritted a bit to work with\n * the service store\n */\nexport const store = (message: Message = {}, cid = '') => {\n    const Attachments = getMessageCIDs(message);\n    const { Headers = {} } = Attachments[cid] || {};\n\n    const key = getHashKey(message);\n\n    MAP_BLOBS[key] = MAP_BLOBS[key] || [];\n\n    return (data: Uint8Array, MIME = '') => {\n        // If you switch to another conversation the MAP_BLOBS won't exist anymore\n        if (MAP_BLOBS[key]) {\n            // Turn the decrypted attachment data into a blob.\n            let blob: Blob | null = new Blob([data], { type: MIME });\n            // Generate the URL\n            let imageUrl: string | null = urlCreator().createObjectURL(blob);\n            // Store the generated URL\n            Blobs[cid] = {\n                url: imageUrl,\n                isContentLocation:\n                    typeof Headers['content-location'] !== 'undefined' && typeof Headers['content-id'] === 'undefined'\n            };\n            // this is supposed to remove the blob so it\n            // can be garbage collected. we dont save it (for now)\n            blob = null;\n            imageUrl = null;\n\n            MAP_BLOBS[key].push(cid);\n            // dispatcher.embeddedStore('store', { cid });\n        }\n    };\n};\n\nexport const getBlob = (cid: string) => Blobs[cid] || {};\n\nexport const hasBlob = (cid: string) => !!Blobs[cid];\n","// import { REGEX_IMAGE_EXTENSION } from 'proton-shared/lib/constants';\n\n/**\n * Convert base64 string to Image\n * @param  {String} base64str\n * @return {Object}\n */\n// export const toImage = (base64str) => {\n//     return new Promise((resolve) => {\n//         const image = new Image();\n\n//         image.onload = () => {\n//             resolve(image);\n//         };\n\n//         image.src = base64str;\n//     });\n// };\n\n/**\n * Resizes a picture to a maximum length/width (based on largest dimension)\n * @param {String} original Base64 representation of image to be resized.\n * @param {Number} maxSize Amount of pixels that largest dimention (whether width or length) should have.\n * @param {String} finalMimeType Mime type of the resulting resized image.\n * @param {Number} encoderOptions A Number between 0 and 1 indicating image quality if the requested type is image/jpeg or image/webp\n * @return {Promise} receives base64 string of resized image.\n */\n// export const resizeImage = (original, maxSize, finalMimeType = 'image/jpeg', encoderOptions = 1) => {\n//     return toImage(original).then((image) => {\n//         // Resize the image\n//         const canvas = document.createElement('canvas');\n//         let width = image.width;\n//         let height = image.height;\n\n//         if (width > height && width > maxSize) {\n//             height *= maxSize / width;\n//             width = maxSize;\n//         } else if (height > maxSize) {\n//             width *= maxSize / height;\n//             height = maxSize;\n//         }\n\n//         canvas.width = width;\n//         canvas.height = height;\n//         canvas.getContext('2d').drawImage(image, 0, 0, width, height);\n\n//         return canvas.toDataURL(finalMimeType, encoderOptions);\n//     });\n// };\n\n/**\n * Extract the mime and base64 str from a base64 image.\n * @param {String} str\n * @returns {Promise} {mime, base64}\n */\n// const extractBase64Image = (str = '') => {\n//     const [mimeInfo = '', base64 = ''] = (str || '').split(',');\n//     const [, mime = ''] = mimeInfo.match(/:(.*?);/) || [];\n//     return { mime, base64 };\n// };\n\n/**\n * Convert a base 64 str to an uint8 array.\n * @param base64str\n * @returns {Uint8Array}\n */\n// const toUint8Array = (base64str) => {\n//     const bstr = atob(base64str);\n//     let n = bstr.length;\n//     const u8arr = new Uint8Array(n);\n//     while (n--) {\n//         u8arr[n] = bstr.charCodeAt(n);\n//     }\n//     return u8arr;\n// };\n\n/**\n * Convert a data URL to a Blob Object\n * @param {String} base64str\n * @param {String} filename\n * @return {Object}\n */\n// export const toFile = (base64str, filename = 'file') => {\n//     const { base64, mime } = extractBase64Image(base64str);\n//     return new File([toUint8Array(base64)], filename, { type: mime });\n// };\n\n/**\n * Convert a data URL to a Blob Object\n * @param  {String} base64str\n * @return {Blob}\n */\n// export const toBlob = (base64str) => {\n//     const { base64, mime } = extractBase64Image(base64str);\n//     return new Blob([toUint8Array(base64)], { type: mime });\n// };\n\n/**\n * Down size image to reach the max size limit\n * @param  {String} base64str\n * @param  {} maxSize in bytes\n * @param  {String} mimeType\n * @param  {Number} encoderOptions\n * @return {Promise}\n */\n// export const downSize = (base64str, maxSize, mimeType = 'image/jpeg', encoderOptions = 1) => {\n//     const process = (source, max) => {\n//         return resizeImage(source, max, mimeType, encoderOptions).then((resized) => {\n//             const { size } = toBlob(resized);\n\n//             if (size <= maxSize) {\n//                 return resized;\n//             }\n\n//             return process(resized, Math.round(max * 0.9));\n//         });\n//     };\n\n//     return toImage(base64str).then(({ height, width }) => process(base64str, height > width ? height : width));\n// };\n\n/**\n * Returns true if the URL is an inline embedded image.\n * @param {String} src\n * @returns {boolean}\n */\nexport const isInlineEmbedded = (src = '') => src.startsWith('data:');\n\n/**\n * Returns true if the URL is an embedded image.\n * @param {String} src\n * @returns {boolean}\n */\nexport const isEmbedded = (src = '') => src.startsWith('cid:');\n\n/**\n * Prepare image source to be display\n * @param {String} value\n * @return {String}\n */\n// export const formatImage = (value = '') => {\n//     if (!value) {\n//         return value;\n//     }\n\n//     if (REGEX_IMAGE_EXTENSION.test(value)) {\n//         return value;\n//     }\n\n//     if (value.startsWith('data:')) {\n//         return value;\n//     }\n\n//     return `data:image/png;base64,${value}`;\n// };\n","import { MessageExtended } from '../../models/message';\nimport { escapeSrc, unescapeSrc, wrap } from '../dom';\nimport { Api } from '../../models/utils';\nimport { ENCRYPTED_STATUS } from '../../constants';\nimport { listInlineAttachments, getAttachment } from './embeddedFinder';\nimport { hasBlob, store, getBlob, BlobInfo } from './embeddedStoreBlobs';\nimport { get } from '../attachment/attachmentLoader';\nimport { Attachment } from '../../models/attachment';\nimport { noop } from 'proton-shared/lib/helpers/function';\nimport { wait } from 'proton-shared/lib/helpers/promise';\nimport { getMessageCIDs } from './embeddedStoreCids';\nimport { findEmbedded, srcToCID } from './embeddedUtils';\nimport { isInlineEmbedded, isEmbedded } from '../image';\nimport { AttachmentsDataCache } from '../../hooks/useAttachments';\n\nconst EMBEDDED_CLASSNAME = 'proton-embedded';\n\nconst wrapImage = (img: Element) => wrap(img, '<div class=\"image loading\"></div>');\n\n/**\n * Get the url for an embedded image\n */\nexport const getUrl = (node: Element) => {\n    // If it's an inline embedded img, just return the src because that contains the img data.\n    const src = node.getAttribute('data-embedded-img') || '';\n    if (isInlineEmbedded(src)) {\n        return src;\n    }\n    const cid = srcToCID(node);\n    const { url = '' } = getBlob(cid);\n    return url;\n};\n\n/**\n * Prepare embedded images in the document\n */\nexport const prepareImages = (message: MessageExtended, show: boolean, isReplyForward: boolean, isOutside: boolean) => {\n    if (!message.document) {\n        return;\n    }\n\n    let showEmbedded = message.showEmbeddedImages;\n\n    const images = [...message.document.querySelectorAll('img[proton-src]')];\n\n    images.forEach((image) => {\n        const src = image.getAttribute('proton-src') || undefined;\n        image.setAttribute('referrerPolicy', 'no-referrer');\n        const attachment = getAttachment(message.data, src);\n\n        if (!image.classList.contains(EMBEDDED_CLASSNAME)) {\n            image.classList.add(EMBEDDED_CLASSNAME);\n        }\n\n        if (!image.parentElement) {\n            return;\n        }\n\n        // check if the attachment exist before processing\n        if (!(attachment && Object.keys(attachment).length > 0)) {\n            /**\n             * If the attachment does not exist and the proton-src attribute\n             * starts with cid:, it's an embedded image that does not exist in the list of attachments,\n             * or is not a valid image.\n             * So remove the element from the DOM because it will not display anything useful anyway.\n             */\n            if (isEmbedded(src)) {\n                image.parentElement.removeChild(image);\n            }\n            // If it's not an inline embedded image, it's either an embedded image or a remote image. So stop here.\n            // Otherwise, continue so that the inline image is detected as an embedded image.\n            if (!isInlineEmbedded(src)) {\n                return;\n            }\n        }\n\n        if (show) {\n            image.setAttribute('data-embedded-img', src || '');\n            /**\n             * Since the image is supposed to be displayed, remove the proton-src attribute.\n             * Then it will be parsed by the embeddedParser in the blob or cid direction.\n             */\n            image.removeAttribute('proton-src');\n\n            // Auto load image inside a reply draft\n            if (isReplyForward) {\n                // `getUrl` may return undefined here because the embedded attachments have not yet been decrypted and put in the blob store.\n                const url = getUrl(image);\n                // only set it if it is defined, otherwise the unescapeSrc will add two src=\"\"\n                url && image.setAttribute('src', url);\n                return;\n            }\n\n            // We don't need to add it outside\n            if (!isOutside) {\n                !image.parentElement.classList.contains('loading') && wrapImage(image);\n                image.removeAttribute('src');\n            }\n            return;\n        }\n\n        showEmbedded = false;\n\n        // Inline embedded images does not have an attachment.\n        if (attachment) {\n            image.setAttribute('alt', attachment.Name || '');\n        }\n    });\n\n    return showEmbedded;\n};\n\n/**\n * launch and forget: we don't need to do anything with the result\n * wait a bit before disabling the invalidsignature modal\n * this allows the user to see the change icon popup.\n *\n * More elaborate explanation:\n * We're addressing a fairly rare UX thing here.\n * We want to avoid showing a popup saying the confirmmodal when the signature is invalid to often.\n * For instance, when embedding images you can see that the icon says the signature is invalid,\n * so we don't show this icon (as the user can know it before clicking).\n *\n * However, if you would click on the embedded attachment before it has downloaded the attachment, it will not show this icon.\n * So consider you clicking on this attachment when it didn't verify the attachment yet.\n * Then just after that the attachment loader downloaded the attachment and\n * verified it signature and sets invalidSignature.askAgain to false.\n * Then you don't know that this happened, but in this case you should get a popup.\n *\n * Note when thinking  this is just a race condition: also consider the case where you are clicking\n * on the icon and it shows the icon just before you click: it's not humanly possible to see that it\n * changed and is not valid. So even in that case we want to show the icon.\n */\nconst triggerSigVerification = (\n    message: MessageExtended,\n    attachments: Attachment[],\n    api: Api,\n    cache: Map<string, any>\n) => {\n    /*\n     * launch and forget: we don't need to do anything with the result\n     * wait a bit before disabling the invalidsignature modal\n     * this allows the user to see the change icon popup.\n     */\n    Promise.all(\n        attachments.map(async (attachment) => {\n            await get(attachment, message, cache, api);\n            await wait(1000);\n            // invalidSignature.askAgain(message, attachment, false);\n        })\n    );\n};\n\n/**\n * It works on data-src attribute for this reason:\n * Don't set the src attribute since it's evaluated and cid:cid create an error (#3330)\n * NET::ERR_UNKNOWN_URL_SCHEME because src=\"cid:xxxx\" is not valid HTML\n * This function expects the content to be properly unescaped later.\n */\nconst actionDirection: { [key: string]: (nodes: Element[], cid: string, url: string) => void } = {\n    blob(nodes: Element[], cid: string, url: string) {\n        nodes.forEach((node) => {\n            // Always remove the `data-` src attribute set by the cid function, otherwise it can get displayed if the user does not auto load embedded images.\n            node.removeAttribute('data-src');\n            if (node.getAttribute('proton-src')) {\n                return;\n            }\n            node.setAttribute('data-src', url);\n            node.setAttribute('data-embedded-img', cid);\n            node.classList.add(EMBEDDED_CLASSNAME);\n        });\n    },\n    cid(nodes: Element[], cid: string) {\n        nodes.forEach((node) => {\n            node.removeAttribute('data-embedded-img');\n            node.removeAttribute('src');\n            node.setAttribute('data-src', `cid:${cid}`);\n        });\n    }\n};\n\n/**\n * Parse the content to inject the generated blob src\n */\nexport const mutateHTML = (message: MessageExtended, direction: string) => {\n    if (!message.document) {\n        return;\n    }\n\n    const document = message.document;\n\n    document.innerHTML = escapeSrc(document.innerHTML);\n\n    Object.keys(getMessageCIDs(message.data)).forEach((cid) => {\n        const nodes = findEmbedded(cid, document);\n\n        if (nodes.length) {\n            const { url = '' } = getBlob(cid);\n\n            (actionDirection[direction] || noop)(nodes, cid, url);\n        }\n    });\n\n    document.innerHTML = unescapeSrc(document.innerHTML);\n};\n\nexport const decrypt = async (message: MessageExtended, api: Api, cache: AttachmentsDataCache) => {\n    const list = listInlineAttachments(message);\n    const attachments = list.map(({ attachment }) => attachment);\n    // const show = message.showEmbeddedImages === true || mailSettings.ShowImages & SHOW_IMAGES.EMBEDDED;\n    // const sigList = show ? list : list.filter(({ attachment }) => cache.has(attachment.ID));\n\n    // For a draft if we close it before the end of the attachment upload, there are no keyPackets\n    // pgp attachments do not have keypackets.\n\n    const promises = list\n        .filter(({ attachment }) => attachment.KeyPackets || attachment.Encrypted === ENCRYPTED_STATUS.PGP_MIME)\n        .filter(({ cid }) => !hasBlob(cid))\n        .map(async ({ cid, attachment }) => {\n            const storeAttachement = store(message.data, cid);\n            const buffer = await get(attachment, message, cache, api);\n            return storeAttachement(buffer.data, attachment.MIMEType);\n        });\n\n    if (!promises.length) {\n        // all cid was already stored, we can resolve\n        triggerSigVerification(message, attachments, api, cache);\n        return {};\n    }\n\n    await Promise.all(promises);\n\n    // We need to trigger on the original list not after filtering: after filter they are just stored\n    // somewhere else\n    triggerSigVerification(message, attachments, api, cache);\n    return list.reduce((acc, { cid }) => {\n        acc[cid] = getBlob(cid);\n        return acc;\n    }, {} as { [cid: string]: BlobInfo });\n};\n","import { SHOW_IMAGES } from 'proton-shared/lib/constants';\nimport { Computation } from '../../hooks/useMessage';\nimport { find } from '../embedded/embeddedFinder';\nimport { mutateHTML, decrypt, prepareImages } from '../embedded/embeddedParser';\nimport { MESSAGE_ACTIONS } from '../../constants';\n\nexport const transformEmbedded: Computation = async (message, { attachmentsCache, api, mailSettings }) => {\n    const { ShowImages = 0 } = mailSettings as { ShowImages: number };\n    const show = message.showEmbeddedImages === true || ShowImages === SHOW_IMAGES.EMBEDDED;\n    const isReplyForward =\n        message.action === MESSAGE_ACTIONS.REPLY ||\n        message.action === MESSAGE_ACTIONS.REPLY_ALL ||\n        message.action === MESSAGE_ACTIONS.FORWARD;\n    const isOutside = false; // TODO: const isEoReply = $state.is('eo.reply');\n\n    const attachments = find(message);\n    const showEmbeddedImages = prepareImages(message, show, isReplyForward, isOutside);\n\n    const direction = 'blob';\n\n    if (attachments.length === 0 || !show) {\n        /**\n         * cf #5088 we need to escape the body again if we forgot to set the password First.\n         * Prevent unescaped HTML.\n         *\n         * Don't do it everytime because it's \"slow\" and we don't want to slow down the process.\n         */\n        if (isOutside) {\n            mutateHTML(message, direction);\n        }\n    } else {\n        await decrypt(message, api, attachmentsCache.data);\n        mutateHTML(message, direction);\n    }\n\n    return { document: message.document, showEmbeddedImages, numEmbedded: attachments.length };\n};\n","export const transformWelcome = ({ document }) => {\n    // For the welcome email, we need to change the path to the welcome image lock\n    const images = [...document.querySelectorAll('img[src=\"/img/app/welcome_lock.gif\"]')];\n\n    if (images.length > 0) {\n        images.forEach((image) => {\n            image.src = '/assets/img/emails/welcome_lock.gif';\n        });\n    }\n\n    return { document };\n};\n","import { c } from 'ttag';\n\nconst BLOCKQUOTE_SELECTORS = [\n    '.protonmail_quote',\n    '.gmail_quote',\n    '.yahoo_quoted',\n    '.gmail_extra',\n    '.moz-cite-prefix',\n    // '.WordSection1',\n    '#isForwardContent',\n    '#isReplyContent',\n    '#mailcontent:not(table)',\n    '#origbody',\n    '#reply139content',\n    '#oriMsgHtmlSeperator',\n    'blockquote[type=\"cite\"]'\n];\n\nconst quotes = BLOCKQUOTE_SELECTORS.map((selector) => `${selector}:not(:empty)`).join(',');\n\nexport const transformBlockquotes = ({ document: doc }) => {\n    const blockquotes = [...doc.querySelectorAll(quotes)];\n    const parent = doc.textContent;\n    let found = false;\n\n    blockquotes.forEach((blockquote) => {\n        if (!found) {\n            const child = blockquote.textContent;\n            const [before = '', after = ''] = parent.split(child);\n\n            if (child.length < parent.length && before.length && !after.length) {\n                const button = document.createElement('button');\n                const title = c('Title').t`Show previous message`;\n\n                button.className = 'pm-button pm-button--small more proton-message-blockquote-toggle';\n                button.textContent = '...'; // perf issue we can't use <icon> as we don't want to compile.\n                button.setAttribute('title', title);\n\n                // For some messages, the content of the message before <button> is not inside <div>\n                blockquote.parentNode.insertBefore(document.createElement('BR'), blockquote);\n                blockquote.parentNode.insertBefore(button, blockquote);\n\n                found = true;\n            }\n        }\n    });\n\n    return { document: doc };\n};\n","import { flow, filter, reduce } from 'lodash/fp';\n\nimport { SHOW_IMAGES } from 'proton-shared/lib/constants';\n\nconst WHITELIST = ['notify@protonmail.com'];\n\n// const { dispatcher } = dispatchers(['message.open']);\n\nconst ATTRIBUTES = ['url', 'xlink:href', 'srcset', 'src', 'svg', 'background', 'poster'].map(\n    (name) => `proton-${name}`\n);\n\nconst REGEXP_FIXER = (() => {\n    const str = ATTRIBUTES.map((key) => {\n        if (key === 'proton-src') {\n            return `${key}=(?!\"(cid|data):)`;\n        }\n        return key;\n    }).join('|');\n    return `(${str})`;\n})();\n\n/**\n * Find inside the current parser DOM every content escaped\n * and build a list of Object <attribute>:<value> but don't parse them if\n * it is an embedded content.\n * As we have many differents attributes we create a list\n * @param  {Node} html parser\n * @return {Array}\n */\nfunction prepareInjection(html) {\n    // Query selector\n    const selector = ATTRIBUTES.map((attr) => {\n        const [key] = attr.split(':');\n        return `[${key}]`;\n    })\n        .concat('[style]')\n        .join(', ');\n\n    /**\n     * Create a map of every proton-x attribute and its value\n     * @param  {Node} node Current element\n     * @return {Object}\n     */\n    const mapAttributes = (node) => {\n        return flow(\n            filter((attr) => ATTRIBUTES.indexOf(attr.name) !== -1),\n            reduce((acc, attr) => ((acc[`${attr.name}`] = attr.value), acc), {})\n        )(node.attributes);\n    };\n\n    const $list = [].slice.call(html.querySelectorAll(selector));\n\n    // Create a list containing a map of every attributes (proton-x) per node\n    const attributes = $list.reduce((acc, node) => {\n        if (node.hasAttribute('proton-src')) {\n            const src = node.getAttribute('proton-src');\n\n            // We don't want to unescape attachments or inline embedded as we are going to process them later\n            if (src.indexOf('cid:') !== -1) {\n                return acc;\n            }\n            if (src.indexOf('data:') !== -1) {\n                return acc;\n            }\n        }\n        acc.push(mapAttributes(node));\n        return acc;\n    }, []);\n\n    return attributes;\n}\n\nexport const transformRemote = (\n    { data: message = {}, document = null, showRemoteImages: inputShowImages = false },\n    { action = null, mailSettings }\n) => {\n    const regex = new RegExp(REGEXP_FIXER, 'g');\n    const showImages =\n        inputShowImages ||\n        !!(mailSettings.ShowImages & SHOW_IMAGES.REMOTE || WHITELIST.includes(message.Sender.Address));\n    const content = document.innerHTML;\n    const hasImages = regex.test(content);\n\n    if (showImages) {\n        // If load:manual we use a custom directive to inject the content\n        if (action === 'user.inject') {\n            // TODO: uncoment this block\n            // const list = prepareInjection(html);\n            prepareInjection(document);\n            // const hasSVG = /svg/.test(html.innerHTML);\n            // if (list.length || hasSVG) {\n            //     dispatcher['message.open']('remote.injected', { action, list, message, hasSVG });\n            // }\n        } else {\n            document.innerHTML = content.replace(regex, (match, $1) => $1.substring(7));\n        }\n    }\n    return { document, showRemoteImages: hasImages ? showImages : undefined };\n};\n","export const transformStylesheet = ({ document }) => {\n    const firstElement = document.firstElementChild;\n\n    /**\n     * Some emails from ex: tripit contains a position absolute on the container\n     * => hack to prevent margin on android/ios\n     * @{@link https://twitter.com/HTeuMeuLeu/status/852110032045035520}\n     * Gmail changes the dom too.\n     */\n    if (firstElement && /absolute/.test(firstElement.style.position)) {\n        firstElement.style.position = 'inherit';\n    }\n    return { document };\n};\n","const ELEMENTS = [\n    {\n        selector: 'a:not([href^=\"http\"])',\n        attribute: 'href'\n    },\n    {\n        selector: 'img:not([src^=\"http\"]):not([proton-src^=\"cid\"])',\n        attribute: 'proton-src'\n    }\n];\n\nconst getBaseURL = (base) => {\n    // Make sure base has trailing slash\n    const baseUrl = base.getAttribute('href');\n    if (baseUrl.substr(-1, 1) !== '/') {\n        return `${baseUrl}/`;\n    }\n    return baseUrl;\n};\n\n/**\n * Append base url to any href/src if we need to\n * @param  {Node} html HTML document from DOMPurify\n * @return {Node}      Dom based\n */\nexport const transformBase = ({ document }) => {\n    const base = document.querySelector('base');\n\n    if (!base || !base.getAttribute('href')) {\n        return { document };\n    }\n\n    // Make sure base has trailing slash\n    const BASE_URL = getBaseURL(base);\n\n    const bindAttribute = (node, key, value = '') => {\n        if (!value.startsWith('http')) {\n            node.setAttribute(key, BASE_URL + value);\n        }\n    };\n\n    ELEMENTS.forEach(({ selector, attribute }) => {\n        [...document.querySelectorAll(selector)].forEach((el) => {\n            const keyproton = `proton-${attribute}`;\n            const value = el.getAttribute(attribute) || '';\n            const ptValue = el.getAttribute(keyproton) || '';\n            // Ensure we don't add a useless / if we already have one\n            const url = value.charAt(0) === '/' ? value.slice(1) : value;\n\n            /*\n                Bind the value only when we need, if there is a proton-src we don't need\n                to add the src else it will generate a request to the domain\n             */\n            !ptValue && bindAttribute(el, attribute, url);\n            ptValue && bindAttribute(el, keyproton, ptValue);\n        });\n    });\n\n    return { document };\n};\n","import { BinaryResult } from 'pmcrypto';\n\nimport { Message } from '../../models/message';\nimport { ENCRYPTED_STATUS } from '../../constants';\nimport { Attachment, AttachmentMime } from '../../models/attachment';\nimport { AttachmentsDataCache } from '../../hooks/useAttachments';\n\n// This prefix is really useful to distinguish 'real' attachments from pgp attachments.\nconst ID_PREFIX = 'PGPAttachment';\n\nconst getId = (message: Message, parsedAttachment: any, number: number) =>\n    `${ID_PREFIX}_${message.ID}_${parsedAttachment.checksum}_${number}`;\n\n/**\n * Unfortunately mailparser doesn't expose header data directly so we will reconstruct the headers\n */\nconst getHeaders = ({\n    generatedFileName = '',\n    contentDisposition = '',\n    contentId = '',\n    transferEncoding = '',\n    contentType = ''\n}: AttachmentMime) => {\n    const headers: { [key: string]: any } = {};\n    const filenameOption = '; filename=' + JSON.stringify(generatedFileName);\n    headers['content-disposition'] = contentDisposition + filenameOption;\n    // test if this is an assigned content id\n    if (!/^.*@mailparser$/.test(contentId)) {\n        headers['content-id'] = /^<.*>$/.test(contentId) ? contentId : `<${contentId}>`;\n    }\n    if (contentDisposition.toLowerCase() === 'inline') {\n        headers.embedded = 1;\n    }\n    if (transferEncoding) {\n        headers['content-transfer-encoding'] = transferEncoding;\n    }\n    headers['content-type'] = contentType + filenameOption;\n    return headers;\n};\n\n/**\n * Convert a single attachment\n */\nconst convertSingle = (\n    message: Message,\n    parsedAttachment: AttachmentMime,\n    number: number,\n    verified: number,\n    cache: AttachmentsDataCache\n): Attachment => {\n    const ID = getId(message, parsedAttachment, number);\n\n    const attachment: Attachment = {\n        ID,\n        Headers: getHeaders(parsedAttachment),\n        Name: parsedAttachment.generatedFileName,\n        KeyPackets: null, // already decrypted;\n        MIMEType: parsedAttachment.contentType,\n        Signature: null,\n        Size: parsedAttachment.length,\n        Encrypted: ENCRYPTED_STATUS.PGP_MIME\n    };\n\n    const attachmentData: BinaryResult = {\n        data: parsedAttachment.content,\n        filename: '',\n        signatures: []\n    };\n\n    cache.set(ID, attachmentData /*, verified*/);\n    // invalidSignature.askAgain(message, attachment, false);\n    return attachment;\n};\n\n/**\n * Converts the parsedAttachment coming from mailparser to an attachment linked to the message provided.\n */\nexport const convert = (\n    message: Message,\n    attachments: AttachmentMime[],\n    verified: number,\n    cache: AttachmentsDataCache\n): Attachment[] => {\n    return attachments.map((attachment, number) => convertSingle(message, attachment, number, verified, cache));\n};\n","import { decryptMIMEMessage, decryptMessageLegacy } from 'pmcrypto';\nimport { MIME_TYPES } from 'proton-shared/lib/constants';\nimport { c } from 'ttag';\n\nimport { Message, MessageExtended } from '../../models/message';\nimport { convert } from '../attachment/attachmentConverter';\nimport { VERIFICATION_STATUS } from '../../constants';\nimport { getDate } from './messages';\nimport { AttachmentsDataCache } from '../../hooks/useAttachments';\n\nconst getVerifiedStatus = (pmcryptoVerified: number, publicKeys: any) => {\n    const signedInvalid = VERIFICATION_STATUS.SIGNED_AND_INVALID;\n    const signedPubkey = VERIFICATION_STATUS.SIGNED_NO_PUB_KEY;\n    return !publicKeys.length && pmcryptoVerified === signedInvalid ? signedPubkey : pmcryptoVerified;\n};\n\nexport const decryptMimeMessage = async (\n    message: Message,\n    privateKeys: any,\n    publicKeys: any,\n    attachmentsCache: AttachmentsDataCache\n): Promise<MessageExtended> => {\n    const headerFilename = c('Encrypted Headers').t`Encrypted Headers filename`;\n    const sender = (message.Sender || {}).Address;\n\n    const result = await decryptMIMEMessage({\n        message: message.Body,\n        messageDate: getDate(message),\n        privateKeys,\n        publicKeys,\n        headerFilename,\n        sender\n    });\n\n    const { body = c('Message empty').t`Message content if empty`, mimetype = MIME_TYPES.PLAINTEXT } =\n        (await result.getBody()) || {};\n\n    const verified = getVerifiedStatus(await result.verify(), publicKeys);\n\n    const attachments = convert(message, await result.getAttachments(), verified, attachmentsCache);\n    const encryptedSubject = await result.getEncryptedSubject();\n\n    return { raw: body, data: { ...message, Attachments: attachments }, verified, encryptedSubject, mimetype };\n};\n\nexport const decryptLegacyMessage = async (\n    message: Message,\n    privateKeys: any,\n    publicKeys: any\n): Promise<MessageExtended> => {\n    const { data, verified: pmcryptoVerified = VERIFICATION_STATUS.NOT_SIGNED } = (await decryptMessageLegacy({\n        message: message.Body,\n        messageDate: getDate(message),\n        privateKeys,\n        publicKeys\n    })) as any;\n\n    const verified = getVerifiedStatus(pmcryptoVerified, publicKeys);\n\n    return { raw: data, verified, publicKeys, privateKeys };\n};\n","import { useCallback } from 'react';\nimport { useGetPublicKeys, useGetAddressKeys } from 'react-components';\nimport { splitKeys } from 'proton-shared/lib/keys/keys';\nimport { MessageExtended } from '../models/message';\nimport { isMIME } from '../helpers/message/messages';\nimport { decryptLegacyMessage, decryptMimeMessage } from '../helpers/message/messageDecrypt';\nimport { useAttachmentsCache } from './useAttachments';\n\n// Reference: Angular/src/app/message/factories/messageModel.js decryptBody\n\nexport const useDecryptMessage = () => {\n    const getPublicKeys = useGetPublicKeys();\n    const getAddressKeys = useGetAddressKeys();\n    const attachmentsCache = useAttachmentsCache();\n\n    return useCallback(\n        async ({ data: message = {} }: MessageExtended): Promise<MessageExtended> => {\n            const [{ publicKeys = [] }, addressKeys] = await Promise.all([\n                getPublicKeys((message.Sender || {}).Address),\n                getAddressKeys(message.AddressID)\n            ]);\n            const { privateKeys } = splitKeys(addressKeys) as any;\n\n            // TODO: filter out compromised addresses (if not done already)\n\n            if (isMIME(message)) {\n                return decryptMimeMessage(message, privateKeys, publicKeys, attachmentsCache.data);\n            }\n\n            return decryptLegacyMessage(message, privateKeys, publicKeys);\n        },\n        [getPublicKeys, getAddressKeys, attachmentsCache]\n    );\n};\n","import { encodeBase64, decodeBase64 } from 'pmcrypto';\nimport { arrayToBinaryString, binaryStringToArray } from 'proton-shared/lib/helpers/string';\nimport { Binary } from '../models/utils';\n\nexport const arrayToBase64 = (data: Binary): string => encodeBase64(arrayToBinaryString(data)) || '';\n\nexport const base64ToArray = (data: string): Binary => binaryStringToArray(decodeBase64(data) || '');\n","import { getKeys, decodeBase64, binaryStringToArray, getFingerprint, isExpiredKey, PmcryptoKey } from 'pmcrypto';\n\nimport { unique } from 'proton-shared/lib/helpers/array';\nimport { PACKAGE_TYPE, RECIPIENT_TYPE, MIME_TYPES, KEY_FLAGS } from 'proton-shared/lib/constants';\n\nimport { Message } from '../../models/message';\nimport { isEO, isSign } from '../message/messages';\nimport { normalizeEmail } from '../addresses';\nimport { Address } from '../../models/address';\nimport { getByEmail, isOwnAddress, isFallbackAddress } from '../addresses';\nimport { KeyData, Key } from '../../models/key';\nimport { findEmailInCache } from '../contacts';\nimport { ContactEmailCache, ContactEmail } from '../../models/contact';\nimport { base64ToArray } from '../base64';\n\nexport type MapPreference = { [email: string]: SendPreference };\n\nexport interface SendPreference {\n    encrypt: boolean;\n    sign: boolean;\n    mimetype: MIME_TYPES;\n    publickeys: PmcryptoKey[];\n    primaryPinned: boolean;\n    scheme: PACKAGE_TYPE;\n    pinned: boolean;\n    isVerified: boolean;\n    warnings: any[];\n    ownAddress: boolean;\n}\n\ntype CachePreference = { [contactID: string]: { [email: string]: PreferenceInfo } };\n\ninterface PreferenceInfo {\n    encryptFlag: boolean;\n    signFlag: boolean;\n    emailKeys: string[];\n    mimetype: MIME_TYPES;\n    scheme: PACKAGE_TYPE;\n    isVerified: boolean;\n}\n\nconst cache: CachePreference = {};\n\nconst emailInExtrInfo = (contactEmail: ContactEmail) =>\n    cache[contactEmail.ContactID || ''] && cache[contactEmail.ContactID || ''][normalizeEmail(contactEmail.Email)];\n\nconst getInExtrInfo = (contactEmail: ContactEmail) =>\n    (cache[contactEmail.ContactID || ''] || {})[normalizeEmail(contactEmail.Email)] || {};\n\nconst usesDefaults = (contactEmail: ContactEmail) => !contactEmail || contactEmail.Defaults;\n\n/**\n * Determines if a certain key object is allowed to be used for encryption\n */\nconst encryptionEnabled = ({ Flags }: Key) => Flags & KEY_FLAGS.ENABLE_ENCRYPTION;\n\n/**\n * Returns the default send preferences if no contact is available for the specified email address.\n * The global settings, composer mode and API keys can still change the defaults though.\n */\nconst getDefaultInfo = async (\n    email: string,\n    { RecipientType, Keys = [], Warnings: warnings = [] }: KeyData,\n    defaultMimeType: MIME_TYPES,\n    eoEnabled: boolean,\n    globalSign: boolean,\n    mailSettings: any,\n    addresses: Address[]\n): Promise<SendPreference> => {\n    const isInternal = RecipientType === RECIPIENT_TYPE.TYPE_INTERNAL;\n    const isExternal = RecipientType === RECIPIENT_TYPE.TYPE_EXTERNAL;\n    const settingsScheme = mailSettings.PGPScheme;\n    const settingsMime = settingsScheme === PACKAGE_TYPE.SEND_PGP_MIME ? MIME_TYPES.MIME : MIME_TYPES.PLAINTEXT;\n    const address = getByEmail(addresses, email);\n    const ownAddress = isOwnAddress(address, Keys);\n\n    if ((isInternal || isExternal) && Keys.length) {\n        const fallbackAddress = isFallbackAddress(address, Keys);\n\n        return {\n            warnings,\n            encrypt: true,\n            sign: true,\n            mimetype: isExternal ? settingsMime : defaultMimeType,\n            publickeys: await getKeys(Keys[0].PublicKey),\n            primaryPinned: !fallbackAddress,\n            scheme: isInternal ? PACKAGE_TYPE.SEND_PM : settingsScheme,\n            pinned: ownAddress,\n            ownAddress,\n            isVerified: true\n        };\n    }\n    if (eoEnabled) {\n        return {\n            warnings,\n            encrypt: true,\n            sign: false,\n            mimetype: defaultMimeType,\n            publickeys: [],\n            primaryPinned: true,\n            scheme: PACKAGE_TYPE.SEND_EO,\n            pinned: false,\n            ownAddress,\n            isVerified: true\n        };\n    }\n    return {\n        warnings,\n        encrypt: false,\n        sign: globalSign,\n        mimetype: globalSign ? settingsMime : defaultMimeType,\n        publickeys: [],\n        primaryPinned: true,\n        scheme: globalSign ? settingsScheme : PACKAGE_TYPE.SEND_CLEAR,\n        pinned: false,\n        ownAddress,\n        isVerified: true\n    };\n};\n\nconst mimetypeLogic = (\n    mimetype: MIME_TYPES,\n    defaultMimetype: MIME_TYPES,\n    scheme: PACKAGE_TYPE,\n    sign: boolean,\n    encrypt: boolean\n) => {\n    /*\n     * PGP/MIME can only send using the MIME encoding as it doesn't support separate attachments and we need to encode\n     * them in the body\n     */\n    if (scheme === PACKAGE_TYPE.SEND_PGP_MIME && (sign || encrypt)) {\n        return MIME_TYPES.MIME;\n    }\n    if (scheme === PACKAGE_TYPE.SEND_PGP_INLINE && (sign || encrypt)) {\n        return MIME_TYPES.PLAINTEXT;\n    }\n    // If sending EO, respect the mime type of the composer, since it will be what the API returns when retrieving the message.\n    if (scheme === PACKAGE_TYPE.SEND_EO) {\n        return defaultMimetype;\n    }\n    if (defaultMimetype === MIME_TYPES.PLAINTEXT || mimetype === null) {\n        // NEVER upconvert\n        return defaultMimetype;\n    }\n    return mimetype;\n};\n\n/**\n * Checks if one of the allowed sending keys is pinned. This function returns true if key pinning is disabled\n * or if atleast on of the Sending keys are in the contacts\n * Should be done on extract, so API changes (the other user resetting their password) are noticed.\n */\nconst isPrimaryPinned = async (base64Keys: string[], Keys: Key[], email: string, addresses: Address[]) => {\n    if (base64Keys.length === 0) {\n        const address = getByEmail(addresses, email);\n        return !isFallbackAddress(address, Keys);\n    }\n\n    const sendKeys = Keys.filter(encryptionEnabled).map((key) => key.PublicKey);\n    const keys = await Promise.all(sendKeys.map(getKeys));\n    const sendKeyObjects = keys.filter(([k = false]: any) => !!k);\n    const [pinnedKey] = await getKeys(base64ToArray(base64Keys[0]) as any);\n    const pinnedFingerprint = getFingerprint(pinnedKey);\n\n    return (\n        sendKeyObjects.length === 0 || sendKeyObjects.map(([k]: any) => getFingerprint(k)).includes(pinnedFingerprint)\n    );\n};\n\n/**\n * Generates the sendpreferences using the extracted information after parsing the contacts.\n * This function is the counterpart extractInfo\n */\nconst extractInfo = async (\n    { encryptFlag, signFlag, mimetype: inputMimetype, emailKeys, scheme: inputScheme, isVerified }: PreferenceInfo,\n    keyData: KeyData,\n    defaultMimeType: MIME_TYPES,\n    eoEnabled: boolean,\n    globalSign: boolean,\n    email: string,\n    mailSettings: any,\n    addresses: Address[]\n): Promise<SendPreference> => {\n    const { RecipientType, Warnings = [], Keys = [] } = keyData;\n    const isInternal = RecipientType === RECIPIENT_TYPE.TYPE_INTERNAL;\n    const isExternalWithKeys = RecipientType === RECIPIENT_TYPE.TYPE_EXTERNAL && Keys.length > 0;\n    const primaryPinned =\n        isInternal || isExternalWithKeys ? await isPrimaryPinned(emailKeys, Keys, email, addresses) : true;\n    const pmKey = isInternal || isExternalWithKeys ? await getKeys(Keys[0].PublicKey) : [];\n    // In case the pgp packet list contains multiple keys, only the first one is taken.\n    const keyObjs = await Promise.all(\n        emailKeys\n            .map((s) => decodeBase64(s) || '')\n            .map(binaryStringToArray)\n            .map((a) => {\n                return getKeys(a).then(([k]) => isExpiredKey(k).then((isExpired: boolean) => (isExpired ? null : [k])));\n            })\n    );\n    const keyObjects = (keyObjs.filter((k) => k !== null) as unknown) as PmcryptoKey[];\n\n    const publickeys = keyObjects.length && primaryPinned ? [keyObjects[0]] : pmKey;\n    const warnings = Warnings;\n    let encrypt = isInternal || isExternalWithKeys || (encryptFlag && !!keyObjects.length);\n    let sign = isInternal || isExternalWithKeys || (signFlag === null ? !!globalSign : signFlag);\n    sign = sign || encryptFlag;\n\n    let scheme: PACKAGE_TYPE;\n    if (isInternal) {\n        scheme = PACKAGE_TYPE.SEND_PM;\n    } else {\n        scheme = sign || encrypt ? inputScheme : PACKAGE_TYPE.SEND_CLEAR;\n    }\n    scheme = scheme === null ? mailSettings.PGPScheme : scheme;\n\n    if (eoEnabled && !encrypt) {\n        sign = false;\n        encrypt = true;\n        scheme = PACKAGE_TYPE.SEND_EO;\n    }\n\n    const mimetype = mimetypeLogic(inputMimetype, defaultMimeType, scheme, sign, encrypt);\n    const pinned = keyObjects.length > 0;\n    const ownAddress = false;\n\n    return { publickeys, warnings, encrypt, sign, scheme, mimetype, primaryPinned, isVerified, pinned, ownAddress };\n};\n\n/**\n * Extracts the preferences from the contacts and stores it in the cache for reusage.\n * The logic is straightforward but we see for more info\n * https://docs.google.com/document/d/1lEBkG0DC5FOWlumInKtu4a9Cc1Eszp48ZhFy9UpPQso\n */\nconst getApiInfo = async (\n    email: string,\n    keyData: KeyData,\n    defaultMimeType: MIME_TYPES,\n    eoEnabled: boolean,\n    globalSign: boolean,\n    mailSettings: any,\n    addresses: Address[],\n    cache: ContactEmailCache\n) => {\n    const normalizedEmail = normalizeEmail(email);\n    // const isInternal = keyData.RecipientType === RECIPIENT_TYPE.TYPE_INTERNAL;\n    // const isExternalWithKeys = keyData.RecipientType === RECIPIENT_TYPE.TYPE_EXTERNAL && keyData.Keys.length > 0;\n\n    const contactEmail = findEmailInCache(cache, normalizedEmail);\n    if (usesDefaults(contactEmail)) {\n        const info = await getDefaultInfo(\n            email,\n            keyData,\n            defaultMimeType,\n            eoEnabled,\n            globalSign,\n            mailSettings,\n            addresses\n        );\n        return { [email]: info };\n    }\n\n    // TODO: Decrypt contacts\n\n    ////////////////////////////////////\n    ////////////// MOCK ////////////////\n    ////////////////////////////////////\n\n    const info = await getDefaultInfo(email, keyData, defaultMimeType, eoEnabled, globalSign, mailSettings, addresses);\n    return { [email]: info };\n\n    ////////////////////////////////////\n    ////////////// MOCK ////////////////\n    ////////////////////////////////////\n\n    // const { vCard, errors } = await Contact.get(contactEmail.ContactID);\n\n    // const keyList = toList(vCard.get('key'));\n    // const encryptFlagList = toList(vCard.get('x-pm-encrypt'));\n    // const signFlagList = toList(vCard.get('x-pm-sign'));\n    // const schemeList = toList(vCard.get('x-pm-scheme'));\n    // const mimeList = toList(vCard.get('x-pm-mimetype'));\n    // const emailList = toList(vCard.get('email'));\n\n    // const group = getGroup(emailList, normalizedEmail);\n    // if (!group) {\n    //     return { [email]: await getDefaultInfo(email, keyData, defaultMimeType, eoEnabled, globalSign) };\n    // }\n\n    // const matchesGroup = groupMatcher(group.toLowerCase());\n    // const emailKeys = _.filter(keyList, matchesGroup);\n    // const encryptFlag = _.find(encryptFlagList, matchesGroup);\n    // const signFlag = _.find(signFlagList, matchesGroup);\n    // const mimetypeProp = _.find(mimeList, matchesGroup);\n    // const mimetype = mimetypeProp ? mimetypeProp.valueOf() : null;\n    // const schemeProp = _.find(schemeList, matchesGroup);\n    // const scheme = schemeProp ? toSchemeConstant(schemeProp.valueOf()) : null;\n    // const base64Keys = await reorderKeys(\n    //     keyData,\n    //     (await Promise.all(_.map(emailKeys, (prop) => contactKey.getBase64Value(prop)))).filter(Boolean) // In case the key is expired or revoked we don't get the base 64 value but false\n    // );\n    // const data = {\n    //     encryptFlag:\n    //         isInternal ||\n    //         isExternalWithKeys ||\n    //         ((encryptFlag ? encryptFlag.valueOf().toLowerCase() !== 'false' : false) && emailKeys.length > 0),\n    //     signFlag:\n    //         isInternal ||\n    //         isExternalWithKeys ||\n    //         (signFlag ? signFlag.valueOf().toLowerCase() !== 'false' : !!globalSign),\n    //     emailKeys: base64Keys,\n    //     mimetype: mimetype !== 'text/plain' && mimetype !== 'text/html' ? null : mimetype,\n    //     scheme: isInternal ? PACKAGE_TYPE.SEND_PM : scheme,\n    //     isVerified: !errors.includes(CONTACT_ERROR.TYPE2_CONTACT_VERIFICATION)\n    // };\n\n    // // We don't support encryption without signing\n    // data.signFlag = data.signFlag || data.encryptFlag;\n\n    // CACHE.EXTRACTED_INFO[contactEmail.ContactID] = CACHE[contactEmail.ContactID] || {};\n    // CACHE.EXTRACTED_INFO[contactEmail.ContactID][normalizedEmail] = data;\n\n    // return { [email]: await extractInfo(data, keyData, defaultMimeType, eoEnabled, globalSign, email) };\n};\n\n/**\n * Extracts send preferences from the cache if available\n */\nconst getCacheInfo = async (\n    email: string,\n    keyData: KeyData,\n    defaultMimeType: MIME_TYPES,\n    eoEnabled: boolean,\n    globalSign: boolean,\n    mailSettings: any,\n    addresses: Address[],\n    cache: ContactEmailCache\n): Promise<MapPreference> => {\n    const normalizedEmail = normalizeEmail(email);\n    const contactEmail = findEmailInCache(cache, normalizedEmail);\n\n    if (usesDefaults(contactEmail)) {\n        return {\n            [email]: await getDefaultInfo(\n                email,\n                keyData,\n                defaultMimeType,\n                eoEnabled,\n                globalSign,\n                mailSettings,\n                addresses\n            )\n        };\n    }\n\n    if (!emailInExtrInfo(contactEmail)) {\n        // return { [email]: null };\n        return {};\n    }\n\n    return {\n        [email]: await extractInfo(\n            getInExtrInfo(contactEmail),\n            keyData,\n            defaultMimeType,\n            eoEnabled,\n            globalSign,\n            email,\n            mailSettings,\n            addresses\n        )\n    };\n};\n\nconst inExtractedInfoCache = (contactEmailList: ContactEmail[]) =>\n    contactEmailList.every((e) => usesDefaults(e) || emailInExtrInfo(e));\n\nconst inCache = (emails: string[], cache: ContactEmailCache) => {\n    const normalizedEmails = emails.map(normalizeEmail);\n    const contactEmailList = normalizedEmails.map((email) => findEmailInCache(cache, email));\n\n    return inExtractedInfoCache(contactEmailList);\n};\n\nconst getInfo = async (\n    email: string,\n    keyData: KeyData,\n    defaultMimeType: MIME_TYPES,\n    eoEnabled: boolean,\n    globalSign: boolean,\n    mailSettings: any,\n    addresses: Address[],\n    cache: ContactEmailCache\n): Promise<MapPreference> => {\n    const address = getByEmail(addresses, email);\n\n    if (isOwnAddress(address, keyData.Keys)) {\n        const info = await getDefaultInfo(\n            email,\n            keyData,\n            defaultMimeType,\n            eoEnabled,\n            globalSign,\n            mailSettings,\n            addresses\n        );\n        return { [email]: info };\n    }\n\n    if (inCache([email], cache)) {\n        return getCacheInfo(email, keyData, defaultMimeType, eoEnabled, globalSign, mailSettings, addresses, cache);\n    }\n\n    return getApiInfo(email, keyData, defaultMimeType, eoEnabled, globalSign, mailSettings, addresses, cache);\n};\n\n/**\n * The goal of this service is to provide all the encryption + encoding preferences for a recipient by parsing the\n * contact of the recipient, considering the general settings, inputs from the message that we want to send and API stuff\n *\n * For the general logic see:\n * https://docs.google.com/document/d/1lEBkG0DC5FOWlumInKtu4a9Cc1Eszp48ZhFy9UpPQso\n * This is the specification it should implement and should be the right way to do this\n *\n * primaryPinned basically just says if the primary key is available for sending (so either pinned or key pinning is disabled\n * It differs from pinned as pinned just says is key pinning is enabled.\n * primaryPinned is a flag that tells the FE that we first need to fix the sendPreference before sending.\n */\nexport const getSendPreferences = async (\n    emails: string[] = [],\n    message: Message,\n    mailSettings: any,\n    addresses: Address[],\n    cache: ContactEmailCache,\n    getPublicKeys: (email: string) => Promise<KeyData>,\n    catchErrors = false\n): Promise<MapPreference> => {\n    const defaultMimeType: MIME_TYPES = message ? (message.MIMEType as MIME_TYPES) : MIME_TYPES.DEFAULT;\n    const eoEnabled = isEO(message);\n    const globalSign = message ? isSign(message) : mailSettings.Sign;\n    const normEmails: string[] = unique(emails.map(normalizeEmail));\n    const normInfos = await Promise.all(\n        normEmails.map(async (email) => {\n            try {\n                const keyData = await getPublicKeys(email);\n                return getInfo(email, keyData, defaultMimeType, eoEnabled, globalSign, mailSettings, addresses, cache);\n            } catch (e) {\n                if (!catchErrors) {\n                    throw e;\n                }\n            }\n        })\n    );\n    const normMap = Object.assign({}, ...normInfos);\n\n    return emails.reduce((acc, cur) => {\n        const result = normMap[normalizeEmail(cur)];\n        if (!result) {\n            return acc;\n        }\n        acc[cur] = result;\n        return acc;\n    }, {} as MapPreference);\n};\n","import mimemessage from 'mimemessage';\nimport { BinaryResult, arrayToBinaryString } from 'pmcrypto';\n\nimport { MessageExtended } from '../../models/message';\nimport { getPlainText, getHTML, getAttachments } from '../message/messages';\nimport { Attachment } from '../../models/attachment';\nimport { MIME_TYPES } from 'proton-shared/lib/constants';\nimport { get } from '../attachment/attachmentLoader';\nimport { AttachmentsDataCache } from '../../hooks/useAttachments';\nimport { Api } from '../../models/utils';\nimport { getBodyParser, extractEmbedded } from '../embedded/embeddedUtils';\n\n// Reference: Angular/src/app/composer/services/mimeMessageBuilder.js\n\ninterface AttachmentData {\n    attachment: Attachment;\n    data: BinaryResult;\n}\n\n/**\n * Remove '; name=' and '; filename=' values\n */\nconst extractContentValue = (value = '') => {\n    const semicolonIndex = value.indexOf(';');\n    if (semicolonIndex === -1) {\n        return value;\n    }\n    return value.substr(0, semicolonIndex);\n};\n\nconst buildAttachments = (attachments: AttachmentData[]) =>\n    attachments.map(({ attachment, data }) => {\n        const attachmentName = JSON.stringify(attachment.Name);\n        const headers = attachment.Headers || {};\n        const contentTypeValue =\n            extractContentValue(headers['content-type']) || attachment.MIMEType || 'application/octet-stream';\n        const contentDispositionValue = extractContentValue(headers['content-disposition']) || 'attachment';\n        const entity = mimemessage.factory({\n            contentType: `${contentTypeValue}; filename=${attachmentName}; name=${attachmentName}`,\n            contentTransferEncoding: 'base64',\n            body: arrayToBinaryString(data.data)\n        });\n\n        entity.header(\n            'content-disposition',\n            `${contentDispositionValue}; filename=${attachmentName}; name=${attachmentName}`\n        );\n\n        if (headers['content-id']) {\n            entity.header('content-id', headers['content-id']);\n        }\n\n        return entity;\n    });\n\nconst buildEmbeddedHtml = (html?: string, attachments?: AttachmentData[]) => {\n    const htmlEntity = mimemessage.factory({\n        contentType: 'text/html;charset=utf-8',\n        contentTransferEncoding: 'base64',\n        body: html\n    });\n\n    if (attachments && attachments.length > 0) {\n        console.log('attachments in mime message ignored as not supported yet', attachments);\n    }\n    // TODO: Attachments\n    // const testDiv = embeddedUtils.getBodyParser(html);\n    // const inlineAttachments = embeddedUtils.extractEmbedded(attachments, testDiv);\n    // const attachmentEntities = buildAttachments(inlineAttachments);\n\n    // add the attachments\n    // const relatedBody = [htmlEntity].concat(attachmentEntities);\n    const relatedBody = [htmlEntity];\n\n    return mimemessage.factory({\n        contentType: 'multipart/related',\n        body: relatedBody\n    });\n};\n\n/**\n * Quoted printable for compatibility with old clients\n * Mimemessagefactory doesn't handle the empty string well.\n */\nconst buildPlaintextEntity = (plaintext?: string) =>\n    mimemessage.factory({\n        body: plaintext,\n        contentTransferEncoding: 'quoted-printable'\n    });\n\n/**\n * Build the multipart/alternate MIME entity containing both the HTML and plain text entities.\n */\nconst buildAlternateEntity = (plaintext?: string, html?: string, attachments?: AttachmentData[]) =>\n    mimemessage.factory({\n        contentType: 'multipart/alternative',\n        body: [buildPlaintextEntity(plaintext), buildEmbeddedHtml(html, attachments)]\n    });\n\n/**\n * Builds a mime body given the plaintext, html source and a list of attachments to fetch embedded images from\n */\nconst buildBodyEntity = (plaintext?: string, html?: string, attachments?: AttachmentData[]) => {\n    if (html !== undefined && plaintext !== undefined) {\n        return buildAlternateEntity(plaintext, html, attachments);\n    }\n    return html !== undefined ? buildEmbeddedHtml(html, attachments) : buildPlaintextEntity(plaintext);\n};\n\n/**\n * Extracts the non-inline attachments from the given html.\n */\nconst getNormalAttachments = (html?: string, attachments: AttachmentData[] = []) => {\n    if (html === undefined) {\n        return attachments;\n    }\n    const testDiv = getBodyParser(html);\n    const embeddedAttachments = extractEmbedded(attachments, testDiv);\n    return attachments.filter((attachment) => !embeddedAttachments.includes(attachment));\n};\n\n/**\n * Builds a multipart message from the given plaintext, html bodies and attachments.\n * The html body is not necessary to create a valid mime body\n */\nconst build = (plaintext?: string, html?: string, attachments?: AttachmentData[]): string => {\n    const bodyEntity = buildBodyEntity(plaintext, html, attachments);\n    const normalAttachments = getNormalAttachments(html, attachments);\n    const attachmentEntities = buildAttachments(normalAttachments);\n    const body = [bodyEntity].concat(attachmentEntities);\n\n    const msgentity = mimemessage.factory({\n        contentType: 'multipart/mixed',\n        body\n    });\n\n    // this trailing line space is important: if it's not there outlook.com adds it and breaks pgp/mime signatures.\n    return msgentity.toString() + '\\r\\n';\n};\n\nconst fetchMimeDependencies = async (\n    message: MessageExtended,\n    cache: AttachmentsDataCache,\n    api: Api\n): Promise<AttachmentData[]> => {\n    return Promise.all(\n        getAttachments(message.data).map(async (attachment) => ({\n            attachment,\n            data: await get(attachment, message, cache, api)\n        }))\n    );\n};\n\nexport const constructMime = async (\n    message: MessageExtended,\n    cache: AttachmentsDataCache,\n    api: Api,\n    downconvert = true\n) => {\n    // TODO: ?\n    // if (message.isMIME() && message.decryptedMIME) {\n    //     return message.decryptedMIME;\n    // }\n\n    const plaintext = getPlainText(message, downconvert);\n    const html = message.data?.MIMEType === MIME_TYPES.DEFAULT ? getHTML(message) : undefined;\n    const attachments = await fetchMimeDependencies(message, cache, api);\n\n    return build(plaintext, html, attachments);\n};\n","import { MIME_TYPES, PACKAGE_TYPE } from 'proton-shared/lib/constants';\n\nimport { MessageExtended } from '../../models/message';\nimport { MapPreference } from './sendPreferences';\n\nimport { constructMime } from './sendMimeBuilder';\nimport { addReceived, getPlainText, getHTML } from '../message/messages';\nimport { PmcryptoKey } from 'pmcrypto';\nimport { AttachmentsDataCache } from '../../hooks/useAttachments';\nimport { Api } from '../../models/utils';\n\n// Reference: Angular/src/app/composer/services/encryptMessage.js\n// Reference: Angular/src/app/composer/services/generateTopPackages.js\n\nconst { PLAINTEXT, DEFAULT, MIME } = MIME_TYPES;\n\ntype PackageStatus = {\n    [key in MIME_TYPES]?: boolean;\n};\n\nexport type Packages = {\n    [key in MIME_TYPES]?: Package;\n};\n\nexport interface Package {\n    Flags?: number;\n    Addresses?: { [email: string]: Package };\n    MIMEType?: MIME_TYPES;\n    Body?: string;\n    BodyKey?: any;\n    BodyKeyPacket?: string;\n    Type?: PACKAGE_TYPE;\n    PublicKey?: PmcryptoKey;\n    AttachmentKeys?: { [AttachmentID: string]: { Key: string; Algorithm: string } };\n    AttachmentKeyPackets?: { [AttachmentID: string]: string };\n}\n\n/**\n * Generates the mime top-level packages, which include all attachments in the body.\n * Build the multipart/alternate MIME entity containing both the HTML and plain text entities.\n */\nconst generateMimePackage = async (\n    message: MessageExtended,\n    cache: AttachmentsDataCache,\n    api: Api\n): Promise<Package> => ({\n    Flags: addReceived(message.data?.Flags),\n    Addresses: {},\n    MIMEType: MIME,\n    Body: await constructMime(message, cache, api)\n});\n\nconst generatePlainTextPackage = async (message: MessageExtended): Promise<Package> => ({\n    Flags: addReceived(message.data?.Flags),\n    Addresses: {},\n    MIMEType: PLAINTEXT,\n    Body: getPlainText(message, true)\n});\n\nconst generateHTMLPackage = async (message: MessageExtended): Promise<Package> => ({\n    Flags: addReceived(message.data?.Flags),\n    Addresses: {},\n    MIMEType: DEFAULT,\n    Body: getHTML(message)\n});\n\n/**\n * Generates all top level packages. The top level packages have unencrypted bodies which are encrypted later on\n * once the sub level packages are attached, so we know with which keys we need to encrypt the bodies with.\n * Top level packages that are not needed are not generated.\n */\nexport const generateTopPackages = async (\n    message: MessageExtended,\n    sendPrefs: MapPreference,\n    cache: AttachmentsDataCache,\n    api: Api\n): Promise<Packages> => {\n    const packagesStatus: PackageStatus = Object.values(sendPrefs).reduce(\n        (packages, info) => ({\n            [PLAINTEXT]: packages[PLAINTEXT] || info.mimetype === MIME_TYPES.PLAINTEXT,\n            [DEFAULT]:\n                packages[DEFAULT] ||\n                info.mimetype === DEFAULT ||\n                (info.scheme === PACKAGE_TYPE.SEND_PGP_MIME && !info.encrypt && !info.sign),\n            [MIME]: packages[MIME] || (info.scheme === PACKAGE_TYPE.SEND_PGP_MIME && (info.encrypt || info.sign))\n        }),\n        {\n            [PLAINTEXT]: false,\n            [DEFAULT]: false,\n            [MIME]: false\n        } as PackageStatus\n    );\n\n    const demandedPackages = Object.values(MIME_TYPES).filter((k) => packagesStatus[k]);\n\n    const packages: Packages = {};\n\n    await Promise.all(\n        demandedPackages.map(async (type) => {\n            switch (type) {\n                case MIME:\n                    packages[MIME] = await generateMimePackage(message, cache, api);\n                    return;\n                case PLAINTEXT:\n                    packages[PLAINTEXT] = await generatePlainTextPackage(message);\n                    return;\n                case DEFAULT:\n                    packages[DEFAULT] = await generateHTMLPackage(message);\n                    return;\n                default:\n                    throw new Error(); // Should never happen.\n            }\n        })\n    );\n\n    return packages;\n};\n","import { MIME_TYPES, PACKAGE_TYPE } from 'proton-shared/lib/constants';\n\nimport { Package, Packages } from './sendTopPackages';\nimport { MessageExtended, Message } from '../../models/message';\nimport { MapPreference, SendPreference } from './sendPreferences';\nimport { isEO, getAttachments } from '../message/messages';\n\nconst { PLAINTEXT, DEFAULT, MIME } = MIME_TYPES;\nconst { SEND_PM, SEND_CLEAR, SEND_PGP_INLINE, SEND_PGP_MIME, SEND_EO } = PACKAGE_TYPE;\n\nexport const SEND_MIME = 32; // TODO update proton-shared constant\n\n/**\n * Package for a ProtonMail user.\n */\nconst sendPM = async ({ publickeys }: SendPreference, message: Message = {}) => ({\n    Type: SEND_PM,\n    PublicKey: publickeys.length ? publickeys[0] : undefined,\n    Signature: getAttachments(message).every(({ Signature }) => Signature)\n});\n\n/**\n * Package for a outside user using ProtonMail encryption\n */\nconst sendPMEncryptedOutside = async (message: Message = {}) => {\n    console.warn('Unsuported yet', message);\n\n    // TODO\n\n    return {};\n\n    // try {\n    //     const Token = await message.generateReplyToken();\n\n    //     const [{ data: EncToken }, { Auth }] = await Promise.all([\n    //         encryptMessage({ data: Token, publicKeys: [], passwords: [message.Password] }),\n    //         srp.getVerify({ Password: message.Password })\n    //     ]);\n\n    //     return {\n    //         Auth,\n    //         Type: SEND_TYPES.SEND_EO,\n    //         PasswordHint: message.PasswordHint,\n    //         Token,\n    //         EncToken,\n    //         Signature: +message.Attachments.every(({ Signature }) => Signature)\n    //     };\n    // } catch (err) {\n    //     message.encrypting = false;\n    //     dispatchMessageAction(message);\n    //     console.error(err);\n    //     throw err;\n    // }\n};\n\n/**\n * Package for a PGP/MIME user.\n */\nconst sendPGPMime = async ({ publickeys, sign, encrypt }: SendPreference) => {\n    if (encrypt) {\n        return {\n            Type: SEND_PGP_MIME,\n            PublicKey: publickeys.length ? publickeys[0] : undefined\n        };\n    }\n\n    // PGP/MIME signature only\n    return {\n        Type: SEND_MIME,\n        Signature: +sign\n    };\n};\n\n/**\n * Package for a PGP/Inline user.\n */\nconst sendPGPInline = async ({ publickeys, sign, encrypt }: SendPreference, message: Message = {}) => {\n    if (encrypt) {\n        return {\n            Type: SEND_PGP_INLINE,\n            PublicKey: publickeys.length ? publickeys[0] : undefined,\n            Signature: getAttachments(message).every(({ Signature }) => Signature)\n        };\n    }\n\n    // PGP/Inline signature only\n    return {\n        Type: SEND_CLEAR,\n        Signature: +sign\n    };\n};\n\n/**\n * Package for an unencrypted user\n */\nconst sendClear = async () => ({ Type: SEND_CLEAR, Signature: 0 });\n\n/**\n * Attach the subpackages for encryptMessage to the given top level packages. The packages need to be encrypted before\n * they can be send to the api. See encryptPackages for that.\n */\nexport const attachSubPackages = async (\n    packages: Packages,\n    message: MessageExtended,\n    emails: string[],\n    sendPrefs: MapPreference\n): Promise<Packages> => {\n    const bindPackageSet = async (promise: Promise<Package>, email: string, type: MIME_TYPES) => {\n        const pack = await promise;\n        const packageToUpdate = packages[type] as Package;\n\n        if (!packageToUpdate.Addresses) {\n            packageToUpdate.Addresses = {};\n        }\n        if (!packageToUpdate.Type) {\n            packageToUpdate.Type = 0;\n        }\n\n        packageToUpdate.Addresses[email] = pack;\n        packageToUpdate.Type |= pack.Type || 0;\n    };\n\n    const promises = emails.map((email: string) => {\n        const info = sendPrefs[email];\n\n        const mimeType = info.mimetype === null ? message.data?.MIMEType : info.mimetype;\n        const packageType = mimeType === 'text/html' ? DEFAULT : PLAINTEXT;\n\n        switch (info.scheme) {\n            case SEND_PM:\n                return bindPackageSet(sendPM(info, message.data), email, packageType);\n            case SEND_PGP_MIME:\n                if (!info.sign && !info.encrypt) {\n                    return bindPackageSet(sendClear(), email, DEFAULT);\n                }\n                return bindPackageSet(sendPGPMime(info), email, MIME);\n            case SEND_PGP_INLINE:\n                return bindPackageSet(sendPGPInline(info, message.data), email, PLAINTEXT);\n            case SEND_EO:\n            case SEND_CLEAR:\n                // Encrypted for outside (EO)\n                if (isEO(message.data)) {\n                    return bindPackageSet(sendPMEncryptedOutside(message.data), email, packageType);\n                }\n\n                return bindPackageSet(sendClear(), email, packageType);\n        }\n    });\n\n    await Promise.all(promises);\n    return packages;\n};\n","import {\n    encryptMessage,\n    splitMessage,\n    armorBytes,\n    concatArrays,\n    generateSessionKey,\n    encryptSessionKey,\n    SessionKey,\n    PmcryptoKey\n} from 'pmcrypto';\n\nimport { identity } from 'proton-shared/lib/helpers/function';\nimport { splitKeys } from 'proton-shared/lib/keys/keys';\nimport { hasBit } from 'proton-shared/lib/helpers/bitset';\n\nimport { MessageExtended, Message } from '../../models/message';\nimport { Packages, Package } from './sendTopPackages';\nimport { getAttachments } from '../message/messages';\nimport { getSessionKey } from '../attachment/attachmentLoader';\nimport { AddressKeys } from '../../models/key';\nimport { arrayToBase64 } from '../base64';\nimport { PACKAGE_TYPE, MIME_TYPES } from 'proton-shared/lib/constants';\nimport { AES256 } from '../../constants';\nimport { SEND_MIME } from './sendSubPackages';\nimport { Attachment } from '../../models/attachment';\n\n// Reference: Angular/src/app/composer/services/encryptPackages.js\n\ninterface AttachmentKeys {\n    Attachment: Attachment;\n    SessionKey: SessionKey;\n}\n\nconst { SEND_CLEAR, SEND_EO } = PACKAGE_TYPE;\n\nconst packToBase64 = ({ data, algorithm: Algorithm = AES256 }: SessionKey) => {\n    return { Key: arrayToBase64(data), Algorithm };\n};\n\nconst encryptKeyPacket = async ({\n    sessionKeys = [],\n    publicKeys = [],\n    passwords = []\n}: {\n    sessionKeys?: SessionKey[];\n    publicKeys?: PmcryptoKey[];\n    passwords?: string[];\n}) =>\n    Promise.all(\n        sessionKeys.map(async (sessionKey) => {\n            const { message } = await encryptSessionKey({\n                data: sessionKey.data,\n                algorithm: sessionKey.algorithm,\n                publicKeys: publicKeys.length > 0 ? publicKeys : undefined,\n                passwords\n            });\n            const data = message.packets.write();\n            return arrayToBase64(data as Uint8Array);\n        })\n    );\n\n/**\n * Encrypt the attachment session keys and add them to the package\n */\nconst encryptAttachmentKeys = async (pack: Package, message: MessageExtended, attachmentKeys: AttachmentKeys[]) => {\n    // multipart/mixed bodies already include the attachments so we don't add them here\n    if (pack.MIMEType === MIME_TYPES.MIME) {\n        return;\n    }\n\n    const promises = Object.values(pack.Addresses || {}).map(async (address) => {\n        const isEo = hasBit(address.Type, PACKAGE_TYPE.SEND_EO);\n\n        if (!(isEo || address.PublicKey)) {\n            return;\n        }\n\n        const keys = await encryptKeyPacket({\n            sessionKeys: attachmentKeys.map(({ SessionKey }) => SessionKey),\n            passwords: isEo ? [message.data?.Password || ''] : undefined,\n            publicKeys: isEo ? undefined : [address.PublicKey as PmcryptoKey]\n        });\n\n        const AttachmentKeyPackets: { [AttachmentID: string]: string } = {};\n        attachmentKeys.forEach(({ Attachment }, i) => (AttachmentKeyPackets[Attachment.ID || ''] = keys[i]));\n        address.AttachmentKeyPackets = AttachmentKeyPackets;\n    });\n\n    if (hasBit(pack.Type, PACKAGE_TYPE.SEND_CLEAR)) {\n        const AttachmentKeys: { [AttachmentID: string]: { Key: string; Algorithm: string } } = {};\n        attachmentKeys.forEach(({ Attachment, SessionKey }) => {\n            AttachmentKeys[Attachment.ID || ''] = packToBase64(SessionKey);\n        });\n        pack.AttachmentKeys = AttachmentKeys;\n    }\n\n    return Promise.all(promises);\n};\n\n/**\n * Generate random session key in the format openpgp creates them\n */\nconst generateSessionKeyHelper = async (): Promise<SessionKey> => ({\n    algorithm: AES256,\n    data: await generateSessionKey(AES256)\n});\n\n/**\n * Encrypt the body in the given package. Should only be used if the package body differs from message body\n * (i.e. the draft body)\n */\nconst encryptBodyPackage = async (pack: Package, ownKeys: AddressKeys[], publicKeys: PmcryptoKey[]) => {\n    const { privateKeys } = splitKeys(ownKeys) as any;\n    const cleanPublicKeys = publicKeys.filter(identity);\n\n    const { data, sessionKey } = await encryptMessage({\n        data: pack.Body || '',\n        publicKeys: cleanPublicKeys,\n        sessionKey: cleanPublicKeys.length ? undefined : await generateSessionKeyHelper(),\n        privateKeys,\n        returnSessionKey: true,\n        compression: true\n    });\n\n    const { asymmetric: keys, encrypted } = await splitMessage(data);\n    return { keys, encrypted, sessionKey };\n};\n\n/**\n * Encrypts the draft body. This is done separately from the other bodies so we can make sure that the send body\n * (the encrypted body in the message object) is the same as the other emails so we can use 1 blob for them in the api\n * (i.e. deduplication)\n */\nconst encryptDraftBodyPackage = async (\n    pack: Package,\n    ownKeys: AddressKeys[],\n    publicKeys: PmcryptoKey[],\n    message: MessageExtended\n) => {\n    // TODO: Do the change is equivalent?\n    // const ownPublicKeys = await getKeys(message.From.Keys[0].PublicKey);\n    // const publicKeys = ownPublicKeys.concat(_.filter(publicKeysList));\n\n    const { privateKeys, publicKeys: ownPublicKeys } = splitKeys(ownKeys) as any;\n    const cleanPublicKeys = [...ownPublicKeys, ...publicKeys].filter(identity);\n\n    const { data, sessionKey } = await encryptMessage({\n        data: pack.Body || '',\n        publicKeys: cleanPublicKeys,\n        privateKeys,\n        returnSessionKey: true,\n        compression: true\n    });\n\n    const packets = await splitMessage(data);\n\n    const { asymmetric, encrypted } = packets;\n\n    // rebuild the data without the send keypackets\n    packets.asymmetric = packets.asymmetric.slice(0, ownPublicKeys.length);\n    // combine message\n    const value = concatArrays(Object.values(packets).flat() as Uint8Array[]);\n    // _.flowRight(concatArrays, _.flatten, _.values)(packets);\n\n    (message.data as Message).Body = await armorBytes(value);\n\n    return { keys: asymmetric.slice(ownPublicKeys.length), encrypted, sessionKey };\n};\n\n/**\n * Encrypts the body of the package and then overwrites the body in the package and adds the encrypted session keys\n * to the subpackages. If we send clear message the unencrypted session key is added to the (top-level) package too.\n */\nconst encryptBody = async (pack: Package, ownKeys: AddressKeys[], message: MessageExtended): Promise<void> => {\n    const addressKeys = Object.keys(pack.Addresses || {});\n    const addresses = Object.values(pack.Addresses || {});\n    const publicKeysList = addresses.map(({ PublicKey }) => PublicKey as PmcryptoKey);\n    /*\n     * Special case: reuse the encryption packet from the draft, this allows us to do deduplication on the back-end.\n     * In fact, this will be the most common case.\n     */\n    const encryptPack = message.data?.MIMEType === pack.MIMEType ? encryptDraftBodyPackage : encryptBodyPackage;\n\n    const { keys, encrypted, sessionKey } = await encryptPack(pack, ownKeys, publicKeysList, message);\n\n    let counter = 0;\n    publicKeysList.forEach((publicKey, index) => {\n        if (!publicKey) {\n            return;\n        }\n\n        const key = keys[counter++];\n        (pack.Addresses || {})[addressKeys[index]].BodyKeyPacket = arrayToBase64(key);\n    });\n\n    await Promise.all(\n        addresses.map(async (subPack) => {\n            if (subPack.Type !== SEND_EO) {\n                return;\n            }\n            const [BodyKeyPacket] = await encryptKeyPacket({\n                sessionKeys: [sessionKey],\n                passwords: [message.data?.Password || '']\n            });\n\n            // eslint-disable-next-line require-atomic-updates\n            subPack.BodyKeyPacket = BodyKeyPacket;\n        })\n    );\n\n    if ((pack.Type || 0) & (SEND_CLEAR | SEND_MIME)) {\n        // eslint-disable-next-line require-atomic-updates\n        pack.BodyKey = packToBase64(sessionKey);\n    }\n    // eslint-disable-next-line require-atomic-updates\n    pack.Body = arrayToBase64(encrypted[0]);\n};\n\nconst encryptPackage = async (\n    pack: Package,\n    message: MessageExtended,\n    ownKeys: AddressKeys[],\n    attachmentKeys: AttachmentKeys[]\n): Promise<Package> => {\n    await Promise.all([encryptBody(pack, ownKeys, message), encryptAttachmentKeys(pack, message, attachmentKeys)]);\n\n    Object.values(pack.Addresses || {}).forEach((address: any) => delete address.PublicKey);\n\n    return pack;\n};\n\nconst getAttachmentKeys = async (message: MessageExtended): Promise<AttachmentKeys[]> =>\n    Promise.all(\n        getAttachments(message.data).map(async (attachment) => ({\n            Attachment: attachment,\n            SessionKey: await getSessionKey(attachment, message)\n        }))\n    );\n\n/**\n * Encrypts the packages and removes all temporary values that should not be send to the API\n */\nexport const encryptPackages = async (\n    message: MessageExtended,\n    packages: Packages,\n    getAddressKeys: (addressID?: string) => Promise<AddressKeys[]>\n): Promise<Packages> => {\n    const attachmentKeys = await getAttachmentKeys(message);\n    const ownKeys = await getAddressKeys(message.data?.AddressID); // Original code: message.From.ID, don't know of From property\n    const packageList = Object.values(packages) as Package[];\n    await Promise.all(packageList.map((pack) => encryptPackage(pack, message, ownKeys, attachmentKeys)));\n\n    return packages;\n};\n","import { useCallback } from 'react';\nimport { unique } from 'proton-shared/lib/helpers/array';\nimport { sendMessage } from 'proton-shared/lib/api/messages';\nimport { useMailSettings, useAddresses, useGetPublicKeys, useGetAddressKeys, useApi } from 'react-components';\n\nimport { MessageExtended } from '../models/message';\nimport { getRecipientsAddresses } from '../helpers/message/messages';\n\nimport { getSendPreferences } from '../helpers/send/sendPreferences';\nimport { generateTopPackages } from '../helpers/send/sendTopPackages';\nimport { attachSubPackages } from '../helpers/send/sendSubPackages';\nimport { encryptPackages } from '../helpers/send/sendEncrypt';\nimport { useAttachmentsCache } from './useAttachments';\n\n// Reference: Angular/src/app/composer/services/sendMessage.js\n\nexport const useSendMessage = () => {\n    const [mailSettings] = useMailSettings();\n    const [addresses] = useAddresses();\n    const cache = new Map(); // TODO\n    const getPublicKeys = useGetPublicKeys();\n    const getAddressKeys = useGetAddressKeys();\n    const api = useApi();\n    const { data } = useAttachmentsCache();\n\n    return useCallback(\n        async (message: MessageExtended) => {\n            // TODO: Prepare embedded\n            const emails = getRecipientsAddresses(message.data);\n            // TODO: handleAttachmentSigs\n\n            const uniqueEmails = unique(emails);\n            // eslint-disable-next-line\n            const sendPrefs = await getSendPreferences(\n                uniqueEmails,\n                message.data || {},\n                mailSettings,\n                addresses,\n                cache,\n                getPublicKeys\n            );\n            // todo regression testing: https://github.com/ProtonMail/Angular/issues/5088\n\n            console.log('sendPrefs', sendPrefs);\n\n            let packages = await generateTopPackages(message, sendPrefs, data, api);\n            packages = await attachSubPackages(packages, message, emails, sendPrefs);\n            packages = await encryptPackages(message, packages, getAddressKeys);\n\n            console.log('packages', packages);\n\n            // return;\n\n            // Old code save the draft here\n            // New one should have saved it just before\n            // TODO: Do I miss something?\n            //\n            // /*\n            //  * we do not re-encrypt the draft body if the packages contain the draft body: the generatePackages call will have\n            //  * generated the body correctly (otherwise it breaks deduplication)\n            //  */\n            // const encrypt = !packages.map(({ MIMEType }) => MIMEType).includes(message.MIMEType);\n            // // save the draft with the re-encrypted body\n            // await postMessage(message, { loader: false, encrypt });\n\n            // TODO: Restore that with attachments management\n            // // wait on the signature promise after the encrypt, so it can be done in parallel with the encryption\n            // // which is better for performance.\n            // await attachmentUpdates;\n            // message.encrypting = false;\n            // dispatchMessageAction(message);\n\n            // TODO: Define if this risk exist in the new architecture\n            // // Avoid to have SAVE and SEND request in the same time\n            // // Make sure to keep that just before the send message API request\n            // await composerRequestModel.chain(message);\n\n            // TODO: Implement retry system\n            // const suppress = retry ? [API_CUSTOM_ERROR_CODES.MESSAGE_VALIDATE_KEY_ID_NOT_ASSOCIATED] : [];\n            // try {\n            const { Sent } = await api(sendMessage(message.data?.ID, { Packages: packages } as any));\n            console.log('Sent', Sent);\n            return { data: Sent };\n            // } catch (e) {\n            //     if (retry && e.data.Code === API_CUSTOM_ERROR_CODES.MESSAGE_VALIDATE_KEY_ID_NOT_ASSOCIATED) {\n            //         sendPreferences.clearCache();\n            //         keyCache.clearCache();\n            //         // retry if we used the wrong keys\n            //         return send(message, parameters, false);\n            //     }\n            //     throw e;\n            // }\n        },\n        [mailSettings, addresses, cache, getPublicKeys]\n    );\n};\n","import { encryptMessage, PmcryptoKey } from 'pmcrypto';\nimport { MessageExtended } from '../../models/message';\n\n// Reference: Angular/src/app/message/factories/messageModel.js encryptBody\n\nexport const encryptBody = async (\n    message: MessageExtended,\n    privateKeys: PmcryptoKey[],\n    publicKeys: PmcryptoKey[]\n): Promise<MessageExtended> => {\n    const { data } = await encryptMessage({\n        data: message.content || '',\n        publicKeys: [publicKeys[0]],\n        privateKeys,\n        format: 'utf8',\n        compression: true\n    });\n\n    return { ...message, data: { ...message.data, Body: data } };\n};\n","import { useCallback } from 'react';\nimport { useGetPublicKeys, useGetAddressKeys } from 'react-components';\nimport { splitKeys } from 'proton-shared/lib/keys/keys';\n\nimport { encryptBody } from '../helpers/message/messageEncrypt';\nimport { MessageExtended } from '../models/message';\n\nexport const useEncryptMessage = () => {\n    const getPublicKeys = useGetPublicKeys();\n    const getAddressKeys = useGetAddressKeys();\n\n    // TODO: Cache result\n    return useCallback(\n        async (message: MessageExtended): Promise<MessageExtended> => {\n            const [{ publicKeys = [] }, addressKeys] = await Promise.all([\n                getPublicKeys(message.data?.Sender?.Address),\n                getAddressKeys(message.data?.AddressID)\n            ]);\n            const { privateKeys } = splitKeys(addressKeys) as any;\n\n            return encryptBody(message, privateKeys, publicKeys);\n        },\n        [getPublicKeys, getAddressKeys]\n    );\n};\n","import React, { useEffect, createContext, ReactNode } from 'react';\nimport { useInstance, useEventManager } from 'react-components';\nimport createCache from 'proton-shared/lib/helpers/cache';\nimport createLRU from 'proton-shared/lib/helpers/lru';\nimport { EVENT_ACTIONS } from 'proton-shared/lib/constants';\nimport { diff } from 'proton-shared/lib/helpers/array';\nimport { omit } from 'proton-shared/lib/helpers/object';\n\nimport { Event } from '../models/eventManager';\nimport { Cache } from '../models/utils';\nimport { MessageExtended } from '../models/message';\n\nexport type MessageCache = Cache<string, MessageExtended>;\n\n/**\n * Context to use to get a reference on the message cache\n */\nexport const MessageContext = createContext<MessageCache>(null as any);\n\n/**\n * Event management logic for messages\n */\nconst messageListener = (cache: MessageCache) => ({ Messages }: Event) => {\n    if (!Array.isArray(Messages)) {\n        return;\n    }\n\n    for (const { ID, Action, Message } of Messages) {\n        // Ignore updates for non-fetched messages.\n        if (!cache.has(ID)) {\n            continue;\n        }\n        if (Action === EVENT_ACTIONS.DELETE) {\n            cache.delete(ID);\n        }\n        if (Action === EVENT_ACTIONS.UPDATE_DRAFT) {\n            console.warn('Event type UPDATE_DRAFT on Message not supported', Messages);\n        }\n        if (Action === EVENT_ACTIONS.UPDATE_FLAGS) {\n            const currentValue = cache.get(ID);\n            const messageEventData = Message;\n\n            const LabelIDs = diff(currentValue.data?.LabelIDs || [], messageEventData.LabelIDsRemoved || []).concat(\n                messageEventData.LabelIDsAdded\n            );\n            const MessageToUpdate = omit(Message, ['LabelIDsRemoved', 'LabelIDsAdded']);\n\n            cache.set(ID, {\n                ...currentValue,\n                data: {\n                    ...currentValue.data,\n                    LabelIDs,\n                    ...MessageToUpdate\n                }\n            });\n        }\n    }\n};\n\ninterface Props {\n    children?: ReactNode;\n}\n\n/**\n * Provider for the message cache and listen to event manager for updates\n */\nconst MessageProvider = ({ children }: Props) => {\n    const { subscribe } = useEventManager();\n\n    const cache: MessageCache = useInstance(() => {\n        return createCache(createLRU({ max: 50 } as any));\n    });\n\n    useEffect(() => subscribe(messageListener(cache)), []);\n\n    return <MessageContext.Provider value={cache}>{children}</MessageContext.Provider>;\n};\n\nexport default MessageProvider;\n","import { useEffect, useCallback, useState, useMemo, useContext } from 'react';\nimport { c } from 'ttag';\nimport { useApi, useEventManager } from 'react-components';\nimport {\n    getMessage,\n    markMessageAsRead,\n    createDraft as createDraftApi,\n    updateDraft,\n    deleteMessages\n} from 'proton-shared/lib/api/messages';\nimport { wait } from 'proton-shared/lib/helpers/promise';\n\nimport { transformEscape } from '../helpers/transforms/transformEscape';\nimport { transformLinks } from '../helpers/transforms/transformLinks';\nimport { transformEmbedded } from '../helpers/transforms/transformEmbedded';\nimport { transformWelcome } from '../helpers/transforms/transformWelcome';\nimport { transformBlockquotes } from '../helpers/transforms/transformBlockquotes';\nimport { transformStylesheet } from '../helpers/transforms/transformStylesheet';\nimport { transformRemote } from '../helpers/transforms/transformRemote';\nimport { transformBase } from '../helpers/transforms/transformBase';\nimport { useDecryptMessage } from './useDecryptMessage';\nimport { AttachmentsCache, useAttachmentsCache } from './useAttachments';\nimport { Message, MessageExtended } from '../models/message';\nimport { useSendMessage } from './useSendMessage';\nimport { MailSettings, Api } from '../models/utils';\nimport { useEncryptMessage } from './useEncryptMessage';\nimport { MESSAGE_ACTIONS } from '../constants';\nimport { MessageContext } from '../containers/MessageProvider';\n\nexport interface ComputationOption {\n    cache: any;\n    mailSettings: MailSettings;\n    api: Api;\n    attachmentsCache: AttachmentsCache;\n}\n\nexport interface Computation {\n    (message: MessageExtended, options: ComputationOption):\n        | Promise<Partial<MessageExtended>>\n        | Partial<MessageExtended>;\n}\n\ninterface MessageActions {\n    load: () => Promise<void>;\n    initialize: () => Promise<void>;\n    loadRemoteImages: () => Promise<void>;\n    loadEmbeddedImages: () => Promise<void>;\n    createDraft: (message: MessageExtended) => Promise<void>;\n    saveDraft: (message: MessageExtended) => Promise<void>;\n    send: (message: MessageExtended) => Promise<void>;\n    deleteDraft: () => Promise<void>;\n}\n\ninterface MessageActivity {\n    lock: boolean;\n    current: string;\n}\n\n/**\n * Apply updates from the message model to the message in state\n */\nexport const mergeMessages = (messageState: MessageExtended, messageModel: MessageExtended) => {\n    if (messageState.document) {\n        messageState.document.innerHTML = messageModel.content || '';\n    }\n    const message = {\n        ...messageState,\n        content: messageModel.content,\n        data: { ...messageState.data, ...messageModel.data }\n    };\n    return message;\n};\n\n/**\n * Only takes technical stuff from the updated message\n */\nexport const mergeSavedMessage = (messageSaved: Message = {}, messageReturned: Message) => ({\n    ...messageSaved,\n    ID: messageReturned.ID,\n    ParentID: messageReturned.ParentID,\n    Time: messageReturned.Time,\n    ContextTime: messageReturned.ContextTime,\n    ConversationID: messageReturned.ConversationID\n});\n\nexport const useMessage = (\n    inputMessage: Message = {},\n    mailSettings: any\n): [MessageExtended, MessageActions, MessageActivity] => {\n    const api = useApi();\n    const { call } = useEventManager();\n    const cache = useContext(MessageContext);\n    const computeCache = useMemo(() => new Map(), []);\n    const attachmentsCache = useAttachmentsCache();\n\n    // messageID change ONLY when a draft is created\n    const [messageID, setMessageID] = useState(inputMessage.ID || '');\n    const [message, setMessage] = useState<MessageExtended>(\n        cache.has(messageID) ? cache.get(messageID) : { data: inputMessage }\n    );\n    const [messageActivity, setMessageActivity] = useState<MessageActivity>({ lock: false, current: '' });\n\n    const decrypt = useDecryptMessage();\n    const encrypt = useEncryptMessage();\n    const sendMessage = useSendMessage();\n\n    // Update messageID if component is reused for another message\n    useEffect(() => {\n        if (!!inputMessage.ID && inputMessage.ID !== messageID) {\n            setMessageID(inputMessage.ID);\n        }\n    }, [inputMessage]);\n\n    // Update message state and listen to cache for updates on the current message\n    useEffect(() => {\n        if (cache.has(messageID)) {\n            setMessage(cache.get(messageID));\n        } else {\n            const message = { data: inputMessage };\n            cache.set(messageID, message);\n            setMessage(message);\n        }\n\n        return cache.subscribe((changedMessageID) => {\n            // Prevent updates on message deltion from the cache to prevent undefined message in state.\n            if (changedMessageID === messageID && cache.has(messageID)) {\n                setMessage(cache.get(messageID));\n            }\n        });\n    }, [messageID, cache]);\n\n    const transforms = [\n        transformEscape,\n        transformBase,\n        transformLinks,\n        transformEmbedded,\n        transformWelcome,\n        transformBlockquotes,\n        transformStylesheet,\n        transformRemote\n    ] as Computation[];\n\n    const loadData = useCallback(\n        async ({ data: message = {} }: MessageExtended) => {\n            // If the Body is already there, no need to send a request\n            if (!message.Body) {\n                const { Message } = await api(getMessage(message.ID));\n                return { data: Message as Message };\n            }\n            return {} as MessageExtended;\n        },\n        [api]\n    );\n\n    const markAsRead = useCallback(\n        async ({ data: message = {} }: MessageExtended) => {\n            const markAsRead = async () => {\n                await api(markMessageAsRead([message.ID || '']));\n                call();\n            };\n\n            if (message.Unread) {\n                markAsRead(); // No await to not slow down the UX\n                return { data: { ...message, Unread: 0 } } as MessageExtended;\n            }\n\n            return {} as MessageExtended;\n        },\n        [api]\n    );\n\n    const create = useCallback(\n        async (message: MessageExtended = {}) => {\n            const { Message } = await api(\n                createDraftApi({\n                    Action: message.action !== MESSAGE_ACTIONS.NEW ? message.action : undefined,\n                    Message: message.data\n                } as any)\n            );\n            call();\n            return { data: mergeSavedMessage(message.data, Message) };\n        },\n        [api]\n    );\n\n    const update = useCallback(\n        async (message: MessageExtended = {}) => {\n            const { Message } = await api(updateDraft(message.data?.ID, message.data));\n            call();\n            return { data: mergeSavedMessage(message.data, Message) };\n        },\n        [api]\n    );\n\n    const deleteRequest = useCallback(\n        async (message: MessageExtended = {}) => {\n            await api(deleteMessages([message.data?.ID]));\n            call();\n            return {};\n        },\n        [api]\n    );\n\n    const activities = new Map<Computation, string>([\n        [encrypt, c('Action').t`Encrypting`],\n        [create, c('Action').t`Creating`],\n        [update, c('Action').t`Saving`],\n        [sendMessage, c('Action').t`Sending`],\n        [deleteRequest, c('Action').t`Deleting`]\n    ]);\n    transforms.forEach((transform) => activities.set(transform, c('Action').t`Processing`));\n\n    /**\n     * Run a computation on a message, wait until it finish\n     * Return the message extanded with the result of the computation\n     */\n    const runSingle = useCallback(\n        async (message: MessageExtended, compute: Computation) => {\n            let current = '';\n            if (activities.has(compute)) {\n                current = activities.get(compute) as string;\n            }\n            setMessageActivity({ lock: true, current });\n\n            const result = (await compute(message, { cache: computeCache, mailSettings, api, attachmentsCache })) || {};\n\n            if (result.document) {\n                result.content = result.document.innerHTML;\n            }\n\n            return { ...message, ...result } as MessageExtended;\n        },\n        [cache]\n    );\n\n    type CacheUpdate = (newMessage: MessageExtended) => Promise<void> | void;\n\n    const simpleUpdateCache: CacheUpdate = (newMessage: MessageExtended) => {\n        cache.set(messageID, newMessage);\n    };\n\n    /**\n     * Run a list of computation sequentially\n     * updateCacheCallback is used to update the cache value after computations but before unlocking the message\n     * A callback is needed here because it's better to position precisely the moment where to update the cache\n     */\n    const run = useCallback(\n        async (\n            message: MessageExtended,\n            computes: Computation[],\n            updateCacheCallback: CacheUpdate = simpleUpdateCache\n        ) => {\n            setMessageActivity({ lock: true, current: '' });\n            const result = await computes.reduce(\n                async (messagePromise: Promise<MessageExtended>, compute: Computation) => {\n                    return runSingle(await messagePromise, compute);\n                },\n                Promise.resolve(message)\n            );\n            await updateCacheCallback(result);\n            // Allow the cache update to be dispatched in React before resolving (simplify several race conditions)\n            await wait(0);\n            setMessageActivity({ lock: false, current: '' });\n            return result;\n        },\n        [runSingle, cache]\n    );\n\n    const load = useCallback(async () => {\n        await run(message, [loadData]);\n    }, [messageID, message, run, cache]);\n\n    const initialize = useCallback(async () => {\n        cache.set(messageID, { ...message, initialized: false });\n        await run(\n            message,\n            [loadData, decrypt, markAsRead, ...transforms] as Computation[],\n            (newMessage: MessageExtended) => cache.set(messageID, { ...newMessage, initialized: true })\n        );\n    }, [messageID, message, run, cache]);\n\n    const loadRemoteImages = useCallback(async () => {\n        await run({ ...message, showRemoteImages: true }, [transformRemote as Computation]);\n    }, [messageID, message, message, run, cache]);\n\n    const loadEmbeddedImages = useCallback(async () => {\n        await run({ ...message, showEmbeddedImages: true }, [transformEmbedded]);\n    }, [messageID, message, run, cache]);\n\n    const createDraft = useCallback(\n        async (message: MessageExtended) => {\n            await run(message, [encrypt, create] as Computation[], (newMessage: MessageExtended) => {\n                cache.set(newMessage.data?.ID || '', newMessage);\n                setMessageID(newMessage.data?.ID || '');\n            });\n        },\n        [message, run, cache]\n    );\n\n    const saveDraft = useCallback(\n        async (messageModel: MessageExtended) => {\n            await run(mergeMessages(message, messageModel), [encrypt, update]);\n        },\n        [message, run, cache]\n    );\n\n    const send = useCallback(\n        async (messageModel: MessageExtended) => {\n            await run(mergeMessages(message, messageModel), [encrypt, update, sendMessage]);\n        },\n        [message, run, cache]\n    );\n\n    const deleteDraft = useCallback(async () => {\n        await run(message, [deleteRequest], () => cache.delete(messageID));\n    }, [message, run, cache]);\n\n    return [\n        message,\n        {\n            load,\n            initialize,\n            loadRemoteImages,\n            loadEmbeddedImages,\n            createDraft,\n            saveDraft,\n            send,\n            deleteDraft\n        },\n        messageActivity\n    ];\n};\n","import React, { useEffect, useRef } from 'react';\nimport { useToggle, Loader, classnames } from 'react-components';\n\nimport { hasAttachments, isDraft } from '../../helpers/message/messages';\nimport { Label } from '../../models/label';\nimport MessageBody from './MessageBody';\nimport HeaderCollapsed from './header/HeaderCollapsed';\nimport HeaderExpanded from './header/HeaderExpanded';\nimport MessageFooter from './MessageFooter';\nimport { Message } from '../../models/message';\nimport { useMessage } from '../../hooks/useMessage';\nimport { OnCompose } from '../../containers/ComposerContainer';\n\ninterface Props {\n    labels: Label[];\n    message: Message;\n    mailSettings: any;\n    initialExpand?: boolean;\n    conversationIndex?: number;\n    onCompose: OnCompose;\n}\n\nconst MessageView = ({\n    labels = [],\n    message: inputMessage,\n    mailSettings,\n    initialExpand = true,\n    conversationIndex = 0,\n    onCompose\n}: Props) => {\n    const draft = isDraft(inputMessage);\n\n    const { state: expanded, set: setExpanded } = useToggle(initialExpand && !draft);\n    const elementRef = useRef<HTMLElement>(null);\n    const [message, { load, initialize, loadRemoteImages, loadEmbeddedImages }] = useMessage(\n        inputMessage,\n        mailSettings\n    );\n\n    const loaded = !!message?.initialized;\n\n    const prepareMessage = async () => {\n        if (typeof message?.initialized === 'undefined') {\n            await initialize();\n        }\n\n        // Don't scroll if it's the first message of the conversation and only on the first automatic expand\n        if (conversationIndex !== 0 && initialExpand) {\n            elementRef.current && elementRef.current.scrollIntoView({ behavior: 'smooth', block: 'start' });\n        }\n    };\n\n    useEffect(() => {\n        if (!draft && !loaded && expanded) {\n            prepareMessage();\n        }\n\n        if (draft && message.data?.Subject === undefined) {\n            load();\n        }\n    }, [message, loaded, expanded]);\n\n    const handleLoadRemoteImages = async () => {\n        await loadRemoteImages();\n    };\n\n    const handleLoadEmbeddedImages = async () => {\n        await loadEmbeddedImages();\n    };\n\n    const handleExpand = (value: boolean) => () => {\n        if (draft) {\n            onCompose({ existingDraft: message });\n        } else {\n            setExpanded(value);\n        }\n    };\n\n    return (\n        <article ref={elementRef} className={classnames(['message-container mb2', expanded && 'is-opened'])}>\n            {expanded ? (\n                <>\n                    <HeaderExpanded\n                        message={message}\n                        messageLoaded={loaded}\n                        onLoadRemoteImages={handleLoadRemoteImages}\n                        onLoadEmbeddedImages={handleLoadEmbeddedImages}\n                        labels={labels}\n                        mailSettings={mailSettings}\n                        onCollapse={handleExpand(false)}\n                        onCompose={onCompose}\n                    />\n                    {loaded ? (\n                        <>\n                            <MessageBody message={message} />\n                            {hasAttachments(message.data) ? <MessageFooter message={message} /> : null}\n                        </>\n                    ) : (\n                        <Loader />\n                    )}\n                </>\n            ) : (\n                <HeaderCollapsed message={message} labels={labels} onExpand={handleExpand(true)} />\n            )}\n        </article>\n    );\n};\n\nexport default MessageView;\n","import React, { useEffect, createContext, ReactNode } from 'react';\nimport { useInstance, useEventManager } from 'react-components';\nimport createCache from 'proton-shared/lib/helpers/cache';\nimport createLRU from 'proton-shared/lib/helpers/lru';\nimport { EVENT_ACTIONS } from 'proton-shared/lib/constants';\nimport { omit } from 'proton-shared/lib/helpers/object';\n\nimport { Event } from '../models/eventManager';\nimport { Cache } from '../models/utils';\nimport { ConversationResult } from '../hooks/useConversation';\n\nexport type ConversationCache = Cache<string, ConversationResult>;\n\n/**\n * Context to use to get a reference on the conversation cache\n */\nexport const ConversationContext = createContext<ConversationCache>(null as any);\n\n/**\n * Event management logic for conversations\n */\nconst conversationListener = (cache: ConversationCache) => ({ Conversations }: Event) => {\n    if (!Array.isArray(Conversations)) {\n        return;\n    }\n\n    for (const { ID, Action, Conversation } of Conversations) {\n        // Ignore updates for non-fetched messages.\n        if (!cache.has(ID)) {\n            continue;\n        }\n        if (Action === EVENT_ACTIONS.DELETE) {\n            cache.delete(ID);\n        }\n        if (Action === EVENT_ACTIONS.UPDATE_DRAFT) {\n            console.warn('Event type UPDATE_DRAFT on Conversation not supported', Conversations);\n        }\n        if (Action === EVENT_ACTIONS.UPDATE_FLAGS) {\n            const currentValue = cache.get(ID);\n\n            cache.set(ID, {\n                Conversation: {\n                    ...currentValue.Conversation,\n                    ...omit(Conversation, ['LabelIDsRemoved', 'LabelIDsAdded'])\n                },\n                Messages: currentValue.Messages\n            });\n        }\n    }\n};\n\ninterface Props {\n    children?: ReactNode;\n}\n\n/**\n * Provider for the message cache and listen to event manager for updates\n */\nconst ConversationProvider = ({ children }: Props) => {\n    const { subscribe } = useEventManager();\n\n    const cache: ConversationCache = useInstance(() => {\n        return createCache(createLRU({ max: 50 } as any));\n    });\n\n    useEffect(() => subscribe(conversationListener(cache)), []);\n\n    return <ConversationContext.Provider value={cache}>{children}</ConversationContext.Provider>;\n};\n\nexport default ConversationProvider;\n","import { Message } from '../../models/message';\nimport { MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\nimport { isCustomLabel } from '../labels';\nimport { hasLabel } from '../elements';\nimport { isDraft, isSentAutoReply } from './messages';\n\n// Reference: Angular/src/app/message/services/findExpandableMessage.js\n\n/**\n * Filter the list of message to find the first readable message\n * - iterate backwards\n * - check if the previous item is read\n * - if the previous isRead === 1, break the iteration\n */\nconst getFirstMessageToRead = (messages: Message[]): Message => {\n    // A conversation can contains only one draft\n    if (messages.length === 0) {\n        return {};\n    }\n\n    // Else we open the first message unread beginning to the end list\n    let index = messages.length;\n    let contains = false;\n\n    while (--index > 0) {\n        if (messages[index - 1].Unread === 0) {\n            // Is read\n            contains = true;\n            break;\n        }\n    }\n\n    const position = contains ? index : 0;\n\n    return messages[position];\n};\n\nconst getLast = (messages: Message[]): Message => {\n    if (messages.length === 0) {\n        return {};\n    }\n    return messages[messages.length - 1];\n};\n\n/**\n * Find in the message to scroll and expand\n */\nexport const findMessageToExpand = (labelID = '', messages: Message[] = []): Message => {\n    if (messages.length === 0) {\n        return {};\n    }\n\n    if (labelID === MAILBOX_LABEL_IDS.STARRED || isCustomLabel(labelID)) {\n        return getFirstMessageToRead(messages.filter((message) => hasLabel(message, labelID) && !isDraft(message)));\n    }\n\n    if (labelID === MAILBOX_LABEL_IDS.DRAFTS || labelID === MAILBOX_LABEL_IDS.ALL_DRAFTS) {\n        return getLast(messages.filter(isDraft));\n    }\n\n    const realMessages = messages.filter((message) => !isDraft(message) && !isSentAutoReply(message));\n    const latest = getLast(realMessages);\n\n    if (latest && latest.Unread === 0) {\n        return latest;\n    }\n\n    return getFirstMessageToRead(realMessages);\n};\n","import React from 'react';\nimport { c } from 'ttag';\n\ninterface Props {\n    inTrash: boolean;\n    filter: boolean;\n    onToggle: () => void;\n}\n\nconst TrashWarning = ({ inTrash, filter, onToggle }: Props) => {\n    return (\n        <div className=\"containsMessage flex flex-column\">\n            <p className=\"bordered-container flex pt0-5 pb0-5 pl1 pr1\">\n                {inTrash\n                    ? c('Info').t`This conversation contains non-trashed messages.`\n                    : c('Info').t`This conversation contains trashed messages.`}\n                <a onClick={onToggle} className=\"ml0-5\">\n                    {inTrash\n                        ? filter\n                            ? c('Action').t`Show non-trashed messages`\n                            : c('Action').t`Hide non-trashed messages`\n                        : filter\n                        ? c('Action').t`Show trashed messages`\n                        : c('Action').t`Hide trashed messages`}\n                </a>\n            </p>\n        </div>\n    );\n};\n\nexport default TrashWarning;\n","import React from 'react';\nimport { Loader, useLabels, useToggle, useApi, useEventManager } from 'react-components';\nimport { unlabelConversations } from 'proton-shared/lib/api/conversations';\n\nimport MessageView from '../message/MessageView';\nimport ItemStar from '../list/ItemStar';\nimport NumMessages from './NumMessages';\nimport ItemLabels from '../list/ItemLabels';\nimport { ConversationResult, useConversation } from '../../hooks/useConversation';\nimport { findMessageToExpand } from '../../helpers/message/messageExpandable';\nimport TrashWarning from './TrashWarning';\nimport { MAILBOX_LABEL_IDS } from 'proton-shared/lib/constants';\nimport { hasLabel } from '../../helpers/elements';\nimport { OnCompose } from '../../containers/ComposerContainer';\n\ninterface Props {\n    labelID: string;\n    conversationID: string;\n    messageID?: string;\n    mailSettings: any;\n    onCompose: OnCompose;\n}\n\nconst ConversationView = ({ labelID, conversationID, mailSettings, onCompose }: Props) => {\n    const [labels] = useLabels();\n    const [conversationData, loading] = useConversation(conversationID);\n    const { state: filter, toggle: toggleFilter } = useToggle(true);\n    const api = useApi();\n    const { call } = useEventManager();\n\n    if (loading) {\n        return <Loader />;\n    }\n\n    const { Conversation: conversation, Messages: messages = [] } = conversationData as ConversationResult;\n\n    if (!conversation) {\n        return null;\n    }\n\n    const inTrash = labelID === MAILBOX_LABEL_IDS.TRASH;\n    const filteredMessages = messages.filter((message) => inTrash === hasLabel(message, MAILBOX_LABEL_IDS.TRASH));\n    const messagesToShow = filter ? filteredMessages : messages;\n    const showTrashWarning = filteredMessages.length !== messages.length;\n\n    const initialExpand = findMessageToExpand(labelID, messagesToShow).ID;\n\n    const handleRemoveLabel = async (labelID: string) => {\n        await api(unlabelConversations({ LabelID: labelID, IDs: [conversation.ID] }));\n        await call();\n    };\n\n    return (\n        <>\n            <header className=\"flex flex-column mb1\">\n                <div className=\"flex flex-nowrap flex-spacebetween flex-items-center mb1\">\n                    <h2 className=\"mb0\">\n                        <NumMessages className=\"mr0-25\" conversation={conversation} />\n                        {conversation.Subject}\n                    </h2>\n                    <div>\n                        <ItemLabels labels={labels} max={4} element={conversation} onUnlabel={handleRemoveLabel} />\n                        {' ' /* This space is important to keep a small space between elements */}\n                        <ItemStar element={conversation} />\n                    </div>\n                </div>\n                {showTrashWarning && <TrashWarning inTrash={inTrash} filter={filter} onToggle={toggleFilter} />}\n            </header>\n            {messagesToShow.map((message, index) => (\n                <MessageView\n                    key={message.ID}\n                    message={message}\n                    initialExpand={message.ID === initialExpand}\n                    labels={labels}\n                    mailSettings={mailSettings}\n                    conversationIndex={index}\n                    onCompose={onCompose}\n                />\n            ))}\n        </>\n    );\n};\n\nexport default ConversationView;\n","import { useEffect, useContext, useState } from 'react';\nimport { getConversation } from 'proton-shared/lib/api/conversations';\nimport { useApi, useLoading } from 'react-components';\n\nimport { Conversation } from '../models/conversation';\nimport { Message } from '../models/message';\nimport { ConversationContext } from '../containers/ConversationProvider';\n\nexport interface ConversationResult {\n    Conversation: Conversation;\n    Messages?: Message[];\n}\n\nexport const useConversation = (conversationID: string): [ConversationResult | undefined, boolean] => {\n    const cache = useContext(ConversationContext);\n    const api = useApi();\n    const [loading, withLoading] = useLoading(true);\n    const [conversation, setConversation] = useState<ConversationResult>(cache.get(conversationID));\n\n    useEffect(() => {\n        const load = async () => {\n            const result = await api(getConversation(conversationID));\n            cache.set(conversationID, result);\n        };\n\n        if (!cache.has(conversationID)) {\n            withLoading(load());\n        }\n\n        setConversation(cache.get(conversationID));\n\n        return cache.subscribe((changedId: string) => {\n            if (conversationID === changedId) {\n                setConversation(cache.get(conversationID));\n            }\n        });\n    }, [conversationID, api, cache]);\n\n    return [conversation, !conversation || loading];\n};\n","import React from 'react';\nimport { useUser, useModals, LinkButton, AuthenticatedBugModal } from 'react-components';\nimport { c, ngettext, msgid } from 'ttag';\nimport { capitalize } from 'proton-shared/lib/helpers/string';\n\nimport unreadEmailsSvg from 'design-system/assets/img/shared/unread-emails.svg';\nimport { LabelCount } from '../../models/label';\n\ninterface Props {\n    labelCount: LabelCount;\n}\n\nconst WelcomePane = ({ labelCount }: Props) => {\n    const [user] = useUser();\n    const { createModal } = useModals();\n\n    const Unread = labelCount.Unread || 0;\n\n    const unreadsLabel = (\n        <strong key=\"unreads-label\">\n            {ngettext(msgid`${Unread} unread email`, `${Unread} unread emails`, Unread)}\n        </strong>\n    );\n\n    const reportBugButton = (\n        <LinkButton key=\"report-bug-btn\" onClick={() => createModal(<AuthenticatedBugModal />)}>{c('Action')\n            .t`report a bug`}</LinkButton>\n    );\n\n    return (\n        <div className=\"flex-item-fluid aligncenter p3\">\n            <h1>\n                {user.DisplayName ? c('Title').t`Welcome, ${capitalize(user.DisplayName)}!` : c('Title').t`Welcome`}\n            </h1>\n            {Unread ? <p>{c('Info').jt`You have ${unreadsLabel} in this folder`}</p> : null}\n            {user.hasPaidMail ? (\n                <>\n                    <p className=\"mw40e center mb2\">\n                        {c('Info')\n                            .jt`Having trouble sending or receiving emails? Interested in helping us improve our service? Feel free to ${reportBugButton}.`}\n                    </p>\n                    <img src={unreadEmailsSvg} alt={c('Alternative text for welcome image').t`Welcome`} />\n                </>\n            ) : (\n                <>\n                    <p>{c('Info')\n                        .t`Upgrade to a paid plan starting from $4/month only and get additional storage capacity and more addresses with ProtonMail Plus.`}</p>\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default WelcomePane;\n","import React, { useMemo } from 'react';\nimport { Button, useLabels } from 'react-components';\nimport { c, ngettext, msgid } from 'ttag';\n\nimport conversationSingleSvg from 'design-system/assets/img/shared/selected-conversation-single.svg';\nimport conversationManySvg from 'design-system/assets/img/shared/selected-conversation-many.svg';\nimport { LabelCount } from '../../models/label';\nimport { getLabelName } from '../../helpers/labels';\n\ninterface Props {\n    labelCount: LabelCount;\n    checkedIDs?: string[];\n    onUncheckAll: () => void;\n}\n\nconst SelectionPane = ({ labelCount, checkedIDs = [], onUncheckAll }: Props) => {\n    const [labels] = useLabels();\n\n    const total = labelCount.Total || 0;\n    const checkeds = checkedIDs.length;\n\n    const labelName = useMemo(() => getLabelName(labelCount.LabelID || '', labels), [labels, labelCount]);\n\n    return (\n        <div className=\"flex-item-fluid aligncenter p3\">\n            {checkeds === 0 && labelName && <h3 className=\"bold\">{labelName}</h3>}\n            <p className=\"mb2\">\n                {checkeds === 0\n                    ? ngettext(\n                          msgid`You have ${total} stored in this folder`,\n                          `You have ${total} stored in this folder`,\n                          total\n                      )\n                    : ngettext(\n                          msgid`You selected ${checkeds} element from this folder`,\n                          `You selected ${checkeds} elements from this folder`,\n                          checkeds\n                      )}\n            </p>\n            <div className=\"mb2\">\n                <img\n                    src={checkeds > 1 ? conversationManySvg : conversationSingleSvg}\n                    alt={c('Alternative text for conversation image').t`Conversation`}\n                />\n            </div>\n            {checkeds > 0 && <Button onClick={onUncheckAll}>{c('Action').t`Deselect`}</Button>}\n        </div>\n    );\n};\n\nexport default SelectionPane;\n","import React, { useEffect, useMemo } from 'react';\nimport { Location } from 'history';\n\nimport WelcomePane from './WelcomePane';\nimport SelectionPane from './SelectionPane';\nimport { ELEMENT_TYPES } from '../../constants';\nimport { useConversationCounts, useMessageCounts } from 'react-components';\nimport { getCurrentType } from '../../helpers/elements';\nimport { LabelCount } from '../../models/label';\n\ninterface Props {\n    labelID: string;\n    checkedIDs?: string[];\n    onUncheckAll: () => void;\n    welcomeRef: any;\n    mailSettings: any;\n    location: Location;\n}\n\nconst PlaceholderView = ({\n    labelID = '',\n    checkedIDs = [],\n    onUncheckAll,\n    welcomeRef,\n    mailSettings,\n    location\n}: Props) => {\n    const [conversationCounts] = useConversationCounts();\n    const [messageCounts] = useMessageCounts();\n    const type = getCurrentType({ mailSettings, labelID, location });\n\n    useEffect(\n        () => () => {\n            welcomeRef.current = true;\n        },\n        []\n    );\n\n    const labelCount: LabelCount = useMemo(() => {\n        const counters = type === ELEMENT_TYPES.CONVERSATION ? conversationCounts : messageCounts;\n\n        if (!Array.isArray(counters)) {\n            return 0;\n        }\n\n        return counters.find((counter) => counter.LabelID === labelID) || { LabelID: '', Unread: 0, Total: 0 };\n    }, [labelID, conversationCounts, messageCounts]);\n\n    return welcomeRef.current || checkedIDs.length > 0 ? (\n        <SelectionPane labelCount={labelCount} checkedIDs={checkedIDs} onUncheckAll={onUncheckAll} />\n    ) : (\n        <WelcomePane labelCount={labelCount} />\n    );\n};\n\nexport default PlaceholderView;\n","import React from 'react';\nimport { useLabels } from 'react-components';\n\nimport MessageView from '../message/MessageView';\nimport ItemStar from '../list/ItemStar';\nimport ItemLabels from '../list/ItemLabels';\nimport { useMessage } from '../../hooks/useMessage';\nimport { OnCompose } from '../../containers/ComposerContainer';\n\ninterface Props {\n    messageID: string;\n    mailSettings: any;\n    onCompose: OnCompose;\n}\n\nconst MessageOnlyView = ({ messageID, mailSettings, onCompose }: Props) => {\n    const [labels] = useLabels();\n\n    // There is only reading on the message here, no actions\n    // MessageView will be in charge to trigger all messages actions\n    const [message] = useMessage({ ID: messageID }, mailSettings);\n\n    if (!message.data) {\n        return null;\n    }\n\n    return (\n        <>\n            <header className=\"flex flex-nowrap flex-spacebetween flex-items-center mb1\">\n                <h2 className=\"mb0\">{message.data?.Subject}</h2>\n                <div>\n                    <ItemLabels labels={labels} max={4} element={message.data} />\n                    <ItemStar element={message.data} />\n                </div>\n            </header>\n            <MessageView\n                message={message.data}\n                initialExpand={true}\n                labels={labels}\n                mailSettings={mailSettings}\n                onCompose={onCompose}\n            />\n        </>\n    );\n};\n\nexport default MessageOnlyView;\n","import React, { useState, useMemo, useRef, useEffect } from 'react';\nimport { Loader, classnames } from 'react-components';\nimport { History, Location } from 'history';\n\nimport { Element } from '../models/element';\nimport { Sort, Filter, Page, SearchParameters } from '../models/tools';\n\nimport { useMailboxPageTitle } from '../hooks/useMailboxPageTitle';\nimport { useElements } from '../hooks/useElements';\n\nimport { isColumnMode, isConversationMode } from '../helpers/mailSettings';\nimport { getSearchParams } from '../helpers/url';\nimport {\n    pageFromUrl,\n    sortFromUrl,\n    filterFromUrl,\n    setPageInUrl,\n    setSortInUrl,\n    setFilterInUrl,\n    setPathInUrl,\n    extractSearchParameters\n} from '../helpers/mailboxUrl';\n\nimport Toolbar from '../components/toolbar/Toolbar';\nimport List from '../components/list/List';\nimport ConversationView from '../components/conversation/ConversationView';\nimport PlaceholderView from '../components/view/PlaceholderView';\nimport MessageOnlyView from '../components/message/MessageOnlyView';\nimport { OnCompose } from './ComposerContainer';\nimport { PAGE_SIZE } from '../constants';\nimport { isMessage } from '../helpers/elements';\nimport { isDraft } from '../helpers/message/messages';\n\nimport './main-area.scss';\n\ninterface Props {\n    labelID: string;\n    mailSettings: any;\n    elementID?: string;\n    location: Location;\n    history: History;\n    onCompose: OnCompose;\n}\n\nconst MailboxContainer = ({\n    labelID: inputLabelID,\n    mailSettings,\n    elementID: inputElementID,\n    location,\n    history,\n    onCompose\n}: Props) => {\n    const columnMode = isColumnMode(mailSettings);\n\n    // Page state is hybrid: page number is handled by the url, total computed in useElements, size and limit are constants\n    // Yet, it is simpler to co-localize all these data in one object\n    const [page, setPage] = useState<Page>({\n        page: pageFromUrl(location),\n        total: 0,\n        size: PAGE_SIZE,\n        limit: PAGE_SIZE\n    });\n\n    const searchParams = getSearchParams(location);\n    const conversationMode = isConversationMode(inputLabelID, mailSettings, location);\n    const searchParameters = useMemo<SearchParameters>(() => extractSearchParameters(location), [\n        searchParams.address,\n        searchParams.from,\n        searchParams.to,\n        searchParams.keyword,\n        searchParams.begin,\n        searchParams.end,\n        searchParams.attachments,\n        searchParams.wildcard\n    ]);\n    const sort = useMemo<Sort>(() => sortFromUrl(location), [searchParams.sort]);\n    const filter = useMemo<Filter>(() => filterFromUrl(location), [searchParams.filter]);\n\n    const [checkedElements, setCheckedElements] = useState(Object.create(null));\n    const [checkAll, setCheckAll] = useState(false);\n    const welcomeRef = useRef(false);\n\n    const [labelID, elements, loading, total] = useElements({\n        conversationMode,\n        labelID: inputLabelID,\n        page,\n        sort,\n        filter,\n        search: searchParameters\n    });\n\n    useEffect(() => setPage({ ...page, page: pageFromUrl(location) }), [searchParams.page]);\n    useEffect(() => setPage({ ...page, total }), [total]);\n\n    useMailboxPageTitle(labelID, location);\n\n    const checkedIDs = useMemo(() => {\n        return Object.entries(checkedElements).reduce((acc, [elementID, isChecked]) => {\n            if (!isChecked) {\n                return acc;\n            }\n            acc.push(elementID);\n            return acc;\n        }, [] as string[]);\n    }, [checkedElements]);\n\n    const elementID = useMemo(() => {\n        if (checkedIDs.length > 0) {\n            return undefined;\n        }\n        return inputElementID;\n    }, [inputElementID, checkedIDs]);\n\n    const selectedIDs = useMemo(() => {\n        if (checkedIDs.length) {\n            return checkedIDs;\n        }\n        if (elementID) {\n            return [elementID];\n        }\n        return [];\n    }, [checkedIDs, elementID]);\n\n    const handleElement = (element: Element) => {\n        history.push(setPathInUrl(location, labelID, element.ID));\n        if (isMessage(element) && isDraft(element)) {\n            onCompose({ existingDraft: { data: element } });\n        }\n    };\n    const handleBack = () => history.push(setPathInUrl(location, labelID));\n    const handlePage = (pageNumber: number) => history.push(setPageInUrl(location, pageNumber));\n    const handleSort = (sort: Sort) => history.push(setSortInUrl(location, sort));\n    const handleFilter = (filter: Filter) => history.push(setFilterInUrl(location, filter));\n\n    const handleCheck = (IDs: string[] = [], checked = false) => {\n        const update = IDs.reduce((acc, contactID) => {\n            acc[contactID] = checked;\n            return acc;\n        }, Object.create(null));\n        setCheckedElements({ ...checkedElements, ...update });\n        setCheckAll(checked && IDs.length === elements.length);\n    };\n\n    const handleCheckAll = (checked = false) =>\n        handleCheck(\n            elements.map(({ ID = '' }: Element) => ID),\n            checked\n        );\n\n    const handleUncheckAll = () => handleCheckAll(false);\n\n    return (\n        <>\n            <Toolbar\n                location={location}\n                labelID={labelID}\n                elementID={elementID}\n                selectedIDs={selectedIDs}\n                elements={elements}\n                mailSettings={mailSettings}\n                checkAll={checkAll}\n                onCheckAll={handleCheckAll}\n                page={page}\n                onPage={handlePage}\n                sort={sort}\n                onSort={handleSort}\n                filter={filter}\n                onFilter={handleFilter}\n                onBack={handleBack}\n            />\n            <div\n                className={classnames([\n                    'main-area--withToolbar flex-item-fluid flex reset4print',\n                    !columnMode && 'main-area--rowMode'\n                ])}\n            >\n                {(columnMode || !elementID) && (\n                    <div className=\"items-column-list scroll-if-needed scroll-smooth-touch\">\n                        {loading ? (\n                            <div className=\"flex flex-justify-center h100\">\n                                <Loader />\n                            </div>\n                        ) : (\n                            <List\n                                location={location}\n                                labelID={labelID}\n                                mailSettings={mailSettings}\n                                elementID={elementID}\n                                elements={elements}\n                                checkedIDs={checkedIDs}\n                                onCheck={handleCheck}\n                                onClick={handleElement}\n                            />\n                        )}\n                    </div>\n                )}\n                {(columnMode || elementID) && (\n                    <section className=\"view-column-detail p2 flex-item-fluid scroll-if-needed\">\n                        {elementID ? (\n                            conversationMode ? (\n                                <ConversationView\n                                    labelID={labelID}\n                                    mailSettings={mailSettings}\n                                    conversationID={elementID}\n                                    onCompose={onCompose}\n                                />\n                            ) : (\n                                <MessageOnlyView\n                                    mailSettings={mailSettings}\n                                    messageID={elementID}\n                                    onCompose={onCompose}\n                                />\n                            )\n                        ) : (\n                            <PlaceholderView\n                                location={location}\n                                labelID={labelID}\n                                mailSettings={mailSettings}\n                                welcomeRef={welcomeRef}\n                                checkedIDs={checkedIDs}\n                                onUncheckAll={handleUncheckAll}\n                            />\n                        )}\n                    </section>\n                )}\n            </div>\n        </>\n    );\n};\n\nexport default MailboxContainer;\n","import { Location } from 'history';\nimport { useEffect } from 'react';\nimport { useLabels, useUser, useConversationCounts, useMessageCounts, useMailSettings } from 'react-components';\nimport { getLabelName } from '../helpers/labels';\nimport { isConversationMode } from '../helpers/mailSettings';\nimport { toMap } from 'proton-shared/lib/helpers/object';\nimport { LabelCount } from '../models/label';\n\nexport const useMailboxPageTitle = (labelID: string, location: Location) => {\n    const [mailSettings, loadingMailSettings] = useMailSettings();\n    const [labels, loadingLabels] = useLabels();\n    const [user, loadingUser] = useUser();\n    const [conversationCounts, loadingConversationCounts] = useConversationCounts() as [LabelCount[], boolean];\n    const [messageCounts, loadingMessageCounts] = useMessageCounts() as [LabelCount[], boolean];\n    const loadings = [loadingMailSettings, loadingLabels, loadingUser, loadingConversationCounts, loadingMessageCounts];\n\n    useEffect(() => {\n        if (loadings.every((loading) => !loading)) {\n            const conversationMode = isConversationMode(labelID, mailSettings, location);\n            const counters = conversationMode ? conversationCounts : messageCounts;\n            const countersMap = toMap(counters, 'LabelID') as { [labelID: string]: LabelCount };\n            const unreads = (countersMap[labelID] || {}).Unread || 0;\n            const unreadString = unreads > 0 ? `(${unreads}) ` : '';\n            const labelName = getLabelName(labelID, labels);\n            const address = user.Email;\n            document.title = `${unreadString}${labelName} | ${address} | ProtonMail`;\n        }\n    }, [labelID, ...loadings]);\n};\n","import React, { useLayoutEffect } from 'react';\nimport { ErrorBoundary, useMailSettings, Loader, useEventManager } from 'react-components';\n\nimport PrivateLayout from '../components/layout/PrivateLayout';\nimport MailboxContainer from './MailboxContainer';\nimport { HUMAN_TO_LABEL_IDS } from '../constants';\nimport { OnCompose } from './ComposerContainer';\nimport { RouteProps } from '../PrivateApp';\nimport { Event } from '../models/event';\nimport { EVENT_ACTIONS } from 'proton-shared/lib/constants';\nimport { setPathInUrl } from '../helpers/mailboxUrl';\n\ninterface Props extends RouteProps {\n    onCompose: OnCompose;\n}\n\nconst PageContainer = ({ match, location, history, onCompose }: Props) => {\n    const [mailSettings, loadingMailSettings] = useMailSettings();\n    const { subscribe } = useEventManager();\n\n    const { elementID, labelID: currentLabelID = '' } = (match || {}).params || {};\n    const labelID = HUMAN_TO_LABEL_IDS[currentLabelID] || currentLabelID;\n\n    // Detect if the element in URL has been deleted and come back to the label if so\n    useLayoutEffect(\n        () =>\n            subscribe(({ Messages }: Event) => {\n                const match = Messages?.find(({ ID, Action }) => Action === EVENT_ACTIONS.DELETE && ID === elementID);\n\n                if (match) {\n                    history.push(setPathInUrl(location, labelID));\n                }\n            }),\n        [elementID]\n    );\n\n    return (\n        <PrivateLayout labelID={labelID} location={location} history={history} onCompose={onCompose}>\n            <ErrorBoundary>\n                {loadingMailSettings ? (\n                    <Loader />\n                ) : (\n                    <MailboxContainer\n                        labelID={labelID}\n                        mailSettings={mailSettings}\n                        elementID={elementID}\n                        location={location}\n                        history={history}\n                        onCompose={onCompose}\n                    />\n                )}\n            </ErrorBoundary>\n        </PrivateLayout>\n    );\n};\n\nexport default PageContainer;\n","import React from 'react';\nimport { c } from 'ttag';\nimport { Icon, Button, classnames } from 'react-components';\n\nimport { MessageExtended } from '../../models/message';\n\ninterface ButtonProps {\n    onClick: () => void;\n    iconName: string;\n    className?: string;\n}\n\nconst TitleBarButton = ({ onClick, iconName, className = '' }: ButtonProps) => {\n    return (\n        <Button className={classnames(['composer-title-bar-button', className])} onClick={onClick}>\n            <Icon className=\"mauto\" name={iconName} color=\"currentColor\" />\n        </Button>\n    );\n};\n\ninterface Props {\n    message: MessageExtended;\n    minimized: boolean;\n    maximized: boolean;\n    toggleMinimized: () => void;\n    toggleMaximized: () => void;\n    onClose: () => void;\n}\n\nconst ComposerTitleBar = ({ message = {}, minimized, maximized, toggleMinimized, toggleMaximized, onClose }: Props) => {\n    const title = message.data?.Subject || c('Title').t`New message`;\n\n    return (\n        <header className=\"composer-title-bar flex flex-row\">\n            <span className=\"flex-self-vcenter flex-item-fluid pl0-5 pr1 ellipsis\">{title}</span>\n            <TitleBarButton\n                iconName=\"minimize\"\n                className={classnames([minimized && 'rotateX-180'])}\n                onClick={toggleMinimized}\n            />\n            <TitleBarButton iconName={maximized ? 'contract-window' : 'expand'} onClick={toggleMaximized} />\n            <TitleBarButton iconName=\"close\" onClick={onClose} />\n        </header>\n    );\n};\n\nexport default ComposerTitleBar;\n","import React, { useState, ChangeEvent } from 'react';\nimport { c } from 'ttag';\nimport {\n    Table,\n    TableHeader,\n    Checkbox,\n    TableRow,\n    TableBody,\n    FormModal,\n    SearchInput as SearchInputUntyped\n} from 'react-components';\nimport { ContactEmail } from '../../../models/contact';\nimport AddressesRecipientItem from './AddressesRecipientItem';\nimport { Recipient } from '../../../models/address';\n\nconst SearchInput = SearchInputUntyped as any;\n\ninterface Props {\n    inputValue?: Recipient[];\n    allContacts?: ContactEmail[];\n    onClose?: () => void;\n    onSubmit: (recipients: Recipient[]) => void;\n}\n\nconst AddressesContactsModal = ({ onSubmit, onClose, inputValue = [], allContacts = [], ...rest }: Props) => {\n    const [value, setValue] = useState(inputValue);\n    const [contacts, setContacts] = useState<ContactEmail[]>(allContacts);\n\n    const handleChangeSearch = (searchInput = '') => {\n        const search = searchInput.toLowerCase();\n        const contacts = allContacts?.filter(\n            (contact) => contact.Name?.toLowerCase().includes(search) || contact.Email?.toLowerCase().includes(search)\n        );\n        setContacts(contacts || []);\n    };\n\n    const handleChangeCheckbox = (contact: ContactEmail) => (event: ChangeEvent<HTMLInputElement>) => {\n        const checked = event.target.checked;\n        let newValue: Recipient[];\n        if (checked) {\n            newValue = [...value, { Name: contact.Name, Address: contact.Email }];\n        } else {\n            newValue = value.filter((recipient) => recipient.Address !== contact.Email);\n        }\n        setValue(newValue);\n    };\n\n    const handleRemove = (toRemove: Recipient) => () => {\n        setValue(value.filter((recipient) => recipient !== toRemove));\n    };\n\n    const isChecked = (contact: ContactEmail) => !!value.find((recipient) => recipient.Address === contact.Email);\n\n    const handleSubmit = () => {\n        onSubmit(value);\n        onClose?.();\n    };\n\n    return (\n        <FormModal\n            submit={c('Action').t`Add`}\n            title={c('Info').t`Add multiple recipients`}\n            onSubmit={handleSubmit}\n            onClose={onClose}\n            {...rest}\n        >\n            <SearchInput placeholder={c('Info').t`Search for contacts`} onChange={handleChangeSearch} />\n            <Table className=\"addresses-contacts-table\">\n                <TableHeader cells={[<Checkbox key={0} />, c('Info').t`Name`, c('Info').t`Email`]} />\n                <TableBody colSpan={0}>\n                    {contacts.map((contact) => (\n                        <TableRow\n                            key={contact.ID}\n                            cells={[\n                                <Checkbox\n                                    key={0}\n                                    checked={isChecked(contact)}\n                                    onChange={handleChangeCheckbox(contact)}\n                                />,\n                                contact.Name,\n                                contact.Email\n                            ]}\n                        />\n                    ))}\n                </TableBody>\n            </Table>\n            {value.length > 0 && (\n                <div className=\"composer-addresses-container flex-item-fluid bordered-container pl1-25 pr1-25\">\n                    {value.map((recipient, i) => (\n                        <AddressesRecipientItem key={i} recipient={recipient} onRemove={handleRemove(recipient)} />\n                    ))}\n                </div>\n            )}\n        </FormModal>\n    );\n};\n\nexport default AddressesContactsModal;\n","import React, { useState, MutableRefObject } from 'react';\nimport { c } from 'ttag';\nimport { Label, generateUID, Button, Tooltip, classnames, useModals } from 'react-components';\n\nimport { MessageExtended } from '../../../models/message';\nimport AddressesInput from './AddressesInput';\nimport AddressesContactsModal from './AddressesContactsModal';\nimport { ContactEmail, ContactGroup } from '../../../models/contact';\nimport { RecipientType, Recipient } from '../../../models/address';\n\ninterface Props {\n    message: MessageExtended;\n    contacts: ContactEmail[];\n    contactGroups: ContactGroup[];\n    onChange: (message: MessageExtended) => void;\n    expanded: boolean;\n    toggleExpanded: () => void;\n    addressesFocusRef: MutableRefObject<() => void>;\n}\n\nconst AddressesEditor = ({\n    message,\n    contacts,\n    contactGroups,\n    onChange,\n    expanded,\n    toggleExpanded,\n    addressesFocusRef\n}: Props) => {\n    const [uid] = useState(generateUID('composer'));\n    const { createModal } = useModals();\n\n    const handleChange = (type: RecipientType) => (value: Recipient[]) => {\n        onChange({ data: { [type]: value } });\n    };\n\n    const handleContactModal = (type: RecipientType) => async () => {\n        const recipients = await new Promise((resolve) => {\n            createModal(\n                <AddressesContactsModal inputValue={message.data?.[type]} allContacts={contacts} onSubmit={resolve} />\n            );\n        });\n\n        onChange({ data: { [type]: recipients } });\n    };\n\n    return (\n        <div className=\"flex flex-row flex-nowrap flex-items-start pl0-5 mb0-5\">\n            <div className=\"flex flex-column composer-meta-label\">\n                <Label htmlFor={`to-${uid}`}>\n                    <Tooltip title={c('Title').t`Add contacts`}>\n                        <a onClick={handleContactModal('ToList')}>{c('Title').t`To`}</a>\n                    </Tooltip>\n                </Label>\n                {expanded && (\n                    <>\n                        <Label htmlFor={`cc-${uid}`}>\n                            <Tooltip title={c('Title').t`Add contacts`}>\n                                <a onClick={handleContactModal('CCList')}>{c('Title').t`CC`}</a>\n                            </Tooltip>\n                        </Label>\n                        <Label htmlFor={`bcc-${uid}`}>\n                            <Tooltip title={c('Title').t`Add contacts`}>\n                                <a onClick={handleContactModal('BCCList')}>{c('Title').t`BCC`}</a>\n                            </Tooltip>\n                        </Label>\n                    </>\n                )}\n            </div>\n\n            <div className=\"flex flex-column flex-item-fluid w100\">\n                <div className=\"flex flex-row w100 composer-addresses-container-line\">\n                    <AddressesInput\n                        id={`to-${uid}`}\n                        recipients={message.data?.ToList}\n                        onChange={handleChange('ToList')}\n                        addressesFocusRef={addressesFocusRef}\n                        contacts={contacts}\n                        contactGroups={contactGroups}\n                    />\n                    <Tooltip originalPlacement=\"left\" title={c('Title').t`CC BCC`}>\n                        <Button\n                            icon=\"caret\"\n                            className={classnames(['pm-button--link ml0-5 mr0-5', expanded && 'rotateX-180'])}\n                            onClick={toggleExpanded}\n                        />\n                    </Tooltip>\n                </div>\n                {expanded && (\n                    <>\n                        <div className=\"flex flex-row w100 mt0-5 composer-addresses-container-line\">\n                            <AddressesInput\n                                id={`cc-${uid}`}\n                                recipients={message.data?.CCList}\n                                onChange={handleChange('CCList')}\n                                contacts={contacts}\n                                contactGroups={contactGroups}\n                            />\n                        </div>\n                        <div className=\"flex flex-row w100 mt0-5 composer-addresses-container-line\">\n                            <AddressesInput\n                                id={`bcc-${uid}`}\n                                recipients={message.data?.BCCList}\n                                onChange={handleChange('BCCList')}\n                                contacts={contacts}\n                                contactGroups={contactGroups}\n                            />\n                        </div>\n                    </>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default AddressesEditor;\n","import { ContactGroup } from './contact';\n\nexport interface Address {\n    ID?: string;\n    Email?: string;\n    DisplayName?: string;\n    Priority?: number;\n    Receive?: number;\n    Status?: number;\n    Order?: number;\n    Send?: number;\n    Signature?: string;\n}\n\nexport type RecipientType = 'ToList' | 'CCList' | 'BCCList';\nexport const recipientTypes: RecipientType[] = ['ToList', 'CCList', 'BCCList'];\n\nexport interface Recipient {\n    Name?: string;\n    Address?: string;\n    Group?: string;\n}\n\nexport interface RecipientGroup {\n    group?: ContactGroup;\n    recipients: Recipient[];\n}\n\nexport interface RecipientOrGroup {\n    recipient?: Recipient;\n    group?: RecipientGroup;\n}\n","import React, { Fragment } from 'react';\nimport { c } from 'ttag';\nimport { Label, Button } from 'react-components';\n\nimport { MessageExtended } from '../../../models/message';\nimport { Recipient, recipientTypes } from '../../../models/address';\nimport { recipientsToRecipientOrGroup, getRecipientOrGroupLabel } from '../../../helpers/addresses';\nimport { ContactEmail, ContactGroup } from '../../../models/contact';\n\ninterface Props {\n    message: MessageExtended;\n    contacts: ContactEmail[];\n    contactGroups: ContactGroup[];\n    onFocus: () => void;\n}\n\nconst AddressesSummary = ({ message: { data = {} }, contacts, contactGroups, onFocus }: Props) => {\n    return (\n        <div className=\"flex flex-row flex-nowrap flex-items-center pl0-5 mb0-5\" onClick={onFocus}>\n            <Label htmlFor={null} className=\"composer-meta-label color-pm-blue\">\n                {c('Title').t`To`}\n            </Label>\n            <div className=\"flex flex-row flex-item-fluid w100\">\n                <span className=\"flex-item-fluid bordered-container flex composer-addresses-fakefield\">\n                    <span className=\"ellipsis mw100\">\n                        {recipientTypes.map((type) => {\n                            const recipients: Recipient[] = data[type] || [];\n                            if (recipients.length === 0) {\n                                return null;\n                            }\n                            const recipientOrGroups = recipientsToRecipientOrGroup(recipients, contactGroups);\n                            return (\n                                <Fragment key={type}>\n                                    {type === 'CCList' && (\n                                        <span className=\"mr0-5 color-pm-blue\">{c('Title').t`CC`}:</span>\n                                    )}\n                                    {type === 'BCCList' && (\n                                        <span className=\"mr0-5 color-pm-blue\">{c('Title').t`BCC`}:</span>\n                                    )}\n                                    {recipientOrGroups.map((recipientOrGroup, i) => (\n                                        <span key={i} className=\"mr0-5\">\n                                            {getRecipientOrGroupLabel(recipientOrGroup, contacts)}\n                                            {i !== recipientOrGroups.length - 1 && ','}\n                                        </span>\n                                    ))}\n                                </Fragment>\n                            );\n                        })}\n                    </span>\n                </span>\n                <Button icon=\"caret\" className=\"pm-button--link ml0-5 mr0-5 \" />\n            </div>\n        </div>\n    );\n};\n\nexport default AddressesSummary;\n","import React, { MutableRefObject, useEffect } from 'react';\nimport { useToggle, useContactEmails } from 'react-components';\n\nimport { MessageExtended } from '../../../models/message';\nimport AddressesEditor from './AddressesEditor';\nimport AddressesSummary from './AddressesSummary';\nimport { getRecipients } from '../../../helpers/message/messages';\nimport { ContactEmail } from '../../../models/contact';\nimport { useContactGroups } from '../../../hooks/useContactGroups';\n\ninterface Props {\n    message: MessageExtended;\n    onChange: (message: MessageExtended) => void;\n    addressesBlurRef: MutableRefObject<() => void>;\n    addressesFocusRef: MutableRefObject<() => void>;\n}\n\nconst Addresses = ({ message, onChange, addressesBlurRef, addressesFocusRef }: Props) => {\n    const [contacts, loadingContacts]: [ContactEmail[], boolean] = useContactEmails();\n    const [contactGroups, loadingContactGroups] = useContactGroups();\n\n    // Summary of selected addresses or addresses editor\n    const { state: editor, set: setEditor } = useToggle(true);\n\n    // CC and BCC visible in expanded mode\n    const { state: expanded, set: setExpanded, toggle: toggleExpanded } = useToggle(\n        getRecipients(message.data).length > 0\n    );\n\n    useEffect(() => {\n        addressesBlurRef.current = () => setEditor(false);\n    }, []);\n\n    if (loadingContacts || loadingContactGroups) {\n        return null;\n    }\n\n    const handleFocus = () => {\n        setEditor(true);\n        setExpanded(true);\n        setTimeout(() => {\n            addressesFocusRef.current();\n        });\n    };\n\n    return editor ? (\n        <AddressesEditor\n            message={message}\n            contacts={contacts}\n            contactGroups={contactGroups}\n            onChange={onChange}\n            expanded={expanded}\n            toggleExpanded={toggleExpanded}\n            addressesFocusRef={addressesFocusRef}\n        />\n    ) : (\n        <AddressesSummary message={message} contacts={contacts} contactGroups={contactGroups} onFocus={handleFocus} />\n    );\n};\n\nexport default Addresses;\n","import React, { useState, ChangeEvent, MutableRefObject } from 'react';\nimport { c } from 'ttag';\nimport { Label, Select, Input, generateUID } from 'react-components';\n\nimport ComposerAddresses from './addresses/Addresses';\nimport { MessageExtended } from '../../models/message';\nimport { Address } from '../../models/address';\nimport { getFromAdresses } from '../../helpers/addresses';\n\ninterface Props {\n    message: MessageExtended;\n    addresses: Address[];\n    onChange: (message: MessageExtended) => void;\n    addressesBlurRef: MutableRefObject<() => void>;\n    addressesFocusRef: MutableRefObject<() => void>;\n}\n\nconst ComposerMeta = ({ message, addresses, onChange, addressesBlurRef, addressesFocusRef }: Props) => {\n    const [uid] = useState(generateUID('composer'));\n\n    const addressesOptions = getFromAdresses(addresses, message.originalTo).map((address: Address) => ({\n        text: address.Email,\n        value: address.ID\n    }));\n\n    const handleFromChange = (event: ChangeEvent) => {\n        const select = event.target as HTMLSelectElement;\n        const AddressID = select.value;\n        const address = addresses.find((address: Address) => address.ID === AddressID);\n        const Sender = { Name: address?.DisplayName, Address: address?.Email };\n        onChange({ data: { AddressID, Sender } });\n    };\n\n    const handleSubjectChange = (event: ChangeEvent) => {\n        const input = event.target as HTMLInputElement;\n        onChange({ data: { Subject: input.value } });\n    };\n\n    return (\n        <div className=\"composer-meta w100\">\n            <div className=\"flex flex-row flex-nowrap flex-items-center pl0-5 mb0-5\">\n                <Label htmlFor={`from-${uid}`} className=\"composer-meta-label\">\n                    {c('Info').t`From`}\n                </Label>\n                <Select\n                    id={`from-${uid}`}\n                    options={addressesOptions}\n                    value={message.data?.AddressID}\n                    onChange={handleFromChange}\n                    onFocus={addressesBlurRef.current}\n                ></Select>\n            </div>\n            <ComposerAddresses\n                message={message}\n                onChange={onChange}\n                addressesBlurRef={addressesBlurRef}\n                addressesFocusRef={addressesFocusRef}\n            />\n            <div className=\"flex flex-row flex-nowrap flex-items-center pl0-5 mb0-5\">\n                <Label htmlFor={`subject-${uid}`} className=\"composer-meta-label\">\n                    {c('Info').t`Subject`}\n                </Label>\n                <Input\n                    id={`subject-${uid}`}\n                    value={message.data?.Subject}\n                    placeholder={c('Placeholder').t`Subject`}\n                    onChange={handleSubjectChange}\n                    onFocus={addressesBlurRef.current}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default ComposerMeta;\n","import React from 'react';\nimport { c, msgid } from 'ttag';\nimport { Icon, useToggle } from 'react-components';\nimport humanSize from 'proton-shared/lib/helpers/humanSize';\n\nimport { Message } from '../../../models/message';\nimport { attachmentsSize, getAttachments } from '../../../helpers/message/messages';\nimport { Attachment } from '../../../models/attachment';\n\ninterface Props {\n    message?: Message;\n    onRemove: (attachment: Attachment) => () => void;\n}\n\nconst AttachmentsList = ({ message, onRemove }: Props) => {\n    const { state: expanded, toggle: toggleExpanded } = useToggle(false);\n\n    const attachments = getAttachments(message);\n    const size = humanSize(attachmentsSize(message));\n\n    return (\n        <div className=\"flex flex-column relative w100 flex-nowrap\">\n            <button type=\"button\" className=\"flex flex-row flex-spacebetween w100 p0-5\" onClick={toggleExpanded}>\n                <div>\n                    <strong className=\"mr0-5\">{size}</strong>\n                    <Icon name=\"attach\" className=\"mr0-5\" />\n                    {c('Info').ngettext(\n                        msgid`${attachments.length} file attached`,\n                        `${attachments.length} files attached`,\n                        attachments.length\n                    )}\n                </div>\n                <div className=\"color-pm-blue\">{expanded ? c('Action').t`Hide` : c('Action').t`Show`}</div>\n            </button>\n            {expanded && (\n                <div className=\"composer-attachments-expand flex flex-row flex-wrap pt1 pb0-5 pl0-5 pr0-5\">\n                    {attachments.map((attachment) => (\n                        <div key={attachment.ID} className=\"composer-attachments-item\">\n                            <div className=\"flex flex-spacebetween bordered-container p0-25 flex-nowrap flex-items-center pm_button bg-white-dm p0\">\n                                <Icon name=\"attach\" />\n                                <span className=\"flex-item-fluid ellipsis pl0-5 pr0-5\">{attachment.Name}</span>\n                                <button\n                                    type=\"button\"\n                                    className=\"inline-flex pl0-5 pr0-5 no-pointer-events-children h100\"\n                                    onClick={onRemove(attachment)}\n                                >\n                                    <Icon name=\"off\" size={12} />\n                                </button>\n                            </div>\n                        </div>\n                    ))}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default AttachmentsList;\n","import React, { MutableRefObject, useRef, useEffect, RefObject } from 'react';\nimport ReactQuill from 'react-quill';\nimport Quill from 'quill';\nimport { noop } from 'proton-shared/lib/helpers/function';\nimport { MessageExtended } from '../../models/message';\nimport { getAttachments } from '../../helpers/message/messages';\nimport AttachmentsList from './attachments/AttachmensList';\nimport { Attachment } from '../../models/attachment';\n\nimport 'react-quill/dist/quill.snow.css';\n\nconst Block = Quill.import('blots/block');\nBlock.tagName = 'div';\nQuill.register(Block);\n\ninterface Props {\n    message: MessageExtended;\n    onChange: (message: MessageExtended) => void;\n    onFocus: () => void;\n    onRemoveAttachment: (attachment: Attachment) => () => void;\n    contentFocusRef: MutableRefObject<() => void>;\n}\n\nconst ComposerContent = ({ message, onChange, onFocus, onRemoveAttachment, contentFocusRef }: Props) => {\n    const inputRef: RefObject<ReactQuill> = useRef(null);\n\n    useEffect(() => {\n        contentFocusRef.current = inputRef.current?.focus || noop;\n    }, []);\n\n    const handleChange = (content: string, delta: any, source: string) => {\n        if (source === 'user') {\n            onChange({ content });\n        }\n    };\n\n    const attachments = getAttachments(message.data);\n\n    return (\n        <section className=\"composer-content flex-item-fluid w100 mb0-5 flex flex-column flex-nowrap\">\n            <ReactQuill\n                className=\"composer-quill w100 flex-item-fluid\"\n                value={message.content || ''}\n                readOnly={!message.content}\n                onChange={handleChange}\n                onFocus={onFocus}\n                ref={inputRef}\n            />\n            {attachments.length > 0 && <AttachmentsList message={message.data} onRemove={onRemoveAttachment} />}\n        </section>\n    );\n};\n\nexport default ComposerContent;\n","import React, { ChangeEvent } from 'react';\nimport { Button } from 'react-components';\n\ninterface Props {\n    onAddAttachments: (files: File[]) => void;\n}\n\nconst AttachmentsButton = ({ onAddAttachments }: Props) => {\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n        const input = event.target;\n        if (input.files) {\n            onAddAttachments([...input.files]);\n            input.value = '';\n        }\n    };\n\n    return (\n        <div className=\"composer-attachments-button-wrapper\">\n            <input type=\"file\" multiple onChange={handleChange} />\n            <Button icon=\"attach\" />\n        </div>\n    );\n};\n\nexport default AttachmentsButton;\n","import React from 'react';\nimport { c } from 'ttag';\nimport { Button, useModals, ConfirmModal, Alert } from 'react-components';\nimport { noop } from 'proton-shared/lib/helpers/function';\n\nimport { formatSimpleDate } from '../../helpers/date';\nimport { MessageExtended } from '../../models/message';\nimport { getDate } from '../../helpers/elements';\nimport AttachmentsButton from './attachments/AttachmentsButton';\nimport { useSlowChanges } from '../../hooks/useSlowChanges';\n\ninterface Props {\n    message: MessageExtended;\n    lock: boolean;\n    activity: string;\n    onAddAttachments: (files: File[]) => void;\n    onSave: () => Promise<void>;\n    onSend: () => Promise<void>;\n    onDelete: () => Promise<void>;\n}\n\nconst ComposerActions = ({\n    message,\n    lock,\n    activity: activityInput,\n    onSave,\n    onSend,\n    onDelete,\n    onAddAttachments\n}: Props) => {\n    const { createModal } = useModals();\n    const activity = useSlowChanges(activityInput);\n\n    const handleDelete = () => {\n        return createModal(\n            <ConfirmModal onConfirm={onDelete} onClose={noop} title={c('Title').t`Delete`}>\n                <Alert>{c('Info').t`Permanently delete this draft?`}</Alert>\n            </ConfirmModal>\n        );\n    };\n\n    let dateMessage = '';\n\n    if (lock) {\n        dateMessage = c('Action').t`Saving`;\n    } else {\n        const date = getDate(message.data);\n        if (date.getTime() !== 0) {\n            const dateString = formatSimpleDate(date);\n            dateMessage = c('Info').t`Saved at ${dateString}`;\n        }\n    }\n\n    return (\n        <footer className=\"composer-actions flex flex-row flex-spacebetween w100\">\n            <div className=\"flex\">\n                <AttachmentsButton onAddAttachments={onAddAttachments} />\n                <Button icon=\"expiration\" className=\"ml0-5\" />\n                <Button icon=\"lock\" className=\"ml0-5\" />\n            </div>\n            <div className=\"flex-self-vcenter\">\n                <span>{dateMessage}</span>\n                <Button className=\"ml1\" icon=\"trash\" disabled={lock} onClick={handleDelete} />{' '}\n                <Button icon=\"save\" disabled={lock} onClick={onSave} />{' '}\n                <Button className=\"pm-button-blue composer-send-button\" loading={lock} onClick={onSend}>\n                    {lock ? activity : c('Action').t`Send`}\n                </Button>\n            </div>\n        </footer>\n    );\n};\n\nexport default ComposerActions;\n","import { c } from 'ttag';\nimport { encryptMessage, splitMessage, PmcryptoKey } from 'pmcrypto';\n\nimport { MessageExtended } from '../../models/message';\nimport { Api, Binary } from '../../models/utils';\nimport { getAttachments } from '../message/messages';\nimport { readFileAsBuffer } from '../file';\nimport { uploadAttachment } from '../../api/attachments';\nimport { isEmbeddable } from './attachments';\nimport { Attachment } from '../../models/attachment';\n\n// Reference: Angular/src/app/attachments/factories/attachmentModel.js\n\ntype UploadQueryResult = Promise<{ Attachment: Attachment }>;\n\nexport enum ATTACHMENT_ACTION {\n    ATTACHMENT = 'attachment',\n    INLINE = 'inline'\n}\n\nconst encrypt = async (\n    data: Binary,\n    { name, type, size }: File = {} as File,\n    inline: boolean,\n    publicKeys: PmcryptoKey[],\n    privateKeys: PmcryptoKey[]\n) => {\n    const { message, signature } = await encryptMessage({\n        filename: name,\n        armor: false,\n        detached: true,\n        data,\n        publicKeys,\n        privateKeys\n    });\n\n    const { asymmetric, encrypted } = await splitMessage(message);\n\n    return {\n        Filename: name,\n        MIMEType: type,\n        FileSize: size,\n        Inline: inline,\n        signature: signature ? signature.packets.write() : undefined,\n        Preview: data,\n        keys: asymmetric[0],\n        data: encrypted[0]\n    };\n};\n\n/**\n * Read the file locally, and encrypt it. return the encrypted file.\n */\nconst encryptFile = async (file: File, inline: boolean, pubKeys: PmcryptoKey[], privKey: PmcryptoKey[]) => {\n    if (!file) {\n        throw new TypeError(c('Error').t`You did not provide a file.`);\n    }\n    try {\n        const result = await readFileAsBuffer(file);\n        return encrypt(new Uint8Array(result), file, inline, pubKeys, privKey);\n    } catch (e) {\n        throw new Error(c('Error').t`Failed to encrypt attachment. Please try again.`);\n    }\n};\n\n/**\n * Add a new attachment, upload it to the server\n */\nconst uploadFile = async (file: File, message: MessageExtended, inline: boolean, api: Api, total = 1, cid = '') => {\n    const titleImage = c('Title').t`Image`;\n\n    const tempPacket = {\n        filename: file.name || `${titleImage} ${getAttachments(message.data).length + 1}`,\n        uploading: true,\n        Size: file.size,\n        ContentID: cid\n    };\n\n    // TODO\n    // force update the embedded counter\n    // if (file.inline) {\n    //     message.NumEmbedded++;\n    //     // CID doesn't exist when the user add an attachment\n    //     tempPacket.ContentID = cid || embedded.generateCid(file.upload.uuid, message.From.Email);\n    //     tempPacket.Inline = 1;\n    // }\n\n    // const privateKeys = keysModel.getPrivateKeys(message.AddressID);\n    // message.attachmentsToggle = true;\n\n    const publicKeys = message.publicKeys && message.publicKeys.length > 0 ? [message.publicKeys[0]] : [];\n\n    const packets = await encryptFile(file, inline, publicKeys, message.privateKeys || []);\n\n    const { Attachment } = await (api(\n        uploadAttachment({\n            Filename: packets.Filename || tempPacket.filename,\n            MessageID: message.data?.ID || '',\n            ContentID: tempPacket.ContentID,\n            MIMEType: packets.MIMEType,\n            KeyPackets: new Blob([packets.keys] as any),\n            DataPacket: new Blob([packets.data] as any),\n            Signature: packets.signature ? new Blob([packets.signature] as any) : undefined\n        })\n    ) as UploadQueryResult);\n\n    console.log('result', total, Attachment);\n\n    // TODO\n    // if (isAborted) {\n    //     return;\n    // }\n\n    // Extract content-id even if there are no headers\n    // const contentId = `${(Attachment.Headers || {})['content-id'] || ''}`;\n    // const newCid = contentId.replace(/[<>]+/g, '');\n\n    // return { attachment, sessionKey, packets, cid: newCid, REQUEST_ID };\n    return Attachment;\n};\n\n/**\n * Upload a list of attachments [...File]\n */\nexport const upload = async (\n    files: File[] = [],\n    message: MessageExtended = {},\n    action = ATTACHMENT_ACTION.ATTACHMENT,\n    api: Api,\n    // triggerEvent = true,\n    cid = ''\n) => {\n    const uploads = await Promise.all(\n        files.map((file) => {\n            const inline = isEmbeddable(file.type) && action === ATTACHMENT_ACTION.INLINE;\n            return uploadFile(file, message, inline, api, files.length, cid);\n        })\n    );\n\n    // message.uploading = promises.length;\n    // message.encryptingAttachment = true;\n    // dispatchMessageAction(message);\n\n    // const cleanUploads = uploads.filter(Boolean) as {\n    //     attachment: Attachment;\n    //     sessionKey: any;\n    //     packets: any;\n    //     cid: string;\n    //     REQUEST_ID: string;\n    // }[]; // will be undefined for aborted request\n\n    // message.uploading = 0;\n    // message.encryptingAttachment = false;\n    // dispatchMessageAction(message);\n\n    // TODO: Embedded\n    // Create embedded and replace theses files from the upload list\n    // const embeddedMap = addEmbedded(upload, message);\n    // return _.map(upload, (config) => {\n    //     return embeddedMap[config.attachment.ID] || config;\n    // });\n\n    // .then((upload) => {\n    //     message.addAttachments(upload.map(({ attachment }) => attachment));\n    //     updateMapAttachments(upload);\n\n    //     if (triggerEvent && upload.length) {\n    //         dispatch('upload.success', { upload, message, messageID: message.ID });\n    //     }\n    //     return upload;\n    // }).catch((err) => {\n    //     dispatchMessageAction(message);\n    //     throw err;\n    // });\n\n    // TODO\n    // const promise = composerRequestModel.add(message, callback);\n    // networkActivityTracker.track(promise);\n\n    return uploads;\n};\n","import { useState, useEffect } from 'react';\n\n/**\n * Slow down changes on a value, mostly to let user see steps\n * Doesn't drop steps but stack them\n * Falsy value are not preserved\n */\nexport const useSlowChanges = <T>(currentValue: T, time = 500): T => {\n    const [value, setValue] = useState<T>(currentValue);\n    const [stack, setStack] = useState<T[]>([]);\n    const [timeout, setTimeoutState] = useState<NodeJS.Timeout>();\n\n    const runTimeout = () => setTimeoutState(setTimeout(() => setTimeoutState(undefined), time));\n\n    useEffect(() => {\n        if (timeout === undefined) {\n            if (currentValue) {\n                runTimeout();\n            }\n            setValue(currentValue);\n        } else {\n            setStack([...stack, currentValue]);\n        }\n    }, [currentValue]);\n\n    useEffect(() => {\n        if (timeout === undefined && stack.length > 0) {\n            const [first, ...rest] = stack;\n            setValue(first);\n            setStack(rest);\n            runTimeout();\n        }\n    }, [timeout, stack]);\n\n    return value;\n};\n","import { arrayToBinaryString } from 'pmcrypto';\n\n/**\n * Convert file to encoded base 64 string\n * @param  {File} file\n * @param {Function} isValid File validator ex: valid file type\n * @return {Promise}\n */\n// export const toBase64 = async (file, isValid = () => true) => {\n//     if (file && !isValid(file)) {\n//         throw new Error('Invalid file format');\n//     }\n\n//     return new Promise((resolve, reject) => {\n//         const reader = new FileReader();\n\n//         reader.onload = ({ target }) => {\n//             resolve(target.result);\n//         };\n//         reader.onerror = reject;\n//         reader.onabort = reject;\n\n//         reader.readAsDataURL(file);\n//     });\n// };\n\n/**\n * Read the content of a blob and returns its value as a buffer\n */\nexport const readFileAsBuffer = (file: File) => {\n    return new Promise<ArrayBuffer>((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => resolve(reader.result as ArrayBuffer);\n        reader.onerror = reject;\n        reader.onabort = reject;\n        reader.readAsArrayBuffer(file);\n    });\n};\n\n/**\n * Read the content of a blob and returns its value as a string.\n * Not using readAsBinaryString because it's deprecated.\n */\nexport const readFileAsString = async (file: File) => {\n    const arrayBuffer = await readFileAsBuffer(file);\n    // eslint-disable-next-line new-cap\n    return arrayToBinaryString(new Uint8Array(arrayBuffer));\n};\n\n/**\n * Convert a blob url to the matching blob\n * @link https://stackoverflow.com/a/42508185\n * @param  {String} url blob://xxxx\n * @return {Promise}     Blob\n */\n// export const blobURLtoBlob = (url) => {\n//     return new Promise((resolve, reject) => {\n//         const xhr = new XMLHttpRequest();\n//         xhr.open('GET', url);\n//         xhr.responseType = 'blob';\n//         xhr.onerror = reject;\n//         xhr.onload = () => {\n//             if (xhr.status === 200) {\n//                 return resolve(xhr.response);\n//             }\n//             reject(xhr);\n//         };\n//         xhr.send();\n//     });\n// };\n\n/**\n * Read the base64 portion of a data url.\n * @param {String} url\n * @returns {Uint8Array}\n */\n// export const readDataUrl = (url = '') => {\n//     const error = 'The given url is not a data url.';\n\n//     if (url.substring(0, 5) !== 'data:') {\n//         throw new Error(error);\n//     }\n\n//     const [, base64] = url.split(',');\n//     if (!base64) {\n//         throw new Error(error);\n//     }\n\n//     return binaryStringToArray(decodeBase64(base64));\n// };\n","import React, { useState, useEffect, CSSProperties, useRef, useCallback } from 'react';\nimport { classnames, useToggle, useWindowSize, useNotifications, useApi } from 'react-components';\nimport { c } from 'ttag';\n\nimport { MessageExtended } from '../../models/message';\nimport ComposerTitleBar from './ComposerTitleBar';\nimport ComposerMeta from './ComposerMeta';\nimport ComposerContent from './ComposerContent';\nimport ComposerActions from './ComposerActions';\nimport { useMessage } from '../../hooks/useMessage';\nimport { Address } from '../../models/address';\nimport {\n    COMPOSER_GUTTER,\n    COMPOSER_VERTICAL_GUTTER,\n    APP_BAR_WIDTH,\n    HEADER_HEIGHT,\n    COMPOSER_HEIGHT,\n    COMPOSER_SWITCH_MODE\n} from '../../containers/ComposerContainer';\nimport { noop, debounce } from 'proton-shared/lib/helpers/function';\nimport { getRecipients } from '../../helpers/message/messages';\nimport { upload, ATTACHMENT_ACTION } from '../../helpers/attachment/attachmentUploader';\nimport { Attachment } from '../../models/attachment';\nimport { removeAttachment } from '../../api/attachments';\n\n/**\n * Create a new MessageExtended with props from both m1 and m2\n * Almost a standard deep merge but simplified with specific needs\n * m2 props will override those from m1\n */\nconst mergeMessages = (m1: MessageExtended, m2: MessageExtended): MessageExtended => ({\n    ...m1,\n    ...m2,\n    data: { ...m1.data, ...m2.data }\n});\n\nconst computeStyle = (\n    inputStyle: CSSProperties,\n    minimized: boolean,\n    maximized: boolean,\n    width: number,\n    height: number\n): CSSProperties => {\n    if (minimized) {\n        return {\n            ...inputStyle,\n            height: 'auto'\n        };\n    }\n    if (maximized) {\n        return {\n            ...inputStyle,\n            right: COMPOSER_GUTTER,\n            width: width - COMPOSER_GUTTER - APP_BAR_WIDTH,\n            height: height - COMPOSER_VERTICAL_GUTTER * 2\n        };\n    }\n    return inputStyle;\n};\n\ninterface Props {\n    style?: CSSProperties;\n    focus: boolean;\n    message?: MessageExtended;\n    mailSettings: any;\n    addresses: Address[];\n    onFocus: () => void;\n    onChange: (message: MessageExtended) => void;\n    onClose: () => void;\n}\n\nconst Composer = ({\n    style: inputStyle = {},\n    focus,\n    message: inputMessage = {},\n    mailSettings,\n    addresses,\n    onFocus,\n    onChange,\n    onClose\n}: Props) => {\n    const api = useApi();\n    const { state: minimized, toggle: toggleMinimized } = useToggle(false);\n    const { state: maximized, toggle: toggleMaximized } = useToggle(false);\n    const [opening, setOpening] = useState(true); // Needed to force focus only at first time\n    const [modelMessage, setModelMessage] = useState<MessageExtended>(inputMessage);\n    const [\n        syncedMessage,\n        { initialize, createDraft, saveDraft, send, deleteDraft },\n        { lock: syncLock, current: syncActivity }\n    ] = useMessage(inputMessage.data, mailSettings);\n    const [width, height] = useWindowSize();\n    const { createNotification } = useNotifications();\n\n    // Manage focus from the container yet keeping logic in each component\n    const addressesBlurRef = useRef<() => void>(noop);\n    const addressesFocusRef = useRef<() => void>(noop);\n    const contentFocusRef = useRef<() => void>(noop);\n\n    useEffect(() => {\n        if (!syncLock && !syncedMessage.data?.ID) {\n            createDraft(inputMessage);\n        }\n\n        if (!syncLock && syncedMessage.data?.ID && typeof syncedMessage.initialized === 'undefined') {\n            initialize();\n        }\n\n        if (modelMessage.content === undefined) {\n            setModelMessage({ ...modelMessage, content: syncedMessage.content });\n        }\n\n        onChange(syncedMessage);\n    }, [syncLock, syncedMessage]);\n\n    useEffect(() => {\n        if (!maximized && height - COMPOSER_VERTICAL_GUTTER - HEADER_HEIGHT < COMPOSER_HEIGHT - COMPOSER_SWITCH_MODE) {\n            toggleMaximized();\n        }\n        if (maximized && height - COMPOSER_VERTICAL_GUTTER - HEADER_HEIGHT > COMPOSER_HEIGHT + COMPOSER_SWITCH_MODE) {\n            toggleMaximized();\n        }\n    }, [height]);\n\n    // Manage focus at opening\n    useEffect(() => {\n        if (!opening) {\n            return;\n        }\n        setTimeout(() => {\n            if (getRecipients(syncedMessage.data).length === 0) {\n                addressesFocusRef.current();\n            } else {\n                contentFocusRef.current();\n            }\n        });\n        setOpening(false);\n    }, [syncedMessage]);\n\n    const autoSave = useCallback(\n        debounce(async (message: MessageExtended) => {\n            await saveDraft(message);\n        }, 2000),\n        [saveDraft]\n    );\n    const handleChange = (message: MessageExtended) => {\n        console.log('change', message);\n        const newModelMessage = mergeMessages(modelMessage, message);\n        setModelMessage(newModelMessage);\n        autoSave(newModelMessage);\n    };\n    const save = async (messageToSave = modelMessage) => {\n        await saveDraft(messageToSave);\n        createNotification({ text: c('Info').t`Message saved` });\n    };\n    const handleAddAttachments = async (files: File[]) => {\n        const attachments = await upload(files, modelMessage, ATTACHMENT_ACTION.ATTACHMENT, api);\n        if (attachments) {\n            const Attachments = [...(modelMessage.data?.Attachments || []), ...attachments];\n            const newModelMessage = mergeMessages(modelMessage, { data: { Attachments } });\n            setModelMessage(newModelMessage);\n            save(modelMessage);\n        }\n    };\n    const handleRemoveAttachment = (attachment: Attachment) => async () => {\n        await api(removeAttachment(attachment.ID || '', modelMessage.data?.ID || ''));\n        const Attachments = modelMessage.data?.Attachments?.filter((a: Attachment) => a.ID !== attachment.ID);\n        const newModelMessage = mergeMessages(modelMessage, { data: { Attachments } });\n        setModelMessage(newModelMessage);\n        save(modelMessage);\n    };\n    const handleSave = async () => {\n        await save();\n    };\n    const handleSend = async () => {\n        await send(modelMessage);\n        createNotification({ text: c('Success').t`Message sent` });\n        onClose();\n    };\n    const handleDelete = async () => {\n        onClose();\n        await deleteDraft();\n        createNotification({ text: c('Info').t`Message discarded` });\n    };\n    const handleClick = async () => {\n        if (minimized) {\n            toggleMinimized();\n        }\n        onFocus();\n    };\n    const handleClose = async () => {\n        onClose();\n        await save();\n    };\n\n    const style = computeStyle(inputStyle, minimized, maximized, width, height);\n\n    return (\n        <div\n            className={classnames([\n                'composer flex flex-column p0-5',\n                !focus && 'composer-blur',\n                minimized && 'composer-minimized pb0'\n            ])}\n            style={style}\n            onFocus={onFocus}\n            onClick={handleClick}\n        >\n            <ComposerTitleBar\n                message={modelMessage}\n                minimized={minimized}\n                maximized={maximized}\n                toggleMinimized={toggleMinimized}\n                toggleMaximized={toggleMaximized}\n                onClose={handleClose}\n            />\n            {!minimized && (\n                <>\n                    <ComposerMeta\n                        message={modelMessage}\n                        addresses={addresses}\n                        onChange={handleChange}\n                        addressesBlurRef={addressesBlurRef}\n                        addressesFocusRef={addressesFocusRef}\n                    />\n                    <ComposerContent\n                        message={modelMessage}\n                        onChange={handleChange}\n                        onFocus={addressesBlurRef.current}\n                        onRemoveAttachment={handleRemoveAttachment}\n                        contentFocusRef={contentFocusRef}\n                    />\n                    <ComposerActions\n                        message={modelMessage}\n                        lock={syncLock}\n                        activity={syncActivity}\n                        onAddAttachments={handleAddAttachments}\n                        onSave={handleSave}\n                        onSend={handleSend}\n                        onDelete={handleDelete}\n                    />\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default Composer;\n","/**\n * Clean template\n * @link {https://gist.github.com/dhoko/4b0c20e66c8a3f1aa431}\n */\nexport const dedentTpl = (callSite: TemplateStringsArray, ...args: string[]) => {\n    function format(str = '') {\n        let size = -1;\n        return str.replace(/\\n(\\s+)/g, (m, m1) => {\n            if (size < 0) {\n                size = m1.replace(/\\t/g, '    ').length;\n            }\n            return '\\n' + m1.slice(Math.min(m1.length, size));\n        });\n    }\n    // TODO: Could this append with TS?\n    // if (typeof callSite === 'string') {\n    //     return format(callSite);\n    // }\n    // if (typeof callSite === 'function') {\n    //     return (...args: string[]) => format(callSite(...args));\n    // }\n    const output = callSite\n        .slice(0, args.length + 1)\n        .map((text, i) => (i === 0 ? '' : args[i - 1]) + text)\n        .join('');\n    return format(output);\n};\n","import { PM_SIGNATURE } from 'proton-shared/lib/constants';\n\nimport { MESSAGE_ACTIONS } from '../../constants';\nimport { MailSettings } from '../../models/utils';\nimport { dedentTpl } from '../dedent';\nimport { replaceLineBreaks } from '../string';\nimport { message } from '../purify';\nimport { parseInDiv } from '../dom';\n\nexport const CLASSNAME_SIGNATURE_CONTAINER = 'protonmail_signature_block';\nexport const CLASSNAME_SIGNATURE_USER = 'protonmail_signature_block-user';\nexport const CLASSNAME_SIGNATURE_PROTON = 'protonmail_signature_block-proton';\nexport const CLASSNAME_SIGNATURE_EMPTY = 'protonmail_signature_block-empty';\n\n/**\n * Preformat the protonMail signature\n */\nconst getProtonSignature = (mailSettings: MailSettings) => (mailSettings.PMSignature === 0 ? '' : PM_SIGNATURE);\n\n/**\n * Check if the signature is empty for a user\n */\nconst isEmptyUserSignature = (signature: string) =>\n    !signature || signature === '<div><br /></div>' || signature === '<div><br></div>';\n\n/**\n * Generate a space tag, it can be hidden from the UX via a className\n */\nconst createSpace = (className = '') => {\n    const tagOpen = className ? `<div class=\"${className}\">` : '<div>';\n    return `${tagOpen}<br /></div>`;\n};\n\n/**\n * Generate spaces for the signature\n *     No signature: 1 space\n *     addressSignature: 2 spaces + addressSignature\n *     protonSignature: 2 spaces + protonSignature\n *     user + proton signature: 2 spaces + addressSignature + 1 space + protonSignature\n */\nconst getSpaces = (signature: string, protonSignature: string, isReply = false) => {\n    const isUserEmpty = isEmptyUserSignature(signature);\n    const isEmptySignature = isUserEmpty && !protonSignature;\n    return {\n        start: isEmptySignature ? createSpace() : createSpace() + createSpace(),\n        end: isReply ? createSpace() : '',\n        between: !isUserEmpty && protonSignature ? createSpace() : ''\n    };\n};\n\n/**\n * Generate a map of classNames used for the signature template\n */\nconst getClassNamesSignature = (signature: string, protonSignature: string) => {\n    const isUserEmpty = isEmptyUserSignature(signature);\n    const isProtonEmpty = !protonSignature;\n    return {\n        userClass: isUserEmpty ? CLASSNAME_SIGNATURE_EMPTY : '',\n        protonClass: isProtonEmpty ? CLASSNAME_SIGNATURE_EMPTY : '',\n        containerClass: isUserEmpty && isProtonEmpty ? CLASSNAME_SIGNATURE_EMPTY : ''\n    };\n};\n\n/**\n * Generate the template for a signature and clean it\n */\nconst templateBuilder = (signature = '', mailSettings: MailSettings, isReply = false, noSpace = false) => {\n    const protonSignature = getProtonSignature(mailSettings);\n    const { userClass, protonClass, containerClass } = getClassNamesSignature(signature, protonSignature);\n    const space = getSpaces(signature, protonSignature, isReply);\n\n    const template = dedentTpl`\n        <div class=\"${CLASSNAME_SIGNATURE_CONTAINER} ${containerClass}\">\n            <div class=\"${CLASSNAME_SIGNATURE_USER} ${userClass}\">\n                ${replaceLineBreaks(signature)}\n            </div>\n            ${space.between}\n            <div class=\"${CLASSNAME_SIGNATURE_PROTON} ${protonClass}\">\n                ${replaceLineBreaks(protonSignature)}\n            </div>\n        </div>\n    `;\n\n    if (!noSpace) {\n        return `${space.start}${message(template)}${space.end}`;\n    }\n\n    return message(template);\n};\n\n/**\n * Insert Signatures before the message\n *     - Always append a container signature with both user's and proton's\n *     - Theses signature can be empty but the dom remains\n */\nexport const insertSignature = (\n    content = '',\n    signature = '',\n    action: MESSAGE_ACTIONS,\n    mailSettings: MailSettings,\n    isAfter = false\n) => {\n    const position = isAfter ? 'beforeend' : 'afterbegin';\n    const template = templateBuilder(signature, mailSettings, action !== MESSAGE_ACTIONS.NEW);\n\n    // Parse the current message and append before it the signature\n    const element = parseInDiv(content);\n    element.insertAdjacentHTML(position, template);\n\n    return element.innerHTML;\n};\n","import { c } from 'ttag';\nimport { setBit } from 'proton-shared/lib/helpers/bitset';\n\nimport { Message, MessageExtended } from '../../models/message';\nimport { Address, Recipient } from '../../models/address';\nimport { MESSAGE_ACTIONS, MESSAGE_FLAGS } from '../../constants';\nimport { MailSettings } from '../../models/utils';\nimport { findSender } from '../addresses';\nimport { Attachment } from '../../models/attachment';\nimport { insertSignature } from './messageSignature';\nimport { formatFullDate } from '../date';\nimport { recipientToInput } from '../addresses';\nimport { isSent, isSentAndReceived } from './messages';\nimport { unique } from 'proton-shared/lib/helpers/array';\n\n// Reference: Angular/src/app/message/services/messageBuilder.js\n\nexport const RE_PREFIX = c('Message').t`Re:`;\nexport const FW_PREFIX = c('Message').t`Fw:`;\n\n/**\n * Format the subject to add the prefix only when the subject\n * doesn't start with it\n */\nexport const formatSubject = (subject = '', prefix = '') => {\n    const hasPrefix = new RegExp(`^${prefix}`, 'i');\n    return hasPrefix.test(subject) ? subject : `${prefix} ${subject}`;\n};\n\n/**\n * Format and build a new message\n * TODO: Define if referenceMessage could ever be defined\n */\nconst newCopy = (\n    {\n        data: { Subject = '', ToList = [], CCList = [], BCCList = [] } = {},\n        encryptedSubject = ''\n    }: MessageExtended = {},\n    useEncrypted = false\n): Message => {\n    return {\n        Subject: useEncrypted ? encryptedSubject : Subject,\n        ToList,\n        CCList,\n        BCCList\n    };\n};\n\n/**\n * Format and build a reply\n */\nconst reply = (referenceMessage: MessageExtended = {}, useEncrypted = false): Message => {\n    const Subject = formatSubject(\n        useEncrypted ? referenceMessage.encryptedSubject : referenceMessage.data?.Subject,\n        RE_PREFIX\n    );\n    const ToList =\n        isSent(referenceMessage.data) || isSentAndReceived(referenceMessage.data)\n            ? referenceMessage.data?.ToList\n            : referenceMessage.data?.ReplyTos;\n\n    return {\n        Subject,\n        ToList\n    };\n};\n\n/**\n * Format and build a replyAll\n */\nconst replyAll = (referenceMessage: MessageExtended = {}, useEncrypted = false, addresses: Address[]): Message => {\n    const { data = {}, encryptedSubject = '' } = referenceMessage;\n\n    const Subject = formatSubject(useEncrypted ? encryptedSubject : data.Subject, RE_PREFIX);\n\n    if (isSent(referenceMessage.data) || isSentAndReceived(referenceMessage.data)) {\n        return { Subject, ToList: data.ToList, CCList: data.CCList, BCCList: data.BCCList };\n    }\n\n    const ToList = data.ReplyTos;\n\n    // Remove user address in CCList and ToList\n    const userAddresses = addresses.map(({ Email = '' }) => Email.toLowerCase());\n    const CCListWithoutUserAddresses: Recipient[] = unique([...(data.ToList || []), ...(data.CCList || [])]);\n    const CCList = CCListWithoutUserAddresses.filter(\n        ({ Address = '' }) => !userAddresses.includes(Address.toLowerCase())\n    );\n\n    return { Subject, ToList, CCList };\n};\n\n/**\n * Format and build a forward\n */\nconst forward = ({ data = {}, encryptedSubject = '' }: MessageExtended = {}, useEncrypted = false): Message => {\n    const Subject = formatSubject(useEncrypted ? encryptedSubject : data.Subject, FW_PREFIX);\n\n    return { Subject, ToList: [] };\n};\n\nexport const handleActions = (\n    action: MESSAGE_ACTIONS,\n    referenceMessage: MessageExtended = {},\n    addresses: Address[] = []\n): Message => {\n    // TODO: I would prefere manage a confirm modal from elsewhere\n    // const useEncrypted = !!referenceMessage.encryptedSubject && (await promptEncryptedSubject(currentMsg));\n    const useEncrypted = !!referenceMessage.encryptedSubject;\n\n    switch (action) {\n        case MESSAGE_ACTIONS.NEW:\n            return newCopy(referenceMessage, useEncrypted);\n        case MESSAGE_ACTIONS.REPLY:\n            return reply(referenceMessage, useEncrypted);\n        case MESSAGE_ACTIONS.REPLY_ALL:\n            return replyAll(referenceMessage, useEncrypted, addresses);\n        case MESSAGE_ACTIONS.FORWARD:\n            return forward(referenceMessage, useEncrypted);\n        // No default needed as all enum values are addressed\n    }\n};\n\n/**\n * Generate blockquote of the referenced message to the content of the new mail\n */\nconst generateBlockquote = (referenceMessage: MessageExtended) => {\n    const date = formatFullDate(referenceMessage.data?.Time);\n    const sender = recipientToInput(referenceMessage.data?.Sender);\n    const previously = c('Message').t`On ${date}, ${sender} wrote:`;\n    // TODO\n    // const newContent =\n    //     referenceMessage.data?.MIMEType === MIME_TYPES.PLAINTEXT ? textToHtmlMail.parse(content) : content;\n    // TODO: To check... Should use transformations from useMessage\n    // newContent = prepareContent(content, referenceMessage, ['*'], action);\n    const newContent = referenceMessage.content;\n\n    return `‐‐‐‐‐‐‐ Original Message ‐‐‐‐‐‐‐<br>\n        ${previously}<br>\n        <blockquote class=\"protonmail_quote\" type=\"cite\">\n            ${newContent}\n        </blockquote><br>`;\n};\n\nexport const createNewDraft = (\n    action: MESSAGE_ACTIONS,\n    referenceMessage: MessageExtended = {},\n    mailSettings: MailSettings,\n    addresses: Address[]\n): MessageExtended => {\n    const MIMEType = referenceMessage.data?.MIMEType || mailSettings.DraftMIMEType;\n    const RightToLeft = mailSettings.RightToLeft;\n\n    let Flags = 0;\n    if (mailSettings.AttachPublicKey) {\n        Flags = setBit(Flags, MESSAGE_FLAGS.FLAG_PUBLIC_KEY);\n    }\n    if (mailSettings.Sign) {\n        Flags = setBit(Flags, MESSAGE_FLAGS.FLAG_SIGN);\n    }\n\n    const { Subject, ToList = [], CCList = [], BCCList = [] } = handleActions(action, referenceMessage, addresses);\n\n    const originalTo = referenceMessage.originalTo;\n\n    const senderAddress = findSender(addresses, referenceMessage.data) || {};\n\n    const AddressID = senderAddress.ID; // Set the AddressID from previous message to convert attachments on reply / replyAll / forward\n    const Sender = {\n        Name: senderAddress.DisplayName,\n        Address: senderAddress.Email\n    };\n\n    // TODO: Understand the purpose here\n    // newMsg.Body = currentMsg.Body; // We use the existing Body to speed up the draft request logic\n\n    // TODO: Handle attachments\n    // /* add inline images as attachments */\n    // const attachments = pickAttachements(currentMsg, action);\n    // newMsg.NumEmbedded = 0;\n\n    // newMsg.Attachments = pgpMimeAttachments.clean(attachments);\n    // newMsg.pgpMimeAttachments = pgpMimeAttachments.filter(attachments);\n\n    const Attachments: Attachment[] = [];\n\n    let content = action === MESSAGE_ACTIONS.NEW ? '' : generateBlockquote(referenceMessage);\n\n    const ParentID = action === MESSAGE_ACTIONS.NEW ? undefined : referenceMessage.data?.ID;\n\n    content = insertSignature(content, senderAddress.Signature, action, mailSettings);\n\n    return {\n        data: {\n            ToList,\n            CCList,\n            BCCList,\n            Subject,\n            PasswordHint: '',\n            ExpirationTime: 0,\n            ExpiresIn: 0,\n            Attachments,\n            MIMEType,\n            RightToLeft,\n            Flags,\n            Sender,\n            AddressID,\n            ParentID,\n            Unread: 0\n        },\n        content,\n        action,\n        originalTo,\n        initialized: true\n    };\n};\n","import React, { ReactNode, useState, CSSProperties } from 'react';\nimport { c } from 'ttag';\nimport { useMailSettings, useAddresses, useWindowSize, useNotifications } from 'react-components';\nimport { range } from 'proton-shared/lib/helpers/array';\n\nimport { MessageExtended } from '../models/message';\nimport Composer from '../components/composer/Composer';\nimport { MESSAGE_ACTIONS } from '../constants';\nimport { useDraft } from '../hooks/useDraft';\n\nimport '../components/composer/composer.scss';\n\nexport const COMPOSER_WIDTH = 600;\nexport const COMPOSER_HEIGHT = 520;\nexport const COMPOSER_GUTTER = 20;\nexport const COMPOSER_VERTICAL_GUTTER = 10;\nexport const COMPOSER_ZINDEX = 300;\nexport const COMPOSER_SWITCH_MODE = 20;\nexport const HEADER_HEIGHT = 80;\nexport const APP_BAR_WIDTH = 45;\n\nconst computeRightPositions = (count: number, width: number): number[] => {\n    const neededWidth = COMPOSER_WIDTH * count + COMPOSER_GUTTER * (count + 1);\n\n    if (neededWidth < width) {\n        return range(0, count).map((i) => COMPOSER_WIDTH * i + COMPOSER_GUTTER * (i + 1));\n    }\n\n    const widthToDivide = width - COMPOSER_GUTTER * 2 - COMPOSER_WIDTH;\n    const share = widthToDivide / (count - 1);\n    return range(0, count).map((i) => COMPOSER_GUTTER + share * i);\n};\n\nconst computeStyle = (index: number, hasFocus: boolean, rightPositions: number[], height: number): CSSProperties => {\n    const maxHeight = height - COMPOSER_VERTICAL_GUTTER - HEADER_HEIGHT;\n    return {\n        right: rightPositions[index],\n        zIndex: hasFocus ? COMPOSER_ZINDEX + 1 : COMPOSER_ZINDEX,\n        height: maxHeight > COMPOSER_HEIGHT ? COMPOSER_HEIGHT : maxHeight\n    };\n};\n\nexport interface ComposeExisting {\n    existingDraft: MessageExtended;\n}\n\nexport interface ComposeNew {\n    action: MESSAGE_ACTIONS;\n    referenceMessage?: MessageExtended;\n}\n\nexport type ComposeArgs = ComposeExisting | ComposeNew;\n\nexport const getComposeExisting = (composeArgs: ComposeArgs) =>\n    (composeArgs as ComposeExisting).existingDraft ? (composeArgs as ComposeExisting) : undefined;\n\nexport const getComposeNew = (composeArgs: ComposeArgs) =>\n    typeof (composeArgs as ComposeNew).action === 'number' ? (composeArgs as ComposeNew) : undefined;\n\nexport const getComposeArgs = (composeArgs: ComposeArgs) => ({\n    composeExisting: getComposeExisting(composeArgs),\n    composeNew: getComposeNew(composeArgs)\n});\n\nexport interface OnCompose {\n    (args: ComposeArgs): void;\n}\n\ninterface Props {\n    children: (props: { onCompose: OnCompose }) => ReactNode;\n}\n\nconst ComposerContainer = ({ children }: Props) => {\n    const [mailSettings, loadingSettings] = useMailSettings();\n    const [addresses, loadingAddresses] = useAddresses();\n\n    // Handling simple Message would have been simpler\n    // But in order to create new drafts from here, MessageExtended was mandatory\n    const [messages, setMessages] = useState<MessageExtended[]>([]);\n    const [focusedMessage, setFocusedMessage] = useState<MessageExtended | undefined>();\n    const [width, height] = useWindowSize();\n    const { createNotification } = useNotifications();\n    const createDraft = useDraft();\n\n    if (loadingSettings || loadingAddresses) {\n        return null;\n    }\n\n    const handleCompose = (composeArgs: ComposeArgs) => {\n        if (messages.length >= 3) {\n            createNotification({\n                type: 'error',\n                text: c('Error').t`Maximum composer reached`\n            });\n            return;\n        }\n\n        const { composeExisting, composeNew } = getComposeArgs(composeArgs);\n\n        console.log('compose', composeExisting, composeNew);\n\n        if (composeExisting) {\n            const { existingDraft } = composeExisting;\n\n            const existingMessage = messages.find((m) => m.data?.ID === existingDraft.data?.ID);\n            if (existingMessage) {\n                setFocusedMessage(existingMessage);\n                return;\n            }\n\n            setMessages([...messages, existingDraft]);\n            setFocusedMessage(existingDraft);\n            return;\n        }\n\n        if (composeNew) {\n            const { action, referenceMessage } = composeNew;\n            const newMessage = createDraft(action, referenceMessage);\n            setMessages([...messages, newMessage]);\n            setFocusedMessage(newMessage);\n        }\n    };\n    const handleChange = (oldMessage: MessageExtended) => (newMessage: MessageExtended) => {\n        const newMessages = [...messages];\n        newMessages[newMessages.indexOf(oldMessage)] = newMessage;\n        setMessages(newMessages);\n        if (oldMessage === focusedMessage) {\n            setFocusedMessage(newMessage);\n        }\n    };\n    const handleClose = (message: MessageExtended) => () => {\n        const newMessages = messages.filter((m) => m !== message);\n        setMessages(newMessages);\n        if (newMessages.length > 0) {\n            setFocusedMessage(newMessages[0]);\n        }\n    };\n    const handleFocus = (message: MessageExtended) => () => {\n        setFocusedMessage(message);\n    };\n\n    const rightPositions = computeRightPositions(messages.length, width);\n\n    return (\n        <>\n            {children({ onCompose: handleCompose })}\n            <div className=\"composer-container\">\n                {messages.map((message, i) => (\n                    <Composer\n                        key={message.data?.ID || i}\n                        style={computeStyle(i, message === focusedMessage, rightPositions, height)}\n                        message={message}\n                        focus={message === focusedMessage}\n                        mailSettings={mailSettings}\n                        addresses={addresses}\n                        onFocus={handleFocus(message)}\n                        onChange={handleChange(message)}\n                        onClose={handleClose(message)}\n                    />\n                ))}\n            </div>\n        </>\n    );\n};\n\nexport default ComposerContainer;\n","import { useCache, useMailSettings, useAddresses } from 'react-components';\n\nimport { createNewDraft } from '../helpers/message/messageDraft';\nimport { MESSAGE_ACTIONS } from '../constants';\nimport { useEffect, useCallback } from 'react';\nimport { MessageExtended } from '../models/message';\n\nconst CACHE_KEY = 'Draft';\n\n/**\n * Hooks to create new draft messages.\n * It will prepare an empty draft to be quickly reused and create other drafts with helpers\n */\nexport const useDraft = () => {\n    const cache = useCache();\n    const [mailSettings, loadingSettings] = useMailSettings();\n    const [addresses, loadingAddresses] = useAddresses();\n\n    useEffect(() => {\n        if (!loadingSettings && !loadingAddresses) {\n            const message = createNewDraft(MESSAGE_ACTIONS.NEW, undefined, mailSettings, addresses);\n            cache.set(CACHE_KEY, message);\n        }\n    }, [cache, mailSettings, addresses]);\n\n    const createDraft = useCallback(\n        (action: MESSAGE_ACTIONS, referenceMessage: MessageExtended = {}) => {\n            if (action === MESSAGE_ACTIONS.NEW && cache.has(CACHE_KEY)) {\n                return cache.get(CACHE_KEY) as MessageExtended;\n            } else {\n                return createNewDraft(action, referenceMessage, mailSettings, addresses);\n            }\n        },\n        [cache, mailSettings, addresses]\n    );\n\n    return createDraft;\n};\n","import React from 'react';\nimport { RouteChildrenProps } from 'react-router';\nimport { Route } from 'react-router-dom';\nimport { StandardPrivateApp } from 'react-components';\n\nimport {\n    UserModel,\n    MailSettingsModel,\n    UserSettingsModel,\n    SubscriptionModel,\n    OrganizationModel,\n    LabelsModel,\n    AddressesModel,\n    ConversationCountsModel,\n    MessageCountsModel\n} from 'proton-shared/lib/models';\n\nimport locales from './locales';\nimport PageContainer from './containers/PageContainer';\nimport ComposerContainer from './containers/ComposerContainer';\nimport MessageProvider from './containers/MessageProvider';\nimport ConversationProvider from './containers/ConversationProvider';\n\nexport type RouteProps = RouteChildrenProps<{ labelID: string; elementID?: string }>;\n\ninterface Props {\n    onLogout: () => void;\n}\n\nconst PrivateApp = ({ onLogout }: Props) => {\n    return (\n        <StandardPrivateApp\n            onLogout={onLogout}\n            locales={locales}\n            preloadModels={[UserModel, UserSettingsModel]}\n            eventModels={[\n                UserModel,\n                AddressesModel,\n                ConversationCountsModel,\n                MessageCountsModel,\n                MailSettingsModel,\n                UserSettingsModel,\n                LabelsModel,\n                SubscriptionModel,\n                OrganizationModel\n            ]}\n        >\n            <MessageProvider>\n                <ConversationProvider>\n                    <ComposerContainer>\n                        {({ onCompose }) => (\n                            <Route\n                                path=\"/:labelID/:elementID?\"\n                                render={(routeProps: RouteProps) => (\n                                    <PageContainer {...routeProps} onCompose={onCompose} />\n                                )}\n                            />\n                        )}\n                    </ComposerContainer>\n                </ConversationProvider>\n            </MessageProvider>\n        </StandardPrivateApp>\n    );\n};\n\nexport default PrivateApp;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icons } from 'react-components';\n\nconst PublicLayout = ({ children }) => {\n    return (\n        <>\n            <main className=\"main-full flex flex-column flex-nowrap reset4print\">{children}</main>\n            <Icons />\n        </>\n    );\n};\n\nPublicLayout.propTypes = {\n    children: PropTypes.node.isRequired\n};\n\nexport default PublicLayout;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { c } from 'ttag';\nimport { LoginForm, Href, SimpleDropdown, DropdownMenu, SignInLayout } from 'react-components';\n\nconst LoginContainer = ({ stopRedirect, history, onLogin }) => {\n    const handleLogin = (...args) => {\n        stopRedirect();\n        history.push('/inbox');\n        onLogin(...args);\n    };\n    return (\n        <SignInLayout title={c('Title').t`Log in`}>\n            <h2>{c('Title').t`User log in`}</h2>\n            <LoginForm\n                onLogin={handleLogin}\n                needHelp={\n                    <SimpleDropdown content={c('Dropdown button').t`Need help?`} className=\"pm-button--link\">\n                        <DropdownMenu>\n                            <div className=\"inbl w100 pt0-5 pb0-5 ellipsis\">\n                                <Link to=\"/reset-password\">{c('Link').t`Reset password`}</Link>\n                            </div>\n                            <div className=\"inbl w100 pt0-5 pb0-5 ellipsis\">\n                                <Link to=\"/forgot-username\">{c('Link').t`Forgot username?`}</Link>\n                            </div>\n                            <div className=\"inbl w100 pt0-5 pb0-5 ellipsis\">\n                                <Href url=\"https://protonmail.com/support/knowledge-base/common-login-problems/\">{c(\n                                    'Link'\n                                ).t`Common login problems`}</Href>\n                            </div>\n                            <div className=\"inbl w100 pt0-5 pb0-5 ellipsis\">\n                                <Href url=\"https://protonmail.com/support/\">{c('Link').t`Contact support`}</Href>\n                            </div>\n                        </DropdownMenu>\n                    </SimpleDropdown>\n                }\n            />\n        </SignInLayout>\n    );\n};\n\nLoginContainer.propTypes = {\n    history: PropTypes.object.isRequired,\n    location: PropTypes.object.isRequired,\n    onLogin: PropTypes.func.isRequired,\n    stopRedirect: PropTypes.func.isRequired\n};\n\nexport default LoginContainer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// eslint-disable-next-line\nconst SignupContainer = ({ match, history, onLogin, stopRedirect }) => {\n    return <>SignupContainer</>;\n};\n\nSignupContainer.propTypes = {\n    stopRedirect: PropTypes.func.isRequired,\n    onLogin: PropTypes.func.isRequired,\n    match: PropTypes.shape({\n        params: PropTypes.shape({\n            step: PropTypes.string\n        })\n    }).isRequired,\n    history: PropTypes.shape({\n        push: PropTypes.func.isRequired,\n        location: PropTypes.shape({\n            search: PropTypes.string.isRequired,\n            state: PropTypes.oneOfType([\n                PropTypes.shape({\n                    selector: PropTypes.string.isRequired,\n                    token: PropTypes.string.isRequired\n                }),\n                PropTypes.shape({\n                    Coupon: PropTypes.shape({ Code: PropTypes.string })\n                })\n            ])\n        }).isRequired\n    }).isRequired\n};\n\nexport default SignupContainer;\n","import React, { useState, useRef, useLayoutEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Route, Switch } from 'react-router-dom';\nimport { Loader, ModalsChildren, ResetPasswordContainer, ForgotUsernameContainer } from 'react-components';\nimport { loadOpenPGP } from 'proton-shared/lib/openpgp';\n\nimport PublicLayout from './components/layout/PublicLayout';\nimport LoginContainer from './containers/LoginContainer';\nimport SignupContainer from './containers/SignupContainer';\nimport { Redirect } from 'react-router';\n\nconst PublicApp = ({ onLogin }) => {\n    const hasStopRedirect = useRef(false);\n    const stopRedirect = () => (hasStopRedirect.current = true);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(false);\n\n    useLayoutEffect(() => {\n        (async () => {\n            await Promise.all([loadOpenPGP()]);\n        })()\n            .then(() => setLoading(false))\n            .catch(() => setError(true));\n    }, []);\n\n    if (error) {\n        return 'OpenPGP failed to load. Handle better.';\n    }\n\n    if (loading) {\n        return <Loader />;\n    }\n\n    return (\n        <>\n            <ModalsChildren />\n            <PublicLayout>\n                <Switch>\n                    <Route path=\"/reset-password\" render={() => <ResetPasswordContainer onLogin={onLogin} />} />\n                    <Route path=\"/forgot-username\" component={ForgotUsernameContainer} />\n                    <Route\n                        path=\"/login\"\n                        render={({ history, location }) => (\n                            <LoginContainer\n                                stopRedirect={stopRedirect}\n                                history={history}\n                                location={location}\n                                onLogin={onLogin}\n                            />\n                        )}\n                    />\n                    <Route\n                        path=\"/signup/:step?\"\n                        render={({ history, match }) => (\n                            <SignupContainer\n                                stopRedirect={stopRedirect}\n                                history={history}\n                                match={match}\n                                onLogin={onLogin}\n                            />\n                        )}\n                    />\n                    <Route\n                        render={({ location }) => {\n                            /**\n                             * Needed due to the race condition between onLogin and history.push\n                             * A state on the location is not possible because the location is not changed when logging out.\n                             */\n                            if (hasStopRedirect.current) {\n                                return null;\n                            }\n                            return (\n                                <Redirect\n                                    to={{\n                                        pathname: '/login',\n                                        state: { from: location }\n                                    }}\n                                />\n                            );\n                        }}\n                    />\n                </Switch>\n            </PublicLayout>\n        </>\n    );\n};\n\nPublicApp.propTypes = {\n    onLogin: PropTypes.func.isRequired\n};\n\nexport default PublicApp;\n","import { hot } from 'react-hot-loader/root';\nimport React from 'react';\nimport { ProtonApp, useAuthentication } from 'react-components';\n\nimport * as config from './config';\nimport PrivateApp from './PrivateApp';\nimport PublicApp from './PublicApp';\n\nimport './app.scss';\n\nconst Setup = () => {\n    const { UID, login, logout } = useAuthentication();\n    if (UID) {\n        return <PrivateApp onLogout={logout} />;\n    }\n    return <PublicApp onLogin={login} />;\n};\n\nconst App = () => {\n    return (\n        <ProtonApp config={config}>\n            <Setup />\n        </ProtonApp>\n    );\n};\n\nexport default hot(App);\n","import ReactDOM from 'react-dom';\nimport React from 'react';\nimport 'core-js/stable';\nimport 'regenerator-runtime/runtime';\nimport 'yetch/polyfill';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.querySelector('.app-root'));\n","var map = {\n\t\"./3-d-secure.svg\": \"0gKn\",\n\t\"./american-express-safekey.svg\": \"Jui7\",\n\t\"./cc-american-express.svg\": \"/qD2\",\n\t\"./cc-dankort.svg\": \"0T0d\",\n\t\"./cc-diners-club.svg\": \"vuvo\",\n\t\"./cc-discover.svg\": \"AZZk\",\n\t\"./cc-forbrugs.svg\": \"k2eZ\",\n\t\"./cc-jcb.svg\": \"7Amw\",\n\t\"./cc-maestro.svg\": \"lXKh\",\n\t\"./cc-mastercard.svg\": \"ZUPP\",\n\t\"./cc-paypal.svg\": \"egYP\",\n\t\"./cc-unionpay.svg\": \"ma7A\",\n\t\"./cc-visa.svg\": \"vO2o\",\n\t\"./cc-visaelectron.svg\": \"RMFI\",\n\t\"./discover-protectbuy.svg\": \"qsy5\",\n\t\"./mastercard-securecode.svg\": \"6Bn0\",\n\t\"./verified-by-visa.svg\": \"Q7qE\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"5FMj\";","var map = {\n\t\"./af/index.js\": [\n\t\t\"IqAn\",\n\t\t11\n\t],\n\t\"./ar-DZ/index.js\": [\n\t\t\"JVC1\",\n\t\t12\n\t],\n\t\"./ar-MA/index.js\": [\n\t\t\"+7lX\",\n\t\t13\n\t],\n\t\"./ar-SA/index.js\": [\n\t\t\"xMju\",\n\t\t14\n\t],\n\t\"./az/index.js\": [\n\t\t\"jEeQ\",\n\t\t15\n\t],\n\t\"./be/index.js\": [\n\t\t\"YEhR\",\n\t\t3\n\t],\n\t\"./bg/index.js\": [\n\t\t\"isx8\",\n\t\t4\n\t],\n\t\"./bn/index.js\": [\n\t\t\"+b7I\",\n\t\t16\n\t],\n\t\"./ca/index.js\": [\n\t\t\"Vwa+\",\n\t\t17\n\t],\n\t\"./cs/index.js\": [\n\t\t\"dvhP\",\n\t\t18\n\t],\n\t\"./cy/index.js\": [\n\t\t\"HQUR\",\n\t\t19\n\t],\n\t\"./da/index.js\": [\n\t\t\"7ur/\",\n\t\t20\n\t],\n\t\"./de/index.js\": [\n\t\t\"bgw5\",\n\t\t21\n\t],\n\t\"./el/index.js\": [\n\t\t\"dH0v\",\n\t\t22\n\t],\n\t\"./en-AU/index.js\": [\n\t\t\"VHew\",\n\t\t23\n\t],\n\t\"./en-CA/index.js\": [\n\t\t\"wXhn\",\n\t\t24\n\t],\n\t\"./en-GB/index.js\": [\n\t\t\"nwJ3\",\n\t\t25\n\t],\n\t\"./en-US/index.js\": [\n\t\t\"IogR\",\n\t\t26\n\t],\n\t\"./eo/index.js\": [\n\t\t\"UB7v\",\n\t\t27\n\t],\n\t\"./es/index.js\": [\n\t\t\"/S0t\",\n\t\t28\n\t],\n\t\"./et/index.js\": [\n\t\t\"Br0m\",\n\t\t29\n\t],\n\t\"./fa-IR/index.js\": [\n\t\t\"gEFy\",\n\t\t30\n\t],\n\t\"./fi/index.js\": [\n\t\t\"ndVD\",\n\t\t31\n\t],\n\t\"./fr-CA/index.js\": [\n\t\t\"KTij\",\n\t\t32\n\t],\n\t\"./fr/index.js\": [\n\t\t\"LKA2\",\n\t\t33\n\t],\n\t\"./gl/index.js\": [\n\t\t\"4bge\",\n\t\t34\n\t],\n\t\"./gu/index.js\": [\n\t\t\"3t4y\",\n\t\t35\n\t],\n\t\"./he/index.js\": [\n\t\t\"75M+\",\n\t\t36\n\t],\n\t\"./hi/index.js\": [\n\t\t\"CUe2\",\n\t\t37\n\t],\n\t\"./hr/index.js\": [\n\t\t\"L9Jq\",\n\t\t38\n\t],\n\t\"./hu/index.js\": [\n\t\t\"Nm+E\",\n\t\t39\n\t],\n\t\"./hy/index.js\": [\n\t\t\"netp\",\n\t\t40\n\t],\n\t\"./id/index.js\": [\n\t\t\"A6C3\",\n\t\t41\n\t],\n\t\"./is/index.js\": [\n\t\t\"N4bE\",\n\t\t42\n\t],\n\t\"./it/index.js\": [\n\t\t\"hmb4\",\n\t\t43\n\t],\n\t\"./ja/index.js\": [\n\t\t\"uAXs\",\n\t\t44\n\t],\n\t\"./ka/index.js\": [\n\t\t\"pwL5\",\n\t\t45\n\t],\n\t\"./kk/index.js\": [\n\t\t\"zGPi\",\n\t\t5\n\t],\n\t\"./ko/index.js\": [\n\t\t\"iW8+\",\n\t\t46\n\t],\n\t\"./lt/index.js\": [\n\t\t\"xj+b\",\n\t\t47\n\t],\n\t\"./lv/index.js\": [\n\t\t\"x5pY\",\n\t\t6\n\t],\n\t\"./ms/index.js\": [\n\t\t\"gUWk\",\n\t\t48\n\t],\n\t\"./nb/index.js\": [\n\t\t\"73vv\",\n\t\t49\n\t],\n\t\"./nl/index.js\": [\n\t\t\"hCQt\",\n\t\t50\n\t],\n\t\"./nn/index.js\": [\n\t\t\"vORL\",\n\t\t51\n\t],\n\t\"./pl/index.js\": [\n\t\t\"B6yL\",\n\t\t7\n\t],\n\t\"./pt-BR/index.js\": [\n\t\t\"2dYp\",\n\t\t52\n\t],\n\t\"./pt/index.js\": [\n\t\t\"gdks\",\n\t\t53\n\t],\n\t\"./ro/index.js\": [\n\t\t\"r2yp\",\n\t\t54\n\t],\n\t\"./ru/index.js\": [\n\t\t\"nz/o\",\n\t\t8\n\t],\n\t\"./sk/index.js\": [\n\t\t\"Wqan\",\n\t\t9\n\t],\n\t\"./sl/index.js\": [\n\t\t\"KYSo\",\n\t\t55\n\t],\n\t\"./sr/index.js\": [\n\t\t\"7mU3\",\n\t\t56\n\t],\n\t\"./sv/index.js\": [\n\t\t\"hxgj\",\n\t\t57\n\t],\n\t\"./ta/index.js\": [\n\t\t\"1ssA\",\n\t\t58\n\t],\n\t\"./te/index.js\": [\n\t\t\"SGoj\",\n\t\t59\n\t],\n\t\"./th/index.js\": [\n\t\t\"Pk+z\",\n\t\t60\n\t],\n\t\"./tr/index.js\": [\n\t\t\"3ZWG\",\n\t\t61\n\t],\n\t\"./ug/index.js\": [\n\t\t\"yT3n\",\n\t\t62\n\t],\n\t\"./uk/index.js\": [\n\t\t\"LCGg\",\n\t\t10\n\t],\n\t\"./vi/index.js\": [\n\t\t\"dGQT\",\n\t\t63\n\t],\n\t\"./zh-CN/index.js\": [\n\t\t\"UJqf\",\n\t\t64\n\t],\n\t\"./zh-TW/index.js\": [\n\t\t\"zn9v\",\n\t\t65\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"YO3j\";\nmodule.exports = webpackAsyncContext;","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"dTS7\";"],"sourceRoot":""}